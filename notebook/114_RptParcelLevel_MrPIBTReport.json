{
	"name": "114_RptParcelLevel_MrPIBTReport",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Reports/LMS"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DevSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "482e3e9f-62e4-4b94-9ec7-28667522dcca"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# ' + StorageAccount + '"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #Create DataFrame for the rptparcellevellimitload LMS Table\r\n",
					"# rptparcellevellimitload = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/RPT/rptparcellevellimitload.parquet', format='parquet')\r\n",
					"# rptparcellevellimitload.createOrReplaceTempView(\"rptparcellevellimitload\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stconsignment LMS Table\r\n",
					"# stconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stconsignment.parquet', format='parquet')\r\n",
					"# stconsignment.createOrReplaceTempView(\"stconsignment\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stparcel LMS Table\r\n",
					"# stparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet', format='parquet')\r\n",
					"# stparcel.createOrReplaceTempView(\"stparcel\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stlmstrack LMS Table\r\n",
					"# stlmstrack = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet', format='parquet')\r\n",
					"# stlmstrack.createOrReplaceTempView(\"stlmstrack\")"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"mrpibtreport\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"p.lms_parcel_barcode barcode,\r\n",
					"c.lms_consignment_cref cref,\r\n",
					"p.lms_parcel_pdate date,\r\n",
					"p.lms_parcel_consignmentcdate consignmentdate,\r\n",
					"p.lms_parcel_weight weight,\r\n",
					"p.lms_parcel_orderpickupcustid pickupcustomerid,\r\n",
					"p.lms_parcel_orderpickupcustname pickupcustomername,\r\n",
					"p.lms_parcel_orderpickupcustcref pickupcustomercref,\r\n",
					"p.lms_parcel_sroutedescriptionpickupcust pickupcustomersroute,\r\n",
					"p.lms_parcel_orderdelivercustid delivercustomerid,\r\n",
					"p.lms_parcel_orderdelivercustname delivercustomername,\r\n",
					"p.lms_parcel_orderdelivercustcref delivercustomercref,\r\n",
					"p.lms_parcel_sroutedescriptiondelivercust delivercustomersroute,\r\n",
					"p.lms_parcel_orderbillcustid billcustomerid,\r\n",
					"p.lms_parcel_orderbillcustname billcustomername,\r\n",
					"pu.CODDate storeconfirmation,\r\n",
					"MAX(CASE WHEN t.lms_track_id IS NULL THEN 'NeverScanned' ELSE 'HasScans' END) loadedflag,\r\n",
					"MAX(t.lms_track_opendt) latestloaddate\r\n",
					"\r\n",
					"FROM\r\n",
					"rptparcellevellimitload p\r\n",
					"\r\n",
					"LEFT JOIN stconsignment c ON p.lms_parcel_consignid = c.lms_consignment_id\r\n",
					"LEFT JOIN sstparcelunion pu ON p.lms_parcel_id = pu.id\r\n",
					"LEFT JOIN stlmstrack t ON p.lms_parcel_id = t.lms_track_parcelid\r\n",
					"\r\n",
					"WHERE p.lms_parcel_ptype IN (10,2,20,21,22) \r\n",
					"AND p.lms_parcel_orderbillcustid IN (15,16,17,18,20)\r\n",
					"\r\n",
					"GROUP BY\r\n",
					"p.lms_parcel_barcode,\r\n",
					"c.lms_consignment_cref,\r\n",
					"p.lms_parcel_consignmentcdate,\r\n",
					"p.lms_parcel_weight,\r\n",
					"p.lms_parcel_orderpickupcustid,\r\n",
					"p.lms_parcel_orderpickupcustname,\r\n",
					"p.lms_parcel_orderpickupcustcref,\r\n",
					"p.lms_parcel_sroutedescriptionpickupcust,\r\n",
					"p.lms_parcel_orderdelivercustid,\r\n",
					"p.lms_parcel_orderdelivercustname,\r\n",
					"p.lms_parcel_orderdelivercustcref,\r\n",
					"p.lms_parcel_sroutedescriptiondelivercust,\r\n",
					"p.lms_parcel_orderbillcustid,\r\n",
					"p.lms_parcel_orderbillcustname,\r\n",
					"p.lms_parcel_pdate,\r\n",
					"pu.CODDate"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mrpibtreport = spark.sql(\"SELECT * FROM mrpibtreport\")"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# mrpibtreport.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/RPT/mrpibtreport.parquet', mode = \"overwrite\")"
				],
				"execution_count": 22
			}
		]
	}
}