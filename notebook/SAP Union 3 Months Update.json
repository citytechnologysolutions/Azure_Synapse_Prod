{
	"name": "SAP Union 3 Months Update",
	"properties": {
		"folder": {
			"name": "ARCHIVE/DEV/Archived/SAP Interval Refreshes"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d07159bf-289e-4997-9382-72dea40ecb3f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## This Noetbook is used to update the SAP Data in 3 Months Intervals incrementaly"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load Orginal and New Temp \"Incremental Data\"from Blob-storage"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"#dboIGN1\r\n",
					"dboIGN1_temp = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP_Incremental_Data/dboIGN1_3_Months.parquet', format='parquet')\r\n",
					"dboIGN1_temp.createOrReplaceTempView(\"dboIGN1_temp\")\r\n",
					"\r\n",
					"dboIGN1 = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboIGN1.parquet', format='parquet')\r\n",
					"dboIGN1.createOrReplaceTempView(\"dboIGN1\")\r\n",
					"\r\n",
					"#dboJDT1\r\n",
					"dboJDT1_temp = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP_Incremental_Data/dboJDT1_3_Months.parquet', format='parquet')\r\n",
					"dboJDT1_temp.createOrReplaceTempView(\"dboJDT1_temp\")\r\n",
					"\r\n",
					"dboJDT1 = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboJDT1.parquet', format='parquet')\r\n",
					"dboJDT1.createOrReplaceTempView(\"dboJDT1\")\r\n",
					"\r\n",
					"#dboRPC1\r\n",
					"dboRPC1_temp = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP_Incremental_Data/dboRPC1_3_Months.parquet', format='parquet')\r\n",
					"dboRPC1_temp.createOrReplaceTempView(\"dboRPC1_temp\")\r\n",
					"\r\n",
					"dboRPC1 = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboRPC1.parquet', format='parquet')\r\n",
					"dboRPC1.createOrReplaceTempView(\"dboRPC1\")"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Drop 3 Months of the current data"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dboIGN1_drop = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM dboIGN1\r\n",
					"WHERE DocDate <= (SELECT add_months(MAX(DocDate), -3) DocDate FROM dboIGN1)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"dboIGN1_drop.createOrReplaceTempView(\"dboIGN1_drop\")"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dboJDT1_drop = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM dboJDT1\r\n",
					"WHERE DueDate <= (SELECT add_months(MAX(DueDate), -3) DueDate FROM dboJDT1)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"dboJDT1_drop.createOrReplaceTempView(\"dboJDT1_drop\")"
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dboRPC1_drop = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM dboRPC1\r\n",
					"WHERE DocDate <= (SELECT add_months(MAX(DocDate), -3) DocDate FROM dboRPC1)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"dboRPC1_drop.createOrReplaceTempView(\"dboRPC1_drop\")"
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Union Old data with the New Data"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"IGN1 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"(SELECT *\r\n",
					"FROM dboIGN1_drop\r\n",
					"EXCEPT\r\n",
					"SELECT * FROM dboIGN1_temp)\r\n",
					"UNION ALL\r\n",
					"(SELECT * FROM dboIGN1_temp\r\n",
					"EXCEPT \r\n",
					"SELECT * FROM dboIGN1_drop)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"IGN1.createOrReplaceTempView(\"IGN1\")"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"JDT1 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"(SELECT *\r\n",
					"FROM dboJDT1_drop\r\n",
					"EXCEPT\r\n",
					"SELECT * FROM dboJDT1_temp)\r\n",
					"UNION ALL\r\n",
					"(SELECT * FROM dboJDT1_temp\r\n",
					"EXCEPT \r\n",
					"SELECT * FROM dboJDT1_drop)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"JDT1.createOrReplaceTempView(\"JDT1\")"
				],
				"attachments": null,
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"RPC1 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"(SELECT *\r\n",
					"FROM dboRPC1_drop\r\n",
					"EXCEPT\r\n",
					"SELECT * FROM dboRPC1_temp)\r\n",
					"UNION ALL\r\n",
					"(SELECT * FROM dboRPC1_temp\r\n",
					"EXCEPT \r\n",
					"SELECT * FROM dboRPC1_drop)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"RPC1.createOrReplaceTempView(\"RPC1\")"
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"IGN1 = dboIGN1_drop.union(dboIGN1_temp)\r\n",
					"IGN1.createOrReplaceTempView(\"IGN1\")\r\n",
					"\r\n",
					"JDT1 = dboJDT1_drop.union(dboJDT1_temp)\r\n",
					"JDT1.createOrReplaceTempView(\"JDT1\")\r\n",
					"\r\n",
					"RPC1 = dboRPC1_drop.union(dboRPC1_temp)\r\n",
					"RPC1.createOrReplaceTempView(\"RPC1\")"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Write new Union File Back to Blobstorage"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"IGN1.write.parquet('/Unstructured Data/SAP_test/dboIGN1_3Months.parquet/', mode='overwrite')\r\n",
					"\r\n",
					"JDT1.write.parquet('/Unstructured Data/SAP_test/dboJDT1_3Months.parquet/', mode='overwrite')\r\n",
					"\r\n",
					"RPC1.write.parquet('/Unstructured Data/SAP_test/dboRPC1_3Months.parquet/', mode='overwrite')"
				],
				"attachments": null,
				"execution_count": 8
			}
		]
	}
}