{
	"name": "SSTCollect",
	"properties": {
		"folder": {
			"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "TESTSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "380c9a6c-21d2-4000-9860-425fb78528d7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
				"name": "TESTSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#Create DataFrame for the dbocollect LMS Table\r\n",
					"dbocollect = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/LMS/dbocollect.parquet', format='parquet')\r\n",
					"dbocollect.createOrReplaceTempView(\"dbocollect\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbocustomer LMS Table\r\n",
					"dbocustomer = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
					"dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbousers LMS Table\r\n",
					"dbousers = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
					"dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbolocation LMS Table\r\n",
					"dbolocation= spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
					"dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbodb_collectstatus LMS Table\r\n",
					"dbodb_collectstatus= spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/LMS/dbodb_collectstatus.parquet', format='parquet')\r\n",
					"dbodb_collectstatus.createOrReplaceTempView(\"dbodb_collectstatus\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicdraftcollection ORV Table\r\n",
					"publicdraftcollection = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/Onroute/publicdraftcollection.parquet', format='parquet')\r\n",
					"publicdraftcollection.createOrReplaceTempView(\"publicdraftcollection\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicdelivery ORV Table\r\n",
					"publicdelivery = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
					"publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicmall ORV Table\r\n",
					"publicmall = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/Onroute/publicmall.parquet', format='parquet')\r\n",
					"publicmall.createOrReplaceTempView(\"publicmall\")\r\n",
					"\r\n",
					"#Create DataFrame for the publiccustomer ORV Table\r\n",
					"publiccustomer = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/Onroute/publiccustomer.parquet', format='parquet')\r\n",
					"publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"sstcollect = spark.sql(\"\"\"\r\n",
					"SELECT \r\n",
					"    c.id as lms_collect_id\r\n",
					"    ,c.date as lms_collect_date\r\n",
					"    ,c.cservice as lms_collect_cservice\r\n",
					"    ,c.billcust as lms_collect_billcust\r\n",
					"    ,c.pickupcustid as lms_collect_pickupcustid\r\n",
					"    ,c.delivercustid as lms_collect_delivercustid\r\n",
					"    ,c.locationid as lms_collect_locationid\r\n",
					"    ,c.noofparcels as lms_collect_noofparcels\r\n",
					"    ,c.weight as lms_collect_weight\r\n",
					"    ,c.timeready as lms_collect_timeready\r\n",
					"    ,c.vehiclecapacity as lms_collect_vehiclecapacity\r\n",
					"    ,c.collectrefno as lms_collect_collectrefno\r\n",
					"    ,c.timeclosed as lms_collect_timeclosed\r\n",
					"    ,c.securitycollect as lms_collect_securitycollect\r\n",
					"    ,c.confirmedby as lms_collect_confirmedby\r\n",
					"    ,c.courierid as lms_collect_courierid\r\n",
					"    ,c.confirmeddate as lms_collect_confirmeddate\r\n",
					"    ,c.transferreddate as lms_collect_transferreddate\r\n",
					"    ,c.senddate as lms_collect_senddate\r\n",
					"    ,c.orderid as lms_collect_orderid\r\n",
					"    ,c.orderdate as lms_collect_orderdate\r\n",
					"    ,c.userid as lms_collect_userid\r\n",
					"    ,c.reason as lms_collect_reason\r\n",
					"    ,c.cubes as lms_collect_cubes\r\n",
					"    ,c.custref as lms_collect_custref\r\n",
					"    ,c.custref3 as lms_collect_custref3\r\n",
					"    ,c.custaccid as lms_collect_custaccid\r\n",
					"    ,c.collectparentid as lms_collect_collectparentid\r\n",
					"    ,c.duedate as lms_collect_duedate\r\n",
					"    ,c.specdel as lms_collect_specdel\r\n",
					"    ,c.flunits as lms_collect_flunits\r\n",
					"    ,c.flkgs as lms_collect_flkgs\r\n",
					"    ,c.quote as lms_collect_quote\r\n",
					"    ,c.bill_vehicletype as lms_collect_bill_vehicletype\r\n",
					"    ,c.collectstatusid as lms_collect_collectstatusid\r\n",
					"    ,c.bill_collectstatusid as lms_collect_bill_collectstatusid\r\n",
					"    ,c.cancelreason as lms_collect_cancelreason\r\n",
					"    ,c.cancelcomments as lms_collect_cancelcomments\r\n",
					"    ,c.loadid as lms_collect_loadid\r\n",
					"    ,c.custref2 as lms_collect_custref2\r\n",
					"    ,c.created as lms_collect_created\r\n",
					"    ,c.oncollection as lms_collect_oncollection\r\n",
					"    ,c.collected as lms_collect_collected\r\n",
					"    ,c.complete as lms_collect_complete\r\n",
					"    ,c.cancelled as lms_collect_cancelled\r\n",
					"    ,c.failed as lms_collect_failed\r\n",
					"    ,c.ctype as lms_collect_ctype\r\n",
					"    ,c.quoteid as lms_collect_quoteid\r\n",
					"    ,c.lastupdate as lms_collect_lastupdate\r\n",
					"    ,c.notes as lms_collect_notes\r\n",
					"    ,c.docurl as lms_collect_docurl\r\n",
					"    ,c.docdate as lms_collect_docdate\r\n",
					"    ,c.orvstatus as lms_collect_orvstatus\r\n",
					"    ,c.orvcode as lms_collect_orvcode\r\n",
					"    ,c.oldloadid as lms_collect_oldloadid\r\n",
					"    ,bc.id as lms_bcustomer_id\r\n",
					"    ,bc.name as lms_bcustomer_name\r\n",
					"    ,pc.id as lms_pcustomer_id\r\n",
					"    ,pc.name as lms_pcustomer_name\r\n",
					"    ,dc.id as lms_dcustomer_id\r\n",
					"    ,dc.name as lms_dcustomer_name\r\n",
					"    ,u.id as lms_users_id\r\n",
					"    ,u.fullname as lms_users_fullname\r\n",
					"    ,l.id as lms_clocation_id\r\n",
					"    ,l.description as lms_clocation_description\r\n",
					"    ,cs.id as lms_collectstatus_id\r\n",
					"    ,cs.description as lms_collectstatus_description\r\n",
					"    ,dcl.id as orv_draftcollection_id\r\n",
					"    ,dcl.fromlocid as orv_draftcollection_fromlocid\r\n",
					"    ,dcl.loadid as orv_draftcollection_loadid\r\n",
					"    ,dcl.status as orv_draftcollection_status\r\n",
					"    ,to_timestamp(dcl.importedate) as orv_draftcollection_importedate\r\n",
					"    ,dcl.fromstr as orv_draftcollection_fromstr\r\n",
					"    ,dcl.did as orv_draftcollection_did\r\n",
					"    ,dcl.mergedlmsid as orv_draftcollection_mergedlmsid\r\n",
					"    ,to_timestamp(dcl.rejectdate) as orv_draftcollection_rejectdate\r\n",
					"    ,to_timestamp(dcl.confirmdate) as orv_draftcollection_confirmdate\r\n",
					"    ,dcl.customerref as orv_draftcollection_customerref\r\n",
					"    ,dcl.collectionwaybillid as orv_draftcollection_collectionwaybillid\r\n",
					"    ,to_timestamp(dcl.collectbydate) as orv_draftcollection_collectbydate\r\n",
					"    ,dcl.rejectreason as orv_draftcollection_rejectreason\r\n",
					"    ,dcl.cancelctr as orv_draftcollection_cancelctr\r\n",
					"    ,d.id as orv_delivery_id\r\n",
					"    ,d.did as orv_delivery_dispatchid\r\n",
					"    ,d.waybillid as orv_delivery_waybillid\r\n",
					"    ,d.address as orv_delivery_address\r\n",
					"    ,d.town as orv_delivery_town\r\n",
					"    ,d.province as orv_delivery_province\r\n",
					"    ,d.country as orv_delivery_country\r\n",
					"    ,d.lat as orv_delivery_lat\r\n",
					"    ,d.lng as orv_delivery_lng\r\n",
					"    ,d.placeid as orv_delivery_placeid\r\n",
					"    ,d.what3words as orv_delivery_what3words\r\n",
					"    ,d.zipcode as orv_delivery_zipcode\r\n",
					"    ,to_timestamp(d.eta) as orv_delivery_eta\r\n",
					"    ,to_timestamp(d.actualeta) as orv_delivery_actualeta\r\n",
					"    ,to_timestamp(d.deliverydate) as orv_delivery_deliverydate\r\n",
					"    ,to_timestamp(d.deliverby) as orv_delivery_deliverby\r\n",
					"    ,d.deliveryorder as orv_delivery_deliveryorder\r\n",
					"    ,to_timestamp(d.tsgeofenceenter) as orv_delivery_tsgeofenceenter\r\n",
					"    ,to_timestamp(d.tsscanningstart) as orv_delivery_tsscanningstart\r\n",
					"    ,to_timestamp(d.tsscanningstop) as orv_delivery_tsscanningstop\r\n",
					"    ,to_timestamp(d.tspodsignature) as orv_delivery_tspodsignature\r\n",
					"    ,d.aid as orv_delivery_aid\r\n",
					"    ,d.numprcls as orv_delivery_numprcls\r\n",
					"    ,d.geocodingstatus as orv_delivery_geocodingstatus\r\n",
					"    ,to_timestamp(d.skipdate) as orv_delivery_skipdate\r\n",
					"    ,d.skipreason as orv_delivery_skipreason\r\n",
					"    ,d.status as orv_delivery_status\r\n",
					"    ,d.partialmatch as orv_delivery_partialmatch\r\n",
					"    ,d.approximated as orv_delivery_approximated\r\n",
					"    ,d.lmsorder as orv_delivery_lmsorder\r\n",
					"    ,d.optimizedorder as orv_delivery_optimizedorder\r\n",
					"    ,d.seal as orv_delivery_seal\r\n",
					"    ,d.customerinvoice as orv_delivery_customerinvoice\r\n",
					"    ,d.customerdn as orv_delivery_customerdn\r\n",
					"    ,d.grv as orv_delivery_grv\r\n",
					"    ,d.chepslip as orv_delivery_chepslip\r\n",
					"    ,d.cleandelivery as orv_delivery_cleandelivery\r\n",
					"    ,d.trackingcode as orv_delivery_trackingcode\r\n",
					"    ,d.mode as orv_delivery_mode\r\n",
					"    ,d.customorder as orv_delivery_customorder\r\n",
					"    ,d.verified as orv_delivery_verified\r\n",
					"    ,d.altered as orv_delivery_altered\r\n",
					"    ,d.orderid as orv_delivery_orderid\r\n",
					"    ,d.mergeid as orv_delivery_mergeid\r\n",
					"    ,d.orderref as orv_delivery_orderref\r\n",
					"    ,d.drivernote as orv_delivery_drivernote\r\n",
					"    ,d.guid as orv_delivery_guid\r\n",
					"    ,d.timedefinite as orv_delivery_timedefinite\r\n",
					"    ,d.orvcode as orv_delivery_orvcode\r\n",
					"    ,d.vaid as orv_delivery_vaid\r\n",
					"    ,to_timestamp(d.delegatedate) as orv_delivery_delegatedate\r\n",
					"    ,d.delegatemode as orv_delivery_delegatemode\r\n",
					"    ,d.debriefmode as orv_delivery_debriefmode\r\n",
					"    ,d.debriefed as orv_delivery_debriefed\r\n",
					"    ,to_timestamp(d.insdate) as orv_delivery_insdate\r\n",
					"    ,d.reviseddebrief as orv_delivery_reviseddebrief\r\n",
					"    ,d.lmsdebriefed as orv_delivery_lmsdebriefed\r\n",
					"    ,to_timestamp(d.uncanceldate) as orv_delivery_uncanceldate\r\n",
					"    ,to_timestamp(d.podlaterdate) as orv_delivery_podlaterdate\r\n",
					"    ,to_timestamp(d.podmanualdate) as orv_delivery_podmanualdate\r\n",
					"    ,d.manualdebriefreason as orv_delivery_manualdebriefreason\r\n",
					"    ,d.submanualdebriefreason as orv_delivery_submanualdebriefreason\r\n",
					"    ,d.outofgeofencereason as orv_delivery_outofgeofencereason\r\n",
					"    ,to_timestamp(d.tsentergeofenceapp) as orv_delivery_tsentergeofenceapp\r\n",
					"    ,to_timestamp(d.tsexitgeofenceapp) as orv_delivery_tsexitgeofenceapp\r\n",
					"    ,d.comebacklater as orv_delivery_comebacklater\r\n",
					"    ,d.uncancelusername as orv_delivery_uncancelusername\r\n",
					"    ,d.cref as orv_delivery_cref\r\n",
					"    ,d.division as orv_delivery_division\r\n",
					"    ,d.descriptionofgoods as orv_delivery_descriptionofgoods\r\n",
					"    ,d.skiplng as orv_delivery_skiplng\r\n",
					"    ,d.skiplat as orv_delivery_skiplat\r\n",
					"    ,d.courierid as orv_delivery_courierid\r\n",
					"    ,d.posreason as orv_delivery_posreason\r\n",
					"    ,to_timestamp(d.moddate) as orv_delivery_moddate\r\n",
					"    ,d.mallid as orv_delivery_mallid\r\n",
					"    ,d.mallgid as orv_delivery_mallgid\r\n",
					"    ,d.lmsidskipreason as orv_delivery_lmsidskipreason\r\n",
					"    ,d.deleteforimport as orv_delivery_deleteforimport\r\n",
					"    ,d.podoutofgeofence as orv_delivery_podoutofgeofence\r\n",
					"    ,d.originalcustomerid as orv_delivery_originalcustomerid\r\n",
					"    ,oc.id as orv_originalcustomer_id\r\n",
					"    ,oc.name as orv_originalcustomer_name\r\n",
					"    ,m.id as orv_mall_id\r\n",
					"    ,m.mallname as orv_mall_mallname\r\n",
					"    ,m.branchname as orv_mall_branchname\r\n",
					"    ,m.gpretailer as orv_mall_gpretailer\r\n",
					"    ,m.highvoldelivery as orv_mall_highvoldelivery\r\n",
					"    ,m.stripmall as orv_mall_stripmall\r\n",
					"    ,m.standalonestore as orv_mall_standalonestore\r\n",
					"    ,m.streetsidestore as orv_mall_streetsidestore\r\n",
					"    ,m.dedicatedrouted as orv_mall_dedicatedrouted\r\n",
					"    ,to_timestamp(m.insdate) as orv_mall_insdate\r\n",
					"    ,m.address as orv_mall_address\r\n",
					"    ,m.deleted as orv_mall_deleted\r\n",
					"    ,m.lat as orv_mall_lat\r\n",
					"    ,m.lng as orv_mall_lng\r\n",
					"\r\n",
					"\r\n",
					"FROM dbocollect c\r\n",
					"\r\n",
					"LEFT JOIN dbocustomer bc on bc.id = c.billcust\r\n",
					"LEFT JOIN dbocustomer pc on pc.id = c.pickupcustid\r\n",
					"LEFT JOIN dbocustomer dc on dc.id = c.delivercustid\r\n",
					"LEFT JOIN dbousers u on u.id = c.userid\r\n",
					"LEFT JOIN dbolocation l on l.id = c.locationid\r\n",
					"LEFT JOIN dbodb_collectstatus cs on cs.id = c.collectstatusid\r\n",
					"LEFT JOIN publicdraftcollection dcl on dcl.collectionwaybillid = c.id\r\n",
					"LEFT JOIN publicdelivery d on d.waybillid = c.id and d.mode = 'collect'\r\n",
					"LEFT JOIN publiccustomer oc on oc.id = d.originalcustomerid\r\n",
					"LEFT JOIN publicmall m on m.id = d.mallid\r\n",
					"\r\n",
					"\"\"\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sstcollect.createOrReplaceTempView(\"sstcollect\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sstcollect.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Semi Structured Data/OPS/sstcollect.parquet', mode = \"overwrite\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sqlContext.read.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Semi Structured Data/OPS/sstcollect.parquet').schema.fields"
				],
				"execution_count": 5
			}
		]
	}
}