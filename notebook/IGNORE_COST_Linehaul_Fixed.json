{
	"name": "IGNORE_COST_Linehaul_Fixed",
	"properties": {
		"folder": {
			"name": "DEV/Cost To Serve Notebooks DEV/CTS Run"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9bf87c2d-82f3-4e92-b9c2-2575c9129920"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# This Notebook is intended to apply the Fixed Linehaul cost to a parquet file"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Steps:\r\n",
					"1. Summarize Linehaul hours & KM's by\r\n",
					"    * Depot\r\n",
					"    * Month\r\n",
					"    * Vehicle Type?\r\n",
					"2. Summarise Cost on the same level\r\n",
					"3. Calculate R/Km & R/Hour\r\n",
					"4. Apply calculated R/Km & R/Hour on parcel level\r\n",
					"5. Apply cost per parcel back to Parcel Track table"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"MonthToRun = '2023-02-28'\r\n",
					"\r\n",
					"#STOPS\r\n",
					"parcel_track = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet/\", format='parquet')\r\n",
					"parcel = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet/\", format='parquet')\r\n",
					"waybill = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet/\", format='parquet')\r\n",
					"location = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet/\", format='parquet')\r\n",
					"dispatch_segment = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdispatchsegment.parquet/\", format='parquet')\r\n",
					"del_pickup_cust = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet/\", format='parquet')\r\n",
					"load_parent = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet/\", format='parquet')\r\n",
					"\r\n",
					"#STSAP\r\n",
					"dim_account = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_Account_Expose.parquet/\", format='parquet')\r\n",
					"dim_dates = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_DATES.parquet/\", format='parquet')\r\n",
					"dim_group = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_GROUP_Expose.parquet/\", format='parquet')\r\n",
					"trans_summary = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/sttransactionssummary.parquet/\", format='parquet')\r\n",
					"\r\n",
					"#STCTS\r\n",
					"DIM_CTS_I_GLMapDefault = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/Structured/Dimensions/DIM_CTS_I_GLMapDefault.parquet/\", format='parquet')\r\n",
					"DIM_CTS_I_PARAM_Ranges = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/Structured/Dimensions/DIM_CTS_I_PARAM_Ranges.parquet/\", format='parquet')\r\n",
					"\r\n",
					"#STOPS\r\n",
					"parcel_track.createOrReplaceTempView(\"parcel_track\")\r\n",
					"parcel.createOrReplaceTempView(\"parcel\")\r\n",
					"waybill.createOrReplaceTempView(\"waybill\")\r\n",
					"location.createOrReplaceTempView(\"location\")\r\n",
					"dispatch_segment.createOrReplaceTempView(\"dispatch_segment\")\r\n",
					"del_pickup_cust.createOrReplaceTempView(\"del_pickup_cust\")\r\n",
					"load_parent.createOrReplaceTempView(\"load_parent\")\r\n",
					"\r\n",
					"#STSAP\r\n",
					"dim_account.createOrReplaceTempView(\"dim_account\")\r\n",
					"dim_dates.createOrReplaceTempView(\"dim_dates\")\r\n",
					"dim_group.createOrReplaceTempView(\"dim_group\")\r\n",
					"trans_summary.createOrReplaceTempView(\"trans_summary\")\r\n",
					"\r\n",
					"#STCTS\r\n",
					"DIM_CTS_I_GLMapDefault.createOrReplaceTempView(\"DIM_CTS_I_GLMapDefault\")\r\n",
					"DIM_CTS_I_PARAM_Ranges.createOrReplaceTempView(\"DIM_CTS_I_PARAM_Ranges\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Calculating the monthly cost totals**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"vw_CTS_Costs_2_TransactionsSummary_MapMonthTotals = spark.sql(\"\"\"\r\n",
					"\r\n",
					"with mappedcosts as (\r\n",
					"    SELECT \r\n",
					"\t   R.sap_transactionsline_acctcode\r\n",
					"      ,R.sap_transactionsheader_postingdate\r\n",
					"      ,R.sap_transactionsline_subdepotcode\r\n",
					"      ,R.sap_transactionsline_doccat\r\n",
					"      ,R.sap_transactionsline_linetotal\r\n",
					"      ,R.sap_transactionsline_linetotalfinal\r\n",
					"      ,R.sap_transactionsline_linetotalfinalexclgjpo\r\n",
					"\t  ,A.Account_Code\r\n",
					"      ,A.System_Account_Code\r\n",
					"      ,A.System_Account_Code_KEY\r\n",
					"      ,A.Company\r\n",
					"      ,A.Level_1_Name\r\n",
					"      ,A.Level_2_Name\r\n",
					"      ,A.Level_3_Name\r\n",
					"      ,A.Level_4_Name\r\n",
					"      ,A.Level_5_Name\r\n",
					"      ,A.Service_Type\r\n",
					"      ,A.Depot\r\n",
					"      ,A.GroupMask\r\n",
					"      ,A.Acct_Project\r\n",
					"      ,A.Account_Status\r\n",
					"      ,A.Postable\r\n",
					"      ,A.RESTRICTTYPE\r\n",
					"\t  ,M.Level_ID\r\n",
					"      ,M.Group2\r\n",
					"      ,M.Customer\r\n",
					"      ,M.FixVarType\r\n",
					"      ,M.UOM\r\n",
					"      ,M.UOM_Percent\r\n",
					"      ,M.Source\r\n",
					"      ,M.Other\r\n",
					"      ,M.Equipment\r\n",
					"      ,M.Fuel\r\n",
					"      ,M.Facilities\r\n",
					"      ,M.NonUnionisedLabour\r\n",
					"      ,M.UnionisedLabour\r\n",
					"      ,M.ServiceProvider\r\n",
					"      ,M.REVENUE\r\n",
					"      ,M.LINEHAUL\r\n",
					"      ,M.ChkPercent\r\n",
					"      ,M.Comment\r\n",
					"      ,M.CustomComment\r\n",
					"--MAYBE CHANGE THE linetotalfinal to something else since it appears to be duplicated\r\n",
					",R.sap_transactionsline_linetotalfinal * M.Other * M.UOM_Percent\t\t\t\tas COST_Other\r\n",
					",R.sap_transactionsline_linetotalfinal * M.Equipment * M.UOM_Percent\t\t\tas COST_Equipment\r\n",
					",R.sap_transactionsline_linetotalfinal * M.Fuel * M.UOM_Percent\t\t\t\t\tas COST_Fuel\r\n",
					",R.sap_transactionsline_linetotalfinal * M.Facilities * M.UOM_Percent\t\t\tas COST_Facilities\r\n",
					",R.sap_transactionsline_linetotalfinal * M.NonUnionisedLabour * M.UOM_Percent\tas COST_NonUnionisedLabour\r\n",
					",R.sap_transactionsline_linetotalfinal * M.UnionisedLabour * M.UOM_Percent\t\tas COST_UnionisedLabour\r\n",
					",R.sap_transactionsline_linetotalfinal * M.ServiceProvider * M.UOM_Percent\t\tas COST_ServiceProvider\r\n",
					",R.sap_transactionsline_linetotalfinal * M.REVENUE * M.UOM_Percent\t\t\t\tas COST_REVENUE\r\n",
					",R.sap_transactionsline_linetotalfinal * M.LINEHAUL * M.UOM_Percent\t\t\t\tas COST_LINEHAUL\r\n",
					"\r\n",
					"    FROM trans_summary R\r\n",
					"  LEFT JOIN  dim_account A ON R.sap_transactionsline_acctcode = A.System_Account_Code\r\n",
					"  LEFT JOIN DIM_CTS_I_GLMapDefault M ON \r\n",
					"\tA.Level_1_Name = M.Level_1_Name AND \r\n",
					"\tA.Level_2_Name = M.Level_2_Name AND \r\n",
					"\tA.Level_3_Name = M.Level_3_Name AND \r\n",
					"\tA.Level_4_Name = M.Level_4_Name AND \r\n",
					"\tA.Service_Type = M.Service_Type\r\n",
					"WHERE M.Level_ID is not null\r\n",
					"AND last_day() = '\"\"\" + MonthToRun + \"\"\"'\r\n",
					")\r\n",
					"\r\n",
					"SELECT\r\n",
					"EOMONTH(sap_transactionsheader_postingdate) AS EO_PostingMonth\r\n",
					",sap_transactionsline_subdepotcode\r\n",
					",FixVarType\r\n",
					",UOM\r\n",
					"\t  ,SUM(COST_Other\t\t\t\t  ) AS COST_Other\r\n",
					"      ,SUM(COST_Equipment\t\t\t  ) AS COST_Equipment\r\n",
					"      ,SUM(COST_Fuel\t\t\t\t  ) AS COST_Fuel\r\n",
					"      ,SUM(COST_Facilities\t\t  ) AS COST_Facilities\r\n",
					"      ,SUM(COST_NonUnionisedLabour  ) AS COST_NonUnionisedLabour\r\n",
					"      ,SUM(COST_UnionisedLabour\t  ) AS COST_UnionisedLabour\r\n",
					"      ,SUM(COST_ServiceProvider\t  ) AS COST_ServiceProvider\r\n",
					"      ,SUM(COST_REVENUE\t\t\t  ) AS COST_REVENUE\r\n",
					"      ,SUM(COST_LINEHAUL\t\t\t  ) AS COST_LINEHAUL\r\n",
					"FROM mappedcosts\r\n",
					"\tWHERE Customer is null OR Customer = '' --EXCLUDING CUSTOMER SPECIFIC COSTS\r\n",
					"    \r\n",
					"GROUP BY EOMONTH(sap_transactionsheader_postingdate)\r\n",
					",sap_transactionsline_subdepotcode\r\n",
					",FixVarType\r\n",
					",UOM\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"display(vw_CTS_Costs_2_TransactionsSummary_MapMonthTotals.limit(5))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Maybe consider only filtering the parcel_track table on dates\r\n",
					"\r\n",
					"f_parcel_track = spark.sql(\"SELECT * FROM parcel_track WHERE last_day(lms_track_opendt) = '\" + MonthToRun + \"'\")\r\n",
					"#f_parcel = spark.sql(\"SELECT * FROM parcel WHERE last_day(lms_track_opendt) = '\" + MonthToRun + \"'\")\r\n",
					"\r\n",
					"display(f_parcel_track.limit(10))"
				],
				"execution_count": 6
			}
		]
	}
}