{
	"name": "01_LMSv1v2Recon_ETL",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Ops/LMSv1v2Recon"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "dfc8e878-a689-4cbd-a6c1-ffefc97ca01e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
				"name": "PRDSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 122
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql import functions as F\r\n",
					"# from pyspark.sql import DataFrame"
				],
				"execution_count": 123
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the v2customerorder LMSV2 Table\r\n",
					"v2customerorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/v2customerorder.parquet', format='parquet')\r\n",
					"columns=v2customerorder.columns\r\n",
					"for i in range(len(columns)):v2customerorder=v2customerorder.withColumnRenamed(columns[i],'v2'+ columns[i])\r\n",
					"v2customerorder.createOrReplaceTempView(\"v2customerorder\")\r\n",
					"\r\n",
					"#Create DataFrame for the v2deliverynote LMSV2 Table\r\n",
					"v2deliverynote = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/v2deliverynote.parquet', format='parquet')\r\n",
					"columns1=v2deliverynote.columns\r\n",
					"for i in range(len(columns1)):v2deliverynote=v2deliverynote.withColumnRenamed(columns1[i],'v2'+ columns1[i])\r\n",
					"v2deliverynote.createOrReplaceTempView(\"v2deliverynote\")\r\n",
					"\r\n",
					"#Create DataFrame for the v2manifest LMSV2 Table\r\n",
					"v2manifest = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/v2manifest.parquet', format='parquet')\r\n",
					"columns2=v2manifest.columns\r\n",
					"for i in range(len(columns2)):v2manifest=v2manifest.withColumnRenamed(columns2[i],'v2'+ columns2[i])\r\n",
					"v2manifest.createOrReplaceTempView(\"v2manifest\")\r\n",
					"\r\n",
					"#Create DataFrame for the v2consignment LMSV2 Table\r\n",
					"v2consignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/v2consignment.parquet', format='parquet')\r\n",
					"columns3=v2consignment.columns\r\n",
					"for i in range(len(columns3)):v2consignment=v2consignment.withColumnRenamed(columns3[i],'v2'+ columns3[i])\r\n",
					"v2consignment.createOrReplaceTempView(\"v2consignment\")\r\n",
					"\r\n",
					"#Create DataFrame for the v2parcel LMSV2 Table\r\n",
					"v2parcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/v2parcel.parquet', format='parquet')\r\n",
					"columns8=v2parcel.columns\r\n",
					"for i in range(len(columns8)):v2parcel=v2parcel.withColumnRenamed(columns8[i],'v2'+ columns8[i])\r\n",
					"v2parcel.createOrReplaceTempView(\"v2parcel\")\r\n",
					"\r\n",
					"#Create DataFrame for the v2track LMSV2 Table\r\n",
					"v2track = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/v2track.parquet', format='parquet')\r\n",
					"columns9=v2track.columns\r\n",
					"for i in range(len(columns9)):v2track=v2track.withColumnRenamed(columns9[i],'v2'+ columns9[i])\r\n",
					"v2track.createOrReplaceTempView(\"v2track\")\r\n",
					"\r\n",
					"#Create DataFrame for the v2movement LMSV2 Table\r\n",
					"v2movement = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/v2movement.parquet', format='parquet')\r\n",
					"columns10=v2movement.columns\r\n",
					"for i in range(len(columns10)):v2movement=v2movement.withColumnRenamed(columns10[i],'v2'+ columns10[i])\r\n",
					"v2movement.createOrReplaceTempView(\"v2movement\")\r\n",
					"\r\n",
					"#Create DataFrame for the mdcustomer LMSV2 Table\r\n",
					"mdcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbocustomer.parquet', format='parquet')\r\n",
					"columns13=mdcustomer.columns\r\n",
					"for i in range(len(columns13)):mdcustomer=mdcustomer.withColumnRenamed(columns13[i],'v2'+ columns13[i])\r\n",
					"mdcustomer.createOrReplaceTempView(\"mdcustomer\")\r\n",
					"\r\n",
					"#Create DataFrame for the mddeliverycustomer LMSV2 Table\r\n",
					"mddeliverycustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbodeliverycustomer.parquet', format='parquet')\r\n",
					"columns14=mddeliverycustomer.columns\r\n",
					"for i in range(len(columns14)):mddeliverycustomer=mddeliverycustomer.withColumnRenamed(columns14[i],'v2'+ columns14[i])\r\n",
					"mddeliverycustomer.createOrReplaceTempView(\"mddeliverycustomer\")\r\n",
					"\r\n",
					"#Create DataFrame for the v2deliverynoteparcel LMSV2 Table\r\n",
					"v2deliverynoteparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/v2deliverynoteparcel.parquet', format='parquet')\r\n",
					"columns15=v2deliverynoteparcel.columns\r\n",
					"for i in range(len(columns15)):v2deliverynoteparcel=v2deliverynoteparcel.withColumnRenamed(columns15[i],'v2dnp'+ columns15[i])\r\n",
					"v2deliverynoteparcel.createOrReplaceTempView(\"v2deliverynoteparcel\")\r\n",
					"\r\n",
					"#Create DataFrame for the v2consignmentperparcel LMSV2 Table\r\n",
					"v2consignmentperparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/v2consignmentperparcel.parquet', format='parquet')\r\n",
					"columns16=v2consignmentperparcel.columns\r\n",
					"for i in range(len(columns16)):v2consignmentperparcel=v2consignmentperparcel.withColumnRenamed(columns16[i],'v2'+ columns16[i])\r\n",
					"v2consignmentperparcel.createOrReplaceTempView(\"v2consignmentperparcel\")\r\n",
					"\r\n",
					"#Create DataFrame for the v2parcelmessage LMSV2 Table\r\n",
					"v2parcelmessage = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/v2parcelmessage.parquet', format='parquet')\r\n",
					"columns17=v2parcelmessage.columns\r\n",
					"for i in range(len(columns17)):v2parcelmessage=v2parcelmessage.withColumnRenamed(columns17[i],'v2'+ columns17[i])\r\n",
					"v2parcelmessage.createOrReplaceTempView(\"v2parcelmessage\")\r\n",
					"\r\n",
					"#Create DataFrame for the v2debriefdata LMSV2 Table\r\n",
					"v2debriefdata = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/v2debriefdata.parquet', format='parquet')\r\n",
					"columns18=v2debriefdata.columns\r\n",
					"for i in range(len(columns18)):v2debriefdata=v2debriefdata.withColumnRenamed(columns18[i],'v2ddata'+ columns18[i])\r\n",
					"v2debriefdata.createOrReplaceTempView(\"v2debriefdata\")\r\n",
					"\r\n",
					"#Create DataFrame for the v2debriefdocument LMSV2 Table\r\n",
					"v2debriefdocument = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/v2debriefdocument.parquet', format='parquet')\r\n",
					"columns19=v2debriefdocument.columns\r\n",
					"for i in range(len(columns19)):v2debriefdocument=v2debriefdocument.withColumnRenamed(columns19[i],'v2ddoc'+ columns19[i])\r\n",
					"v2debriefdocument.createOrReplaceTempView(\"v2debriefdocument\")\r\n",
					"\r\n",
					"#Create DataFrame for the v2parceldetail LMSV2 Table\r\n",
					"v2parceldetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/v2parceldetail.parquet', format='parquet')\r\n",
					"columns20=v2parceldetail.columns\r\n",
					"for i in range(len(columns20)):v2parceldetail=v2parceldetail.withColumnRenamed(columns20[i],'v2'+ columns20[i])\r\n",
					"v2parceldetail.createOrReplaceTempView(\"v2parceldetail\")\r\n",
					"\r\n",
					"######################################################################################################\r\n",
					"\r\n",
					"#Create DataFrame for the dbowaybill LMS Table\r\n",
					"dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
					"columns4=dbowaybill.columns\r\n",
					"for i in range(len(columns4)):dbowaybill=dbowaybill.withColumnRenamed(columns4[i],'v1'+ columns4[i])\r\n",
					"dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
					"\r\n",
					"#Create DataFrame for the dboloads LMS Table\r\n",
					"dboloads = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboloads.parquet', format='parquet')\r\n",
					"columns5=dboloads.columns\r\n",
					"for i in range(len(columns5)):dboloads=dboloads.withColumnRenamed(columns5[i],'v1'+ columns5[i])\r\n",
					"dboloads.createOrReplaceTempView(\"dboloads\")\r\n",
					"\r\n",
					"#Create DataFrame for the dboconsignment LMS Table\r\n",
					"dboconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboconsignment.parquet', format='parquet')\r\n",
					"columns6=dboconsignment.columns\r\n",
					"for i in range(len(columns6)):dboconsignment=dboconsignment.withColumnRenamed(columns6[i],'v1'+ columns6[i])\r\n",
					"dboconsignment.createOrReplaceTempView(\"dboconsignment\")\r\n",
					"\r\n",
					"#Create DataFrame for the dboorder LMS Table\r\n",
					"dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
					"columns7=dboorder.columns\r\n",
					"for i in range(len(columns7)):dboorder=dboorder.withColumnRenamed(columns7[i],'v1'+ columns7[i])\r\n",
					"dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
					"\r\n",
					"# Create DataFrame for the sstparcelunion LMS Table\r\n",
					"sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
					"columns11=sstparcelunion.columns\r\n",
					"for i in range(len(columns11)):sstparcelunion=sstparcelunion.withColumnRenamed(columns11[i],'v1'+ columns11[i])\r\n",
					"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
					"\r\n",
					"# Create DataFrame for the ssttrackunion LMS Table\r\n",
					"ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
					"columns12=ssttrackunion.columns\r\n",
					"for i in range(len(columns12)):ssttrackunion=ssttrackunion.withColumnRenamed(columns12[i],'v1'+ columns12[i])\r\n",
					"ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
					"\r\n",
					"# Create DataFrame for the dbocustomer LMS Table\r\n",
					"dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
					"columns21=dbocustomer.columns\r\n",
					"for i in range(len(columns21)):dbocustomer=dbocustomer.withColumnRenamed(columns21[i],'v1'+ columns21[i])\r\n",
					"dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
					"\r\n",
					"# Create DataFrame for the dbowaybillsperparcel LMS Table\r\n",
					"dbowaybillsperparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybillsperparcel.parquet', format='parquet')\r\n",
					"columns22=dbowaybillsperparcel.columns\r\n",
					"for i in range(len(columns22)):dbowaybillsperparcel=dbowaybillsperparcel.withColumnRenamed(columns22[i],'v1'+ columns22[i])\r\n",
					"dbowaybillsperparcel.createOrReplaceTempView(\"dbowaybillsperparcel\")\r\n",
					"\r\n",
					"# Create DataFrame for the dboparcelmessage LMS Table\r\n",
					"dboparcelmessage = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocsd_messageparcel.parquet', format='parquet')\r\n",
					"columns23=dboparcelmessage.columns\r\n",
					"for i in range(len(columns23)):dboparcelmessage=dboparcelmessage.withColumnRenamed(columns23[i],'v1'+ columns23[i])\r\n",
					"dboparcelmessage.createOrReplaceTempView(\"dboparcelmessage\")\r\n",
					"\r\n",
					"# Create DataFrame for the dboparceldetail LMS Table\r\n",
					"dboparceldetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparceldetail.parquet', format='parquet')\r\n",
					"columns24=dboparceldetail.columns\r\n",
					"for i in range(len(columns24)):dboparceldetail=dboparceldetail.withColumnRenamed(columns24[i],'v1'+ columns24[i])\r\n",
					"dboparceldetail.createOrReplaceTempView(\"dboparceldetail\")\r\n",
					"\r\n",
					"# Create DataFrame for the stlmstrack LMS Table\r\n",
					"stlmstrack = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet', format='parquet')\r\n",
					"columns25=stlmstrack.columns\r\n",
					"for i in range(len(columns25)):stlmstrack=stlmstrack.withColumnRenamed(columns25[i],'v1'+ columns25[i])\r\n",
					"stlmstrack.createOrReplaceTempView(\"stlmstrack\")"
				],
				"execution_count": 124
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconparcel\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    p.*\r\n",
					"    ,p2.*\r\n",
					"    ,CASE \r\n",
					"        WHEN p2.v2id IS NULL THEN 1\r\n",
					"        ELSE 0\r\n",
					"    END as notinv2\r\n",
					"FROM sstparcelunion p \r\n",
					"LEFT JOIN v2parcel p2 on p2.v2legacyid = p.v1id\r\n",
					"WHERE  COALESCE(p.v1acceptancedate,p.v1handoverdate)>='2023-01-01 00:00:00' AND COALESCE(p.v1acceptancedate,p.v1handoverdate)<='2023-03-31 23:59:59'\r\n",
					"AND p.v1orderid IS NOT NULL"
				],
				"execution_count": 125
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconparcel = spark.sql(\"SELECT * FROM reconparcel\")"
				],
				"execution_count": 126
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconparcel_baseparcelid\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     v1id\r\n",
					"FROM reconparcel"
				],
				"execution_count": 127
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconparcel_basewaybillid\r\n",
					"AS\r\n",
					"SELECT DISTINCT\r\n",
					"    v1waybillid\r\n",
					"\r\n",
					"FROM reconparcel"
				],
				"execution_count": 128
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconparcel_baseorderid\r\n",
					"AS\r\n",
					"SELECT DISTINCT\r\n",
					"    v1orderid\r\n",
					"FROM reconparcel"
				],
				"execution_count": 129
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconparcel_baseconsignid\r\n",
					"AS\r\n",
					"SELECT DISTINCT\r\n",
					"    v1consignid\r\n",
					"FROM reconparcel"
				],
				"execution_count": 130
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconparcel_baseparcelconsignid\r\n",
					"AS\r\n",
					"SELECT DISTINCT\r\n",
					"     v1id\r\n",
					"    ,v1consignid\r\n",
					"    ,v1id||'|'||v1consignid as v1parcelconsignid\r\n",
					"FROM reconparcel"
				],
				"execution_count": 131
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"recondeliverynoteparcel\r\n",
					"AS\r\n",
					"SELECT \r\n",
					" t.v1lms_track_parcelid\r\n",
					",p.v2id as v2parcelid \r\n",
					",t.v1lms_track_waybillid as v1waybillid\r\n",
					",dn.v2id as v2waybillid\r\n",
					",dnp.*\r\n",
					",CASE \r\n",
					"    WHEN dnp.v2dnpid IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2\r\n",
					"\r\n",
					"FROM reconparcel_baseparcelid b\r\n",
					"LEFT JOIN v2parcel p on p.v2legacyid = b.v1id\r\n",
					"LEFT JOIN stlmstrack t on t.v1lms_track_parcelid = b.v1id\r\n",
					"LEFT JOIN v2deliverynote dn on dn.v2legacyid = t.v1lms_track_waybillid\r\n",
					"LEFT JOIN v2deliverynoteparcel dnp on dnp.v2dnpparcelid = p.v2id  and dnp.v2dnpdeliverynoteid = dn.v2id\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 132
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"recondeliverynoteparcel = spark.sql(\"SELECT * FROM recondeliverynoteparcel\")"
				],
				"execution_count": 133
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconparcelmessage\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"\r\n",
					" pm1.*\r\n",
					",pm2.*\r\n",
					",CASE \r\n",
					"    WHEN pm2.v2id IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2\r\n",
					"\r\n",
					"FROM reconparcel_baseparcelid b\r\n",
					"LEFT JOIN dboparcelmessage pm1 on pm1.v1ParcelID = b.v1id\r\n",
					"LEFT JOIN v2parcelmessage  pm2 on pm2.v2legacyid = pm1.v1ParcelID\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 134
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconparcelmessage = spark.sql(\"SELECT * FROM reconparcelmessage\")"
				],
				"execution_count": 135
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconparceldetail\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"\r\n",
					" pd1.*\r\n",
					",pd2.*\r\n",
					",CASE \r\n",
					"    WHEN pd2.v2id IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2\r\n",
					"\r\n",
					"FROM reconparcel_baseparcelid b\r\n",
					"LEFT JOIN dboparceldetail pd1 on pd1.v1ParcelID = b.v1id\r\n",
					"LEFT JOIN v2parceldetail  pd2 on pd2.v2legacyid = pd1.v1ParcelID\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 136
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconparceldetail = spark.sql(\"SELECT * FROM reconparceldetail\")"
				],
				"execution_count": 137
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconconsignmentperparcel\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"\r\n",
					" b.*\r\n",
					"--,p.*\r\n",
					",p.v2id v2parcelidparcel\r\n",
					"--,c.*\r\n",
					",c.v2id v2consignmentidconsignment\r\n",
					",cp.*\r\n",
					",CASE \r\n",
					"    WHEN cp.v2id IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2\r\n",
					"\r\n",
					"FROM reconparcel_baseparcelconsignid b\r\n",
					"LEFT JOIN v2parcel p on p.v2legacyid = b.v1id\r\n",
					"LEFT JOIN v2consignment c on c.v2legacyid = b.v1consignid\r\n",
					"LEFT JOIN v2consignmentperparcel cp on cp.v2parcelid = p.v2id and cp.v2consignmentid = c.v2id\r\n",
					""
				],
				"execution_count": 138
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconconsignmentperparcel = spark.sql(\"SELECT * FROM reconconsignmentperparcel\")"
				],
				"execution_count": 139
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconwaybill\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"\r\n",
					" w.*\r\n",
					",dn.*\r\n",
					",dd.*\r\n",
					",dd1.*\r\n",
					",CASE \r\n",
					"    WHEN dn.v2id IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2\r\n",
					",CASE \r\n",
					"    WHEN dd.v2ddataid IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2debriefdata\r\n",
					",CASE \r\n",
					"    WHEN dd1.v2ddocid IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2debriefdocument\r\n",
					"\r\n",
					"FROM reconparcel_basewaybillid b\r\n",
					"LEFT JOIN dbowaybill w on w.v1id = b.v1waybillid\r\n",
					"LEFT JOIN v2deliverynote dn on dn.v2legacyid = w.v1id\r\n",
					"LEFT JOIN v2debriefdata dd on dd.v2ddatadeliverynoteid = dn.v2id\r\n",
					"LEFT JOIN v2debriefdocument dd1 on dd1.v2ddocdeliverynoteid = dn.v2id"
				],
				"execution_count": 140
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconwaybill = spark.sql(\"SELECT * FROM reconwaybill\")"
				],
				"execution_count": 141
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconorder\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"\r\n",
					"o.*\r\n",
					",co.*\r\n",
					",CASE \r\n",
					"    WHEN co.v2id IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2\r\n",
					"\r\n",
					"FROM reconparcel_baseorderid b \r\n",
					"LEFT JOIN dboorder o on o.v1id = b.v1orderid\r\n",
					"LEFT JOIN v2customerorder co on co.v2legacyid = o.v1id\r\n",
					""
				],
				"execution_count": 142
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconorder = spark.sql(\"SELECT * FROM reconorder\")"
				],
				"execution_count": 143
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconconsignment\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"\r\n",
					"c.*\r\n",
					",co.*\r\n",
					",CASE \r\n",
					"    WHEN co.v2id IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2\r\n",
					"\r\n",
					"FROM reconparcel_baseconsignid b \r\n",
					"LEFT JOIN dboconsignment c on c.v1id = b.v1consignid\r\n",
					"LEFT JOIN v2consignment co on co.v2legacyid = c.v1id\r\n",
					""
				],
				"execution_count": 144
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconconsignment = spark.sql(\"SELECT * FROM reconconsignment\")"
				],
				"execution_count": 145
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"recontrack\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    t1.*\r\n",
					"    ,t2.*\r\n",
					"    ,CASE \r\n",
					"        WHEN t2.v2id IS NULL THEN 1\r\n",
					"        ELSE 0\r\n",
					"    END as notinv2\r\n",
					"\r\n",
					"FROM reconparcel_baseparcelid b \r\n",
					"LEFT JOIN ssttrackunion t1 on t1.v1parcelid = b.v1id\r\n",
					"LEFT JOIN v2track t2 on t2.v2legacyid = t1.v1id\r\n",
					""
				],
				"execution_count": 146
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"recontrack = spark.sql(\"SELECT  * FROM recontrack\")"
				],
				"execution_count": 147
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"recontrack_base\r\n",
					"AS\r\n",
					"SELECT DISTINCT\r\n",
					"     v1loadid\r\n",
					"FROM recontrack"
				],
				"execution_count": 148
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"recontrack_base = spark.sql(\"SELECT  * FROM recontrack_base\")"
				],
				"execution_count": 149
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconloads\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"\r\n",
					"l.*\r\n",
					",m.*\r\n",
					",CASE \r\n",
					"    WHEN m.v2id IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2\r\n",
					"\r\n",
					"FROM recontrack_base b\r\n",
					"LEFT JOIN dboloads l on l.v1id = b.v1loadid\r\n",
					"LEFT JOIN v2manifest m on m.v2legacyid = l.v1id\r\n",
					""
				],
				"execution_count": 150
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconloads = spark.sql(\"SELECT * FROM reconloads\")"
				],
				"execution_count": 151
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconmovement\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    * \r\n",
					"FROM v2movement"
				],
				"execution_count": 152
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconmovement = spark.sql(\"SELECT  * FROM reconmovement\")"
				],
				"execution_count": 153
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# reconparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconparcel.parquet', mode = \"overwrite\")\r\n",
					"# reconwaybill.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconwaybill.parquet', mode = \"overwrite\")\r\n",
					"# reconorder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconorder.parquet', mode = \"overwrite\")\r\n",
					"# reconconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconconsignment.parquet', mode = \"overwrite\")\r\n",
					"# reconloads.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconloads.parquet', mode = \"overwrite\")\r\n",
					"# recontrack.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/recontrack.parquet', mode = \"overwrite\")\r\n",
					"# reconmovement.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconmovement.parquet', mode = \"overwrite\")\r\n",
					"# reconparcelmessage.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconparcelmessage.parquet', mode = \"overwrite\")\r\n",
					"# reconparceldetail.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconparceldetail.parquet', mode = \"overwrite\")\r\n",
					"# reconconsignmentperparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconconsignmentperparcel.parquet', mode = \"overwrite\")\r\n",
					"# recondeliverynoteparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/recondeliverynoteparcel.parquet', mode = \"overwrite\")"
				],
				"execution_count": 154
			}
		]
	}
}