{
	"name": "10- Finance_Data_Preparation_Accounts_DEV",
	"properties": {
		"folder": {
			"name": "ARCHIVE/DEV/Archived/Transactions Notebooks DEV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0c90bb98-dcf7-434c-85aa-b6c9a912ced9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#dboOACT = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboOACT.parquet', format='parquet')\r\n",
					"#dboOACT.createOrReplaceTempView(\"dboOACT\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CHART_OF_ACCOUNTS = spark.sql(\"\"\"\r\n",
					"SELECT *,\r\n",
					"    \"City Logistics New\" as Company\r\n",
					"FROM dboOACT\r\n",
					"\"\"\")\r\n",
					"#CHART_OF_ACCOUNTS.show()\r\n",
					"CHART_OF_ACCOUNTS.createOrReplaceTempView(\"CHART_OF_ACCOUNTS\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TMPACCOUNTS = spark.sql(\"\"\"\r\n",
					"SELECT AcctCode as `System Account Code`,\r\n",
					"     Upper(left(AcctName, instr(AcctName, '(') - 2)) as `Account Type`,\r\n",
					"     Segment_0 as `Account Code`,\r\n",
					"     Segment_1 as `Service Type`, \r\n",
					"     Segment_2 as `Depot`,\r\n",
					"     GroupMask,\r\n",
					"     Company,\r\n",
					"     TRIM(Project) as `Acct Project`,\r\n",
					"     FatherNum,\r\n",
					"     FrozenFor as `Account Status`,\r\n",
					"     Postable\r\n",
					"FROM CHART_OF_ACCOUNTS\r\n",
					"\"\"\")\r\n",
					"#TMPACCOUNTS.show()\r\n",
					"TMPACCOUNTS.createOrReplaceTempView(\"TMPACCOUNTS\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TMPACCOUNTS2 = spark.sql(\"\"\"\r\n",
					"SELECT distinct\r\n",
					"\t if(isnull(`System Account Code`) = 1, \"Unknown\", `System Account Code`) as `System Account CodeA`,\r\n",
					"\t if(isnull(`System Account Code`) = 1, \"Unknown\", `Account Type`) as `Account Type`,\r\n",
					"     if(isnull(`System Account Code`) = 1, \"Unknown\", `Account Code`) as `Account CodeA`,\r\n",
					"     if(isnull(`System Account Code`) = 1, \"Unknown\", `Service Type`) as `Service TypeA`, \r\n",
					"     if(isnull(`System Account Code`) = 1, \"Unknown\", Depot) as Depot,\r\n",
					"     if(isnull(`System Account Code`) = 1, \"Unknown\", GroupMask) as GroupMaskA,\r\n",
					"     if(isnull(`System Account Code`) = 1, \"Unknown\", Company) as Company,\r\n",
					"     coalesce(if(isnull(`System Account Code`) = 1, \"Unknown\", TRIM(`Acct Project`)), '') as `Acct Project`,\r\n",
					"     if(isnull(`System Account Code`) = 1, 0, FatherNum) as FatherNum,\r\n",
					"     if(isnull(`System Account Code`) = 1, \"Unknown\" , `Account Type`) as `Account Name`,\r\n",
					"     if(isnull(`System Account Code`) = 1, \"Unknown\", `System Account Code`) || \r\n",
					"     if(isnull(`System Account Code`) = 1, \"Unknown\", Company)as `System Account Code KEY`,\r\n",
					"     `Account Status`,\r\n",
					"     Postable\r\n",
					"FROM TMPACCOUNTS\r\n",
					"\"\"\")\r\n",
					"#TMPACCOUNTS2.show()\r\n",
					"TMPACCOUNTS2.createOrReplaceTempView(\"TMPACCOUNTS2\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TMPACCOUNTS = spark.sql(\"\"\"\r\n",
					"SELECT t.`System Account CodeA` AS System_Account_CodeA, \r\n",
					"       t.`Account Type` AS Account_Type, \r\n",
					"       t.`Account CodeA` AS Account_CodeA, \r\n",
					"       t.`Service TypeA` AS Service_TypeA, \r\n",
					"       t.Depot,\r\n",
					"       t.GroupMaskA,\r\n",
					"       t.Company,\r\n",
					"       t.`Acct Project` AS Acct_Project,\r\n",
					"       t.`Account Name` AS Account_Name,\r\n",
					"       t.`System Account Code KEY` AS System_Account_Code_KEY,\r\n",
					"       Upper(coa1.AcctName) as `Level_5_Name`,\r\n",
					"       Upper(coa2.AcctName) as `Level_4_Name`,\r\n",
					"       Upper(coa3.AcctName) as `Level_3_Name`,\r\n",
					"       Upper(coa4.AcctName) as `Level_2_Name`,\r\n",
					"       Upper(coa5.AcctName) as `Level_1_Name`\r\n",
					"FROM TMPACCOUNTS2 t\r\n",
					"LEFT JOIN CHART_OF_ACCOUNTS coa1\r\n",
					"ON t.`System Account CodeA` = coa1.AcctCode\r\n",
					"AND t.FatherNum = coa1.FatherNum\r\n",
					"AND coa1.Levels = 5\r\n",
					"LEFT JOIN CHART_OF_ACCOUNTS coa2\r\n",
					"ON t.FatherNum = coa2.AcctCode\r\n",
					"AND coa2.Levels = 4\r\n",
					"LEFT JOIN CHART_OF_ACCOUNTS coa3\r\n",
					"ON coa3.AcctCode = coa2.FatherNum\r\n",
					"AND coa3.Levels = 3\r\n",
					"LEFT JOIN CHART_OF_ACCOUNTS coa4\r\n",
					"ON coa4.AcctCode = coa3.FatherNum\r\n",
					"AND coa4.Levels = 2\r\n",
					"LEFT JOIN CHART_OF_ACCOUNTS coa5\r\n",
					"ON coa5.AcctCode = coa4.FatherNum\r\n",
					"AND coa5.Levels = 1\r\n",
					"\"\"\")\r\n",
					"#TMPACCOUNTS.show()\r\n",
					"TMPACCOUNTS.createOrReplaceTempView(\"TMPACCOUNTS\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"Account_Expose = spark.sql(\"\"\"\r\n",
					"SELECT tmpa.Account_CodeA as `Account_Code`,\r\n",
					"       tmpa.System_Account_CodeA as `System_Account_Code`,\r\n",
					"       tmpa.System_Account_Code_KEY,\r\n",
					"       tmpa.Company,\r\n",
					"       tmpa.Level_1_Name,\r\n",
					"       tmpa.Level_2_Name,\r\n",
					"       tmpa.Level_3_Name,\r\n",
					"       tmpa.Level_4_Name,\r\n",
					"       tmpa.Level_5_Name,\r\n",
					"       tmpa.Service_TypeA as `Service_Type`,\r\n",
					"       tmpa.Depot,\r\n",
					"       tmpa.GroupMaskA as `GroupMask`,\r\n",
					"       tmpa.Acct_Project,\r\n",
					"       tmpa2.`Account Status` as Account_Status,\r\n",
					"       tmpa2.Postable,\r\n",
					"       if(Level_1_Name = 'TURNOVER','REV','NOREV') AS RESTRICTTYPE\r\n",
					"FROM TMPACCOUNTS tmpa\r\n",
					"LEFT JOIN TMPACCOUNTS2 tmpa2\r\n",
					"ON tmpa.`System_Account_CodeA` = tmpa2.`System Account CodeA`\r\n",
					"AND tmpa.System_Account_Code_KEY = tmpa2.`System Account Code KEY`\r\n",
					"\"\"\")\r\n",
					"#Account_Expose.show()\r\n",
					"Account_Expose.createOrReplaceTempView(\"Account_Expose\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPACCOUNTS.write.parquet('/DataLake/Structured/Dimensions/DIM_TMPACCOUNTS.parquet', mode='overwrite')\r\n",
					"TMPACCOUNTS.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.DIM_TMPACCOUNTS\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Account_Expose.write.parquet('/DataLake/Structured/Dimensions/DIM_Account_Expose.parquet', mode='overwrite')\r\n",
					"Account_Expose.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.DIM_Account_Expose\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"Scripts have successfully executed\")"
				],
				"execution_count": null
			}
		]
	}
}