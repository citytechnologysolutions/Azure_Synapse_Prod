{
	"name": "106_RptLoadLevel_VehicleUtilisationReport",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Reports/LMS"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ApacheSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "ccb25338-c4cf-45ab-8f6d-8b75d7a05b23"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #Create DataFrame for the rptloadparentlevel LMS Table\r\n",
					"# rptloadparentlevel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/RPT/rptloadparentlevel.parquet', format='parquet')\r\n",
					"# rptloadparentlevel.createOrReplaceTempView(\"rptloadparentlevel\")\r\n",
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"vehicleutilisationreport\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"     lms_loadparent_parentloadid as parentloadid\r\n",
					"    ,lms_loadparent_childloadids as childloadids\r\n",
					"    ,lms_loadparent_ldate as date\r\n",
					"    ,lms_loadparent_estdepdate as estdeptdte\r\n",
					"    ,lms_loadparent_originalstartdate as originalstartdate\r\n",
					"    ,lms_loadparent_locationfromid as locationid\r\n",
					"    ,lms_loadparent_locationfromdescription as location\r\n",
					"    ,lms_loadparent_locationtoid as tolocationid\r\n",
					"    ,lms_loadparent_locationtodescription as tolocation\r\n",
					"    ,lms_loadparent_vehcileid as vehicleid\r\n",
					"    ,lms_loadparent_vehcileuid as vehicleuid\r\n",
					"    ,lms_loadparent_vehcilefleetcode as fleetcode\r\n",
					"    ,lms_loadparent_vehicleregistrationnumber as regno\r\n",
					"    ,lms_loadparent_vehicleinternalvolume as vehicleinternalvolume\r\n",
					"    ,lms_loadparent_lmsvehodo as lmsvehodo\r\n",
					"    ,lms_loadparent_lmsvehodo2 as lmsvehodo2\r\n",
					"    ,lms_loadparent_lmsodokms as lmsodokms\r\n",
					"    ,lms_loadparent_orvstartodo as orvstartodo\r\n",
					"    ,lms_loadparent_orvstopodo as orvstopodo\r\n",
					"    ,lms_loadparent_orvodokms as orvodokms\r\n",
					"    ,(lms_loadparent_orvdistance)/1000 as orvdistance\r\n",
					"    ,(lms_loadparent_orvduration)/3600 as orvduration\r\n",
					"    ,lms_loadparent_noparcels as noparcels\r\n",
					"    ,lms_loadparent_weight as weight\r\n",
					"    ,lms_loadparent_chargeweight as chargeweight\r\n",
					"    ,lms_loadparent_nochildloads as nochildloads\r\n",
					"    ,lms_loadparent_nodeliverycustomers as nodeliverycustomers\r\n",
					"    ,lms_loadparent_expressdelivercustomers as expressdelivercustomers\r\n",
					"    ,lms_loadparent_retailelivercustomers as retailelivercustomers\r\n",
					"    ,CAST(lms_loadparent_vehicleinternalvolume as varchar(16)) || ' * 200 @ 100% = ' as calulation \r\n",
					"    ,(lms_loadparent_vehicleinternalvolume*200) as requiredvolume\r\n",
					"\r\n",
					"    ,CASE \r\n",
					"        WHEN lms_loadparent_vehicleinternalvolume is null THEN 'undifined'\r\n",
					"        WHEN  (lms_loadparent_chargeweight > lms_loadparent_weight) THEN \r\n",
					"        CAST \r\n",
					"            (\r\n",
					"                (\r\n",
					"                    (lms_loadparent_chargeweight)\r\n",
					"                    /\r\n",
					"                    (lms_loadparent_vehicleinternalvolume*200)*100\r\n",
					"                    \r\n",
					"                )    AS varchar(16)\r\n",
					"                \r\n",
					"            )||' %'\r\n",
					"        ELSE CAST\r\n",
					"            (\r\n",
					"                (\r\n",
					"                    (lms_loadparent_weight)\r\n",
					"                    /\r\n",
					"                    (lms_loadparent_vehicleinternalvolume*200)*100\r\n",
					"                ) AS  varchar(16)\r\n",
					"            )||' %'\r\n",
					"                         \r\n",
					"\tEND as utilisationprct\r\n",
					"    ,lms_loadparent_sroutedescriptions as sroute\r\n",
					"    ,lms_loadparent_routetype as routetype\r\n",
					"\t,lms_loadparent_billcustparcels as billcustparcels\r\n",
					"\r\n",
					"FROM rptloadparentlevel lp\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"vehicleutilisationreport = spark.sql(\"SELECT * FROM vehicleutilisationreport\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# vehicleutilisationreport.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/RPT/vehicleutilisationreport.parquet', mode = \"overwrite\")"
				],
				"execution_count": 9
			}
		]
	}
}