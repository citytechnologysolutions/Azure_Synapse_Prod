{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "citylogistics-synapseanalytics-workspace-prod"
		},
		"AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().ASAEndpoint};Initial Catalog=@{linkedService().ASADataBase}"
		},
		"PostgreSQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'PostgreSQL'",
			"defaultValue": "Host=@{linkedService().ServerName};Port=5432;Database=@{linkedService().DatabaseName};UID=@{linkedService().UserName};EncryptionMethod=0"
		},
		"SqlServer_WindowsAuth_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer_WindowsAuth'",
			"defaultValue": "Integrated Security=True;Data Source=@{linkedService().ServerName};Initial Catalog=@{linkedService().DatabaseName}"
		},
		"citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:citylogistics-synapseanalytics-workspace-prod.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"AzureKeyVaultCity_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://CityLogisticsKeyVault.vault.azure.net/"
		},
		"OnPremFileServerLinkedServer_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "@{linkedService().ServerName}"
		},
		"OnPremFileServerLinkedServer_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "@{linkedService().UserName}"
		},
		"SharePointHTTPLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://',linkedService().BaseUrl, '/', linkedService().SiteURL, '_api/web/GetFileByServerRelativeUrl (''', linkedService().FileName,''')/$value')}"
		},
		"SqlServer_WindowsAuth_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().UserName}"
		},
		"citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net"
		},
		"citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().DataLake}"
		},
		"citylogisticsstoragedevdatalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://citylogisticsstorage.dfs.core.windows.net/"
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_cw_items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "citybranch"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbocitybranch"
					}
				},
				{
					"Source": {
						"TableName": "deporequester"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodeporequester"
					}
				},
				{
					"Source": {
						"TableName": "depot"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodepot"
					}
				},
				{
					"Source": {
						"TableName": "ipaddress"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dboipaddress"
					}
				},
				{
					"Source": {
						"TableName": "maillistaddress"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbomaillistaddress"
					}
				},
				{
					"Source": {
						"TableName": "maillistcontact"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbomaillistcontact"
					}
				},
				{
					"Source": {
						"TableName": "maillistcustomer"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbomaillistcustomer"
					}
				},
				{
					"Source": {
						"TableName": "peoplebasic"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbopeoplebasic"
					}
				},
				{
					"Source": {
						"TableName": "peopledriver"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbopeopledriver"
					}
				},
				{
					"Source": {
						"TableName": "peoplepersonal"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbopeoplepersonal"
					}
				},
				{
					"Source": {
						"TableName": "selist"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dboselist"
					}
				},
				{
					"Source": {
						"TableName": "selistitem"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dboselistitem"
					}
				},
				{
					"Source": {
						"TableName": "vehicleadmin"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehicleadmin"
					}
				},
				{
					"Source": {
						"TableName": "vehiclebasic"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehiclebasic"
					}
				},
				{
					"Source": {
						"TableName": "vehicleequipment"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehicleequipment"
					}
				},
				{
					"Source": {
						"TableName": "vehiclefinance"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehiclefinance"
					}
				},
				{
					"Source": {
						"TableName": "vehiclemovement"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehiclemovement"
					}
				},
				{
					"Source": {
						"TableName": "vehicleoperations"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehicleoperations"
					}
				},
				{
					"Source": {
						"TableName": "vehicletracking"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehicletracking"
					}
				},
				{
					"Source": {
						"TableName": "vehicletype"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehicletype"
					}
				},
				{
					"Source": {
						"TableName": "wfapproval"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbowfapproval"
					}
				},
				{
					"Source": {
						"TableName": "wfmail"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbowfmail"
					}
				},
				{
					"Source": {
						"TableName": "wftargets"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbowftargets"
					}
				}
			]
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_TakeOnPeriod": {
			"type": "string",
			"defaultValue": " "
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": true
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": false
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_CW_Items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "Bill_AuditRouteRatesR"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_auditrouteratesr"
					}
				},
				{
					"Source": {
						"TableName": "Bill_RouteRate"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_routerate"
					}
				},
				{
					"Source": {
						"TableName": "Driver"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodriver"
					}
				},
				{
					"Source": {
						"TableName": "Location"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbolocation"
					}
				},
				{
					"Source": {
						"TableName": "PNPHUDetail"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbopnphudetail"
					}
				},
				{
					"Source": {
						"TableName": "Vehicle"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbovehicle"
					}
				},
				{
					"Source": {
						"TableName": "DC_Transfer"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodc_transfer"
					}
				}
			]
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_TakeOnPeriod": {
			"type": "string",
			"defaultValue": " "
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": true
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": false
		},
		"Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_CW_Items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "Bill_ConsignmentR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_consignmentr"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ConsignRouteChargeR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_consignroutecharger"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ConsignSurChargeR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_consignsurcharger"
					}
				},
				{
					"Source": {
						"TableName": "Bill_BillCustomersR"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_billcustomersr"
					}
				},
				{
					"Source": {
						"TableName": "Collect"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbocollect"
					}
				},
				{
					"Source": {
						"TableName": "Consignment"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboconsignment"
					}
				},
				{
					"Source": {
						"TableName": "Customer"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbocustomer"
					}
				},
				{
					"Source": {
						"TableName": "DC_Transfer"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodc_transfer"
					}
				},
				{
					"Source": {
						"TableName": "Driver"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodriver"
					}
				},
				{
					"Source": {
						"TableName": "LeadTime"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtime"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeGroup"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimegroup"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeGroupDC"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimegroupdc"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeSection"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimesection"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeStructure"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimestructure"
					}
				},
				{
					"Source": {
						"TableName": "Loads"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboloads"
					}
				},
				{
					"Source": {
						"TableName": "order"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboorder"
					}
				},
				{
					"Source": {
						"TableName": "Parcel"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboparcel"
					}
				},
				{
					"Source": {
						"TableName": "ParcelDetail"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboparceldetail"
					}
				},
				{
					"Source": {
						"TableName": "ParcelStatus"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboparcelstatus"
					}
				},
				{
					"Source": {
						"TableName": "Track"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbotrack"
					}
				},
				{
					"Source": {
						"TableName": "Vehicle"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbovehicle"
					}
				},
				{
					"Source": {
						"TableName": "Waybill"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbowaybill"
					}
				},
				{
					"Source": {
						"TableName": "WaybillsPerParcel"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbowaybillsperparcel"
					}
				}
			]
		},
		"Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_TakeOnPeriod": {
			"type": "string",
			"defaultValue": " "
		},
		"Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": false
		},
		"Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": false
		},
		"Incre PROD_Daily Trigger Rest_properties_LMS LOAD PROD_parameters_CW_Items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "Bill_ConsignmentR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_consignmentr"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ConsignRouteChargeR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_consignroutecharger"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ConsignSurChargeR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_consignsurcharger"
					}
				},
				{
					"Source": {
						"TableName": "Bill_BillCustomersR"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_billcustomersr"
					}
				},
				{
					"Source": {
						"TableName": "Collect"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbocollect"
					}
				},
				{
					"Source": {
						"TableName": "Consignment"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboconsignment"
					}
				},
				{
					"Source": {
						"TableName": "Customer"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbocustomer"
					}
				},
				{
					"Source": {
						"TableName": "DC_Transfer"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodc_transfer"
					}
				},
				{
					"Source": {
						"TableName": "Driver"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodriver"
					}
				},
				{
					"Source": {
						"TableName": "LeadTime"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtime"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeGroup"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimegroup"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeGroupDC"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimegroupdc"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeSection"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimesection"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeStructure"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimestructure"
					}
				},
				{
					"Source": {
						"TableName": "Loads"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboloads"
					}
				},
				{
					"Source": {
						"TableName": "order"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboorder"
					}
				},
				{
					"Source": {
						"TableName": "Parcel"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboparcel"
					}
				},
				{
					"Source": {
						"TableName": "ParcelDetail"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboparceldetail"
					}
				},
				{
					"Source": {
						"TableName": "ParcelStatus"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboparcelstatus"
					}
				},
				{
					"Source": {
						"TableName": "Track"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbotrack"
					}
				},
				{
					"Source": {
						"TableName": "Vehicle"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbovehicle"
					}
				},
				{
					"Source": {
						"TableName": "Waybill"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbowaybill"
					}
				},
				{
					"Source": {
						"TableName": "WaybillsPerParcel"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbowaybillsperparcel"
					}
				}
			]
		},
		"Incre PROD_Daily Trigger Rest_properties_LMS LOAD PROD_parameters_TakeOnPeriod": {
			"type": "string",
			"defaultValue": " "
		},
		"Incre PROD_Daily Trigger Rest_properties_LMS LOAD PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": false
		},
		"Incre PROD_Daily Trigger Rest_properties_LMS LOAD PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": false
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Avis Full Take-on')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Avis data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "OnPremSambaBinary",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@variables('ServerName')",
										"type": "Expression"
									},
									"UserName": {
										"value": "@variables('UserName')",
										"type": "Expression"
									},
									"SecretName": {
										"value": "@variables('SecretName')",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@variables('SourceDirectoryName')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('FileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DataLakeBinary",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@variables('ContainerName')",
										"type": "Expression"
									},
									"DestFolderName": {
										"value": "@variables('DestFolderName')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('FileName')",
										"type": "Expression"
									},
									"DataLake": {
										"value": "@variables('DataLake')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"ServerName": {
						"type": "String",
						"defaultValue": "\\\\10.1.8.34"
					},
					"SourceDirectoryName": {
						"type": "String",
						"defaultValue": "Avis"
					},
					"FileName": {
						"type": "String"
					},
					"UserName": {
						"type": "String",
						"defaultValue": "Synapse@citylogistics.co.za"
					},
					"SecretName": {
						"type": "String",
						"defaultValue": "OnPremSambaSecret"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorage.dfs.core.windows.net/"
					},
					"DestFolderName": {
						"type": "String",
						"defaultValue": "\\Unstructured Data\\Avis_Files"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/SharePoint"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-05T14:54:15Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/OnPremSambaBinary')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeBinary')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CLMasterData Full Take-on_PROD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Iterate Data",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.CW_Items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If ColumnsNamesBlankSpaces",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.ColumnsNamesBlankSpaces",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "RemoveBlankSpacesColumnNames",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(' \nDECLARE @s VARCHAR(MAX) \nDECLARE @tablename VARCHAR(MAX) = ''', item().Source.TableName,''' \nSELECT @s = ISNULL(@s + '', '','''') + ''['' + c.name + '']'' + '' as [''+replace(c.name,'' '',''_'')+''] '' \nFROM sys.all_columns c join sys.tables t \nON c.object_id = t.object_id \nWHERE t.name =  @tablename \nSELECT ''SELECT '' + @s + '' FROM ['' +  @tablename + '']''  as Query')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "SqlServerDataSet",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@variables('ServerName')",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@variables('DatabaseName')",
																"type": "Expression"
															},
															"UserName": {
																"value": "@variables('UserName')",
																"type": "Expression"
															},
															"CW_SchemaName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"SecretName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"CW_TableName": {
																"value": "@item().Source.TableName",
																"type": "Expression"
															}
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If FullLoad",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.Full_Load",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Lookup Last Max Field",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('SELECT MAX(',item().Increment.IncField,')  as Field \n FROM\n    OPENROWSET(\n        BULK ','''',variables('DataLake'),'/',variables('FolderName'),'/',item().destination.FileName,'.parquet','''',\n        ',FORMAT = ','''PARQUET''','\n    ) AS [result]')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSqlConnection",
														"type": "DatasetReference",
														"parameters": {
															"ASAEndpoint": {
																"value": "@variables('ASAEndpoint')",
																"type": "Expression"
															},
															"ASADataBase": {
																"value": "@variables('ASADataBase')",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "Remove Old Data Incremental Data_SingleFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Lookup Last Max Field",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Remove Old Data Data_Folder",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_SingleFile",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "Remove Old Data Data_SingleFile",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "If ColumnsNamesBlankSpaces",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(pipeline().parameters.Full_Load,'FullTakeOn'\n   ,if(equals(item().Increment.IncField,item().Increment.IdField),'IdLoad'\n      ,'DateLoad'\n   )\n)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DateLoad",
												"activities": [
													{
														"name": "Incr Load DF",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy New incremental data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "IncrementalLoadDate DataFlow",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_IdField": {
																		"value": "'@{item().Increment.IdField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source1": {},
																	"source2": {},
																	"WritetoDataLake": {}
																},
																"linkedServiceParameters": {
																	"source1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"WritetoDataLake": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Partition DF",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_Folder",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "Delete The Left File_DateLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_DateLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Incr Load DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Copy New incremental data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(pipeline().parameters.ColumnsNamesBlankSpaces,\n        activity('RemoveBlankSpacesColumnNames').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,concat('''',activity('Lookup Last Max Field').output.firstRow.Field,'''')\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete The Left File_DateLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_Folder",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "IdLoad",
												"activities": [
													{
														"name": "Copy New incremental data_IDLoad",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(pipeline().parameters.ColumnsNamesBlankSpaces,\n        activity('RemoveBlankSpacesColumnNames').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,activity('Lookup Last Max Field').output.firstRow.Field\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Data flow Union_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy New incremental data_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "IncrementalLoadID DataFlow",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_IdField": {
																		"value": "'@{item().Increment.IdField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source1": {},
																	"source2": {},
																	"WritetoDataLake": {}
																},
																"linkedServiceParameters": {
																	"source1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"WritetoDataLake": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Partition DF_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_Folder",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "Delete The Left File_IDLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_IDLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Data flow Union_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Left File_IDLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_Folder",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "FullTakeOn",
												"activities": [
													{
														"name": "Copy_Data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@if(pipeline().parameters.ColumnsNamesBlankSpaces,\n    activity('RemoveBlankSpacesColumnNames').output.firstRow.Query,\n    concat('SELECT * FROM [', item().Source.TableName,']')\n    )",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Partition DF_FullLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy_Data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete the Temp File_FullLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_FullLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "ERROR",
													"errorCode": "500"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": []
					},
					"TakeOnPeriod": {
						"type": "string",
						"defaultValue": " "
					},
					"Full_Load": {
						"type": "bool",
						"defaultValue": false
					},
					"ColumnsNamesBlankSpaces": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"FolderName": {
						"type": "String",
						"defaultValue": "Unstructured Data/CLMasterData"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net/"
					},
					"ServerName": {
						"type": "String",
						"defaultValue": "CCLMSPROD"
					},
					"DataBaseName": {
						"type": "String",
						"defaultValue": "CLMasterData"
					},
					"UserName": {
						"type": "String",
						"defaultValue": "Synapse@citylogistics.co.za"
					},
					"SecretName": {
						"type": "String",
						"defaultValue": "CLMastSecret"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "public"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"ASAEndpoint": {
						"type": "String",
						"defaultValue": "citylogistics-synapseanalytics-workspace-prod-ondemand.sql.azuresynapse.net"
					},
					"ASADataBase": {
						"type": "String",
						"defaultValue": "master"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/CLMasterData"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-22T08:33:31Z",
				"type": "Microsoft.Synapse/workspaces/pipelines"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SqlServerDataSet')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlConnection')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeParquet')]",
				"[concat(variables('workspaceId'), '/dataflows/IncrementalLoadDate DataFlow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/DataFlowIncrementalLoadIR')]",
				"[concat(variables('workspaceId'), '/dataflows/Partitioning DF')]",
				"[concat(variables('workspaceId'), '/dataflows/IncrementalLoadID DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LMS LOAD PROD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Iterate Data",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.CW_Items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If ColumnsNamesBlankSpaces",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.ColumnsNamesBlankSpaces",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "RemoveBlankSpacesColumnNames",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(' \nDECLARE @s VARCHAR(MAX) \nDECLARE @tablename VARCHAR(MAX) = ''', item().Source.TableName,''' \nSELECT @s = ISNULL(@s + '', '','''') + ''['' + c.name + '']'' + '' as [''+replace(c.name,'' '',''_'')+''] '' \nFROM sys.all_columns c join sys.tables t \nON c.object_id = t.object_id \nWHERE t.name =  @tablename \nSELECT ''SELECT '' + @s + '' FROM ['' +  @tablename + '']''  as Query')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "SqlServerDataSet",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@variables('ServerName')",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@variables('DatabaseName')",
																"type": "Expression"
															},
															"UserName": {
																"value": "@variables('UserName')",
																"type": "Expression"
															},
															"CW_SchemaName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"SecretName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"CW_TableName": {
																"value": "@item().Source.TableName",
																"type": "Expression"
															}
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If FullLoad",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.Full_Load",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Lookup Last Max Field",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('SELECT MAX(',item().Increment.IncField,')  as Field \n FROM\n    OPENROWSET(\n        BULK ','''',variables('DataLake'),variables('ContainerName'),'/',variables('FolderName'),'/',item().destination.FileName,'.parquet','''',\n        ',FORMAT = ','''PARQUET''','\n    ) AS [result]')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSqlConnection",
														"type": "DatasetReference",
														"parameters": {
															"ASAEndpoint": {
																"value": "@variables('ASAEndpoint')",
																"type": "Expression"
															},
															"ASADataBase": {
																"value": "@variables('ASADataBase')",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "Remove Old Data Incremental Data_SingleFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Lookup Last Max Field",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Remove Old Data Data_Folder",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_SingleFile",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "Remove Old Data Data_SingleFile",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "If ColumnsNamesBlankSpaces",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(pipeline().parameters.Full_Load,'FullTakeOn'\n   ,if(equals(item().Increment.IncField,item().Increment.IdField),'IdLoad'\n      ,'DateLoad'\n   )\n)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DateLoad",
												"activities": [
													{
														"name": "Incr Load DF",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy New incremental data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "IncrementalLoadDate DataFlow",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_IdField": {
																		"value": "'@{item().Increment.IdField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source1": {},
																	"source2": {},
																	"WritetoDataLake": {}
																},
																"linkedServiceParameters": {
																	"source1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"WritetoDataLake": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Partition DF",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_Folder",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "Delete The Left File_DateLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_DateLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Incr Load DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Copy New incremental data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(pipeline().parameters.ColumnsNamesBlankSpaces,\n        activity('RemoveBlankSpacesColumnNames').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,concat('''',activity('Lookup Last Max Field').output.firstRow.Field,'''')\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete The Left File_DateLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_Folder",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "IdLoad",
												"activities": [
													{
														"name": "Copy New incremental data_IDLoad",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(pipeline().parameters.ColumnsNamesBlankSpaces,\n        activity('RemoveBlankSpacesColumnNames').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,activity('Lookup Last Max Field').output.firstRow.Field\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Data flow Union_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy New incremental data_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "IncrementalLoadID DataFlow",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_IdField": {
																		"value": "'@{item().Increment.IdField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source1": {},
																	"source2": {},
																	"WritetoDataLake": {}
																},
																"linkedServiceParameters": {
																	"source1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"WritetoDataLake": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Partition DF_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_Folder",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "Delete The Left File_IDLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_IDLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Data flow Union_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Left File_IDLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_Folder",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "FullTakeOn",
												"activities": [
													{
														"name": "Copy_Data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@if(pipeline().parameters.ColumnsNamesBlankSpaces,\n    activity('RemoveBlankSpacesColumnNames').output.firstRow.Query,\n    concat('SELECT * FROM [', item().Source.TableName,']')\n    )",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Partition DF_FullLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy_Data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete the Temp File_FullLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_FullLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "ERROR",
													"errorCode": "500"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"CW_Items": {
						"type": "Array",
						"defaultValue": []
					},
					"TakeOnPeriod": {
						"type": "string",
						"defaultValue": " "
					},
					"Full_Load": {
						"type": "bool",
						"defaultValue": false
					},
					"ColumnsNamesBlankSpaces": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"FolderName": {
						"type": "String",
						"defaultValue": "Unstructured Data/LMS"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net/"
					},
					"ServerName": {
						"type": "String",
						"defaultValue": "CCLMSPROD"
					},
					"DatabaseName": {
						"type": "String",
						"defaultValue": "LogidataCC"
					},
					"UserName": {
						"type": "String",
						"defaultValue": "Synapse@citylogistics.co.za"
					},
					"SecretName": {
						"type": "String",
						"defaultValue": "LMSSecret"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "dbo"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"ASAEndpoint": {
						"type": "String",
						"defaultValue": "citylogistics-synapseanalytics-workspace-prod-ondemand.sql.azuresynapse.net"
					},
					"ASADataBase": {
						"type": "String",
						"defaultValue": "master"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/LMS"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-04T06:38:01Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SqlServerDataSet')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlConnection')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeParquet')]",
				"[concat(variables('workspaceId'), '/dataflows/IncrementalLoadDate DataFlow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/DataFlowIncrementalLoadIR')]",
				"[concat(variables('workspaceId'), '/dataflows/Partitioning DF')]",
				"[concat(variables('workspaceId'), '/dataflows/IncrementalLoadID DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ORV LOAD PROD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Iterate Data",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.CW_Items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If ColumnsNamesBlankSpaces",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.ColumnsNamesBlankSpaces",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "RemoveBlankSpacesColumnNames",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "PostgreSqlSource",
														"sqlReaderQuery": {
															"value": "@concat(' \nDECLARE @s VARCHAR(MAX) \nDECLARE @tablename VARCHAR(MAX) = ''', item().Source.TableName,''' \nSELECT @s = ISNULL(@s + '', '','''') + ''['' + c.name + '']'' + '' as [''+replace(c.name,'' '',''_'')+''] '' \nFROM sys.all_columns c join sys.tables t \nON c.object_id = t.object_id \nWHERE t.name =  @tablename \nSELECT ''SELECT '' + @s + '' FROM ['' +  @tablename + '']''  as Query')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "SqlServerDataSet",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@variables('ServerName')",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@variables('DatabaseName')",
																"type": "Expression"
															},
															"UserName": {
																"value": "@variables('UserName')",
																"type": "Expression"
															},
															"CW_SchemaName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"SecretName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"CW_TableName": {
																"value": "@item().Source.TableName",
																"type": "Expression"
															}
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If FullLoad",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.Full_Load",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Lookup Last Max Field",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('SELECT MAX(',item().Increment.IncField,')  as Field \n FROM\n    OPENROWSET(\n        BULK ','''',variables('DataLake'),'/',variables('FolderName'),'/',item().destination.FileName,'.parquet','''',\n        ',FORMAT = ','''PARQUET''','\n    ) AS [result]')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSqlConnection",
														"type": "DatasetReference",
														"parameters": {
															"ASAEndpoint": {
																"value": "@variables('ASAEndpoint')",
																"type": "Expression"
															},
															"ASADataBase": {
																"value": "@variables('ASADataBase')",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "Remove Old Data Incremental Data_SingleFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Lookup Last Max Field",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Remove Old Data Data_Folder",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_SingleFile",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "Remove Old Data Data_SingleFile",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "If ColumnsNamesBlankSpaces",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(pipeline().parameters.Full_Load,'FullTakeOn'\n   ,if(equals(item().Increment.IncField,item().Increment.IdField),'IdLoad'\n      ,'DateLoad'\n   )\n)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DateLoad",
												"activities": [
													{
														"name": "Incr Load DF",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy New incremental data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "IncrementalLoadDate DataFlow",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_IdField": {
																		"value": "'@{item().Increment.IdField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source1": {},
																	"source2": {},
																	"WritetoDataLake": {}
																},
																"linkedServiceParameters": {
																	"source1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"WritetoDataLake": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Partition DF",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_Folder",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "Delete The Left File_DateLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_DateLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Incr Load DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Copy New incremental data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "PostgreSqlSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(pipeline().parameters.ColumnsNamesBlankSpaces,\n        activity('RemoveBlankSpacesColumnNames').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,concat('''',activity('Lookup Last Max Field').output.firstRow.Field,'''')\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete The Left File_DateLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_Folder",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "IdLoad",
												"activities": [
													{
														"name": "Copy New incremental data_IDLoad",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "PostgreSqlSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(pipeline().parameters.ColumnsNamesBlankSpaces,\n        activity('RemoveBlankSpacesColumnNames').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,activity('Lookup Last Max Field').output.firstRow.Field\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Data flow Union_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy New incremental data_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "IncrementalLoadID DataFlow",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_IdField": {
																		"value": "'@{item().Increment.IdField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source1": {},
																	"source2": {},
																	"WritetoDataLake": {}
																},
																"linkedServiceParameters": {
																	"source1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"WritetoDataLake": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Partition DF_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_Folder",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "Delete The Left File_IDLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_IDLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Data flow Union_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Left File_IDLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_Folder",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "FullTakeOn",
												"activities": [
													{
														"name": "Copy_Data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "PostgreSqlSource",
																"sqlReaderQuery": {
																	"value": "@if(pipeline().parameters.ColumnsNamesBlankSpaces,\n    activity('RemoveBlankSpacesColumnNames').output.firstRow.Query,\n    concat('SELECT * FROM [', item().Source.TableName,']')\n    )",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Partition DF_FullLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy_Data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete the Temp File_FullLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_FullLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "ERROR",
													"errorCode": "500"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": []
					},
					"TakeOnPeriod": {
						"type": "string",
						"defaultValue": " "
					},
					"Full_Load": {
						"type": "bool",
						"defaultValue": false
					},
					"ColumnsNamesBlankSpaces": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"FolderName": {
						"type": "String",
						"defaultValue": "Unstructured Data/Onroute"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net/"
					},
					"ServerName": {
						"type": "String",
						"defaultValue": "orvdb.citylogistics.co.za"
					},
					"DatabaseName": {
						"type": "String",
						"defaultValue": "orv"
					},
					"UserName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"SecretName": {
						"type": "String",
						"defaultValue": "ORVSecret"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "public"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"ASAEndpoint": {
						"type": "String",
						"defaultValue": "citylogistics-synapseanalytics-workspace-ondemand.sql.azuresynapse.net"
					},
					"ASADataBase": {
						"type": "String",
						"defaultValue": "master"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/ORV"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-04T06:22:12Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SqlServerDataSet')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlConnection')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeParquet')]",
				"[concat(variables('workspaceId'), '/dataflows/IncrementalLoadDate DataFlow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/DataFlowIncrementalLoadIR')]",
				"[concat(variables('workspaceId'), '/dataflows/Partitioning DF')]",
				"[concat(variables('workspaceId'), '/dataflows/IncrementalLoadID DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SAP LOAD PROD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Iterate Data",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.CW_Items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If ColumnsNamesBlankSpaces",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.ColumnsNamesBlankSpaces",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "RemoveBlankSpacesColumnNames",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(' \nDECLARE @s VARCHAR(MAX) \nDECLARE @tablename VARCHAR(MAX) = ''', item().Source.TableName,''' \nSELECT @s = ISNULL(@s + '', '','''') + ''['' + c.name + '']'' + '' as [''+replace(c.name,'' '',''_'')+''] '' \nFROM sys.all_columns c join sys.tables t \nON c.object_id = t.object_id \nWHERE t.name =  @tablename \nSELECT ''SELECT '' + @s + '' FROM ['' +  @tablename + '']''  as Query')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "SqlServerDataSet",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@variables('ServerName')",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@variables('DatabaseName')",
																"type": "Expression"
															},
															"UserName": {
																"value": "@variables('UserName')",
																"type": "Expression"
															},
															"CW_SchemaName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"SecretName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"CW_TableName": {
																"value": "@item().Source.TableName",
																"type": "Expression"
															}
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If FullLoad",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.Full_Load",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Lookup Last Max Field",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('SELECT MAX(',item().Increment.IncField,')  as Field \n FROM\n    OPENROWSET(\n        BULK ','''',variables('DataLake'),'/',variables('FolderName'),'/',item().destination.FileName,'.parquet','''',\n        ',FORMAT = ','''PARQUET''','\n    ) AS [result]')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSqlConnection",
														"type": "DatasetReference",
														"parameters": {
															"ASAEndpoint": {
																"value": "@variables('ASAEndpoint')",
																"type": "Expression"
															},
															"ASADataBase": {
																"value": "@variables('ASADataBase')",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "Remove Old Data Incremental Data_SingleFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Lookup Last Max Field",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Remove Old Data Data_Folder",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_SingleFile",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "Remove Old Data Data_SingleFile",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "If ColumnsNamesBlankSpaces",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(pipeline().parameters.Full_Load,'FullTakeOn'\n   ,if(equals(item().Increment.IncField,item().Increment.IdField),'IdLoad'\n      ,'DateLoad'\n   )\n)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DateLoad",
												"activities": [
													{
														"name": "Incr Load DF",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy New incremental data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "IncrementalLoadDate DataFlow",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_IdField": {
																		"value": "'@{item().Increment.IdField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source1": {},
																	"source2": {},
																	"WritetoDataLake": {}
																},
																"linkedServiceParameters": {
																	"source1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"WritetoDataLake": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Partition DF",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_Folder",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "Delete The Left File_DateLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_DateLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Incr Load DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Copy New incremental data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(pipeline().parameters.ColumnsNamesBlankSpaces,\n        activity('RemoveBlankSpacesColumnNames').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,concat('''',activity('Lookup Last Max Field').output.firstRow.Field,'''')\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete The Left File_DateLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_Folder",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "IdLoad",
												"activities": [
													{
														"name": "Copy New incremental data_IDLoad",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(pipeline().parameters.ColumnsNamesBlankSpaces,\n        activity('RemoveBlankSpacesColumnNames').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,activity('Lookup Last Max Field').output.firstRow.Field\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Data flow Union_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy New incremental data_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "IncrementalLoadID DataFlow",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_IdField": {
																		"value": "'@{item().Increment.IdField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source1": {},
																	"source2": {},
																	"WritetoDataLake": {}
																},
																"linkedServiceParameters": {
																	"source1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"WritetoDataLake": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Partition DF_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_Folder",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "Delete The Left File_IDLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_IDLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Data flow Union_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Left File_IDLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_Folder",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "FullTakeOn",
												"activities": [
													{
														"name": "Copy_Data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@if(pipeline().parameters.ColumnsNamesBlankSpaces,\n    activity('RemoveBlankSpacesColumnNames').output.firstRow.Query,\n    concat('SELECT * FROM [', item().Source.TableName,']')\n    )",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Partition DF_FullLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy_Data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete the Temp File_FullLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_FullLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "ERROR",
													"errorCode": "500"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"CW_Items": {
						"type": "Array",
						"defaultValue": []
					},
					"TakeOnPeriod": {
						"type": "string",
						"defaultValue": " "
					},
					"Full_Load": {
						"type": "bool",
						"defaultValue": false
					},
					"ColumnsNamesBlankSpaces": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"variables": {
					"FolderName": {
						"type": "String",
						"defaultValue": "Unstructured Data/SAP"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net/synapse"
					},
					"ServerName": {
						"type": "String",
						"defaultValue": "CCSQL01"
					},
					"DatabaseName": {
						"type": "String",
						"defaultValue": "SBK_CityLogistics "
					},
					"UserName": {
						"type": "String",
						"defaultValue": "Synapse@citylogistics.co.za"
					},
					"SecretName": {
						"type": "String",
						"defaultValue": "SAPSecret"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "dbo"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"ASAEndpoint": {
						"type": "String",
						"defaultValue": "citylogistics-synapseanalytics-workspace-ondemand.sql.azuresynapse.net"
					},
					"ASADataBase": {
						"type": "String",
						"defaultValue": "master"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/SAP"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-04T06:38:01Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SqlServerDataSet')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlConnection')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeParquet')]",
				"[concat(variables('workspaceId'), '/dataflows/IncrementalLoadDate DataFlow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/DataFlowIncrementalLoadIR')]",
				"[concat(variables('workspaceId'), '/dataflows/Partitioning DF')]",
				"[concat(variables('workspaceId'), '/dataflows/IncrementalLoadID DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sharepoint Full Take-on')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Bearer Token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://accounts.accesscontrol.windows.net/',variables('TenantID'),'/tokens/OAuth/2')\n",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=',variables('client_id'),'@',variables('TenantID'),'&client_secret=',variables('client_secret'),'&resource=00000003-0000-0ff1-ce00-000000000000','/',variables('BaseURL'),'@',variables('TenantID'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.CW_Items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable SourceFolder",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SharePointFolderName",
										"value": {
											"value": "@item().Source.TableName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable DestFolder",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "DestFolderName",
										"value": {
											"value": "@item().Destination.FileName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable SiteURL",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SiteURL",
										"value": {
											"value": "@concat('sites/',pipeline().parameters.SharepointSiteName,'/')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get All the Files_copy1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get List of File Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of File Names').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data Folder 1_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization: Bearer ', activity('Get Bearer Token').output.access_token)}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SharePointBinary",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@{item().ServerRelativeUrl}",
													"type": "Expression"
												},
												"BaseURL": {
													"value": "@variables('BaseURL')",
													"type": "Expression"
												},
												"SiteURL": {
													"value": "@variables('SiteURL')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataLakeBinary",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@variables('ContainerName')",
													"type": "Expression"
												},
												"DestFolderName": {
													"value": "@variables('DestFolderName')",
													"type": "Expression"
												},
												"DataLake": {
													"value": "@variables('DataLake')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@{item().Name}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get List of File Names",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://',variables('BaseURL'),'/',variables('SiteURL'),'_api/web/GetFolderByServerRelativeUrl(','''','/',variables('SiteURL'),variables('SharePointFolderName'),'''',')/Files')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@{concat('Bearer ', activity('Get Bearer Token').output.access_token)}",
									"type": "Expression"
								},
								"Accept": "application/json"
							},
							"body": "grant_type=client_credentials&client_id=bd146d1a-7d3f-4b57-8d4e-c794594a7f7f@0e23ddde-1cba-42eb-9760-e698ce0a9b00&client_secret=tI58Q~wsUQhC0tnGQ_KenYWvWfbqWPevgSKm6dsT&resource=00000003-0000-0ff1-ce00-000000000000/citycouriers365.sharepoint.com@0e23ddde-1cba-42eb-9760-e698ce0a9b00"
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"CW_Items": {
						"type": "array"
					},
					"SharepointSiteName": {
						"type": "string",
						"defaultValue": "DataWarehouse"
					}
				},
				"variables": {
					"TenantID": {
						"type": "String",
						"defaultValue": "0e23ddde-1cba-42eb-9760-e698ce0a9b00"
					},
					"client_id": {
						"type": "String",
						"defaultValue": "bd146d1a-7d3f-4b57-8d4e-c794594a7f7f"
					},
					"client_secret": {
						"type": "String",
						"defaultValue": "tI58Q~wsUQhC0tnGQ_KenYWvWfbqWPevgSKm6dsT"
					},
					"BaseURL": {
						"type": "String",
						"defaultValue": "citycouriers365.sharepoint.com"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorage.dfs.core.windows.net/"
					},
					"SiteURL": {
						"type": "String"
					},
					"SharePointFolderName": {
						"type": "String"
					},
					"DestFolderName": {
						"type": "String"
					},
					"FileList": {
						"type": "Array"
					},
					"FolderContent": {
						"type": "Array"
					},
					"Temp": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/SharePoint"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/SharePointBinary')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeBinary')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TMS LOAD PROD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Iterate Data",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.CW_Items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If ColumnsNamesBlankSpaces",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.ColumnsNamesBlankSpaces",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "RemoveBlankSpacesColumnNames",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "PostgreSqlSource",
														"sqlReaderQuery": {
															"value": "@concat(' \nDECLARE @s VARCHAR(MAX) \nDECLARE @tablename VARCHAR(MAX) = ''', item().Source.TableName,''' \nSELECT @s = ISNULL(@s + '', '','''') + ''['' + c.name + '']'' + '' as [''+replace(c.name,'' '',''_'')+''] '' \nFROM sys.all_columns c join sys.tables t \nON c.object_id = t.object_id \nWHERE t.name =  @tablename \nSELECT ''SELECT '' + @s + '' FROM ['' +  @tablename + '']''  as Query')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "SqlServerDataSet",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@variables('ServerName')",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@variables('DatabaseName')",
																"type": "Expression"
															},
															"UserName": {
																"value": "@variables('UserName')",
																"type": "Expression"
															},
															"CW_SchemaName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"SecretName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"CW_TableName": {
																"value": "@item().Source.TableName",
																"type": "Expression"
															}
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If FullLoad",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.Full_Load",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Lookup Last Max Field",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('SELECT MAX(',item().Increment.IncField,')  as Field \n FROM\n    OPENROWSET(\n        BULK ','''',variables('DataLake'),'/',variables('FolderName'),'/',item().destination.FileName,'.parquet','''',\n        ',FORMAT = ','''PARQUET''','\n    ) AS [result]')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSqlConnection",
														"type": "DatasetReference",
														"parameters": {
															"ASAEndpoint": {
																"value": "@variables('ASAEndpoint')",
																"type": "Expression"
															},
															"ASADataBase": {
																"value": "@variables('ASADataBase')",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "Remove Old Data Incremental Data_SingleFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Lookup Last Max Field",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Remove Old Data Data_Folder",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_SingleFile",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "Remove Old Data Data_SingleFile",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "If ColumnsNamesBlankSpaces",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(pipeline().parameters.Full_Load,'FullTakeOn'\n   ,if(equals(item().Increment.IncField,item().Increment.IdField),'IdLoad'\n      ,'DateLoad'\n   )\n)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DateLoad",
												"activities": [
													{
														"name": "Incr Load DF",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy New incremental data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "IncrementalLoadDate DataFlow",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_IdField": {
																		"value": "'@{item().Increment.IdField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source1": {},
																	"source2": {},
																	"WritetoDataLake": {}
																},
																"linkedServiceParameters": {
																	"source1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"WritetoDataLake": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Partition DF",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_Folder",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "Delete The Left File_DateLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_DateLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Incr Load DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Copy New incremental data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "PostgreSqlSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(pipeline().parameters.ColumnsNamesBlankSpaces,\n        activity('RemoveBlankSpacesColumnNames').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,concat('''',activity('Lookup Last Max Field').output.firstRow.Field,'''')\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete The Left File_DateLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_Folder",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "IdLoad",
												"activities": [
													{
														"name": "Copy New incremental data_IDLoad",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "PostgreSqlSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(pipeline().parameters.ColumnsNamesBlankSpaces,\n        activity('RemoveBlankSpacesColumnNames').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,activity('Lookup Last Max Field').output.firstRow.Field\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Data flow Union_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy New incremental data_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "IncrementalLoadID DataFlow",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_IdField": {
																		"value": "'@{item().Increment.IdField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source1": {},
																	"source2": {},
																	"WritetoDataLake": {}
																},
																"linkedServiceParameters": {
																	"source1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"WritetoDataLake": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Partition DF_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_Folder",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "Delete The Left File_IDLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_IDLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Data flow Union_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Left File_IDLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_Folder",
																"dependencyConditions": [
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "FullTakeOn",
												"activities": [
													{
														"name": "Copy_Data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "PostgreSqlSource",
																"sqlReaderQuery": {
																	"value": "@if(pipeline().parameters.ColumnsNamesBlankSpaces,\n    activity('RemoveBlankSpacesColumnNames').output.firstRow.Query,\n    concat('SELECT * FROM [', item().Source.TableName,']')\n    )",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Partition DF_FullLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy_Data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIncrementalLoadIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete the Temp File_FullLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_FullLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "ERROR",
													"errorCode": "500"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": []
					},
					"TakeOnPeriod": {
						"type": "string",
						"defaultValue": " "
					},
					"Full_Load": {
						"type": "bool",
						"defaultValue": false
					},
					"ColumnsNamesBlankSpaces": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"FolderName": {
						"type": "String",
						"defaultValue": "Unstructured Data/TMS"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net/"
					},
					"ServerName": {
						"type": "String",
						"defaultValue": "orvdb.citylogistics.co.za"
					},
					"DatabaseName": {
						"type": "String",
						"defaultValue": "tmsapi"
					},
					"UserName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"SecretName": {
						"type": "String",
						"defaultValue": "TMSSecret"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "public"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"ASAEndpoint": {
						"type": "String",
						"defaultValue": "citylogistics-synapseanalytics-workspace-ondemand.sql.azuresynapse.net"
					},
					"ASADataBase": {
						"type": "String",
						"defaultValue": "master"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/TMS"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-04T06:22:12Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SqlServerDataSet')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlConnection')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeParquet')]",
				"[concat(variables('workspaceId'), '/dataflows/IncrementalLoadDate DataFlow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/DataFlowIncrementalLoadIR')]",
				"[concat(variables('workspaceId'), '/dataflows/Partitioning DF')]",
				"[concat(variables('workspaceId'), '/dataflows/IncrementalLoadID DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlConnection')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"ASAEndpoint": {
							"value": "@dataset().ASAEndpoint",
							"type": "Expression"
						},
						"ASADataBase": {
							"value": "@dataset().ASADataBase",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ASAEndpoint": {
						"type": "string"
					},
					"ASADataBase": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataLakeBinary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
					"type": "LinkedServiceReference",
					"parameters": {
						"DataLake": {
							"value": "@dataset().DataLake",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"DestFolderName": {
						"type": "string"
					},
					"DataLake": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DestFolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataLakeParquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
					"type": "LinkedServiceReference",
					"parameters": {
						"DataLake": {
							"value": "@dataset().DataLake",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"CW_FolderName": {
						"type": "string"
					},
					"CW_FileName": {
						"type": "string"
					},
					"ContainerName": {
						"type": "string"
					},
					"DataLake": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().CW_FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().CW_FolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_03f')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Unstructured Data",
						"fileSystem": "synapse"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OnPremSambaBinary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremFileServerLinkedServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					},
					"DirectoryName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DirectoryName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/OnPremFileServerLinkedServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PostgresSQL_Dataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSQL",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"CW_SchemaName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					},
					"CW_TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().CW_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().CW_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/PostgreSQL')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SharePointBinary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SharePointHTTPLS",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseUrl": {
							"value": "@dataset().BaseURL",
							"type": "Expression"
						},
						"FileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"SiteURL": {
							"value": "@dataset().SiteURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					},
					"BaseURL": {
						"type": "string"
					},
					"SiteURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SharePointHTTPLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_03f')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "citylogisticsstoragedevdatalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Unstructured Data",
						"fileSystem": "synapse"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogisticsstoragedevdatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServerDataSet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer_WindowsAuth",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"CW_SchemaName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					},
					"CW_TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().CW_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().CW_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SqlServer_WindowsAuth')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureKeyVaultCity')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVaultCity_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"ASAEndpoint": {
						"type": "string"
					},
					"ASADataBase": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OnPremFileServerLinkedServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('OnPremFileServerLinkedServer_properties_typeProperties_host')]",
					"userId": "[parameters('OnPremFileServerLinkedServer_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultCity",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIRCityIntra",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIRCityIntra')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVaultCity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PostgreSQL')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "PostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('PostgreSQL_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultCity",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVaultCity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SharePointHTTPLS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"BaseUrl": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"SiteURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('SharePointHTTPLS_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServer_WindowsAuth')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer_WindowsAuth_connectionString')]",
					"userName": "[parameters('SqlServer_WindowsAuth_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultCity",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIRCityIntra",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIRCityIntra')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVaultCity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DataLake": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/citylogisticsstoragedevdatalake')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('citylogisticsstoragedevdatalake_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Full Take-on PROD_Daily Trigger Midnight')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the daily trigger at midnight",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CLMasterData Full Take-on_PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"cw_items": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_cw_items')]",
							"TakeOnPeriod": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_TakeOnPeriod')]",
							"Full_Load": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_ColumnsNamesBlankSpaces')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "LMS LOAD PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"CW_Items": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_CW_Items')]",
							"TakeOnPeriod": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_TakeOnPeriod')]",
							"Full_Load": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_ColumnsNamesBlankSpaces')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-10-05T08:43:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								0
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday",
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/CLMasterData Full Take-on_PROD')]",
				"[concat(variables('workspaceId'), '/pipelines/LMS LOAD PROD')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Full Take-on PROD_Daily Trigger Rest')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the Daily trigger for the rest of the day\n",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-10-05T08:44:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								10,
								12,
								15
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday",
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Incre PROD_Daily Trigger Midnight')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the daily trigger at midnight",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "LMS LOAD PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"CW_Items": "[parameters('Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_CW_Items')]",
							"TakeOnPeriod": "[parameters('Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_TakeOnPeriod')]",
							"Full_Load": "[parameters('Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_ColumnsNamesBlankSpaces')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-10-05T08:43:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								0
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday",
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/LMS LOAD PROD')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Incre PROD_Daily Trigger Rest')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the Daily trigger for the rest of the day\n",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "LMS LOAD PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"CW_Items": "[parameters('Incre PROD_Daily Trigger Rest_properties_LMS LOAD PROD_parameters_CW_Items')]",
							"TakeOnPeriod": "[parameters('Incre PROD_Daily Trigger Rest_properties_LMS LOAD PROD_parameters_TakeOnPeriod')]",
							"Full_Load": "[parameters('Incre PROD_Daily Trigger Rest_properties_LMS LOAD PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Incre PROD_Daily Trigger Rest_properties_LMS LOAD PROD_parameters_ColumnsNamesBlankSpaces')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-10-05T08:44:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								10,
								12,
								15
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday",
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/LMS LOAD PROD')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Incre PROD_Weekly Trigger Rest')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the trigger for the rest of the day on a Sunday",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-10-09T07:33:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								10,
								15,
								0
							],
							"weekDays": [
								"Sunday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rolling PROD_Weekly Trigger')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the trigger for once a week 12:00 on a Sunday",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-10-01T00:56:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								12
							],
							"weekDays": [
								"Sunday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataFlowIncrementalLoadIR')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 16,
							"timeToLive": 5,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SelfHostedIRCityIntra')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IncrementalLoadDate DataFlow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "WritetoDataLake"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     cw_FolderName as string,",
						"     cw_FileName as string,",
						"     cw_IncFolderName as string,",
						"     cw_IdField as string,",
						"     ContainerName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: ($cw_FolderName),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source1",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: ($cw_IncFolderName),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source2",
						"source1, source2 exists($cw_IdField == $cw_IdField,",
						"     negate:false,",
						"     broadcast: 'right')~> exists1",
						"exists1, source2 union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: (concat($cw_IncFolderName,'/T1/',$cw_FileName)),",
						"     truncate: true,",
						"     compressionCodec: 'snappy',",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('dynamicRange', 64,",
						"          $cw_IdField",
						"     )) ~> WritetoDataLake"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IncrementalLoadID DataFlow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "WritetoDataLake"
						}
					],
					"transformations": [
						{
							"name": "UnionOnID"
						}
					],
					"scriptLines": [
						"parameters{",
						"     cw_FolderName as string,",
						"     cw_FileName as string,",
						"     cw_IncFolderName as string,",
						"     cw_IdField as string,",
						"     ContainerName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: ($cw_FolderName),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source1",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: ($cw_IncFolderName),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source2",
						"source1, source2 union(byName: true)~> UnionOnID",
						"UnionOnID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: (concat($cw_IncFolderName,'/T1/',$cw_FileName)),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('dynamicRange', 64,",
						"          $cw_IdField",
						"     )) ~> WritetoDataLake"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Partitioning DF')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     cw_FileName as string,",
						"     cw_FolderName as string,",
						"     cw_IncFolderName as string,",
						"     cw_incField as string,",
						"     ContainerName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: (concat($cw_IncFolderName,'/T1')),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source2",
						"source2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'synapse',",
						"     folderPath: (concat($cw_FolderName,'/',$cw_FileName)),",
						"     truncate: true,",
						"     compressionCodec: 'snappy',",
						"     umask: 0776,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STBillZone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STBillZone') )\n    DROP EXTERNAL TABLE dbo.D_STBillZone\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STBillZone (\n    [lms_billzone_id] int,\n    [lms_billzone_description] nvarchar(4000),\n    [lms_billzone_zonemasterid] int,\n    [lms_billzone_countryid] int\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stbillzone.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STBillZone \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STBillZoneRoute')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STBillZoneRoute') )\n    DROP EXTERNAL TABLE dbo.D_STBillZoneRoute\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STBillZoneRoute (\n    [lms_billzoneroute_id] int,\n    [lms_billzoneroute_description] nvarchar(4000),\n    [lms_billzoneroute_zoneid] int,\n    [lms_billzoneroute_zrscode] nvarchar(4000),\n    [lms_billzoneroute_zonerouteorder] int,\n    [lms_billzoneroute_zonetype] nvarchar(4000),\n    [lms_billzoneroute_broutemasterid] int,\n    [lms_billzoneroute_broutecode] nvarchar(4000)\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stbillzoneroute.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STBillZoneRoute \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STDepot')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STDepot') )\n    DROP EXTERNAL TABLE dbo.D_STDepot\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STDepot (\n    [md_depot_id] int,\n    [md_depot_itemlabel] nvarchar(4000),\n    [md_depot_itemvalue] nvarchar(4000),\n    [md_depot_depotname] nvarchar(4000),\n    [md_depot_parentdepotcode] nvarchar(4000),\n    [md_depot_division] nvarchar(4000),\n    [md_depot_address] nvarchar(4000),\n    [md_depot_latitude] numeric(18,2),\n    [md_depot_longitude] numeric(18,2),\n    [md_depot_sapdepreciationaccountcode] nvarchar(4000),\n    [md_depot_mfrauthoriser] nvarchar(4000),\n    [md_depot_mfrapplicationflag] int,\n    [md_depot_activeflag] int,\n    [md_depot_operationsmanager] nvarchar(4000),\n    [md_depot_branchmanager] nvarchar(4000),\n    [md_depot_fleetmanager] nvarchar(4000)\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdepot.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STDepot \nGO\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STDepotOrv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STDepotOrv') )\n    DROP EXTERNAL TABLE dbo.D_STDepotOrv\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STDepotOrv (\n    [orv_depot_id] bigint,\n    [orv_depot_name] nvarchar(4000),\n    [orv_depot_depcode] nvarchar(4000),\n    [orv_depot_address] nvarchar(4000),\n    [orv_depot_suburb] nvarchar(4000),\n    [orv_depot_city] nvarchar(4000),\n    [orv_depot_zipcode] nvarchar(4000),\n    [orv_depot_region] nvarchar(4000),\n    [orv_depot_lat] float,\n    [orv_depot_lng] float,\n    [orv_depot_placeid] nvarchar(4000),\n    [orv_depot_w3w] nvarchar(4000),\n    [orv_depot_insdate] datetime2(7),\n    [orv_depot_update] datetime2(7),\n    [orv_depot_lmsid] int,\n    [orv_depot_country] nvarchar(4000),\n    [orv_depot_status] nvarchar(4000)\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdepotorv.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STDepotOrv \nGO\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STDispatchSegment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STDispatchSegment') )\n    DROP EXTERNAL TABLE dbo.D_STDispatchSegment\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STDispatchSegment (\n    [orv_dispatchsegment_id] bigint,\n    [orv_dispatchsegment_fromdelid] bigint,\n    [orv_dispatchsegment_todelid] bigint,\n    [orv_dispatchsegment_distance] int,\n    [orv_dispatchsegment_duration] int,\n    [orv_dispatchsegment_did] bigint,\n    [orv_dispatchsegment_tollcost] bigint,\n    [orv_dispatchsegment_fuelcost] bigint,\n    [orv_dispatchsegment_inscost] bigint,\n    [orv_dispatchsegment_labourcost] bigint,\n    [orv_dispatchsegment_maintcost] bigint,\n    [orv_dispatchsegment_cpicost] bigint,\n    [orv_dispatchsegment_vehicleclass] nvarchar(4000),\n    [orv_dispatchsegment_fromlat] float,\n    [orv_dispatchsegment_fromlng] float,\n    [orv_dispatchsegment_tolat] float,\n    [orv_dispatchsegment_tolng] float,\n    [orv_dispatchsegment_departuredate] datetime2(7),\n    [orv_dispatchsegment_arrivaldate] datetime2(7),\n    [orv_dispatchsegment_debriefeddate] datetime2(7),\n    [orv_dispatchsegment_optimized] int,\n    [orv_dispatchsegment_segmentorder] int,\n    [orv_dispatchsegment_customized] int,\n    [orv_dispatchsegment_parcelct] int\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdispatchsegment.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STDispatchSegment\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STDriverPay')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STDriverPay') )\n    DROP EXTERNAL TABLE dbo.D_STDriverPay\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STDriverPay (\n    [tms_driverpay_id] bigint,\n    [tms_driverpay_routeid] bigint,\n    [tms_driverpay_triprate] int,\n    [tms_driverpay_mealrate] int,\n    [tms_driverpay_linkrate] int,\n    [tms_driverpay_sleepoverrate] int,\n    [tms_driverpay_numsleepover] int,\n    [tms_driverpay_nummeal] int,\n    [tms_driverpay_validfromdate] datetime2(7),\n    [tms_driverpay_validtodate] datetime2(7),\n    [tms_driverpay_insdate] datetime2(7),\n    [tms_driverpay_moddate] datetime2(7),\n    [tms_driverpay_insby] bigint,\n    [tms_driverpay_airtimerate] int,\n    [tms_driverpay_status] nvarchar(4000),\n    [tms_driverpay_legacyid] int,\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdriverpay.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STDriverPay \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STFuelCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STFuelCard') )\n    DROP EXTERNAL TABLE dbo.D_STFuelCard\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STFuelCard (\n    [tms_fuelcard_id] bigint,\n    [tms_fuelcard_eid] bigint,\n    [tms_fuelcard_entity] nvarchar(4000),\n    [tms_fuelcard_baseprice] int,\n    [tms_fuelcard_routeid] bigint,\n    [tms_fuelcard_operatingpercentage] int,\n    [tms_fuelcard_insdate] datetime2(7),\n    [tms_fuelcard_activefromdate] datetime2(7),\n    [tms_fuelcard_activetodate] datetime2(7),\n    [tms_fuelcard_moddate] datetime2(7),\n    [tms_fuelcard_status] nvarchar(4000),\n    [tms_fuelcard_insby] bigint,\n    [tms_fuelcard_zoneid] bigint,\n    [tms_fuelcard_legacyid] bigint,\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stfuelcard.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STFuelCard \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STFuelZone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STFuelZone') )\n    DROP EXTERNAL TABLE dbo.D_STFuelZone\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STFuelZone (\n    [tms_fuelzone_id] bigint,\n    [tms_fuelzone_zonename] nvarchar(4000),\n    [tms_fuelzone_rulingprice] int,\n    [tms_fuelzone_insdate] datetime2(7),\n    [tms_fuelzone_moddate] datetime2(7),\n    [tms_fuelzone_insby] bigint,\n    [tms_fuelzone_lastrulingprice] int,\n    [tms_fuelzone_legacyid] bigint,\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stfuelzone.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STFuelZone \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STFuelZoneHistory')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STFuelZoneHistory') )\n    DROP EXTERNAL TABLE dbo.D_STFuelZoneHistory\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STFuelZoneHistory (\n    [tms_fuelzonehistory_id] bigint,\n    [tms_fuelzonehistory_zoneid] bigint,\n    [tms_fuelzonehistory_rulingprice] int,\n    [tms_fuelzonehistory_validfromdate] bigint,\n    [tms_fuelzonehistory_validtodate] bigint,\n    [tms_fuelzonehistory_editby] bigint,\n    [tms_fuelzonehistory_insdate] datetime2(7),\n    [tms_fuelzonehistory_moddate] datetime2(7),\n\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stfuelzonehistory.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STFuelZoneHistory \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STInServiceReasons')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STInServiceReasons') )\n    DROP EXTERNAL TABLE dbo.D_STInServiceReasons\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STInServiceReasons (\n\t[lms_inservicereason_id] int,\n\t[lms_inservicereason_reasongroupid] int,\n\t[lms_reasongroup_description] nvarchar(4000),\n\t[lms_inservicereason_reason] nvarchar(4000),\n\t[lms_inservicereason_valid] int\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stinservicereasons.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STInServiceReasons \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STLMSBillCustomer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STLMSBillCustomer') )\n    DROP EXTERNAL TABLE dbo.D_STLMSBillCustomer\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STLMSBillCustomer (\n    [lms_customer_id] int,\n    [lms_customer_activeflag] int,\n    [lms_customer_adres1] nvarchar(4000),\n    [lms_customer_adres2] nvarchar(4000),\n    [lms_customer_appointment] int,\n    [lms_customer_areadesc] nvarchar(4000),\n    [lms_customer_autoemailflag] int,\n    [lms_customer_bill_routeid] int,\n    [lms_customer_bill_servicetypeid] int,\n    [lms_customer_bill_zonerouteid] int,\n    [lms_customer_brouteid] int,\n    [lms_customer_btype] int,\n    [lms_customer_ccdepot] nvarchar(4000),\n    [lms_customer_ccroute] nvarchar(4000),\n    [lms_customer_chainstoreflag] int,\n    [lms_customer_consperord] int,\n    [lms_customer_contactperson] nvarchar(4000),\n    [lms_customer_countrycode] nvarchar(4000),\n    [lms_customer_cref] nvarchar(4000),\n    [lms_customer_cref2] nvarchar(4000),\n    [lms_customer_crouteid] nvarchar(4000),\n    [lms_customer_ctype] int,\n    [lms_customer_custaccid] int,\n    [lms_customer_custgroupid] int,\n    [lms_customer_custmainid] int,\n    [lms_customer_custrateid] int,\n    [lms_customer_custroutegroupid] int,\n    [lms_customer_custservicedays] numeric(18,2),\n    [lms_customer_custservicetime] numeric(18,2),\n    [lms_customer_dc] int,\n    [lms_customer_defdelpcode] nvarchar(4000),\n    [lms_customer_deliverydepotid] int,\n    [lms_customer_deliverytype] nvarchar(4000),\n    [lms_customer_destinationlocationcode] nvarchar(4000),\n    [lms_customer_dualbillcourier] nvarchar(4000),\n    [lms_customer_email] nvarchar(4000),\n    [lms_customer_faxno] nvarchar(4000),\n    [lms_customer_fctype] int,\n    [lms_customer_flevy] numeric(18,2),\n    [lms_customer_incompleteorderchkflag] int,\n    [lms_customer_insertdate] datetime2(7),\n    [lms_customer_isbillto] int,\n    [lms_customer_isbooking] int,\n    [lms_customer_ishighvolume] int,\n    [lms_customer_ismanual] int,\n    [lms_customer_lastupdate] datetime2(7),\n    [lms_customer_locationtypecode] nvarchar(4000),\n    [lms_customer_maxcartons] int,\n    [lms_customer_name] nvarchar(4000),\n    [lms_customer_nddid] int,\n    [lms_customer_onholdid] int,\n    [lms_customer_pcode] nvarchar(4000),\n    [lms_customer_pcodeid] int,\n    [lms_customer_servrouteid] int,\n    [lms_customer_srouteid] int,\n    [lms_customer_storeid] int,\n    [lms_customer_suburb] nvarchar(4000),\n    [lms_customer_telno] nvarchar(4000),\n    [lms_customer_town] nvarchar(4000),\n    [lms_customer_volfact] numeric(18,2),\n    [lms_customer_wtype] int,\n    [orv_customer_id] bigint,\n    [orv_customer_name] nvarchar(4000),\n    [orv_customer_contact] nvarchar(4000),\n    [orv_customer_email] nvarchar(4000),\n    [orv_customer_mobileno] nvarchar(4000),\n    [orv_customer_landline] nvarchar(4000),\n    [orv_customer_ctype] nvarchar(4000),\n    [orv_customer_parent] bigint,\n    [orv_customer_lastupdate] datetime2(7),\n    [orv_customer_lmsid] int,\n    [orv_customer_srouteid] bigint,\n    [orv_customer_verified] int,\n    [orv_customer_defaultmaildomain] nvarchar(4000),\n    [orv_customer_autoassignticketid] bigint,\n    [orv_customer_sendinfodel] int,\n    [orv_customer_anonemailcustsupportemail] nvarchar(4000),\n    [orv_customer_anonemailcustsupporttel] nvarchar(4000),\n    [orv_customer_cref] int,\n    [orv_customer_division] int,\n    [orv_customer_ecomm] int,\n    [orv_customer_preverifiedaddid] bigint,\n    [orv_customer_mallname] nvarchar(4000),\n    [orv_customer_mallid] bigint,\n    [orv_customer_mallflag] int,\n    [orv_customer_malllmsid] bigint,\n    [orv_customer_highvolume] int,\n    [orv_customer_custreference] nvarchar(4000),\n    [orv_customer_unverdate] bigint,\n    [orv_customer_verdate] bigint,\n    [orv_customer_groupid] bigint,\n    [orv_customer_postalcodecustgroupid] nvarchar(4000),\n    [orv_customer_webhookauthcredential] nvarchar(4000),\n    [orv_customer_mergedinto] bigint,\n    [orv_customer_cusmergedate] bigint,\n    [orv_customer_customerref] nvarchar(4000),\n    [orv_customer_routemaint] int,\n    [lms_customer_billcustid] int,\n    [lms_customer_billcustbillcustid] int,\n    [lms_customer_billcustincovalue] int,\n    [lms_customer_billcustdaterangelimit] int,\n    [lms_customer_billcuststatus] int,\n    [lms_customer_billcustnote] nvarchar(4000),\n    [lms_customer_billcustcustgroupid] int,\n    [lms_customer_billcustactiveflag] int,\n    [lms_customer_billcustrouterateeffectivedate] datetime2(7),\n    [lms_customer_billcustratesaddedflag] int,\n    [lms_customer_billcustibtratesflag] int,\n    [lms_customer_billcustslidingscaleflag] int,\n    [lms_customer_billcustsapflag] int,\n    [lms_customer_billcustsapcode] nvarchar(4000),\n    [lms_customer_billcustsapcustname] nvarchar(4000),\n    [lms_customer_billcustaveragepclrateflag] int,\n    [lms_customer_billcustaveragepclkg] numeric(18,2),\n    [lms_customer_billcustbilldatestart] int,\n    [lms_customer_billcustitemcode] nvarchar(4000),\n    [lms_customer_billcustservicetypeflag] int,\n    [lms_customer_billcustreturnreverserateflag] int,\n    [lms_customer_billcustminnoofpcls] int,\n    [lms_customer_billcustproductcategoryid] int,\n    [lms_customer_billcustsamedayconsolidation] int,\n    [lms_customer_billcustrategroupid] int,\n    [lms_customer_billcustrisksurchargeflag] int,\n    [lms_customer_billcustapplyavgvolweight] int,\n    [lms_customer_billcustavgvolweight] numeric(18,2),\n    [lms_customer_billcustecommcustomerflag] int,\n    [lms_customer_billcustleadtimestructureid] int,\n    [lms_customer_billcustrecalcinprogress] int,\n    [lms_customer_billcustrecalcuserid] int,\n    [lms_customer_billcustneedwebhook] int,\n    [lms_customer_billcustroutemaint] int,\n    [lms_customer_billcustlhdistrflag] int,\n    [lms_customer_billcustgroupid] int,\n    [lms_customer_billcustgroupdescription] nvarchar(4000),\n    [lms_customer_billcustgroupgrouptypeid] int,\n    [lms_customer_billcustgrouptypeid] int,\n    [lms_customer_billcustgrouptypedescription] nvarchar(4000)\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stbillcustomer.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STLMSBillCustomer \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STLMSDeliveryPickupCustomer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STLMSDeliveryPickupCustomer') )\n    DROP EXTERNAL TABLE dbo.D_STLMSDeliveryPickupCustomer\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STLMSDeliveryPickupCustomer (\n    [lms_customer_id] int,\n    [lms_customer_activeflag] int,\n    [lms_customer_adres1] nvarchar(4000),\n    [lms_customer_adres2] nvarchar(4000),\n    [lms_customer_appointment] int,\n    [lms_customer_areadesc] nvarchar(4000),\n    [lms_customer_autoemailflag] int,\n    [lms_customer_bill_routeid] int,\n    [lms_customer_bill_servicetypeid] int,\n    [lms_customer_bill_zonerouteid] int,\n    [lms_customer_brouteid] int,\n    [lms_customer_btype] int,\n    [lms_customer_ccdepot] nvarchar(4000),\n    [lms_customer_ccroute] nvarchar(4000),\n    [lms_customer_chainstoreflag] int,\n    [lms_customer_consperord] int,\n    [lms_customer_contactperson] nvarchar(4000),\n    [lms_customer_countrycode] nvarchar(4000),\n    [lms_customer_cref] nvarchar(4000),\n    [lms_customer_cref2] nvarchar(4000),\n    [lms_customer_crouteid] nvarchar(4000),\n    [lms_customer_ctype] int,\n    [lms_customer_custaccid] int,\n    [lms_customer_custgroupid] int,\n    [lms_customer_custmainid] int,\n    [lms_customer_custrateid] int,\n    [lms_customer_custroutegroupid] int,\n    [lms_customer_custservicedays] numeric(18,2),\n    [lms_customer_custservicetime] numeric(18,2),\n    [lms_customer_dc] int,\n    [lms_customer_defdelpcode] nvarchar(4000),\n    [lms_customer_deliverydepotid] int,\n    [lms_customer_deliverytype] nvarchar(4000),\n    [lms_customer_destinationlocationcode] nvarchar(4000),\n    [lms_customer_dualbillcourier] nvarchar(4000),\n    [lms_customer_email] nvarchar(4000),\n    [lms_customer_faxno] nvarchar(4000),\n    [lms_customer_fctype] int,\n    [lms_customer_flevy] numeric(18,2),\n    [lms_customer_incompleteorderchkflag] int,\n    [lms_customer_insertdate] datetime2(7),\n    [lms_customer_isbillto] int,\n    [lms_customer_isbooking] int,\n    [lms_customer_ishighvolume] int,\n    [lms_customer_ismanual] int,\n    [lms_customer_lastupdate] datetime2(7),\n    [lms_customer_locationtypecode] nvarchar(4000),\n    [lms_customer_maxcartons] int,\n    [lms_customer_name] nvarchar(4000),\n    [lms_customer_nddid] int,\n    [lms_customer_onholdid] int,\n    [lms_customer_pcode] nvarchar(4000),\n    [lms_customer_pcodeid] int,\n    [lms_customer_servrouteid] int,\n    [lms_customer_srouteid] int,\n    [lms_customer_storeid] int,\n    [lms_customer_suburb] nvarchar(4000),\n    [lms_customer_telno] nvarchar(4000),\n    [lms_customer_town] nvarchar(4000),\n    [lms_customer_volfact] numeric(18,2),\n    [lms_customer_wtype] int,\n    [orv_customer_id] bigint,\n    [orv_customer_name] nvarchar(4000),\n    [orv_customer_contact] nvarchar(4000),\n    [orv_customer_email] nvarchar(4000),\n    [orv_customer_mobileno] nvarchar(4000),\n    [orv_customer_landline] nvarchar(4000),\n    [orv_customer_ctype] nvarchar(4000),\n    [orv_customer_parent] bigint,\n    [orv_customer_lastupdate] datetime2(7),\n    [orv_customer_lmsid] int,\n    [orv_customer_srouteid] bigint,\n    [orv_customer_verified] int,\n    [orv_customer_defaultmaildomain] nvarchar(4000),\n    [orv_customer_autoassignticketid] bigint,\n    [orv_customer_sendinfodel] int,\n    [orv_customer_anonemailcustsupportemail] nvarchar(4000),\n    [orv_customer_anonemailcustsupporttel] nvarchar(4000),\n    [orv_customer_cref] int,\n    [orv_customer_division] int,\n    [orv_customer_ecomm] int,\n    [orv_customer_preverifiedaddid] bigint,\n    [orv_customer_mallname] nvarchar(4000),\n    [orv_customer_mallid] bigint,\n    [orv_customer_mallflag] int,\n    [orv_customer_malllmsid] bigint,\n    [orv_customer_highvolume] int,\n    [orv_customer_custreference] nvarchar(4000),\n    [orv_customer_unverdate] bigint,\n    [orv_customer_verdate] bigint,\n    [orv_customer_groupid] bigint,\n    [orv_customer_postalcodecustgroupid] nvarchar(4000),\n    [orv_customer_webhookauthcredential] nvarchar(4000),\n    [orv_customer_mergedinto] bigint,\n    [orv_customer_cusmergedate] bigint,\n    [orv_customer_customerref] nvarchar(4000),\n    [orv_customer_routemaint] int,\n    [lms_customer_billcustid] int,\n    [lms_customer_billcustbillcustid] int,\n    [lms_customer_billcustincovalue] int,\n    [lms_customer_billcustdaterangelimit] int,\n    [lms_customer_billcuststatus] int,\n    [lms_customer_billcustnote] nvarchar(4000),\n    [lms_customer_billcustcustgroupid] int,\n    [lms_customer_billcustactiveflag] int,\n    [lms_customer_billcustrouterateeffectivedate] datetime2(7),\n    [lms_customer_billcustratesaddedflag] int,\n    [lms_customer_billcustibtratesflag] int,\n    [lms_customer_billcustslidingscaleflag] int,\n    [lms_customer_billcustsapflag] int,\n    [lms_customer_billcustsapcode] nvarchar(4000),\n    [lms_customer_billcustsapcustname] nvarchar(4000),\n    [lms_customer_billcustaveragepclrateflag] int,\n    [lms_customer_billcustaveragepclkg] numeric(18,2),\n    [lms_customer_billcustbilldatestart] int,\n    [lms_customer_billcustitemcode] nvarchar(4000),\n    [lms_customer_billcustservicetypeflag] int,\n    [lms_customer_billcustreturnreverserateflag] int,\n    [lms_customer_billcustminnoofpcls] int,\n    [lms_customer_billcustproductcategoryid] int,\n    [lms_customer_billcustsamedayconsolidation] int,\n    [lms_customer_billcustrategroupid] int,\n    [lms_customer_billcustrisksurchargeflag] int,\n    [lms_customer_billcustapplyavgvolweight] int,\n    [lms_customer_billcustavgvolweight] numeric(18,2),\n    [lms_customer_billcustecommcustomerflag] int,\n    [lms_customer_billcustleadtimestructureid] int,\n    [lms_customer_billcustrecalcinprogress] int,\n    [lms_customer_billcustrecalcuserid] int,\n    [lms_customer_billcustneedwebhook] int,\n    [lms_customer_billcustroutemaint] int,\n    [lms_customer_billcustlhdistrflag] int,\n    [lms_customer_billcustgroupid] int,\n    [lms_customer_billcustgroupdescription] nvarchar(4000),\n    [lms_customer_billcustgroupgrouptypeid] int,\n    [lms_customer_billcustgrouptypeid] int,\n    [lms_customer_billcustgrouptypedescription] nvarchar(4000)\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdeliverypickupcustomer.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STLMSDeliveryPickupCustomer \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STLocation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STLocation') )\n    DROP EXTERNAL TABLE dbo.D_STLocation\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STLocation (\n    [lms_location_id] int,\n    [lms_location_description] nvarchar(4000),\n    [lms_location_code] nvarchar(4000),\n    [lms_location_collect] int,\n    [lms_location_pcode] nvarchar(4000),\n    [lms_location_custid] int,\n    [lms_location_retail] int,\n    [lms_location_scale] int,\n    [lms_location_custcode] int,\n    [lms_location_captureonly] int,\n    [lms_location_zoneid] int,\n    [lms_location_scantype] int,\n    [lms_location_billcustid] int,\n    [lms_location_latitude] nvarchar(4000),\n    [lms_location_longitude] nvarchar(4000),\n    [lms_location_holdlocid] int,\n    [lms_location_branchmanageruserid] int,\n    [lms_location_fwcostcentre] int,\n    [lms_location_fwuserid] int,\n    [lms_location_fwmultibusinessid] int,\n    [lms_location_glcode] nvarchar(4000),\n    [lms_location_hubcode] nvarchar(4000),\n    [lms_location_fwapikey] nvarchar(4000),\n    [lms_location_geolocationgroupid] int,\n    [lms_location_geolocationflag] int,\n    [lms_location_orvactive] int,\n    [lms_location_cref] nvarchar(4000),\n    [lms_location_tempcol] int,\n    [lms_location_holdlocparentlocid] int,\n    [lms_location_floorsize] int,\n    [lms_location_isstationidenabled] int,\n    [lms_location_activeflag] int,\n    [lms_location_masterlocid] int,\n    [lms_location_locationtypeid] int,\n    [lms_location_locationcode] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stlocation.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STLocation \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STMDPeople')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/MasterData"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STMDPeople') )\n    DROP EXTERNAL TABLE dbo.D_STMDPeople\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STMDPeople (\n    [md_people_id] bigint,\n    [md_people_empid] bigint,\n    [md_people_employeecode] nvarchar(4000),\n    [md_people_uid] nvarchar(4000),\n    [md_people_firstname] nvarchar(4000),\n    [md_people_lastname] nvarchar(4000),\n    [md_people_knownasname] nvarchar(4000),\n    [md_people_birthdate] bigint,\n    [md_people_gender] nvarchar(4000),\n    [md_people_cellno] nvarchar(4000),\n    [md_people_emailaddress] nvarchar(4000),\n    [md_people_nationality] nvarchar(4000),\n    [md_people_idnumber] nvarchar(4000),\n    [md_people_passportno] nvarchar(4000),\n    [md_people_passportcountrycode] nvarchar(4000),\n    [md_people_idpassportno] nvarchar(4000),\n    [md_people_dateengaged] datetime2(7),\n    [md_people_datejoinedgroup] datetime2(7),\n    [md_people_employeestatus] nvarchar(4000),\n    [md_people_terminationdate] datetime2(7),\n    [md_people_terminationreasonid] int,\n    [md_people_depotcode] nvarchar(4000),\n    [md_people_jobcategory] nvarchar(4000),\n    [md_people_jobtitle] nvarchar(4000),\n    [md_people_source] nvarchar(4000),\n    [md_people_insby] nvarchar(4000),\n    [md_people_islinehaul] int,\n    [md_people_companycode] nvarchar(4000),\n    [md_people_companydisplayname] nvarchar(4000),\n    [md_people_companyrulecode] nvarchar(4000),\n    [md_people_reportstoemployee] nvarchar(4000),\n    [md_people_reporttoempid] bigint,\n    [md_people_internalexternal] nvarchar(4000),\n    [md_people_driverid] bigint,\n    [md_people_licenseno] nvarchar(4000),\n    [md_people_driverrestriction] nvarchar(4000),\n    [md_people_issuecountry] nvarchar(4000),\n    [md_people_issuedate] datetime2(7),\n    [md_people_licensevalidfrom] datetime2(7),\n    [md_people_licensevalidto] datetime2(7),\n    [md_people_vehiclecode] nvarchar(4000),\n    [md_people_vehiclerestriction] nvarchar(4000),\n    [md_people_driverphoto] nvarchar(4000),\n    [md_people_licenseexpired] int,\n    [md_people_prdpcode] nvarchar(4000),\n    [md_people_prdpexpiry] datetime2(7),\n    [md_people_personalid] bigint,\n    [md_people_physicalblock] nvarchar(4000),\n    [md_people_physicalcitytown] nvarchar(4000),\n    [md_people_physicalcomplex] nvarchar(4000),\n    [md_people_physicalcountrycode] nvarchar(4000),\n    [md_people_physicaldistrictid] nvarchar(4000),\n    [md_people_physicallevelfloor] nvarchar(4000),\n    [md_people_physicalpostalcode] nvarchar(4000),\n    [md_people_physicalprovince] nvarchar(4000),\n    [md_people_physicalstreetfarmname] nvarchar(4000),\n    [md_people_physicalstreetnumber] nvarchar(4000),\n    [md_people_physicalsuburbdistrict] nvarchar(4000),\n    [md_people_physicalunitpostalnumber] nvarchar(4000),\n    [md_people_postaladdressid] nvarchar(4000),\n    [md_people_postaladdressservicetype] nvarchar(4000),\n    [md_people_postalblock] nvarchar(4000),\n    [md_people_postalcitytown] nvarchar(4000),\n    [md_people_postalcomplex] nvarchar(4000),\n    [md_people_postalconcat] nvarchar(4000),\n    [md_people_postaldistrictid] nvarchar(4000),\n    [md_people_postallevelfloor] nvarchar(4000),\n    [md_people_postalpostalcode] nvarchar(4000),\n    [md_people_postalprovince] nvarchar(4000),\n    [md_people_postalstreetfarmname] nvarchar(4000),\n    [md_people_postalstreetnumber] nvarchar(4000),\n    [md_people_postalsuburbdistrict] nvarchar(4000),\n    [md_people_postalunitpostalnumber] nvarchar(4000),\n    [md_people_racialgroup] nvarchar(4000),\n\n    \n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stmdpeople.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STMDPeople \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STMDVehicle')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/MasterData"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STMDVehicle') )\n    DROP EXTERNAL TABLE dbo.D_STMDVehicle\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STMDVehicle (\n\n    [md_vehicle_id] bigint,\n    [md_vehicle_uid] nvarchar(4000),\n    [md_vehicle_vehicletype] nvarchar(4000),\n    [md_vehicle_internalexternal] nvarchar(4000),\n    [md_vehicle_activeflag] bigint,\n    [md_vehicle_vehiclestatus] nvarchar(4000),\n    [md_vehicle_chassisnumber] nvarchar(4000),\n    [md_vehicle_depot] nvarchar(4000),\n    [md_vehicle_enginenumber] nvarchar(4000),\n    [md_vehicle_fleetcode] nvarchar(4000),\n    [md_vehicle_fueltype] nvarchar(4000),\n    [md_vehicle_registrationnumber] nvarchar(4000),\n    [md_vehicle_vehicleapplication] nvarchar(4000),\n    [md_vehicle_vehiclebodymake] nvarchar(4000),\n    [md_vehicle_vehiclecolour] nvarchar(4000),\n    [md_vehicle_vehiclemake] nvarchar(4000),\n    [md_vehicle_vehiclemodel] nvarchar(4000),\n    [md_vehicle_vehicleseries] nvarchar(4000),\n    [md_vehicle_year] int,\n    [md_vehicle_vehicleownerid] bigint,\n    [md_vehicle_vehicleowner] nvarchar(4000),\n    [md_vehicle_staffvehicleflag] int,\n    [md_vehicle_vehicletrailersize] nvarchar(4000),\n    [md_vehicle_vehicletrailertype] nvarchar(4000),\n    [md_vehicle_vehicleetollclass] nvarchar(4000),\n    [md_vehicle_brn] nvarchar(4000),\n    [md_vehicle_brnnumber] nvarchar(4000),\n    [md_vehicle_vehicleregisterno] nvarchar(4000),\n    [md_vehicle_vehiclebasicinsdate] datetime2(7),\n    [md_vehicle_insby] nvarchar(4000),\n    [md_vehicle_islinehaulvehicle] int,\n    [md_vehicle_internalheight] numeric(18,2),\n    [md_vehicle_internallength] numeric(18,2),\n    [md_vehicle_internalvolume] numeric(18,2),\n    [md_vehicle_internalwidth] numeric(18,2),\n    [md_vehicle_vehiclebasicmoddate] datetime2(7),\n    [md_vehicle_trailerflag] int,\n    [md_vehicle_workflowstatus] nvarchar(4000),\n    [md_vehicle_vehicleapproveddate] datetime2(7),\n    [md_vehicle_mmcode] nvarchar(4000),\n    [md_vehicle_tmplicenseexpiery] bigint,\n    [md_vehicle_currentadvertising] nvarchar(4000),\n    [md_vehicle_fuelcardnumber] nvarchar(4000),\n    [md_vehicle_fuelcardreceivedate] datetime2(7),\n    [md_vehicle_licenseexpirydate] datetime2(7),\n    [md_vehicle_licensefee] numeric(18,2),\n    [md_vehicle_vehicleadvertisingindicator] nvarchar(4000),\n    [md_vehicle_vehiclespeedgoverningdevice] nvarchar(4000),\n    [md_vehicle_oldregistrationnumber] nvarchar(4000),\n    [md_vehicle_oldchassisnumber] nvarchar(4000),\n    [md_vehicle_oldenginenumber] nvarchar(4000),\n    [md_vehicle_logbookrecord] nvarchar(4000),\n    [md_vehicle_adminstatus] nvarchar(4000),\n    [md_vehicle_vehicleadmincompletebydate] datetime2(7),\n    [md_vehicle_backdoorheight] numeric(18,2),\n    [md_vehicle_backdoorwidth] numeric(18,2),\n    [md_vehicle_externalheight] numeric(18,2),\n    [md_vehicle_externallength] numeric(18,2),\n    [md_vehicle_externalwidth] numeric(18,2),\n    [md_vehicle_fleximounts] int,\n    [md_vehicle_fuelcapacity] numeric(18,2),\n    [md_vehicle_grossvehiclemass] numeric(18,2),\n    [md_vehicle_numberoftyres] int,\n    [md_vehicle_numberoftyresrear] int,\n    [md_vehicle_numberoftyressteering] int,\n    [md_vehicle_payload] numeric(18,2),\n    [md_vehicle_peoplecarrier] int,\n    [md_vehicle_tareweight] numeric(18,2),\n    [md_vehicle_tyresize] nvarchar(4000),\n    [md_vehicle_tyresizealternative] nvarchar(4000),\n    [md_vehicle_targetfuelconsumption] numeric(18,2),\n    [md_vehicle_tankrange] numeric(18,2),\n    [md_vehicle_operationsstatus] nvarchar(4000),\n    [md_vehicle_vehiclevehicleoperationscompletebydate] datetime2(7),\n    [md_vehicle_assetnumber] nvarchar(4000),\n    [md_vehicle_contractenddate] datetime2(7),\n    [md_vehicle_contractnumber] nvarchar(4000),\n    [md_vehicle_contractstartdate] datetime2(7),\n    [md_vehicle_vehiclefinancecompany] nvarchar(4000),\n    [md_vehicle_budgetrmcpk] numeric(18,2),\n    [md_vehicle_budgettyrecpk] numeric(18,2),\n    [md_vehicle_retailvalue] numeric(18,2),\n    [md_vehicle_tradeinvalue] numeric(18,2),\n    [md_vehicle_loadbodyreplacementcost] numeric(18,2),\n    [md_vehicle_financestatus] nvarchar(4000),\n    [md_vehicle_vehiclefinancecompletebydate] datetime2(7),\n    [md_vehicle_trackingstatus] nvarchar(4000),\n    [md_vehicle_vehicletrackingcompletebydate] datetime2(7),\n    [md_vehicle_vehicletrackingmoddate] datetime2(7),\n    [md_vehicle_assetid] bigint,\n    [md_vehicle_providerid] bigint,\n    [md_vehicle_providername] nvarchar(4000),\n    [md_vehicle_serial] nvarchar(4000),\n    [md_vehicle_vehicletrackinginsdate] datetime2(7),\n    [md_vehicle_linkdate] datetime2(7),\n    [md_vehicle_linkby] bigint,\n    [md_vehicle_linkbyname] nvarchar(4000),\n\n    \n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stmdvehicle.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STMDVehicle \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STOpsRoute')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STOpsRoute') )\n    DROP EXTERNAL TABLE dbo.D_STOpsRoute\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STOpsRoute (\n    [tms_parentroute_id] bigint,\n    [tms_parentroute_name] nvarchar(4000),\n    [tms_parentroute_slug] nvarchar(4000),\n    [tms_parentroute_parentroute] bigint,\n    [tms_parentroute_insdate] datetime2(7),\n    [tms_parentroute_moddate] datetime2(7),\n    [tms_parentroute_insby] bigint,\n    [tms_parentroute_status] nvarchar(4000),\n    [tms_parentroute_crossborder] int,\n    [tms_parentroute_roundtripdays] int,\n    [tms_parentroute_distance] int,\n    [tms_parentroute_duration] int,\n    [tms_parentroute_numofuse] int,\n    [tms_parentroute_legacyid] int,\n    [tms_parentroute_local] int\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stopsroute.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STOpsRoute \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STParentRoute')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STParentRoute') )\n    DROP EXTERNAL TABLE dbo.D_STParentRoute\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STParentRoute (\n    [tms_parentroute_id] bigint,\n    [tms_parentroute_name] nvarchar(4000),\n    [tms_parentroute_slug] nvarchar(4000),\n    [tms_parentroute_parentroute] bigint,\n    [tms_parentroute_insdate] datetime2(7),\n    [tms_parentroute_moddate] datetime2(7),\n    [tms_parentroute_insby] bigint,\n    [tms_parentroute_status] nvarchar(4000),\n    [tms_parentroute_crossborder] int,\n    [tms_parentroute_roundtripdays] int,\n    [tms_parentroute_distance] int,\n    [tms_parentroute_duration] int,\n    [tms_parentroute_numofuse] int,\n    [tms_parentroute_legacyid] int,\n    [tms_parentroute_local] int\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stparentroute.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STParentRoute \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STPod')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STPod') )\n    DROP EXTERNAL TABLE dbo.D_STPod\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STPod (\n    [orv_pod_id] bigint,\n    [orv_pod_did] bigint,\n    [orv_pod_name] nvarchar(4000),\n    [orv_pod_poddate] datetime2(7),\n    [orv_pod_lat] float,\n    [orv_pod_lng] float,\n    [orv_pod_customerrating] int,\n    [orv_pod_customerfeedback] nvarchar(4000)\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stpod.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STPod \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STRateComponent')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STRateComponent') )\n    DROP EXTERNAL TABLE dbo.D_STRateComponent\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STRateComponent (\n    [tms_ratecomponent_id] bigint,\n    [tms_ratecomponent_profileid] bigint,\n    [tms_ratecomponent_ratetype] nvarchar(4000),\n    [tms_ratecomponent_amount] int,\n    [tms_ratecomponent_applyfuellevy] int,\n    [tms_ratecomponent_note] nvarchar(4000),\n    [tms_ratecomponent_insdate] datetime2(7),\n    [tms_ratecomponent_moddate] datetime2(7),\n    [tms_ratecomponent_insby] bigint,\n    [tms_ratecomponent_legacyid] int,\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stratecomponent.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STRateComponent \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STRateProfile')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STRateProfile') )\n    DROP EXTERNAL TABLE dbo.D_STRateProfile\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STRateProfile (\n    [tms_rateprofile_id] bigint,\n    [tms_rateprofile_eid] bigint,\n    [tms_rateprofile_entity] nvarchar(4000),\n    [tms_rateprofile_trailersize] nvarchar(4000),\n    [tms_rateprofile_routeid] bigint,\n    [tms_rateprofile_profiletype] nvarchar(4000),\n    [tms_rateprofile_fromdate] datetime2(7),\n    [tms_rateprofile_todate] datetime2(7),\n    [tms_rateprofile_insby] bigint,\n    [tms_rateprofile_status] nvarchar(4000),\n    [tms_rateprofile_insdate] datetime2(7),\n    [tms_rateprofile_moddate] datetime2(7),\n    [tms_rateprofile_note] nvarchar(4000),\n    [tms_rateprofile_legacyid] int,\n    [tms_rateprofile_usedfuelprice] int,\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/strateprofile.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STRateProfile \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STSRoute')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STSRoute') )\n    DROP EXTERNAL TABLE dbo.D_STSRoute\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STSRoute (\n    [lms_sroute_id] int,\n    [lms_sroute_billcustid] int,\n    [lms_sroute_courierid] nvarchar(4000),\n    [lms_sroute_description] nvarchar(4000),\n    [lms_sroute_code] nvarchar(4000),\n    [lms_sroute_id2] int,\n    [lms_sroute_sroutegroupid] int,\n    [lms_sroute_zoneid] int,\n    [lms_sroute_broutemasterid] int,\n    [lms_sroute_localflag] int,\n    [lms_sroute_area] nvarchar(4000),\n    [lms_sroute_highvolume] int\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stsroute.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STSRoute \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STTMSList')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STTMSList') )\n    DROP EXTERNAL TABLE dbo.D_STTMSList\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STTMSList (\n    [tms_list_id] bigint,\n    [tms_list_slug] nvarchar(4000),\n    [tms_list_valuetype] nvarchar(4000),\n    [tms_list_descr] nvarchar(4000),\n    [tms_list_insdate] datetime2(7),\n    [tms_list_moddate] datetime2(7),\n    [tms_list_refcols] nvarchar(4000),\n    [tms_list_editable] int,\n    [tms_listitem_id] bigint,\n    [tms_listitem_lid] bigint,\n    [tms_listitem_itemlabel] nvarchar(4000),\n    [tms_listitem_itemvalue] nvarchar(4000),\n    [tms_listitem_sort] int,\n    [tms_listitem_mdid] bigint,\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/sttmslist.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STTMSList \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STTMSPrimaryCustomer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STTMSPrimaryCustomer') )\n    DROP EXTERNAL TABLE dbo.D_STTMSPrimaryCustomer\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STTMSPrimaryCustomer (\n    [tms_customer_id] bigint,\n    [tms_customer_status] nvarchar(4000),\n    [tms_customer_name] nvarchar(4000),\n    [tms_customer_parentid] bigint,\n    [tms_customer_accountnumber] nvarchar(4000),\n    [tms_customer_revenuecode] nvarchar(4000),\n    [tms_customer_insdate] datetime2(7),\n    [tms_customer_moddate] datetime2(7),\n    [tms_customer_insby] bigint,\n    [tms_customer_opaqueid] nvarchar(4000),\n    [tms_customer_email] nvarchar(4000),\n    [tms_customer_areacode] nvarchar(4000),\n    [tms_customer_mobilenum] nvarchar(4000),\n    [tms_customer_legacyid] int,\n    [tms_customer_billingmethod] nvarchar(4000),\n    [tms_customer_adjustmetric] nvarchar(4000),\n    [tms_customer_adjustvalue] int,\n    [tms_customer_adjustnegativeallowed] int,\n    [tms_customer_adjustvalueusingprevmonth] int,\n    [tms_customer_excludefromnotinvoicedreport] int,\n    [tms_customer_logictype] nvarchar(4000),\n    [tms_customer_minliability] bigint\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stprimarycustomer.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STTMSPrimaryCustomer \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STTMSSecondaryCustomer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STTMSSecondaryCustomer') )\n    DROP EXTERNAL TABLE dbo.D_STTMSSecondaryCustomer\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STTMSSecondaryCustomer (\n    [tms_customer_id] bigint,\n    [tms_customer_status] nvarchar(4000),\n    [tms_customer_name] nvarchar(4000),\n    [tms_customer_parentid] bigint,\n    [tms_customer_accountnumber] nvarchar(4000),\n    [tms_customer_revenuecode] nvarchar(4000),\n    [tms_customer_insdate] datetime2(7),\n    [tms_customer_moddate] datetime2(7),\n    [tms_customer_insby] bigint,\n    [tms_customer_opaqueid] nvarchar(4000),\n    [tms_customer_email] nvarchar(4000),\n    [tms_customer_areacode] nvarchar(4000),\n    [tms_customer_mobilenum] nvarchar(4000),\n    [tms_customer_legacyid] int,\n    [tms_customer_billingmethod] nvarchar(4000),\n    [tms_customer_adjustmetric] nvarchar(4000),\n    [tms_customer_adjustvalue] int,\n    [tms_customer_adjustnegativeallowed] int,\n    [tms_customer_adjustvalueusingprevmonth] int,\n    [tms_customer_excludefromnotinvoicedreport] int,\n    [tms_customer_logictype] nvarchar(4000),\n    [tms_customer_minliability] bigint\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stsecondarycustomer.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STTMSSecondaryCustomer \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STThirdParty')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STThirdParty') )\n    DROP EXTERNAL TABLE dbo.D_STThirdParty\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STThirdParty (\n    [tms_thirdparty_id] bigint,\n    [tms_thirdparty_name] nvarchar(4000),\n    [tms_thirdparty_areacode] nvarchar(4000),\n    [tms_thirdparty_telnumber] nvarchar(4000),\n    [tms_thirdparty_mobareacode] nvarchar(4000),\n    [tms_thirdparty_mobnumer] nvarchar(4000),\n    [tms_thirdparty_contact] nvarchar(4000),\n    [tms_thirdparty_address] nvarchar(4000),\n    [tms_thirdparty_streetno] nvarchar(4000),\n    [tms_thirdparty_zipcode] nvarchar(4000),\n    [tms_thirdparty_city] nvarchar(4000),\n    [tms_thirdparty_province] nvarchar(4000),\n    [tms_thirdparty_status] nvarchar(4000),\n    [tms_thirdparty_mdvoid] bigint,\n    [tms_thirdparty_registration] nvarchar(4000),\n    [tms_thirdparty_email] nvarchar(4000),\n    [tms_thirdparty_accnumber] nvarchar(4000),\n    [tms_thirdparty_insdate] datetime2(7),\n    [tms_thirdparty_moddate] datetime2(7),\n    [tms_thirdparty_gitstatus] nvarchar(4000),\n    [tms_thirdparty_legacyid] int,\n    [tms_thirdparty_lat] float,\n    [tms_thirdparty_lng] float,\n    [tms_thirdparty_note] nvarchar(4000),\n    [tms_thirdparty_revenuecode] nvarchar(4000),\n    [tms_thirdparty_country] nvarchar(4000)\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stthirdparty.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STThirdParty \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STUserOrv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STUserOrv') )\n    DROP EXTERNAL TABLE dbo.D_STUserOrv\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STUserOrv (\n    [orv_orvuser_id] bigint,\n    [orv_orvuser_username] nvarchar(4000),\n    [orv_orvuser_fname] nvarchar(4000),\n    [orv_orvuser_lname] nvarchar(4000),\n    [orv_orvuser_empcode] nvarchar(4000),\n    [orv_orvuser_aka] nvarchar(4000),\n    [orv_orvuser_gender] nvarchar(4000),\n    [orv_orvuser_rsaid] nvarchar(4000),\n    [orv_orvuser_passportno] nvarchar(4000),\n    [orv_orvuser_idpassportno] nvarchar(4000),\n    [orv_orvuser_nationality] nvarchar(4000),\n    [orv_orvuser_termindate] datetime2(7),\n    [orv_orvuser_status] nvarchar(4000),\n    [orv_orvuser_depot] nvarchar(4000),\n    [orv_orvuser_jobcategory] nvarchar(4000),\n    [orv_orvuser_lmsid] bigint,\n    [orv_orvuser_vipid] bigint,\n    [orv_orvuser_crewlmsid] bigint,\n    [orv_orvuser_courierid] bigint\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/storvuser.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STUserOrv\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STVehicle')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STVehicle') )\n    DROP EXTERNAL TABLE dbo.D_STVehicle\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STVehicle (\n\n    [lms_vehicle_id] int,\n    [lms_vehicle_fleetno] nvarchar(4000),\n    [lms_vehicle_regno] nvarchar(4000),\n    [lms_vehicle_uid] nvarchar(4000),\n    [orv_vehicle_id] bigint,\n    [orv_vehicle_tollclass] nvarchar(4000),\n    [orv_vehicle_sapcode] nvarchar(4000),\n    [orv_vehicle_lmsid] bigint,\n\n    \n    \n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stvehicle.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STVehicle \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STZone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STZone') )\n    DROP EXTERNAL TABLE dbo.D_STZone\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STZone (\n    [lms_zone_id] int,\n    [lms_zone_code] nvarchar(4000),\n    [lms_zone_description] nvarchar(4000),\n    [lms_zone_isocode] nvarchar(4000),\n    [lms_zone_locid] int,\n    [lms_zone_zonemasterid] int \n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stzone.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STZone \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTBooking SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTBooking') )\n    DROP EXTERNAL TABLE dbo.F_SSTBooking\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTBooking (\n\t[tms_booking_id] bigint,\n\t[tms_booking_bookingtype] nvarchar(4000),\n\t[tms_booking_customerid] bigint,\n\t[tms_booking_trailersize] nvarchar(4000),\n\t[tms_booking_trailertype] nvarchar(4000),\n\t[tms_booking_routeid] bigint,\n\t[tms_booking_routename] nvarchar(4000),\n\t[tms_booking_cargoweight] float,\n\t[tms_booking_cubicvolume] float,\n\t[tms_booking_directbooking] int,\n\t[tms_booking_pickupdate] datetime2(7),\n\t[tms_booking_dispatchdate] datetime2(7),\n\t[tms_booking_deliverydate] datetime2(7),\n\t[tms_booking_insdate] datetime2(7),\n\t[tms_booking_moddate] datetime2(7),\n\t[tms_booking_status] nvarchar(4000),\n\t[tms_booking_tripid] bigint,\n\t[tms_booking_createdby] bigint,\n\t[tms_booking_allocatedby] bigint,\n\t[tms_booking_allocateddate] datetime2(7),\n\t[tms_booking_opsrouteid] bigint,\n\t[tms_booking_opsroutename] nvarchar(4000),\n\t[tms_booking_childcustomerid] bigint,\n\t[tms_booking_thirdpartyreason] nvarchar(4000),\n\t[tms_booking_thirdpartyrate] bigint,\n\t[tms_booking_cref1] nvarchar(4000),\n\t[tms_booking_cref2] nvarchar(4000),\n\t[tms_booking_thirdpartyvehicleflag] int,\n\t[tms_booking_thirdpartytrailerflag] int,\n\t[tms_booking_thirdpartydriverflag] int,\n\t[tms_booking_invoiceid] bigint,\n\t[tms_booking_docstatus] nvarchar(4000),\n\t[tms_booking_billingstatus] nvarchar(4000),\n\t[tms_booking_thirdpartyagreedrate] bigint,\n\t[tms_booking_invoiceddate] datetime2(7),\n\t[tms_booking_createdbyname] nvarchar(4000),\n\t[tms_booking_note] nvarchar(4000),\n\t[tms_booking_manifests] nvarchar(4000),\n\t[tms_booking_local] int,\n\t[tms_booking_docdate] datetime2(7),\n\t[tms_booking_billingmethod] nvarchar(4000),\n\t[tms_booking_originalpod] int,\n\t[tms_booking_ponumber] nvarchar(4000),\n\t[tms_booking_customerrate] bigint,\n\t[tms_booking_customeragreedrate] bigint,\n\t[tms_booking_assetreleasedate] datetime2(7),\n\t[tms_booking_thirdpartyid] bigint,\n\t[tms_booking_transporter] nvarchar(4000),\n\t[tms_booking_emailrequester] nvarchar(4000),\n\t[tms_booking_frombranchid] bigint,\n\t[tms_booking_tobranchid] bigint,\n\t[tms_booking_frombranch] nvarchar(4000),\n\t[tms_booking_tobranch] nvarchar(4000),\n\t[tms_booking_reason] nvarchar(4000),\n\t[tms_booking_startaddress] nvarchar(4000),\n\t[tms_booking_startlat] float,\n\t[tms_booking_startlng] float,\n\t[tms_booking_endaddress] nvarchar(4000),\n\t[tms_booking_endlat] float,\n\t[tms_booking_endlng] float,\n\t[tms_booking_convertedbookingid] bigint,\n\t[tms_customer_id] bigint,\n\t[tms_customer_status] nvarchar(4000),\n\t[tms_customer_name] nvarchar(4000),\n\t[tms_customer_parentid] bigint,\n\t[tms_customer_accountnumber] nvarchar(4000),\n\t[tms_customer_revenuecode] nvarchar(4000),\n\t[tms_customer_insdate] bigint,\n\t[tms_customer_moddate] bigint,\n\t[tms_customer_insby] bigint,\n\t[tms_customer_opaqueid] nvarchar(4000),\n\t[tms_customer_email] nvarchar(4000),\n\t[tms_customer_areacode] nvarchar(4000),\n\t[tms_customer_mobilenum] nvarchar(4000),\n\t[tms_customer_billingmethod] nvarchar(4000),\n\t[tms_customer_adjustmetric] nvarchar(4000),\n\t[tms_customer_adjustvalue] int,\n\t[tms_customer_adjustnegativeallowed] int,\n\t[tms_customer_adjustvalueusingprevmonth] int,\n\t[tms_customer_excludefromnotinvoicedreport] int,\n\t[tms_customer_logictype] nvarchar(4000),\n\t[tms_customer_childid] bigint,\n\t[tms_customer_childstatus] nvarchar(4000),\n\t[tms_customer_childname] nvarchar(4000),\n\t[tms_customer_childparentid] bigint,\n\t[tms_customer_childaccountnumber] nvarchar(4000),\n\t[tms_customer_childrevenuecode] nvarchar(4000),\n\t[tms_customer_childinsdate] bigint,\n\t[tms_customer_childmoddate] bigint,\n\t[tms_customer_childinsby] bigint,\n\t[tms_customer_childopaqueid] nvarchar(4000),\n\t[tms_customer_childemail] nvarchar(4000),\n\t[tms_customer_childareacode] nvarchar(4000),\n\t[tms_customer_childmobilenum] nvarchar(4000),\n\t[tms_customer_childbillingmethod] nvarchar(4000),\n\t[tms_customer_childadjustmetric] nvarchar(4000),\n\t[tms_customer_childadjustvalue] int,\n\t[tms_customer_childadjustnegativeallowed] int,\n\t[tms_customer_childadjustvalueusingprevmonth] int,\n\t[tms_customer_childexcludefromnotinvoicedreport] int,\n\t[tms_customer_childlogictype] nvarchar(4000),\n\t[tms_customer_childminliability] bigint,\n\t[tms_route_id] bigint,\n\t[tms_route_name] nvarchar(4000),\n\t[tms_route_slug] nvarchar(4000),\n\t[tms_route_parentroute] bigint,\n\t[tms_route_insdate] bigint,\n\t[tms_route_moddate] bigint,\n\t[tms_route_insby] bigint,\n\t[tms_route_status] nvarchar(4000),\n\t[tms_route_crossborder] int,\n\t[tms_route_roundtripdays] int,\n\t[tms_route_distance] int,\n\t[tms_route_duration] int,\n\t[tms_route_numofuse] int,\n\t[tms_route_local] int,\n\t[tms_route_opsrouteid] bigint,\n\t[tms_route_opsroutename] nvarchar(4000),\n\t[tms_route_opsrouteslug] nvarchar(4000),\n\t[tms_route_opsrouteparentroute] bigint,\n\t[tms_route_opsrouteinsdate] bigint,\n\t[tms_route_opsroutemoddate] bigint,\n\t[tms_route_opsrouteinsby] bigint,\n\t[tms_route_opsroutestatus] nvarchar(4000),\n\t[tms_route_opsroutecrossborder] int,\n\t[tms_route_opsrouteroundtripdays] int,\n\t[tms_route_opsroutedistance] int,\n\t[tms_route_opsrouteduration] int,\n\t[tms_route_opsroutenumofuse] int,\n\t[tms_route_opsroutelocal] int,\n\t[tms_thirdparty_id] bigint,\n\t[tms_thirdparty_name] nvarchar(4000),\n\t[tms_thirdparty_areacode] nvarchar(4000),\n\t[tms_thirdparty_telnumber] nvarchar(4000),\n\t[tms_thirdparty_mobareacode] nvarchar(4000),\n\t[tms_thirdparty_mobnumer] nvarchar(4000),\n\t[tms_thirdparty_contact] nvarchar(4000),\n\t[tms_thirdparty_address] nvarchar(4000),\n\t[tms_thirdparty_streetno] nvarchar(4000),\n\t[tms_thirdparty_zipcode] nvarchar(4000),\n\t[tms_thirdparty_city] nvarchar(4000),\n\t[tms_thirdparty_province] nvarchar(4000),\n\t[tms_thirdparty_status] nvarchar(4000),\n\t[tms_thirdparty_mdvoid] bigint,\n\t[tms_thirdparty_registration] nvarchar(4000),\n\t[tms_thirdparty_email] nvarchar(4000),\n\t[tms_thirdparty_accnumber] nvarchar(4000),\n\t[tms_thirdparty_insdate] bigint,\n\t[tms_thirdparty_moddate] bigint,\n\t[tms_thirdparty_gitstatus] nvarchar(4000),\n\t[tms_thirdparty_lat] float,\n\t[tms_thirdparty_lng] float,\n\t[tms_thirdparty_note] nvarchar(4000),\n\t[tms_thirdparty_revenuecode] nvarchar(4000),\n\t[tms_thirdparty_country] nvarchar(4000),\n\t[tms_financedata_id] bigint,\n\t[tms_financedata_bookingid] bigint,\n\t[tms_financedata_insdate] bigint,\n\t[tms_financedata_peaksurchagrebuy] bigint,\n\t[tms_financedata_peaksurchagresell] bigint,\n\t[tms_financedata_manualentryroadhaulsell] bigint,\n\t[tms_financedata_manualentryahocsell] bigint,\n\t[tms_financedata_systemfuellevy] bigint,\n\t[tms_financedata_systemratefuellevy] bigint,\n\t[tms_financedata_systemratefuelexlevy] bigint,\n\t[tms_financedata_systemratefuelinclevy] bigint,\n\t[tms_financedata_systemsellrate] bigint,\n\t[tms_financedata_totalsellrate] bigint,\n\t[tms_financedata_moddate] bigint,\n\t[tms_financedata_totalbuyrate] bigint,\n\t[tms_financedata_rateprofileid] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstbooking.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTBooking \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTCollect SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTCollect') )\n    DROP EXTERNAL TABLE dbo.F_SSTCollect\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTCollect (\n\t[lms_collect_id] int,\n\t[lms_collect_date] datetime2(7),\n\t[lms_collect_cservice] nvarchar(4000),\n\t[lms_collect_billcust] int,\n\t[lms_collect_pickupcustid] int,\n\t[lms_collect_delivercustid] int,\n\t[lms_collect_locationid] int,\n\t[lms_collect_noofparcels] nvarchar(4000),\n\t[lms_collect_weight] nvarchar(4000),\n\t[lms_collect_timeready] nvarchar(4000),\n\t[lms_collect_vehiclecapacity] int,\n\t[lms_collect_collectrefno] nvarchar(4000),\n\t[lms_collect_timeclosed] nvarchar(4000),\n\t[lms_collect_securitycollect] int,\n\t[lms_collect_confirmedby] nvarchar(4000),\n\t[lms_collect_courierid] nvarchar(4000),\n\t[lms_collect_confirmeddate] datetime2(7),\n\t[lms_collect_transferreddate] datetime2(7),\n\t[lms_collect_senddate] datetime2(7),\n\t[lms_collect_orderid] int,\n\t[lms_collect_orderdate] datetime2(7),\n\t[lms_collect_userid] int,\n\t[lms_collect_reason] nvarchar(4000),\n\t[lms_collect_cubes] numeric(18,2),\n\t[lms_collect_custref] nvarchar(4000),\n\t[lms_collect_custref3] nvarchar(4000),\n\t[lms_collect_custaccid] int,\n\t[lms_collect_collectparentid] int,\n\t[lms_collect_duedate] datetime2(7),\n\t[lms_collect_specdel] int,\n\t[lms_collect_flunits] int,\n\t[lms_collect_flkgs] int,\n\t[lms_collect_quote] numeric(18,2),\n\t[lms_collect_bill_vehicletype] int,\n\t[lms_collect_collectstatusid] int,\n\t[lms_collect_bill_collectstatusid] int,\n\t[lms_collect_cancelreason] int,\n\t[lms_collect_cancelcomments] nvarchar(4000),\n\t[lms_collect_loadid] int,\n\t[lms_collect_custref2] nvarchar(4000),\n\t[lms_collect_created] datetime2(7),\n\t[lms_collect_oncollection] datetime2(7),\n\t[lms_collect_collected] datetime2(7),\n\t[lms_collect_complete] datetime2(7),\n\t[lms_collect_cancelled] datetime2(7),\n\t[lms_collect_failed] datetime2(7),\n\t[lms_collect_ctype] int,\n\t[lms_collect_quoteid] int,\n\t[lms_collect_lastupdate] datetime2(7),\n\t[lms_collect_notes] nvarchar(4000),\n\t[lms_collect_docurl] nvarchar(4000),\n\t[lms_collect_docdate] datetime2(7),\n\t[lms_collect_orvstatus] nvarchar(4000),\n\t[lms_collect_orvcode] int,\n\t[lms_collect_oldloadid] int,\n\t[lms_bcustomer_id] int,\n\t[lms_bcustomer_name] nvarchar(4000),\n\t[lms_pcustomer_id] int,\n\t[lms_pcustomer_name] nvarchar(4000),\n\t[lms_dcustomer_id] int,\n\t[lms_dcustomer_name] nvarchar(4000),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_clocation_id] int,\n\t[lms_clocation_description] nvarchar(4000),\n\t[lms_collectstatus_id] int,\n\t[lms_collectstatus_description] nvarchar(4000),\n\t[orv_draftcollection_id] bigint,\n\t[orv_draftcollection_fromlocid] int,\n\t[orv_draftcollection_loadid] int,\n\t[orv_draftcollection_status] nvarchar(4000),\n\t[orv_draftcollection_importedate] datetime2(7),\n\t[orv_draftcollection_fromstr] nvarchar(4000),\n\t[orv_draftcollection_did] bigint,\n\t[orv_draftcollection_mergedlmsid] int,\n\t[orv_draftcollection_rejectdate] datetime2(7),\n\t[orv_draftcollection_confirmdate] datetime2(7),\n\t[orv_draftcollection_customerref] nvarchar(4000),\n\t[orv_draftcollection_collectionwaybillid] bigint,\n\t[orv_draftcollection_collectbydate] datetime2(7),\n\t[orv_draftcollection_rejectreason] nvarchar(4000),\n\t[orv_draftcollection_cancelctr] int,\n\t[orv_delivery_id] bigint,\n\t[orv_delivery_dispatchid] bigint,\n\t[orv_delivery_waybillid] bigint,\n\t[orv_delivery_address] nvarchar(4000),\n\t[orv_delivery_town] nvarchar(4000),\n\t[orv_delivery_province] nvarchar(4000),\n\t[orv_delivery_country] nvarchar(4000),\n\t[orv_delivery_lat] float,\n\t[orv_delivery_lng] float,\n\t[orv_delivery_placeid] nvarchar(4000),\n\t[orv_delivery_what3words] nvarchar(4000),\n\t[orv_delivery_zipcode] nvarchar(4000),\n\t[orv_delivery_eta] datetime2(7),\n\t[orv_delivery_actualeta] datetime2(7),\n\t[orv_delivery_deliverydate] datetime2(7),\n\t[orv_delivery_deliverby] datetime2(7),\n\t[orv_delivery_deliveryorder] int,\n\t[orv_delivery_tsgeofenceenter] datetime2(7),\n\t[orv_delivery_tsscanningstart] datetime2(7),\n\t[orv_delivery_tsscanningstop] datetime2(7),\n\t[orv_delivery_tspodsignature] datetime2(7),\n\t[orv_delivery_aid] bigint,\n\t[orv_delivery_numprcls] int,\n\t[orv_delivery_geocodingstatus] nvarchar(4000),\n\t[orv_delivery_skipdate] datetime2(7),\n\t[orv_delivery_skipreason] nvarchar(4000),\n\t[orv_delivery_status] nvarchar(4000),\n\t[orv_delivery_partialmatch] int,\n\t[orv_delivery_approximated] int,\n\t[orv_delivery_lmsorder] int,\n\t[orv_delivery_optimizedorder] int,\n\t[orv_delivery_seal] nvarchar(4000),\n\t[orv_delivery_customerinvoice] int,\n\t[orv_delivery_customerdn] int,\n\t[orv_delivery_grv] nvarchar(4000),\n\t[orv_delivery_chepslip] int,\n\t[orv_delivery_cleandelivery] int,\n\t[orv_delivery_trackingcode] nvarchar(4000),\n\t[orv_delivery_mode] nvarchar(4000),\n\t[orv_delivery_customorder] int,\n\t[orv_delivery_verified] int,\n\t[orv_delivery_altered] int,\n\t[orv_delivery_orderid] int,\n\t[orv_delivery_mergeid] bigint,\n\t[orv_delivery_orderref] nvarchar(4000),\n\t[orv_delivery_drivernote] nvarchar(4000),\n\t[orv_delivery_guid] bigint,\n\t[orv_delivery_timedefinite] int,\n\t[orv_delivery_orvcode] int,\n\t[orv_delivery_vaid] bigint,\n\t[orv_delivery_delegatedate] datetime2(7),\n\t[orv_delivery_delegatemode] nvarchar(4000),\n\t[orv_delivery_debriefmode] nvarchar(4000),\n\t[orv_delivery_debriefed] int,\n\t[orv_delivery_insdate] datetime2(7),\n\t[orv_delivery_reviseddebrief] int,\n\t[orv_delivery_lmsdebriefed] int,\n\t[orv_delivery_uncanceldate] datetime2(7),\n\t[orv_delivery_podlaterdate] datetime2(7),\n\t[orv_delivery_podmanualdate] datetime2(7),\n\t[orv_delivery_manualdebriefreason] nvarchar(4000),\n\t[orv_delivery_submanualdebriefreason] nvarchar(4000),\n\t[orv_delivery_outofgeofencereason] nvarchar(4000),\n\t[orv_delivery_tsentergeofenceapp] datetime2(7),\n\t[orv_delivery_tsexitgeofenceapp] datetime2(7),\n\t[orv_delivery_comebacklater] bigint,\n\t[orv_delivery_uncancelusername] nvarchar(4000),\n\t[orv_delivery_cref] int,\n\t[orv_delivery_division] int,\n\t[orv_delivery_descriptionofgoods] nvarchar(4000),\n\t[orv_delivery_skiplng] float,\n\t[orv_delivery_skiplat] float,\n\t[orv_delivery_courierid] bigint,\n\t[orv_delivery_posreason] nvarchar(4000),\n\t[orv_delivery_moddate] datetime2(7),\n\t[orv_delivery_mallid] int,\n\t[orv_delivery_mallgid] bigint,\n\t[orv_delivery_lmsidskipreason] bigint,\n\t[orv_delivery_deleteforimport] int,\n\t[orv_delivery_podoutofgeofence] int,\n\t[orv_delivery_originalcustomerid] bigint,\n\t[orv_originalcustomer_id] bigint,\n\t[orv_originalcustomer_name] nvarchar(4000),\n\t[orv_mall_id] bigint,\n\t[orv_mall_mallname] nvarchar(4000),\n\t[orv_mall_branchname] nvarchar(4000),\n\t[orv_mall_gpretailer] nvarchar(4000),\n\t[orv_mall_highvoldelivery] nvarchar(4000),\n\t[orv_mall_stripmall] nvarchar(4000),\n\t[orv_mall_standalonestore] nvarchar(4000),\n\t[orv_mall_streetsidestore] nvarchar(4000),\n\t[orv_mall_dedicatedrouted] nvarchar(4000),\n\t[orv_mall_insdate] datetime2(7),\n\t[orv_mall_address] nvarchar(4000),\n\t[orv_mall_deleted] int,\n\t[orv_mall_lat] float,\n\t[orv_mall_lng] float\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstcollect.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTCollect\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTConsignment_SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTConsignment') )\n    DROP EXTERNAL TABLE dbo.F_SSTConsignment\nGO\n\n\nCREATE EXTERNAL TABLE dbo.F_SSTConsignment (\n\t[lms_consignment_id] int,\n\t[lms_consignment_cref] nvarchar(4000),\n\t[lms_consignment_cdate] datetime2(7),\n\t[lms_consignment_userid] int,\n\t[lms_consignment_appointment] datetime2(7),\n\t[lms_consignment_deliverby] datetime2(7),\n\t[lms_consignment_dconfirmed] nvarchar(4000),\n\t[lms_consignment_dcomment] nvarchar(4000),\n\t[lms_consignment_drefno] nvarchar(4000),\n\t[lms_consignment_loadid] int,\n\t[lms_consignment_delivercustid] int,\n\t[lms_consignment_mrpcflag] int,\n\t[lms_consignment_mrpflag] int,\n\t[lms_consignment_billcust] int,\n\t[lms_consignment_cserviceid] nvarchar(4000),\n\t[lms_consignment_lastupdate] datetime2(7),\n\t[lms_consignment_billflag] int,\n\t[lms_consignment_missingflag] int,\n\t[lms_consignment_routerateid] int,\n\t[lms_consignment_delivertypeid] int,\n\t[lms_consignment_billtypeid] int,\n\t[lms_consignment_totothersurcharges] numeric(28,2),\n\t[lms_consignment_lhaddrate] numeric(28,2),\n\t[lms_consignment_lhcharge] numeric(28,2),\n\t[lms_consignment_sapbillperiodid] int,\n\t[lms_consignment_lhrouterateid] int,\n\t[lms_parcelbyconsignment_consignid] int,\n\t[lms_parcelbyconsignment_aggweight] float,\n\t[lms_parcelbyconsignment_aggchargeweight] numeric(28,2),\n\t[lms_parcelbyconsignment_aggvolweight] float,\n\t[lms_parcelbyconsignment_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbyconsignment_noparcels] bigint,\n\t[lms_bill_consignmentr_id] int,\n\t[lms_bill_consignmentr_consignid] int,\n\t[lms_bill_consignmentr_updatedate] datetime2(7),\n\t[lms_bill_consignmentr_pickuprouteid] int,\n\t[lms_bill_consignmentr_deliverrouteid] int,\n\t[lms_bill_consignmentr_chargeweight] numeric(28,2),\n\t[lms_bill_consignmentr_noofparcels] int,\n\t[lms_bill_consignmentr_tripdistance] numeric(28,2),\n\t[lms_bill_consignmentr_consignmentvalue] numeric(28,2),\n\t[lms_bill_consignmentr_billcust] int,\n\t[lms_bill_consignmentr_redflag] int,\n\t[lms_bill_consignmentr_updind] int,\n\t[lms_bill_consignmentr_servicetypeid] int,\n\t[lms_bill_consignmentr_routemissingind] int,\n\t[lms_bill_consignmentr_chargescalcind] int,\n\t[lms_bill_consignmentr_cdate1] datetime2(7),\n\t[lms_bill_consignmentr_invalidpcode] int,\n\t[lms_bill_consignmentr_programno] int,\n\t[lms_bill_consignmentr_totrate] numeric(28,2),\n\t[lms_bill_consignmentr_routecharge] numeric(28,2),\n\t[lms_bill_consignmentr_minweight] numeric(28,2),\n\t[lms_bill_consignmentr_minrate] numeric(28,2),\n\t[lms_bill_consignmentr_corderno] nvarchar(4000),\n\t[lms_bill_consignmentr_custref] nvarchar(4000),\n\t[lms_bill_consignmentr_manualupdateflag] int,\n\t[lms_bill_consignmentr_prevbillcustid] int,\n\t[lms_bill_consignmentr_specdelvehicleid] int,\n\t[lms_bill_consignmentr_specdelmissingrouteflag] int,\n\t[lms_bill_consignmentr_overborderflag] int,\n\t[lms_bill_consignmentr_samedeliverid] int,\n\t[lms_bill_consignmentr_combineroutecharge] numeric(28,2),\n\t[lms_bill_consignmentr_waybillid] int,\n\t[lms_bill_consignmentr_routelinecount] int,\n\t[lms_bill_consignmentr_samedelcount] int,\n\t[lms_bill_consignmentr_aweight] numeric(28,2),\n\t[lms_bill_consignmentr_vweight] numeric(28,2),\n\t[lms_bill_consignmentr_custref3] nvarchar(4000),\n\t[lms_bill_consignmentr_units] int,\n\t[lms_bill_consignmentr_totsurcharges] numeric(28,2),\n\t[lms_bill_consignmentr_noofpallets] int,\n\t[lms_bill_consignmentr_invalidpudel] int,\n\t[lms_bill_consignmentr_sharikaflag] int,\n\t[lms_bill_consignmentr_sapid] int,\n\t[lms_bill_consignmentr_totfuelsurcharge] numeric(28,2),\n\t[lms_bill_consignmentr_totdocsurcharge] numeric(28,2),\n\t[lms_bill_consignmentr_totothersurcharge] numeric(28,2),\n\t[lms_bill_consignmentr_specdel] int,\n\t[lms_bill_consignmentr_quoteflag] int,\n\t[lms_bill_consignmentr_billperiod] nvarchar(4000),\n\t[lms_bill_consignmentr_billweekr] int,\n\t[lms_bill_consignmentr_billperiodflag] int,\n\t[lms_bill_consignmentr_surhargeflag] int,\n\t[lms_bill_consignmentr_recalcflag] int,\n\t[lms_bill_consignmentr_quotemissingflag] int,\n\t[lms_bill_consignmentr_delivertypeid] int,\n\t[lms_bill_consignmentr_totcovidsurcharge] numeric(28,2),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_users_site] nvarchar(4000),\n\t[lms_bcustomer_id] int,\n\t[lms_bcustomer_name] nvarchar(4000),\n\t[lms_dcustomer_id] int,\n\t[lms_dcustomer_name] nvarchar(4000),\n\t[lms_bill_routerate_id] int,\n\t[lms_bill_routerate_billcustid] int,\n\t[lms_bill_routerate_effectivedate] datetime2(7),\n\t[lms_bill_routerate_uomid] int,\n\t[lms_bill_routerate_routetypeid] int,\n\t[lms_bill_routerate_servicetypeid] int,\n\t[lms_bill_routerate_minkg] numeric(28,2),\n\t[lms_bill_routerate_minrate] numeric(28,2),\n\t[lms_bill_routerate_addrate] numeric(28,2),\n\t[lms_bill_routerate_servicedays] int,\n\t[lms_bill_routerate_servicehours] numeric(28,2),\n\t[lms_bill_routerate_ratecardind] int,\n\t[lms_bill_routerate_pickupid] int,\n\t[lms_bill_routerate_deliverid] int,\n\t[lms_bill_routerate_description] nvarchar(4000),\n\t[lms_bill_routerate_activeflag] int,\n\t[lms_bill_routerate_billroutetypeflag] int,\n\t[lms_bill_routerate_samedayflag] int,\n\t[lms_bill_routerate_specialrateflag] int,\n\t[lms_bill_routerate_tocustid] int,\n\t[lms_bill_routerate_maxparcel] int,\n\t[lms_bill_routerate_returnflag] int,\n\t[lms_bill_routerate_cutoff] numeric(28,2),\n\t[lms_bill_routerate_rateperkg] numeric(28,2),\n\t[lms_bill_routerate_userid] int,\n\t[lms_bill_routerate_authorizeperson] nvarchar(4000),\n\t[lms_bill_routerate_updatedate] datetime2(7),\n\t[lms_bill_routerate_delivertypeid] int,\n\t[lms_bill_routerate_billyear] int,\n\t[lms_bill_routerate_ecommzoneid] int,\n\t[lms_bill_routerate_billareaid] int,\n\t[lms_bill_routerate_routerateoverideflag] int,\n\t[lms_bill_billtypesr_id] int,\n\t[lms_bill_billtypesr_description] nvarchar(4000),\n\t[lms_bill_billtypesr_surchargeflag] int,\n\t[lms_bill_zoneroute_pickupid] int,\n\t[lms_bill_zoneroute_pickupdescription] nvarchar(4000),\n\t[lms_bill_zoneroute_pickupzoneid] int,\n\t[lms_bill_zoneroute_pickupzrscode] nvarchar(4000),\n\t[lms_bill_zoneroute_pickupzonerouteorder] int,\n\t[lms_bill_zoneroute_pickupzonetype] nvarchar(4000),\n\t[lms_bill_zoneroute_pickupbroutemasterid] int,\n\t[lms_bill_zoneroute_pickupbroutecode] nvarchar(4000),\n\t[lms_bill_zoneroute_deliverid] int,\n\t[lms_bill_zoneroute_deliverdescription] nvarchar(4000),\n\t[lms_bill_zoneroute_deliverzoneid] int,\n\t[lms_bill_zoneroute_deliverzrscode] nvarchar(4000),\n\t[lms_bill_zoneroute_deliverzonerouteorder] int,\n\t[lms_bill_zoneroute_deliverzonetype] nvarchar(4000),\n\t[lms_bill_zoneroute_deliverbroutemasterid] int,\n\t[lms_bill_zoneroute_deliverbroutecode] nvarchar(4000),\n\t[lms_bill_servicetype_id] int,\n\t[lms_bill_servicetype_description] nvarchar(4000),\n\t[lms_bill_servicetype_code] nvarchar(4000),\n\t[lms_bill_servicetype_ccode] nvarchar(4000),\n\t[lms_bill_zone_pickupid] int,\n\t[lms_bill_zone_pickupdescription] nvarchar(4000),\n\t[lms_bill_zone_pickupzonemasterid] int,\n\t[lms_bill_zone_pickupcountryid] int,\n\t[lms_bill_zone_deliverid] int,\n\t[lms_bill_zone_deliverdescription] nvarchar(4000),\n\t[lms_bill_zone_deliverzonemasterid] int,\n\t[lms_bill_zone_delivercountryid] int,\n\t[lms_bill_delivertype_id] int,\n\t[lms_bill_delivertype_description] nvarchar(4000),\n\t[lms_broutemaster_pickupid] int,\n\t[lms_broutemaster_pickupdescription] nvarchar(4000),\n\t[lms_broutemaster_pickupcode] nvarchar(4000),\n\t[lms_broutemaster_pickupbrouteparentid] int,\n\t[lms_broutemaster_deliverid] int,\n\t[lms_broutemaster_deliverdescription] nvarchar(4000),\n\t[lms_broutemaster_delivercode] nvarchar(4000),\n\t[lms_broutemaster_deliverbrouteparentid] int\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstconsignment.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTConsignment\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTInstruction SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTInstruction') )\n    DROP EXTERNAL TABLE dbo.F_SSTInstruction\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTInstruction (\n\t[tms_instruction_id] bigint,\n\t[tms_instruction_bookingid] bigint,\n\t[tms_instruction_addressid] bigint,\n\t[tms_instruction_insdate] datetime2(7),\n\t[tms_instruction_moddate] datetime2(7),\n\t[tms_instruction_insby] bigint,\n\t[tms_instruction_onroute] int,\n\t[tms_instruction_instrtype] nvarchar(4000),\n\t[tms_instruction_onrouteid] bigint,\n\t[tms_instruction_sort] int,\n\t[tms_instruction_note] nvarchar(4000),\n\t[tms_instruction_onroutestatus] nvarchar(4000),\n\t[tms_instruction_legacyid] bigint,\n\t[tms_instruction_legacyaddress] nvarchar(4000),\n\t[tms_instruction_citybranchid] bigint,\n\t[tms_instruction_citybranchname] nvarchar(4000),\n\t[tms_address_id] bigint,\n\t[tms_address_customerid] bigint,\n\t[tms_address_address] nvarchar(4000),\n\t[tms_address_streetno] nvarchar(4000),\n\t[tms_address_city] nvarchar(4000),\n\t[tms_address_province] nvarchar(4000),\n\t[tms_address_country] nvarchar(4000),\n\t[tms_address_addresstype] nvarchar(4000),\n\t[tms_address_lat] float,\n\t[tms_address_lng] float,\n\t[tms_address_insdate] datetime2(7),\n\t[tms_address_moddate] datetime2(7),\n\t[tms_address_lastuseddate] datetime2(7),\n\t[tms_address_searchfield] nvarchar(4000),\n\t[tms_address_zipcode] nvarchar(4000),\n\t[tms_address_slug] nvarchar(4000),\n\t[tms_customer_status] nvarchar(4000),\n\t[tms_customer_name] nvarchar(4000),\n\t[tms_customer_parentid] bigint,\n\t[tms_customer_accountnumber] nvarchar(4000),\n\t[tms_customer_revenuecode] nvarchar(4000),\n\t[tms_customer_insdate] datetime2(7),\n\t[tms_customer_moddate] datetime2(7),\n\t[tms_customer_insby] bigint,\n\t[tms_customer_opaqueid] nvarchar(4000),\n\t[tms_customer_email] nvarchar(4000),\n\t[tms_customer_areacode] nvarchar(4000),\n\t[tms_customer_mobilenum] nvarchar(4000),\n\t[tms_customer_legacyid] int,\n\t[tms_customer_billingmethod] nvarchar(4000),\n\t[tms_customer_adjustmetric] nvarchar(4000),\n\t[tms_customer_adjustvalue] int,\n\t[tms_customer_adjustnegativeallowed] int,\n\t[tms_customer_adjustvalueusingprevmonth] int,\n\t[tms_customer_excludefromnotinvoicedreport] int,\n\t[tms_customer_logictype] nvarchar(4000),\n\t[tms_customer_minliability] bigint,\n\t[orv_lhdelivery_id] bigint,\n\t[orv_lhdelivery_did] bigint,\n\t[orv_lhdelivery_address] nvarchar(4000),\n\t[orv_lhdelivery_lat] float,\n\t[orv_lhdelivery_lng] float,\n\t[orv_lhdelivery_actualeta] datetime2(7),\n\t[orv_lhdelivery_eta] datetime2(7),\n\t[orv_lhdelivery_tsgeofenceenter] datetime2(7),\n\t[orv_lhdelivery_tsdocuments] datetime2(7),\n\t[orv_lhdelivery_customerref1] nvarchar(4000),\n\t[orv_lhdelivery_customerref2] nvarchar(4000),\n\t[orv_lhdelivery_trailersize] nvarchar(4000),\n\t[orv_lhdelivery_cargoweight] float,\n\t[orv_lhdelivery_cubicvolume] float,\n\t[orv_lhdelivery_geocodingstatus] nvarchar(4000),\n\t[orv_lhdelivery_status] nvarchar(4000),\n\t[orv_lhdelivery_optimizedorder] int,\n\t[orv_lhdelivery_triporder] int,\n\t[orv_lhdelivery_sequence] int,\n\t[orv_lhdelivery_bookingid] bigint,\n\t[orv_lhdelivery_grv] int,\n\t[orv_lhdelivery_chepslip] int,\n\t[orv_lhdelivery_type] nvarchar(4000),\n\t[orv_lhdelivery_insdate] datetime2(7),\n\t[orv_lhdelivery_isdirect] int,\n\t[orv_lhdelivery_notes] nvarchar(4000),\n\t[orv_lhdelivery_contactperson] nvarchar(4000),\n\t[orv_lhdelivery_contactnumber] nvarchar(4000),\n\t[orv_lhdelivery_trailerfleetcode] nvarchar(4000),\n\t[orv_lhdelivery_primarycustomerid] bigint,\n\t[orv_lhdelivery_pcustomername] nvarchar(4000),\n\t[orv_lhdelivery_pcustomeraccountnumber] nvarchar(4000),\n\t[orv_lhdelivery_pcustomerrevenuecode] nvarchar(4000),\n\t[orv_lhdelivery_secondarycustomerid] bigint,\n\t[orv_lhdelivery_scustomername] nvarchar(4000),\n\t[orv_lhdelivery_scustomeraccountnumber] nvarchar(4000),\n\t[orv_lhdelivery_scustomerrevenuecode] nvarchar(4000),\n\t[orv_lhdelivery_actiondate] datetime2(7),\n\t[orv_lhdelivery_tsgeofenceexit] datetime2(7),\n\t[orv_lhdelivery_pctmsid] bigint,\n\t[orv_lhdelivery_sctmsid] bigint,\n\t[orv_lhdelivery_customorder] int,\n\t[orv_lhdelivery_skipdate] datetime2(7),\n\t[orv_lhdelivery_skipreason] nvarchar(4000),\n\t[orv_lhdelivery_outofgeofencereason] nvarchar(4000),\n\t[orv_lhdelivery_tsarrivedcustomer] datetime2(7),\n\t[orv_lhdelivery_tsdroppedoff] datetime2(7),\n\t[orv_lhdelivery_tsstartoffloading] datetime2(7),\n\t[orv_lhdelivery_tsstartloading] datetime2(7),\n\t[orv_lhdelivery_tsloaded] datetime2(7),\n\t[orv_lhdelivery_tsfinishedoffloading] datetime2(7),\n\t[orv_lhdelivery_tsdocumnetshanddovedriver] datetime2(7),\n\t[orv_lhdelivery_tsleavingcustomer] datetime2(7),\n\t[orv_lhdelivery_actionsubtype] nvarchar(4000),\n\t[orv_lhdelivery_tsstart] datetime2(7),\n\t[orv_lhdelivery_signame] nvarchar(4000),\n\t[orv_lhdelivery_signcomment] nvarchar(4000),\n\t[orv_lhdelivery_signdate] datetime2(7),\n\t[orv_lhdelivery_tsendtate] datetime2(7),\n\t[orv_lhdelivery_tsentergeofenceapp] datetime2(7),\n\t[orv_lhdelivery_tsexitgeofenceapp] datetime2(7),\n\t[orv_lhdelivery_tmsid] bigint,\n\t[orv_lhdelivery_subtype] nvarchar(4000),\n\t[orv_lhdelivery_needbotrailerver] int,\n\t[orv_lhdelivery_secondtrailerfleetcode] nvarchar(4000),\n\t[orv_lhdelivery_trailerverlat] float,\n\t[orv_lhdelivery_trailerverlng] float,\n\t[orv_lhdelivery_tstrailerver] datetime2(7),\n\t[orv_lhdelivery_podlat] float,\n\t[orv_lhdelivery_podlng] float,\n\t[orv_lhdelivery_skiplat] float,\n\t[orv_lhdelivery_skiplng] float,\n\t[orv_lhdelivery_uncanceldate] datetime2(7)\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstinstruction.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTInstruction \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTLoadChild SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTLoadChild') )\n    DROP EXTERNAL TABLE dbo.F_SSTLoadChild\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTLoadChild (\n\t[lms_loads_id] int,\n\t[lms_loads_routeid] int,\n\t[lms_loads_driverid] int,\n\t[lms_loads_sealno] nvarchar(4000),\n\t[lms_loads_vehicleid] int,\n\t[lms_loads_ttypeid] int,\n\t[lms_loads_userid] int,\n\t[lms_loads_ldate] datetime2(7),\n\t[lms_loads_courierid] nvarchar(4000),\n\t[lms_loads_site] nvarchar(4000),\n\t[lms_loads_fromlocid] int,\n\t[lms_loads_tolocid] int,\n\t[lms_loads_cdate] datetime2(7),\n\t[lms_loads_trailer1] int,\n\t[lms_loads_trailer2] int,\n\t[lms_loads_cref] nvarchar(4000),\n\t[lms_loads_debriefed] int,\n\t[lms_loads_mrpflag] int,\n\t[lms_loads_mrpcflag] int,\n\t[lms_loads_finalflag] int,\n\t[lms_loads_alidaflag] int,\n\t[lms_loads_puibts] int,\n\t[lms_loads_pucols] int,\n\t[lms_loads_planningref] nvarchar(4000),\n\t[lms_loads_interfacedate] datetime2(7),\n\t[lms_loads_nosealsret] int,\n\t[lms_loads_excludeopsi] int,\n\t[lms_loads_dccref] nvarchar(4000),\n\t[lms_loads_srouteid] int,\n\t[lms_loads_fuellitres] numeric(18,2),\n\t[lms_loads_outsourcedcrew] int,\n\t[lms_loads_masterloadid] int,\n\t[lms_loads_securitygatedespatched] datetime2(7),\n\t[lms_loads_securitygateuserid] int,\n\t[lms_loads_securitygatearrived] datetime2(7),\n\t[lms_loads_securitygatearriveduserid] int,\n\t[lms_loads_lastupdate] datetime2(7),\n\t[lms_loads_bayno] nvarchar(4000),\n\t[lms_loads_costs] numeric(18,2),\n\t[lms_loads_estdeparturedatetime] datetime2(7),\n\t[lms_loads_totalweight] numeric(18,0),\n\t[lms_loads_ovrignore] int,\n\t[lms_loads_childloadid] int,\n\t[lms_loads_orvcode] int,\n\t[lms_loads_companyid] int,\n\t[lms_loads_editloaddate] datetime2(7),\n\t[lms_loads_reopeneddate] datetime2(7),\n\t[lms_loads_reopeneduserid] int,\n\t[lms_loads_novehicle] int,\n\t[lms_loads_mobilefeedbackreasonid] int,\n\t[lms_loads_direct] int,\n\t[lms_loads_noofpcls] int,\n\t[lms_loads_debriefdt] datetime2(7),\n\t[lms_loads_httpcode] int,\n\t[lms_loads_parentloadid] int,\n\t[lms_loads_mrpobversion] int,\n\t[lms_parcelbyload_loadid] int,\n\t[lms_parcelbyload_aggweight] float,\n\t[lms_parcelbyload_aggchargeweight] numeric(28,2),\n\t[lms_parcelbyload_aggvolweight] float,\n\t[lms_parcelbyload_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbyload_noparcels] bigint,\n\t[lms_sroute_id] int,\n\t[lms_sroute_description] nvarchar(4000),\n\t[lms_driver_id] int,\n\t[lms_driver_dname] nvarchar(4000),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_users_site] nvarchar(4000),\n\t[lms_users_reopenuserid] int,\n\t[lms_users_reopenuserfullname] nvarchar(4000),\n\t[lms_users_reopenusersite] nvarchar(4000),\n\t[lms_vehicle_id] int,\n\t[lms_vehicle_fleetno] nvarchar(4000),\n\t[lms_vehicle_uid] nvarchar(4000),\n\t[lms_vehicle_trailer1id] int,\n\t[lms_vehicle_trailer1fleetno] nvarchar(4000),\n\t[lms_vehicle_trailer1uid] nvarchar(4000),\n\t[lms_vehicle_trailer2id] int,\n\t[lms_vehicle_trailer2fleetno] nvarchar(4000),\n\t[lms_vehicle_trailer2uid] nvarchar(4000),\n\t[md_vehiclebasic_id] bigint,\n\t[md_vehiclebasic_uid] nvarchar(4000),\n\t[md_vehiclebasic_vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_activeflag] bigint,\n\t[md_vehiclebasic_vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_depot] nvarchar(4000),\n\t[md_vehiclebasic_enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_fueltype] nvarchar(4000),\n\t[md_vehiclebasic_registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_year] int,\n\t[md_vehiclebasic_vehicleownerid] bigint,\n\t[md_vehiclebasic_vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_staffvehicleflag] int,\n\t[md_vehiclebasic_vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_brn] nvarchar(4000),\n\t[md_vehiclebasic_brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_insdate] bigint,\n\t[md_vehiclebasic_insby] nvarchar(4000),\n\t[md_vehiclebasic_islinehaulvehicle] int,\n\t[md_vehiclebasic_internalheight] numeric(18,2),\n\t[md_vehiclebasic_internallength] numeric(18,2),\n\t[md_vehiclebasic_internalvolume] numeric(18,2),\n\t[md_vehiclebasic_internalwidth] numeric(18,2),\n\t[md_vehiclebasic_moddate] bigint,\n\t[md_vehiclebasic_trailerflag] int,\n\t[md_vehiclebasic_workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_approveddate] bigint,\n\t[md_vehiclebasic_trailer1id] bigint,\n\t[md_vehiclebasic_trailer1uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer1activeflag] bigint,\n\t[md_vehiclebasic_trailer1vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer1enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer1year] int,\n\t[md_vehiclebasic_trailer1vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer1vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer1staffvehicleflag] int,\n\t[md_vehiclebasic_trailer1vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer1insdate] bigint,\n\t[md_vehiclebasic_trailer1insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer1islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer1internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer1internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer1moddate] bigint,\n\t[md_vehiclebasic_trailer1trailerflag] int,\n\t[md_vehiclebasic_trailer1workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1approveddate] bigint,\n\t[md_vehiclebasic_trailer2id] bigint,\n\t[md_vehiclebasic_trailer2uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer2activeflag] bigint,\n\t[md_vehiclebasic_trailer2vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer2enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer2year] int,\n\t[md_vehiclebasic_trailer2vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer2vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer2staffvehicleflag] int,\n\t[md_vehiclebasic_trailer2vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer2insdate] bigint,\n\t[md_vehiclebasic_trailer2insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer2islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer2internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer2internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer2moddate] bigint,\n\t[md_vehiclebasic_trailer2trailerflag] int,\n\t[md_vehiclebasic_trailer2workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2approveddate] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstloadchild.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTLoadChild\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTLoadParent SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTLoadParent') )\n    DROP EXTERNAL TABLE dbo.F_SSTLoadParent\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTLoadParent (\n\t[lms_loadparent_parentloadid] int,\n\t[lms_loadparent_aggweight] float,\n\t[lms_loadparent_aggchargeweight] numeric(18,2),\n\t[lms_loadparent_aggvolweight] float,\n\t[lms_loadparent_aggvolumiserweight] numeric(18,2),\n\t[lms_loadparent_noparcels] bigint,\n\t[orv_dispatch_id] bigint,\n\t[orv_dispatch_lmsid] bigint,\n\t[orv_dispatch_vid] bigint,\n\t[orv_dispatch_did] bigint,\n\t[orv_dispatch_status] nvarchar(4000),\n\t[orv_dispatch_startdate] datetime2(7),\n\t[orv_dispatch_stopdate] datetime2(7),\n\t[orv_dispatch_vehicletype] int,\n\t[orv_dispatch_uid] bigint,\n\t[orv_dispatch_estdepdate] datetime2(7),\n\t[orv_dispatch_trailer] bigint,\n\t[orv_dispatch_trailer2] bigint,\n\t[orv_dispatch_fromlocid] bigint,\n\t[orv_dispatch_tolocid] bigint,\n\t[orv_dispatch_site] nvarchar(4000),\n\t[orv_dispatch_lastupdate] datetime2(7),\n\t[orv_dispatch_etastatus] nvarchar(4000),\n\t[orv_dispatch_startinglat] float,\n\t[orv_dispatch_startinglng] float,\n\t[orv_dispatch_endinglat] float,\n\t[orv_dispatch_endinglng] float,\n\t[orv_dispatch_startingfrom] nvarchar(4000),\n\t[orv_dispatch_goingto] nvarchar(4000),\n\t[orv_dispatch_importissue] nvarchar(4000),\n\t[orv_dispatch_insdate] datetime2(7),\n\t[orv_dispatch_estarrdate] datetime2(7),\n\t[orv_dispatch_duration] bigint,\n\t[orv_dispatch_distance] bigint,\n\t[orv_dispatch_cost] bigint,\n\t[orv_dispatch_stoplat] float,\n\t[orv_dispatch_stoplng] float,\n\t[orv_dispatch_stopreason] nvarchar(4000),\n\t[orv_dispatch_startodo] bigint,\n\t[orv_dispatch_stopodo] bigint,\n\t[orv_dispatch_expduration] bigint,\n\t[orv_dispatch_expdistance] bigint,\n\t[orv_dispatch_expcost] bigint,\n\t[orv_dispatch_collectionid] bigint,\n\t[orv_dispatch_crew] int,\n\t[orv_dispatch_crewnames] nvarchar(4000),\n\t[orv_dispatch_bocloseuid] bigint,\n\t[orv_dispatch_routing] nvarchar(4000),\n\t[orv_dispatch_swapct] int,\n\t[orv_dispatch_debriefed] int,\n\t[orv_dispatch_debriefnotes] nvarchar(4000),\n\t[orv_dispatch_bopin] nvarchar(4000),\n\t[orv_dispatch_cpicost] bigint,\n\t[orv_dispatch_labourcost] bigint,\n\t[orv_dispatch_maintcost] bigint,\n\t[orv_dispatch_inscost] bigint,\n\t[orv_dispatch_tollcost] bigint,\n\t[orv_dispatch_fuelcost] bigint,\n\t[orv_dispatch_internal] int,\n\t[orv_dispatch_childids] nvarchar(4000),\n\t[orv_dispatch_guid] bigint,\n\t[orv_dispatch_timedefinite] int,\n\t[orv_dispatch_orvcode] int,\n\t[orv_dispatch_tsstopdepoenter] datetime2(7),\n\t[orv_dispatch_tsstartdepoexit] datetime2(7),\n\t[orv_dispatch_reroutect] int,\n\t[orv_dispatch_actualarrdate] datetime2(7),\n\t[orv_dispatch_physicalstartlat] float,\n\t[orv_dispatch_physicalstartlng] float,\n\t[orv_dispatch_tsstartdepoexitapp] datetime2(7),\n\t[orv_dispatch_tsstopdepoenterapp] datetime2(7),\n\t[orv_dispatch_uncanceldate] datetime2(7),\n\t[orv_dispatch_uncancelusername] nvarchar(4000),\n\t[orv_dispatch_lmsdebrifed] int,\n\t[orv_dispatch_reviseddebrief] int,\n\t[orv_dispatch_lhtransporter] nvarchar(4000),\n\t[orv_dispatch_triptype] nvarchar(4000),\n\t[orv_dispatch_startreason] nvarchar(4000),\n\t[orv_dispatch_route] nvarchar(4000),\n\t[orv_dispatch_tmstraileridentify] nvarchar(4000),\n\t[orv_dispatch_tmstrailer2identify] nvarchar(4000),\n\t[orv_dispatch_tmscontroller] nvarchar(4000),\n\t[orv_dispatch_routekey] nvarchar(4000),\n\t[orv_dispatch_courierid] bigint,\n\t[orv_dispatch_originalstartdate] datetime2(7),\n\t[orv_dispatch_originalextarrival] datetime2(7),\n\t[orv_dispatch_recomputeoriginals] int,\n\t[orv_dispatch_originalextdistance] bigint,\n\t[orv_dispatch_originalextduration] bigint,\n\t[orv_dispatch_moddate] datetime2(7),\n\t[orv_dispatch_tmsmode] int,\n\t[orv_dispatch_driversignature] bigint,\n\t[orv_vehicle_id] bigint,\n\t[orv_vehicle_fleetcode] nvarchar(4000),\n\t[orv_vehicle_lmsid] bigint,\n\t[orv_vehicle_trailer1id] bigint,\n\t[orv_vehicle_trailer1fleetcode] nvarchar(4000),\n\t[orv_vehicle_trailer1lmsid] bigint,\n\t[orv_vehicle_trailer2id] bigint,\n\t[orv_vehicle_trailer2fleetcode] nvarchar(4000),\n\t[orv_vehicle_trailer2lmsid] bigint,\n\t[lms_vehicle_id] int,\n\t[lms_vehicle_uid] nvarchar(4000),\n\t[lms_vehicle_trailer1id] int,\n\t[lms_vehicle_trailer1uid] nvarchar(4000),\n\t[lms_vehicle_trailer2id] int,\n\t[lms_vehicle_trailer2uid] nvarchar(4000),\n\t[orv_orvuser_id] bigint,\n\t[orv_orvuser_username] nvarchar(4000),\n\t[orv_orvuser_fname] nvarchar(4000),\n\t[orv_orvuser_lname] nvarchar(4000),\n\t[orv_orvuser_empcode] nvarchar(4000),\n\t[orv_orvuser_aka] nvarchar(4000),\n\t[orv_orvuser_gender] nvarchar(4000),\n\t[orv_orvuser_cellno] nvarchar(4000),\n\t[orv_orvuser_rsaid] nvarchar(4000),\n\t[orv_orvuser_passportno] nvarchar(4000),\n\t[orv_orvuser_idpassportno] nvarchar(4000),\n\t[orv_orvuser_nationality] nvarchar(4000),\n\t[orv_orvuser_birthcountry] nvarchar(4000),\n\t[orv_orvuser_engageddate] datetime2(7),\n\t[orv_orvuser_joineddate] datetime2(7),\n\t[orv_orvuser_termindate] datetime2(7),\n\t[orv_orvuser_status] nvarchar(4000),\n\t[orv_orvuser_depot] nvarchar(4000),\n\t[orv_orvuser_jobcategory] nvarchar(4000),\n\t[orv_orvuser_jobtitle] nvarchar(4000),\n\t[orv_orvuser_payroll] nvarchar(4000),\n\t[orv_orvuser_annualsalary] float,\n\t[orv_orvuser_insdate] datetime2(7),\n\t[orv_orvuser_lmsid] bigint,\n\t[orv_orvuser_vipid] bigint,\n\t[orv_orvuser_dadriver] int,\n\t[orv_orvuser_dasupervisor] int,\n\t[orv_orvuser_davanassistant] int,\n\t[orv_orvuser_crewlmsid] bigint,\n\t[orv_orvuser_courierid] bigint,\n\t[md_vehiclebasic_id] bigint,\n\t[md_vehiclebasic_uid] nvarchar(4000),\n\t[md_vehiclebasic_vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_activeflag] bigint,\n\t[md_vehiclebasic_vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_depot] nvarchar(4000),\n\t[md_vehiclebasic_enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_fueltype] nvarchar(4000),\n\t[md_vehiclebasic_registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_year] int,\n\t[md_vehiclebasic_vehicleownerid] bigint,\n\t[md_vehiclebasic_vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_staffvehicleflag] int,\n\t[md_vehiclebasic_vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_brn] nvarchar(4000),\n\t[md_vehiclebasic_brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_insdate] datetime2(7),\n\t[md_vehiclebasic_insby] nvarchar(4000),\n\t[md_vehiclebasic_islinehaulvehicle] int,\n\t[md_vehiclebasic_internalheight] numeric(18,2),\n\t[md_vehiclebasic_internallength] numeric(18,2),\n\t[md_vehiclebasic_internalvolume] numeric(18,2),\n\t[md_vehiclebasic_internalwidth] numeric(18,2),\n\t[md_vehiclebasic_moddate] datetime2(7),\n\t[md_vehiclebasic_trailerflag] int,\n\t[md_vehiclebasic_workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_approveddate] datetime2(7),\n\t[md_vehiclebasic_trailer1id] bigint,\n\t[md_vehiclebasic_trailer1uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer1activeflag] bigint,\n\t[md_vehiclebasic_trailer1vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer1enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer1year] int,\n\t[md_vehiclebasic_trailer1vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer1vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer1staffvehicleflag] int,\n\t[md_vehiclebasic_trailer1vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer1insdate] datetime2(7),\n\t[md_vehiclebasic_trailer1insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer1islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer1internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer1internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer1moddate] datetime2(7),\n\t[md_vehiclebasic_trailer1trailerflag] int,\n\t[md_vehiclebasic_trailer1workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1approveddate] datetime2(7),\n\t[md_vehiclebasic_trailer2id] bigint,\n\t[md_vehiclebasic_trailer2uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer2activeflag] bigint,\n\t[md_vehiclebasic_trailer2vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer2enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer2year] int,\n\t[md_vehiclebasic_trailer2vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer2vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer2staffvehicleflag] int,\n\t[md_vehiclebasic_trailer2vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer2insdate] datetime2(7),\n\t[md_vehiclebasic_trailer2insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer2islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer2internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer2internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer2moddate] datetime2(7),\n\t[md_vehiclebasic_trailer2trailerflag] int,\n\t[md_vehiclebasic_trailer2workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2approveddate] datetime2(7)\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstloadparent.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTLoadParent \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTOrder SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTOrder') )\n    DROP EXTERNAL TABLE dbo.F_SSTOrder\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTOrder (\n\t[lms_order_id] int,\n\t[lms_order_idold] nvarchar(4000),\n\t[lms_order_corderno] nvarchar(4000),\n\t[lms_order_custref] nvarchar(4000),\n\t[lms_order_waybillid] int,\n\t[lms_order_pickupcustid] int,\n\t[lms_order_delivercustid] int,\n\t[lms_order_billcustid] int,\n\t[lms_order_ovalue] numeric(18,2),\n\t[lms_order_hodate] datetime2(7),\n\t[lms_order_cservice] nvarchar(4000),\n\t[lms_order_courierid] nvarchar(4000),\n\t[lms_order_custservice] nvarchar(4000),\n\t[lms_order_userid] int,\n\t[lms_order_pcode] nvarchar(4000),\n\t[lms_order_appointment] datetime2(7),\n\t[lms_order_deliverby] datetime2(7),\n\t[lms_order_dconfirmed] nvarchar(4000),\n\t[lms_order_dcomment] nvarchar(4000),\n\t[lms_order_drefno] nvarchar(4000),\n\t[lms_order_duserid] int,\n\t[lms_order_nopods] int,\n\t[lms_order_duedate] datetime2(7),\n\t[lms_order_batchno] int,\n\t[lms_order_units] int,\n\t[lms_order_airfreightflag] int,\n\t[lms_order_custref3] nvarchar(4000),\n\t[lms_order_specdel] int,\n\t[lms_order_flunits] int,\n\t[lms_order_flkgs] int,\n\t[lms_order_inservice] datetime2(7),\n\t[lms_order_custdocs] int,\n\t[lms_order_scanned] datetime2(7),\n\t[lms_order_scanimagename1] nvarchar(4000),\n\t[lms_order_scanimagename] nvarchar(4000),\n\t[lms_order_changereasonid] int,\n\t[lms_order_bill_servicetype] int,\n\t[lms_order_bill_vehicletype] int,\n\t[lms_order_quote] numeric(18,2),\n\t[lms_order_consignlabel] int,\n\t[lms_order_custref2] nvarchar(4000),\n\t[lms_order_callprogid] int,\n\t[lms_order_callprogupddate] datetime2(7),\n\t[lms_order_submitedi] int,\n\t[lms_order_lastupdate] datetime2(7),\n\t[lms_order_quoteflag] int,\n\t[lms_order_bill_minrate] numeric(18,2),\n\t[lms_order_bill_addrate] numeric(18,2),\n\t[lms_order_bill_minkg] numeric(18,2),\n\t[lms_order_notes] nvarchar(4000),\n\t[lms_order_quoteweight] numeric(18,2),\n\t[lms_order_orderconsolidationid] int,\n\t[lms_order_quotefuellevy] numeric(18,2),\n\t[lms_order_quoteothersurcharges] numeric(18,2),\n\t[lms_order_quotedocfees] numeric(18,2),\n\t[lms_bcustomer_id] int,\n\t[lms_bcustomer_name] nvarchar(4000),\n\t[lms_pcustomer_id] int,\n\t[lms_pcustomer_name] nvarchar(4000),\n\t[lms_dcustomer_id] int,\n\t[lms_dcustomer_name] nvarchar(4000),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_users_site] nvarchar(4000),\n\t[lms_parcelbyorder_orderid] int,\n\t[lms_parcelbyorder_aggweight] float,\n\t[lms_parcelbyorder_aggchargeweight] numeric(28,2),\n\t[lms_parcelbyorder_aggvolweight] float,\n\t[lms_parcelbyorder_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbyorder_noparcels] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstorder.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTOrder\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTParcel SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcel') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcel\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTParcel (\n\t[lms_parcel_id] int,\n\t[lms_parcel_weight] float,\n\t[lms_parcel_waybillid] int,\n\t[lms_parcel_orderid] int,\n\t[lms_parcel_acceptancedate] datetime2(7),\n\t[lms_parcel_userid] int,\n\t[lms_parcel_barcode] nvarchar(4000),\n\t[lms_parcel_endorsement] nvarchar(4000),\n\t[lms_parcel_volweight] float,\n\t[lms_parcel_chargeweight] numeric(18,2),\n\t[lms_parcel_ptype] int,\n\t[lms_parcel_description] nvarchar(4000),\n\t[lms_parcel_locid] int,\n\t[lms_parcel_handoverdate] datetime2(7),\n\t[lms_parcel_seqno] int,\n\t[lms_parcel_floorstatus] nvarchar(4000),\n\t[lms_parcel_consignid] int,\n\t[lms_parcel_cref] nvarchar(4000),\n\t[lms_parcel_claimid] int,\n\t[lms_parcel_duedate] datetime2(7),\n\t[lms_parcel_coddate] datetime2(7),\n\t[lms_parcel_disflag] int,\n\t[lms_parcel_astoreid] int,\n\t[lms_parcel_mrpflag] int,\n\t[lms_parcel_nmrflag] int,\n\t[lms_parcel_consignflag] int,\n\t[lms_parcel_cmanifest] int,\n\t[lms_parcel_cbranchid] int,\n\t[lms_parcel_claimref] nvarchar(4000),\n\t[lms_parcel_cost] numeric(18,2),\n\t[lms_parcel_creason] nvarchar(4000),\n\t[lms_parcel_customerbarcode] nvarchar(4000),\n\t[lms_parcel_dbshorts] int,\n\t[lms_parcel_holddate] datetime2(7),\n\t[lms_parcel_aflag] int,\n\t[lms_parcel_stationid] int,\n\t[lms_parcel_dbshortsdesc] nvarchar(4000),\n\t[lms_parcel_dstatusid] int,\n\t[lms_parcel_dflag] int,\n\t[lms_parcel_callprogid] int,\n\t[lms_parcel_callprogupddate] datetime2(7),\n\t[lms_parcel_duplflag] int,\n\t[lms_parcel_lastupdate] datetime2(7),\n\t[lms_parcel_datevolumised] datetime2(7),\n\t[lms_parcel_volumiserweight] numeric(18,2),\n\t[lms_parcel_volumiserlength] numeric(18,2),\n\t[lms_parcel_volumiserheight] numeric(18,2),\n\t[lms_parcel_volumiserwidth] numeric(18,2),\n\t[lms_parcel_volumiserid] int,\n\t[lms_parcel_pl] numeric(18,2),\n\t[lms_parcel_ph] numeric(18,2),\n\t[lms_parcel_pw] numeric(18,2),\n\t[lms_parcel_totcharge] numeric(18,2),\n\t[lms_parcel_dontrecalc] int,\n\t[lms_parcel_containerid] int,\n\t[lms_parcel_avgvolweight] numeric(18,2),\n\t[lms_waybill_id] int,\n\t[lms_waybill_poddate] datetime2(7),\n\t[lms_waybill_date] datetime2(7),\n\t[lms_order_id] int,\n\t[lms_order_hodate] datetime2(7),\n\t[lms_order_corderno] nvarchar(4000),\n\t[lms_order_billcustid] int,\n\t[lms_order_pickupcustid] int,\n\t[lms_order_delivercustid] int,\n\t[lms_order_specdel] int,\n\t[lms_consignment_id] int,\n\t[lms_consignment_cdate] datetime2(7),\n\t[lms_consignment_deliverby] datetime2(7),\n\t[lms_parceldetail_parcelid] int,\n\t[lms_parceldetail_inservicestart] datetime2(7),\n\t[lms_parceldetail_deliverby] datetime2(7),\n\t[lms_parceldetail_servicedays] int,\n\t[lms_parceldetail_servicetime] numeric(13,4),\n\t[lms_parceldetail_cutofftime] numeric(13,4),\n\t[lms_parceldetail_appointment] datetime2(7),\n\t[lms_parceldetail_nddid] int,\n\t[lms_parceldetail_custonholdstart] datetime2(7),\n\t[lms_parceldetail_custonholdend] datetime2(7),\n\t[lms_parceldetail_splitinitial] int,\n\t[lms_parceldetail_weekendholidays] int,\n\t[lms_parceldetail_inbound] int,\n\t[lms_parceldetail_courierid] nvarchar(4000),\n\t[lms_parceldetail_serviceid] nvarchar(4000),\n\t[lms_parceldetail_custaccid] int,\n\t[lms_parceldetail_broutemasterid] int,\n\t[lms_parceldetail_broutemasterfromid] int,\n\t[lms_parceldetail_broutemastertoid] int,\n\t[lms_parceldetail_leadtimeid] int,\n\t[lms_bcustomer_id] int,\n\t[lms_bcustomer_name] nvarchar(4000),\n\t[lms_pcustomer_id] int,\n\t[lms_pcustomer_name] nvarchar(4000),\n\t[lms_dcustomer_id] int,\n\t[lms_dcustomer_name] nvarchar(4000),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_users_site] nvarchar(4000),\n\t[lms_bill_parceltype_id] int,\n\t[lms_bill_parceltype_description] nvarchar(4000),\n\t[lms_bill_parceltype_ptype] int,\n\t[lms_clocation_id] int,\n\t[lms_clocation_description] nvarchar(4000),\n\t[lms_dstatus_id] int,\n\t[lms_dstatus_description] nvarchar(4000),\n\t[lms_volumiser_id] int,\n\t[lms_volumiser_locid] int,\n\t[lms_volumiser_volumisercode] nvarchar(4000),\n\t[lms_volumiser_volumiserdescription] nvarchar(4000),\n\t[lms_volumiser_userid] int,\n\t[lms_volumiser_inlinescale] int,\n\t[orv_parcel_id] bigint,\n\t[orv_parcel_lmsid] bigint,\n\t[orv_parcel_did] bigint,\n\t[orv_parcel_scandate] datetime2(7),\n\t[orv_parcel_scanstatus] nvarchar(4000),\n\t[orv_parcel_scanmode] nvarchar(4000),\n\t[orv_parcel_claimid] bigint,\n\t[orv_parcel_courierid] bigint,\n\t[orv_parcel_moddate] datetime2(7)\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcel.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTParcel\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTParcelByConsignment SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcelByConsignment') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcelByConsignment\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTParcelByConsignment (\n\t[lms_parcelbyconsignment_consignid] int,\n\t[lms_parcelbyconsignment_aggweight] float,\n\t[lms_parcelbyconsignment_aggchargeweight] numeric(28,2),\n\t[lms_parcelbyconsignment_aggvolweight] float,\n\t[lms_parcelbyconsignment_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbyconsignment_noparcels] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcelbyconsignment.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTParcelByConsignment\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTParcelByLoad SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcelByLoad') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcelByLoad\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTParcelByLoad (\n\t[lms_parcelbyload_loadid] int,\n\t[lms_parcelbyload_aggweight] float,\n\t[lms_parcelbyload_aggchargeweight] numeric(28,2),\n\t[lms_parcelbyload_aggvolweight] float,\n\t[lms_parcelbyload_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbyload_noparcels] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcelbyload.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTParcelByLoad\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTParcelByOrder SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcelByOrder') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcelByOrder\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTParcelByOrder (\n\t[lms_parcelbyorder_orderid] int,\n\t[lms_parcelbyorder_aggweight] float,\n\t[lms_parcelbyorder_aggchargeweight] numeric(28,2),\n\t[lms_parcelbyorder_aggvolweight] float,\n\t[lms_parcelbyorder_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbyorder_noparcels] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcelbyorder.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTParcelByOrder\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTParcelByWaybill_SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcelByWaybill') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcelByWaybill\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTParcelByWaybill (\n\t[lms_parcelbywaybill_waybillid] int,\n\t[lms_parcelbywaybill_aggweight] float,\n\t[lms_parcelbywaybill_aggchargeweight] numeric(28,2),\n\t[lms_parcelbywaybill_aggvolweight] float,\n\t[lms_parcelbywaybill_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbywaybill_noparcels] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcelbywaybill.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTParcelByWaybill\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTTrack_SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTTrack') )\n    DROP EXTERNAL TABLE dbo.F_SSTTrack\nGO\n\n\nCREATE EXTERNAL TABLE dbo.F_SSTTrack (\n\t[lms_track_id] int,\n\t[lms_track_opendt] datetime2(7),\n\t[lms_track_closedt] datetime2(7),\n\t[lms_track_loadid] int,\n\t[lms_track_userid] int,\n\t[lms_track_parcelid] int,\n\t[lms_track_tolocid] int,\n\t[lms_track_touserid] int,\n\t[lms_track_fromlocid] int,\n\t[lms_track_tracktypeid2] int,\n\t[lms_track_tracktypeid] int,\n\t[lms_track_lastupdate] datetime2(7),\n\t[lms_track_toloadid] int,\n\t[lms_track_openstationid] int,\n\t[lms_track_closestationid] int,\n\t[lms_parcel_weight] float,\n\t[lms_parcel_chargeweight] numeric(18,2),\n\t[lms_parcel_volweight] float,\n\t[lms_parcel_volumiserweight] numeric(18,2),\n\t[lms_flocation_id] int,\n\t[lms_flocation_description] nvarchar(4000),\n\t[lms_tlocation_id] int,\n\t[lms_tlocation_description] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/ssttrack.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTTrack\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTTrip SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTTrip') )\n    DROP EXTERNAL TABLE dbo.F_SSTTrip\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTTrip (\n\t[tms_trip_id] bigint,\n\t[tms_trip_driverid] nvarchar(4000),\n\t[tms_trip_vehicleid] nvarchar(4000),\n\t[tms_trip_trailerid] nvarchar(4000),\n\t[tms_trip_sectrailerid] nvarchar(4000),\n\t[tms_trip_status] nvarchar(4000),\n\t[tms_trip_routeid] bigint,\n\t[tms_trip_opsrouteid] bigint,\n\t[tms_trip_startfromaddress] nvarchar(4000),\n\t[tms_trip_startfromlat] float,\n\t[tms_trip_startfromlng] float,\n\t[tms_trip_dispatchdate] datetime2(7),\n\t[tms_trip_stopaddress] nvarchar(4000),\n\t[tms_trip_stoplat] float,\n\t[tms_trip_stoplng] float,\n\t[tms_trip_insdate] datetime2(7),\n\t[tms_trip_moddate] datetime2(7),\n\t[tms_trip_insby] bigint,\n\t[tms_trip_onrouteid] bigint,\n\t[tms_trip_uuid] nvarchar(4000),\n\t[tms_trip_insbyuser] nvarchar(4000),\n\t[tms_trip_thirdpartyid] bigint,\n\t[tms_trip_timehash] int,\n\t[tms_trip_onroutestatus] nvarchar(4000),\n\t[tms_trip_lastupdate] datetime2(7),\n\t[tms_trip_lastlng] float,\n\t[tms_trip_lastlat] float,\n\t[tms_trip_controllerid] bigint,\n\t[tms_trip_trackstatus] nvarchar(4000),\n\t[tms_trip_lastrackid] bigint,\n\t[tms_trip_customer] nvarchar(4000),\n\t[tms_trip_bookings] nvarchar(4000),\n\t[tms_trip_controller] nvarchar(4000),\n\t[tms_trip_transporter] nvarchar(4000),\n\t[tms_trip_legacyid] bigint,\n\t[tms_trip_originatedfrom] nvarchar(4000),\n\t[tms_trip_local] int,\n\t[tms_trip_startdate] datetime2(7),\n\t[tms_trip_enddate] datetime2(7),\n\t[tms_trip_actualdeliverydate] datetime2(7),\n\t[tms_trip_note] nvarchar(4000),\n\t[tms_trip_deliverydate] datetime2(7),\n\t[tms_trip_internalexternal] nvarchar(4000),\n\t[tms_trip_pickupstartaddress] nvarchar(4000),\n\t[orv_dispatch_id] bigint,\n\t[orv_dispatch_lmsid] bigint,\n\t[orv_dispatch_vid] bigint,\n\t[orv_dispatch_did] bigint,\n\t[orv_dispatch_status] nvarchar(4000),\n\t[orv_dispatch_startdate] datetime2(7),\n\t[orv_dispatch_stopdate] datetime2(7),\n\t[orv_dispatch_vehicletype] int,\n\t[orv_dispatch_uid] bigint,\n\t[orv_dispatch_estdepdate] datetime2(7),\n\t[orv_dispatch_trailer] bigint,\n\t[orv_dispatch_trailer2] bigint,\n\t[orv_dispatch_fromlocid] bigint,\n\t[orv_dispatch_tolocid] bigint,\n\t[orv_dispatch_site] nvarchar(4000),\n\t[orv_dispatch_lastupdate] datetime2(7),\n\t[orv_dispatch_etastatus] nvarchar(4000),\n\t[orv_dispatch_startinglat] float,\n\t[orv_dispatch_startinglng] float,\n\t[orv_dispatch_endinglat] float,\n\t[orv_dispatch_endinglng] float,\n\t[orv_dispatch_startingfrom] nvarchar(4000),\n\t[orv_dispatch_goingto] nvarchar(4000),\n\t[orv_dispatch_importissue] nvarchar(4000),\n\t[orv_dispatch_insdate] datetime2(7),\n\t[orv_dispatch_estarrdate] datetime2(7),\n\t[orv_dispatch_duration] bigint,\n\t[orv_dispatch_distance] bigint,\n\t[orv_dispatch_cost] bigint,\n\t[orv_dispatch_stoplat] float,\n\t[orv_dispatch_stoplng] float,\n\t[orv_dispatch_stopreason] nvarchar(4000),\n\t[orv_dispatch_startodo] bigint,\n\t[orv_dispatch_stopodo] bigint,\n\t[orv_dispatch_expduration] bigint,\n\t[orv_dispatch_expdistance] bigint,\n\t[orv_dispatch_expcost] bigint,\n\t[orv_dispatch_collectionid] bigint,\n\t[orv_dispatch_crew] int,\n\t[orv_dispatch_crewnames] nvarchar(4000),\n\t[orv_dispatch_bocloseuid] bigint,\n\t[orv_dispatch_routing] nvarchar(4000),\n\t[orv_dispatch_swapct] int,\n\t[orv_dispatch_debriefed] int,\n\t[orv_dispatch_debriefnotes] nvarchar(4000),\n\t[orv_dispatch_bopin] nvarchar(4000),\n\t[orv_dispatch_cpicost] bigint,\n\t[orv_dispatch_labourcost] bigint,\n\t[orv_dispatch_maintcost] bigint,\n\t[orv_dispatch_inscost] bigint,\n\t[orv_dispatch_tollcost] bigint,\n\t[orv_dispatch_fuelcost] bigint,\n\t[orv_dispatch_internal] int,\n\t[orv_dispatch_childids] nvarchar(4000),\n\t[orv_dispatch_guid] bigint,\n\t[orv_dispatch_timedefinite] int,\n\t[orv_dispatch_orvcode] int,\n\t[orv_dispatch_tsstopdepoenter] datetime2(7),\n\t[orv_dispatch_tsstartdepoexit] datetime2(7),\n\t[orv_dispatch_reroutect] int,\n\t[orv_dispatch_actualarrdate] datetime2(7),\n\t[orv_dispatch_physicalstartlat] float,\n\t[orv_dispatch_physicalstartlng] float,\n\t[orv_dispatch_tsstartdepoexitapp] datetime2(7),\n\t[orv_dispatch_tsstopdepoenterapp] datetime2(7),\n\t[orv_dispatch_uncanceldate] datetime2(7),\n\t[orv_dispatch_uncancelusername] nvarchar(4000),\n\t[orv_dispatch_lmsdebrifed] int,\n\t[orv_dispatch_reviseddebrief] int,\n\t[orv_dispatch_lhtransporter] nvarchar(4000),\n\t[orv_dispatch_triptype] nvarchar(4000),\n\t[orv_dispatch_startreason] nvarchar(4000),\n\t[orv_dispatch_route] nvarchar(4000),\n\t[orv_dispatch_tmstraileridentify] nvarchar(4000),\n\t[orv_dispatch_tmstrailer2identify] nvarchar(4000),\n\t[orv_dispatch_tmscontroller] nvarchar(4000),\n\t[orv_dispatch_routekey] nvarchar(4000),\n\t[orv_dispatch_courierid] bigint,\n\t[orv_dispatch_originalstartdate] datetime2(7),\n\t[orv_dispatch_originalextarrival] datetime2(7),\n\t[orv_dispatch_recomputeoriginals] int,\n\t[orv_dispatch_originalextdistance] bigint,\n\t[orv_dispatch_originalextduration] bigint,\n\t[orv_dispatch_moddate] datetime2(7),\n\t[orv_dispatch_tmsmode] int,\n\t[orv_dispatch_driversignature] bigint,\n\t[orv_vehicle_id] bigint,\n\t[orv_vehicle_fleetcode] nvarchar(4000),\n\t[orv_vehicle_lmsid] bigint,\n\t[orv_vehicle_trailer1id] bigint,\n\t[orv_vehicle_trailer1fleetcode] nvarchar(4000),\n\t[orv_vehicle_trailer1lmsid] bigint,\n\t[orv_vehicle_trailer2id] bigint,\n\t[orv_vehicle_trailer2fleetcode] nvarchar(4000),\n\t[orv_vehicle_trailer2lmsid] bigint,\n\t[lms_vehicle_id] int,\n\t[lms_vehicle_uid] nvarchar(4000),\n\t[lms_vehicle_trailer1id] int,\n\t[lms_vehicle_trailer1uid] nvarchar(4000),\n\t[lms_vehicle_trailer2id] int,\n\t[lms_vehicle_trailer2uid] nvarchar(4000),\n\t[orv_orvuser_id] bigint,\n\t[orv_orvuser_username] nvarchar(4000),\n\t[orv_orvuser_fname] nvarchar(4000),\n\t[orv_orvuser_lname] nvarchar(4000),\n\t[orv_orvuser_empcode] nvarchar(4000),\n\t[orv_orvuser_aka] nvarchar(4000),\n\t[orv_orvuser_gender] nvarchar(4000),\n\t[orv_orvuser_cellno] nvarchar(4000),\n\t[orv_orvuser_rsaid] nvarchar(4000),\n\t[orv_orvuser_passportno] nvarchar(4000),\n\t[orv_orvuser_idpassportno] nvarchar(4000),\n\t[orv_orvuser_nationality] nvarchar(4000),\n\t[orv_orvuser_birthcountry] nvarchar(4000),\n\t[orv_orvuser_engageddate] datetime2(7),\n\t[orv_orvuser_joineddate] datetime2(7),\n\t[orv_orvuser_termindate] datetime2(7),\n\t[orv_orvuser_status] nvarchar(4000),\n\t[orv_orvuser_depot] nvarchar(4000),\n\t[orv_orvuser_jobcategory] nvarchar(4000),\n\t[orv_orvuser_jobtitle] nvarchar(4000),\n\t[orv_orvuser_payroll] nvarchar(4000),\n\t[orv_orvuser_annualsalary] float,\n\t[orv_orvuser_insdate] datetime2(7),\n\t[md_vehiclebasic_id] bigint,\n\t[md_vehiclebasic_uid] nvarchar(4000),\n\t[md_vehiclebasic_vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_activeflag] bigint,\n\t[md_vehiclebasic_vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_depot] nvarchar(4000),\n\t[md_vehiclebasic_enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_fueltype] nvarchar(4000),\n\t[md_vehiclebasic_registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_year] int,\n\t[md_vehiclebasic_vehicleownerid] bigint,\n\t[md_vehiclebasic_vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_staffvehicleflag] int,\n\t[md_vehiclebasic_vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_brn] nvarchar(4000),\n\t[md_vehiclebasic_brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_insdate] datetime2(7),\n\t[md_vehiclebasic_insby] nvarchar(4000),\n\t[md_vehiclebasic_islinehaulvehicle] int,\n\t[md_vehiclebasic_internalheight] numeric(18,2),\n\t[md_vehiclebasic_internallength] numeric(18,2),\n\t[md_vehiclebasic_internalvolume] numeric(18,2),\n\t[md_vehiclebasic_internalwidth] numeric(18,2),\n\t[md_vehiclebasic_moddate] datetime2(7),\n\t[md_vehiclebasic_trailerflag] int,\n\t[md_vehiclebasic_workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_approveddate] datetime2(7),\n\t[md_vehiclebasic_trailer1id] bigint,\n\t[md_vehiclebasic_trailer1uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer1activeflag] bigint,\n\t[md_vehiclebasic_trailer1vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer1enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer1year] int,\n\t[md_vehiclebasic_trailer1vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer1vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer1staffvehicleflag] int,\n\t[md_vehiclebasic_trailer1vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer1insdate] datetime2(7),\n\t[md_vehiclebasic_trailer1insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer1islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer1internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer1internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer1moddate] datetime2(7),\n\t[md_vehiclebasic_trailer1trailerflag] int,\n\t[md_vehiclebasic_trailer1workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1approveddate] datetime2(7),\n\t[md_vehiclebasic_trailer2id] bigint,\n\t[md_vehiclebasic_trailer2uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer2activeflag] bigint,\n\t[md_vehiclebasic_trailer2vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer2enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer2year] int,\n\t[md_vehiclebasic_trailer2vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer2vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer2staffvehicleflag] int,\n\t[md_vehiclebasic_trailer2vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer2insdate] datetime2(7),\n\t[md_vehiclebasic_trailer2insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer2islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer2internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer2internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer2moddate] datetime2(7),\n\t[md_vehiclebasic_trailer2trailerflag] int,\n\t[md_vehiclebasic_trailer2workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2approveddate] datetime2(7),\n\t[tms_driverpayitem_id] bigint,\n\t[tms_driverpayitem_driverid] nvarchar(4000),\n\t[tms_driverpayitem_tripid] bigint,\n\t[tms_driverpayitem_triprate] int,\n\t[tms_driverpayitem_mealrate] int,\n\t[tms_driverpayitem_sleepoverrate] int,\n\t[tms_driverpayitem_airtimerate] int,\n\t[tms_driverpayitem_linkrate] int,\n\t[tms_driverpayitem_totalrate] int,\n\t[tms_driverpayitem_routeid] bigint,\n\t[tms_driverpayitem_routename] nvarchar(4000),\n\t[tms_driverpayitem_insdate] datetime2(7),\n\t[tms_driverpayitem_moddate] datetime2(7),\n\t[tms_driverpayitem_horse] nvarchar(4000),\n\t[tms_driverpayitem_trailers] nvarchar(4000),\n\t[tms_driverpayitem_linkused] int,\n\t[tms_driverpayitem_manualadjustment] int,\n\t[tms_driverpayitem_editby] bigint,\n\t[tms_driverpayitem_drivername] nvarchar(4000),\n\t[tms_driverpayitem_dispatchdate] datetime2(7),\n\t[tms_driverpayitem_bookings] nvarchar(4000),\n\t[tms_driverpayitem_employeecode] nvarchar(4000),\n\t[tms_driverpayitem_originatedfrom] nvarchar(4000),\n\t[tms_driverpayitem_reportid] bigint,\n\t[tms_financedata_aggrpeaksurchagrebuy] bigint,\n\t[tms_financedata_aggrpeaksurchagresell] bigint,\n\t[tms_financedata_aggrmanualentryroadhaulsell] bigint,\n\t[tms_financedata_aggrmanualentryahocsell] bigint,\n\t[tms_financedata_aggrsystemfuellevy] bigint,\n\t[tms_financedata_aggrsystemratefuellevy] bigint,\n\t[tms_financedata_aggrsystemratefuelexlevy] bigint,\n\t[tms_financedata_aggrsystemratefuelinclevy] bigint,\n\t[tms_financedata_aggrsystemsellrate] bigint,\n\t[tms_financedata_aggrtotalsellrate] bigint,\n\t[tms_financedata_aggrtotalbuyrate] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/ssttrip.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTTrip \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTWaybill_SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTWaybill') )\n    DROP EXTERNAL TABLE dbo.F_SSTWaybill\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTWaybill (\n\t[lms_waybill_id] int,\n\t[lms_waybill_date] datetime2(7),\n\t[lms_waybill_bservice] nvarchar(4000),\n\t[lms_waybill_cservice] nvarchar(4000),\n\t[lms_waybill_originid] nvarchar(4000),\n\t[lms_waybill_defuser] nvarchar(4000),\n\t[lms_waybill_distance] float,\n\t[lms_waybill_courierid] nvarchar(4000),\n\t[lms_waybill_courierwbno] nvarchar(4000),\n\t[lms_waybill_billtype] int,\n\t[lms_waybill_capdate] datetime2(7),\n\t[lms_waybill_surcharge] numeric(18,2),\n\t[lms_waybill_insurance] numeric(18,2),\n\t[lms_waybill_tax] numeric(18,2),\n\t[lms_waybill_totalcharge] numeric(18,2),\n\t[lms_waybill_destinationname] nvarchar(4000),\n\t[lms_waybill_ordertype] int,\n\t[lms_waybill_pickupcustid] int,\n\t[lms_waybill_delivercustid] int,\n\t[lms_waybill_billto] nvarchar(4000),\n\t[lms_waybill_claimable] int,\n\t[lms_waybill_override] int,\n\t[lms_waybill_vehiclecapacity] int,\n\t[lms_waybill_custpoddate] datetime2(7),\n\t[lms_waybill_poddate] datetime2(7),\n\t[lms_waybill_signee] nvarchar(4000),\n\t[lms_waybill_grvno] nvarchar(4000),\n\t[lms_waybill_endorsements] nvarchar(4000),\n\t[lms_waybill_billcust] int,\n\t[lms_waybill_courier_from] nvarchar(4000),\n\t[lms_waybill_courier_to] nvarchar(4000),\n\t[lms_waybill_charge] numeric(18,2),\n\t[lms_waybill_tvalue] numeric(18,2),\n\t[lms_waybill_inservice] datetime2(7),\n\t[lms_waybill_dbtotalcharge] numeric(18,2),\n\t[lms_waybill_loadid] int,\n\t[lms_waybill_mrpflag] int,\n\t[lms_waybill_printed] int,\n\t[lms_waybill_sreasonid] int,\n\t[lms_waybill_minkg] numeric(18,2),\n\t[lms_waybill_minrate] numeric(18,2),\n\t[lms_waybill_addrate] numeric(18,2),\n\t[lms_waybill_docfees] numeric(18,2),\n\t[lms_waybill_volumetric] numeric(18,2),\n\t[lms_waybill_hasprinted] nvarchar(4000),\n\t[lms_waybill_site] nvarchar(4000),\n\t[lms_waybill_deliveryno] int,\n\t[lms_waybill_fuellevy] numeric(18,2),\n\t[lms_waybill_totfuellevy] numeric(18,2),\n\t[lms_waybill_custaccid] int,\n\t[lms_waybill_podadded] datetime2(7),\n\t[lms_waybill_scanned] int,\n\t[lms_waybill_userid] int,\n\t[lms_waybill_autoprinted] int,\n\t[lms_waybill_poduserid] int,\n\t[lms_waybill_scanuserid] int,\n\t[lms_waybill_cref] nvarchar(4000),\n\t[lms_waybill_ushort] int,\n\t[lms_waybill_delays] nvarchar(4000),\n\t[lms_waybill_debriefed] int,\n\t[lms_waybill_debriefdt] datetime2(7),\n\t[lms_waybill_dbctnsret] int,\n\t[lms_waybill_uploaded] int,\n\t[lms_waybill_serviceexclude] int,\n\t[lms_waybill_failed] int,\n\t[lms_waybill_delayreasonid] int,\n\t[lms_waybill_notdebrievreasonid] int,\n\t[lms_waybill_deliverystatid] int,\n\t[lms_waybill_reasongroupid] int,\n\t[lms_waybill_emailcust] int,\n\t[lms_waybill_mobileissuereportedid] int,\n\t[lms_waybill_ismobile] int,\n\t[lms_bcustomer_id] int,\n\t[lms_bcustomer_name] nvarchar(4000),\n\t[lms_pcustomer_id] int,\n\t[lms_pcustomer_name] nvarchar(4000),\n\t[lms_dcustomer_id] int,\n\t[lms_dcustomer_name] nvarchar(4000),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_users_site] nvarchar(4000),\n\t[lms_podusers_id] int,\n\t[lms_podusers_fullname] nvarchar(4000),\n\t[lms_podusers_site] nvarchar(4000),\n\t[lms_scanusers_id] int,\n\t[lms_scanusers_fullname] nvarchar(4000),\n\t[lms_scanusers_site] nvarchar(4000),\n\t[lms_delayreason_id] int,\n\t[lms_delayreason_description] nvarchar(4000),\n\t[lms_mobilefeedbackreason_id] int,\n\t[lms_mobilefeedbackreason_description] nvarchar(4000),\n\t[lms_reasondetail_id] int,\n\t[lms_reasondetail_description] nvarchar(4000),\n\t[lms_reasondetail_reasongroupid] int,\n\t[lms_reasongroup_id] int,\n\t[lms_reasongroup_description] nvarchar(4000),\n\t[lms_deliverystatus_id] int,\n\t[lms_deliverystatus_description] nvarchar(4000),\n\t[lms_parcelbywaybill_waybillid] int,\n\t[lms_parcelbywaybill_aggweight] float,\n\t[lms_parcelbywaybill_aggchargeweight] numeric(18,2),\n\t[lms_parcelbywaybill_aggvolweight] float,\n\t[lms_parcelbywaybill_aggvolumiserweight] numeric(18,2),\n\t[lms_parcelbywaybill_noparcels] bigint,\n\t[orv_delivery_id] bigint,\n\t[orv_delivery_dispatchid] bigint,\n\t[orv_delivery_waybillid] bigint,\n\t[orv_delivery_address] nvarchar(4000),\n\t[orv_delivery_town] nvarchar(4000),\n\t[orv_delivery_province] nvarchar(4000),\n\t[orv_delivery_country] nvarchar(4000),\n\t[orv_delivery_lat] float,\n\t[orv_delivery_lng] float,\n\t[orv_delivery_placeid] nvarchar(4000),\n\t[orv_delivery_what3words] nvarchar(4000),\n\t[orv_delivery_zipcode] nvarchar(4000),\n\t[orv_delivery_eta] datetime2(7),\n\t[orv_delivery_actualeta] datetime2(7),\n\t[orv_delivery_deliverydate] datetime2(7),\n\t[orv_delivery_deliverby] datetime2(7),\n\t[orv_delivery_deliveryorder] int,\n\t[orv_delivery_tsgeofenceenter] datetime2(7),\n\t[orv_delivery_tsscanningstart] datetime2(7),\n\t[orv_delivery_tsscanningstop] datetime2(7),\n\t[orv_delivery_tspodsignature] datetime2(7),\n\t[orv_delivery_aid] bigint,\n\t[orv_delivery_numprcls] int,\n\t[orv_delivery_geocodingstatus] nvarchar(4000),\n\t[orv_delivery_skipdate] datetime2(7),\n\t[orv_delivery_skipreason] nvarchar(4000),\n\t[orv_delivery_status] nvarchar(4000),\n\t[orv_delivery_partialmatch] int,\n\t[orv_delivery_approximated] int,\n\t[orv_delivery_lmsorder] int,\n\t[orv_delivery_optimizedorder] int,\n\t[orv_delivery_seal] nvarchar(4000),\n\t[orv_delivery_customerinvoice] int,\n\t[orv_delivery_customerdn] int,\n\t[orv_delivery_grv] nvarchar(4000),\n\t[orv_delivery_chepslip] int,\n\t[orv_delivery_cleandelivery] int,\n\t[orv_delivery_trackingcode] nvarchar(4000),\n\t[orv_delivery_mode] nvarchar(4000),\n\t[orv_delivery_customorder] int,\n\t[orv_delivery_verified] int,\n\t[orv_delivery_altered] int,\n\t[orv_delivery_orderid] int,\n\t[orv_delivery_mergeid] bigint,\n\t[orv_delivery_orderref] nvarchar(4000),\n\t[orv_delivery_drivernote] nvarchar(4000),\n\t[orv_delivery_timedefinite] int,\n\t[orv_delivery_orvcode] int,\n\t[orv_delivery_vaid] bigint,\n\t[orv_delivery_delegatedate] datetime2(7),\n\t[orv_delivery_delegatemode] nvarchar(4000),\n\t[orv_delivery_debriefmode] nvarchar(4000),\n\t[orv_delivery_debriefed] int,\n\t[orv_delivery_insdate] datetime2(7),\n\t[orv_delivery_reviseddebrief] int,\n\t[orv_delivery_lmsdebriefed] int,\n\t[orv_delivery_uncanceldate] datetime2(7),\n\t[orv_delivery_podlaterdate] datetime2(7),\n\t[orv_delivery_podmanualdate] datetime2(7),\n\t[orv_delivery_manualdebriefreason] nvarchar(4000),\n\t[orv_delivery_submanualdebriefreason] nvarchar(4000),\n\t[orv_delivery_outofgeofencereason] nvarchar(4000),\n\t[orv_delivery_tsentergeofenceapp] datetime2(7),\n\t[orv_delivery_tsexitgeofenceapp] datetime2(7),\n\t[orv_delivery_comebacklater] bigint,\n\t[orv_delivery_uncancelusername] nvarchar(4000),\n\t[orv_delivery_cref] int,\n\t[orv_delivery_division] int,\n\t[orv_delivery_descriptionofgoods] nvarchar(4000),\n\t[orv_delivery_skiplng] float,\n\t[orv_delivery_skiplat] float,\n\t[orv_delivery_courierid] bigint,\n\t[orv_delivery_posreason] nvarchar(4000),\n\t[orv_delivery_moddate] datetime2(7),\n\t[orv_delivery_mallid] int,\n\t[orv_delivery_mallgid] bigint,\n\t[orv_delivery_lmsidskipreason] bigint,\n\t[orv_delivery_deleteforimport] int,\n\t[orv_delivery_podoutofgeofence] int,\n\t[orv_delivery_originalcustomerid] bigint,\n\t[orv_originalcustomer_id] bigint,\n\t[orv_originalcustomer_name] nvarchar(4000),\n\t[orv_mall_id] bigint,\n\t[orv_mall_mallname] nvarchar(4000),\n\t[orv_mall_branchname] nvarchar(4000),\n\t[orv_mall_gpretailer] nvarchar(4000),\n\t[orv_mall_highvoldelivery] nvarchar(4000),\n\t[orv_mall_stripmall] nvarchar(4000),\n\t[orv_mall_standalonestore] nvarchar(4000),\n\t[orv_mall_streetsidestore] nvarchar(4000),\n\t[orv_mall_dedicatedrouted] nvarchar(4000),\n\t[orv_mall_insdate] datetime2(7),\n\t[orv_mall_address] nvarchar(4000),\n\t[orv_mall_deleted] int,\n\t[orv_mall_lat] float,\n\t[orv_mall_lng] float\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstwaybill.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTWaybill\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTWaybillsPerParcel_SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTWaybillsPerParcel') )\n    DROP EXTERNAL TABLE dbo.F_SSTWaybillsPerParcel\nGO\n\n\nCREATE EXTERNAL TABLE dbo.F_SSTWaybillsPerParcel (\n\t[lms_waybillsperparcel_parcelid] int,\n    [lms_waybillsperparcel_waybillid] int,\n    [lms_waybillsperparcel_loadid] int\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstwaybillsperparcel.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTWaybillsPerParcel\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STBooking')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STBooking') )\n    DROP EXTERNAL TABLE dbo.T_STBooking\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STBooking (\n    [tms_booking_id] bigint,\n    [tms_booking_allocatedby] bigint,\n    [tms_booking_allocateddate] datetime2(7),\n    [tms_booking_assetreleasedate] datetime2(7),\n    [tms_booking_billingmethod] nvarchar(4000),\n    [tms_booking_billingstatus] nvarchar(4000),\n    [tms_booking_convertedbookingid] bigint,\n    [tms_booking_cargoweight] float,\n    [tms_booking_customerid] bigint,\n    [tms_booking_childcustomerid] bigint,\n    [tms_booking_createdby] bigint,\n    [tms_booking_createdbyname] nvarchar(4000),\n    [tms_booking_cref1] nvarchar(4000),\n    [tms_booking_cref2] nvarchar(4000),\n    [tms_booking_cubicvolume] float,\n    [tms_booking_customeragreedrate] bigint,\n    [tms_booking_customerrate] bigint,\n    [tms_booking_deliverydate] datetime2(7),\n    [tms_booking_directbooking] int,\n    [tms_booking_dispatchdate] datetime2(7),\n    [tms_booking_docdate] datetime2(7),\n    [tms_booking_docstatus] nvarchar(4000),\n    [tms_booking_emailrequester] nvarchar(4000),\n    [tms_booking_frombranch] nvarchar(4000),\n    [tms_booking_frombranchid] bigint,\n    [tms_booking_insdate] datetime2(7),\n    [tms_booking_invoiceddate] datetime2(7),\n    [tms_booking_invoiceid] bigint,\n    [tms_booking_legacyid] bigint,\n    [tms_booking_local] int,\n    [tms_booking_manifests] nvarchar(4000),\n    [tms_booking_moddate] datetime2(7),\n    [tms_booking_note] nvarchar(4000),\n    [tms_booking_opsrouteid] bigint,\n    [tms_booking_opsroutename] nvarchar(4000),\n    [tms_booking_originalpod] int,\n    [tms_booking_pickupdate] datetime2(7),\n    [tms_booking_ponumber] nvarchar(4000),\n    [tms_booking_routeid] bigint,\n    [tms_booking_routename] nvarchar(4000),\n    [tms_booking_status] nvarchar(4000),\n    [tms_booking_thirdpartyagreedrate] bigint,\n    [tms_booking_thirdpartydriverflag] int,\n    [tms_booking_thirdpartyid] bigint,\n    [tms_booking_thirdpartyrate] bigint,\n    [tms_booking_thirdpartyreason] nvarchar(4000),\n    [tms_booking_thirdpartytrailerflag] int,\n    [tms_booking_thirdpartyvehicleflag] int,\n    [tms_booking_tobranch] nvarchar(4000),\n    [tms_booking_tobranchid] bigint,\n    [tms_booking_trailersize] nvarchar(4000),\n    [tms_booking_trailertype] nvarchar(4000),\n    [tms_booking_transporter] nvarchar(4000),\n    [tms_booking_tripid] bigint,\n    [tms_booking_reason] nvarchar(4000),\n    [tms_booking_insby] bigint,\n    [tms_booking_insbyname] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stbooking.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STBooking \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STConsignment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STConsignment') )\n    DROP EXTERNAL TABLE dbo.T_STConsignment\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STConsignment (\n\t[lms_consignment_id] int,\n    [lms_consignment_cref] nvarchar(4000),\n    [lms_consignment_cdate] datetime2(7),\n    [lms_consignment_userid] int,\n    [lms_consignment_appointment] datetime2(7),\n    [lms_consignment_deliverby] datetime2(7),\n    [lms_consignment_deliverbyoriginal] datetime2(7),\n    [lms_consignment_custaccid] int,\n    [lms_consignment_billcust] int,\n    [lms_consignment_delivercustid] int,\n    [lms_consignment_inservicereasonid] int,\n    [lms_consignment_inservicecomment] nvarchar(4000),\n    [lms_consignment_lastupdate] datetime2(7),\n    [lms_consignment_collectid] int,\n    [lms_consignment_delivertypeid] int,\n    [lms_consignment_billtypeid] int,\n    [lms_consignment_loadid] int,\n    [lms_parcelbyconsignment_aggweight] float,\n    [lms_parcelbyconsignment_aggchargeweight] numeric(18,2),\n    [lms_parcelbyconsignment_aggvolweight] float,\n    [lms_parcelbyconsignment_aggvolumiserweight] numeric(18,2),\n    [lms_parcelbyconsignment_noparcels] int,\n    [lms_billconsignmentr_id] int,\n    [lms_billconsignmentr_consignid] int,\n    [lms_billconsignmentr_updatedate] datetime2(7),\n    [lms_billconsignmentr_pickuprouteid] int,\n    [lms_billconsignmentr_deliverrouteid] int,\n    [lms_billconsignmentr_chargeweight] numeric(18,2),\n    [lms_billconsignmentr_noofparcels] int,\n    [lms_billconsignmentr_tripdistance] numeric(18,2),\n    [lms_billconsignmentr_consignmentvalue] numeric(18,2),\n    [lms_billconsignmentr_billcust] int,\n    [lms_billconsignmentr_redflag] int,\n    [lms_billconsignmentr_updind] int,\n    [lms_billconsignmentr_servicetypeid] int,\n    [lms_billconsignmentr_routemissingind] int,\n    [lms_billconsignmentr_chargescalcind] int,\n    [lms_billconsignmentr_cdate1] datetime2(7),\n    [lms_billconsignmentr_invalidpcode] int,\n    [lms_billconsignmentr_programno] int,\n    [lms_billconsignmentr_totrate] numeric(18,2),\n    [lms_billconsignmentr_routecharge] numeric(18,2),\n    [lms_billconsignmentr_minweight] numeric(18,2),\n    [lms_billconsignmentr_minrate] numeric(18,2),\n    [lms_billconsignmentr_corderno] nvarchar(4000),\n    [lms_billconsignmentr_custref] nvarchar(4000),\n    [lms_billconsignmentr_manualupdateflag] int,\n    [lms_billconsignmentr_prevbillcustid] int,\n    [lms_billconsignmentr_specdelvehicleid] int,\n    [lms_billconsignmentr_specdelmissingrouteflag] int,\n    [lms_billconsignmentr_overborderflag] int,\n    [lms_billconsignmentr_samedeliverid] int,\n    [lms_billconsignmentr_combineroutecharge] numeric(18,2),\n    [lms_billconsignmentr_waybillid] int,\n    [lms_billconsignmentr_routelinecount] int,\n    [lms_billconsignmentr_samedelcount] int,\n    [lms_billconsignmentr_aweight] numeric(18,2),\n    [lms_billconsignmentr_vweight] numeric(18,2),\n    [lms_billconsignmentr_custref3] nvarchar(4000),\n    [lms_billconsignmentr_units] int,\n    [lms_billconsignmentr_totsurcharges] numeric(18,2),\n    [lms_billconsignmentr_noofpallets] int,\n    [lms_billconsignmentr_invalidpudel] int,\n    [lms_billconsignmentr_sharikaflag] int,\n    [lms_billconsignmentr_sapid] int,\n    [lms_billconsignmentr_totfuelsurcharge] numeric(18,2),\n    [lms_billconsignmentr_totdocsurcharge] numeric(18,2),\n    [lms_billconsignmentr_totothersurcharge] numeric(18,2),\n    [lms_billconsignmentr_specdel] int,\n    [lms_billconsignmentr_quoteflag] int,\n    [lms_billconsignmentr_billperiod] nvarchar(4000),\n    [lms_billconsignmentr_billweekr] int,\n    [lms_billconsignmentr_billperiodflag] int,\n    [lms_billconsignmentr_surhargeflag] int,\n    [lms_billconsignmentr_recalcflag] int,\n    [lms_billconsignmentr_quotemissingflag] int,\n    [lms_billconsignmentr_delivertypeid] int,\n    [lms_billconsignmentr_totcovidsurcharge] numeric(18,2),\n    [lms_consignment_maxpoddate] datetime2(7),\n    [lms_consignment_inserviceflag] int,\n    [lms_consignment_actualleaddays] int\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stconsignment.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STConsignment \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STDCTransfer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STDCTransfer') )\n    DROP EXTERNAL TABLE dbo.T_STDCTransfer\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STDCTransfer (\n    [lms_dctransfer_id] int,\n    [lms_dctransfer_destinationstoreid] nvarchar(4000),\n    [lms_dctransfer_transfercode] nvarchar(4000),\n    [lms_dctransfer_audittype] nvarchar(4000),\n    [lms_dctransfer_qty] int,\n    [lms_dctransfer_dc_prepackid] int,\n    [lms_dctransfer_acceptancedate] datetime2(7),\n    [lms_dctransfer_auditflag] int,\n    [lms_dctransfer_audituserid] int,\n    [lms_dctransfer_auditlocid] int,\n    [lms_dctransfer_counted] int,\n    [lms_dctransfer_damagecount] int,\n    [lms_dctransfer_uploaded] int,\n    [lms_dctransfer_dc_torderid] int,\n    [lms_dctransfer_duedate] datetime2(7),\n    [lms_dctransfer_destinationlocationcode] nvarchar(4000),\n    [lms_dctransfer_destinationlocationtypecode] nvarchar(4000),\n    [lms_dctransfer_processfamilycode] nvarchar(4000),\n    [lms_dctransfer_grnversion] int\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdctransfer.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STDCTransfer \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STDriverPayItem')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STDriverPayItem') )\n    DROP EXTERNAL TABLE dbo.T_STDriverPayItem\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STDriverPayItem (\n    [tms_driverpayitem_id] bigint,\n    [tms_driverpayitem_driverid] nvarchar(4000),\n    [tms_driverpayitem_tripid] bigint,\n    [tms_driverpayitem_triprate] int,\n    [tms_driverpayitem_mealrate] int,\n    [tms_driverpayitem_sleepoverrate] int,\n    [tms_driverpayitem_airtimerate] int,\n    [tms_driverpayitem_linkrate] int,\n    [tms_driverpayitem_totalrate] int,\n    [tms_driverpayitem_routeid] bigint,\n    [tms_driverpayitem_routename] nvarchar(4000),\n    [tms_driverpayitem_insdate] bigint,\n    [tms_driverpayitem_moddate] bigint,\n    [tms_driverpayitem_horse] nvarchar(4000),\n    [tms_driverpayitem_trailers] nvarchar(4000),\n    [tms_driverpayitem_linkused] int,\n    [tms_driverpayitem_manualadjustment] int,\n    [tms_driverpayitem_editby] bigint,\n    [tms_driverpayitem_drivername] nvarchar(4000),\n    [tms_driverpayitem_dispatchdate] bigint,\n    [tms_driverpayitem_bookings] nvarchar(4000),\n    [tms_driverpayitem_employeecode] nvarchar(4000),\n    [tms_driverpayitem_originatedfrom] nvarchar(4000),\n    [tms_driverpayitem_reportid] bigint,\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdriverpayitem.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STDriverPayItem \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STEndorsments')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STEndorsments') )\n    DROP EXTERNAL TABLE dbo.T_STEndorsments\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STEndorsments (\n\t[lms_db_endorsement_id] int,\n\t[lms_db_endorsement_description] nvarchar(4000),\n\t[lms_wbendorsement_id] int,\n\t[lms_wbendorsement_barcode] nvarchar(4000),\n\t[lms_wbendorsement_waybillid] int,\n\t[orv_claim_id] bigint,\n\t[orv_claim_delid] bigint,\n\t[orv_claim_claimtype] nvarchar(4000),\n\t[orv_claim_claimdate] datetime2(7),\n\t[orv_claim_did] bigint,\n\t[orv_claim_parcelid] bigint,\n\t[orv_claim_barcode] nvarchar(4000),\n\t[orv_claim_attachid] bigint,\n\t[orv_claim_note] nvarchar(4000)\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stendorsments.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STEndorsments \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STFinanceData')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STFinanceData') )\n    DROP EXTERNAL TABLE dbo.T_STFinanceData\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STFinanceData (\n    [tms_financedata_id] bigint,\n    [tms_financedata_bookingid] bigint,\n    [tms_financedata_insdate] datetime2(7),\n    [tms_financedata_peaksurchagrebuy] bigint,\n    [tms_financedata_peaksurchagresell] bigint,\n    [tms_financedata_manualentryroadhaulsell] bigint,\n    [tms_financedata_manualentryahocsell] bigint,\n    [tms_financedata_systemfuellevy] bigint,\n    [tms_financedata_systemratefuellevy] bigint,\n    [tms_financedata_systemratefuelexlevy] bigint,\n    [tms_financedata_systemratefuelinclevy] bigint,\n    [tms_financedata_systemsellrate] bigint,\n    [tms_financedata_totalsellrate] bigint,\n    [tms_financedata_moddate] datetime2(7),\n    [tms_financedata_totalbuyrate] bigint,\n    [tms_financedata_rateprofileid] bigint\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stfinancedata.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STFinanceData \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STInvoice')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STInvoice') )\n    DROP EXTERNAL TABLE dbo.T_STInvoice\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STInvoice (\n    [tms_invoice_id] bigint,\n    [tms_invoice_customerid] bigint,\n    [tms_invoice_invoicedate] datetime2(7),\n    [tms_invoice_reference] nvarchar(4000),\n    [tms_invoice_status] nvarchar(4000),\n    [tms_invoice_insby] bigint,\n    [tms_invoice_insdate] datetime2(7),\n    [tms_invoice_total] bigint,\n    [tms_invoice_vat] bigint,\n    [tms_invoice_invoicenum] nvarchar(4000),\n    [tms_invoice_opaqueid] nvarchar(4000),\n    [tms_invoice_sapstatus] nvarchar(4000),\n    [tms_invoice_sapid] nvarchar(4000),\n    [tms_invoice_sendsapdate] datetime2(7),\n    [tms_invoice_legacyid] bigint,\n    [tms_invoice_customercode] nvarchar(4000),\n    [tms_invoice_revennuecode] nvarchar(4000),\n    [tms_invoice_depotcode] nvarchar(4000),\n    [tms_invoiceitem_id] bigint,\n    [tms_invoiceitem_invoiceid] bigint,\n    [tms_invoiceitem_bookingid] bigint,\n    [tms_invoiceitem_amount] bigint,\n    [tms_invoiceitem_vat] bigint,\n    [tms_invoiceitem_linetotal] bigint,\n    [tms_invoiceitem_insdate] datetime2(7),\n    [tms_invoiceitem_moddate] datetime2(7),\n    [tms_invoiceitem_insby] bigint,\n    [tms_invoiceitem_linenum] int,\n    [tms_invoiceitem_legacyid] bigint,\n    [tms_invoiceitem_sapid] int,\n    [tms_invoiceitem_vatable] int,\n    [tms_invoiceitem_routeid] bigint,\n    [tms_invoiceitem_routename] nvarchar(4000),\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stinvoice.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STInvoice \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLMSTrack')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STLMSTrack') )\n    DROP EXTERNAL TABLE dbo.T_STLMSTrack\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STLMSTrack (\n    [lms_track_id] int,\n    [lms_track_loadid] int,\n    [lms_track_parcelid] int,\n    [lms_track_waybillid] int,\n    [lms_track_fromlocid] int,\n    [lms_track_tolocid] int,\n    [lms_track_tracktypeid] int,\n    [lms_track_opendt] datetime2(7),\n    [lms_track_closedt] datetime2(7)\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stlmstrack.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STLMSTrack \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLoadChild')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STLoadChild') )\n    DROP EXTERNAL TABLE dbo.T_STLoadChild\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STLoadChild (\n    [lms_loadchild_id] bigint,\n    [lms_loadchild_routeid] int,\n    [lms_loadchild_driverid] int,\n    [lms_loadchild_sealno] nvarchar(4000),\n    [lms_loadchild_vehicleid] int,\n    [lms_loadchild_ttypeid] int,\n    [lms_loadchild_userid] int,\n    [lms_loadchild_ldate] datetime2(7),\n    [lms_loadchild_courierid] nvarchar(4000),\n    [lms_loadchild_site] nvarchar(4000),\n    [lms_loadchild_fromlocid] int,\n    [lms_loadchild_tolocid] int,\n    [lms_loadchild_cdate] datetime2(7),\n    [lms_loadchild_trailer1] int,\n    [lms_loadchild_trailer2] int,\n    [lms_loadchild_cref] nvarchar(4000),\n    [lms_loadchild_debriefed] int,\n    [lms_loadchild_mrpflag] int,\n    [lms_loadchild_mrpcflag] int,\n    [lms_loadchild_finalflag] int,\n    [lms_loadchild_alidaflag] int,\n    [lms_loadchild_puibts] int,\n    [lms_loadchild_pucols] int,\n    [lms_loadchild_planningref] nvarchar(4000),\n    [lms_loadchild_interfacedate] datetime2(7),\n    [lms_loadchild_nosealsret] int,\n    [lms_loadchild_excludeopsi] int,\n    [lms_loadchild_dccref] nvarchar(4000),\n    [lms_loadchild_srouteid] int,\n    [lms_loadchild_fuellitres] numeric(18,2),\n    [lms_loadchild_outsourcedcrew] int,\n    [lms_loadchild_masterloadid] int,\n    [lms_loadchild_securitygatedespatched] datetime2(7),\n    [lms_loadchild_securitygateuserid] int,\n    [lms_loadchild_securitygatearrived] datetime2(7),\n    [lms_loadchild_securitygatearriveduserid] int,\n    [lms_loadchild_lastupdate] datetime2(7),\n    [lms_loadchild_bayno] nvarchar(4000),\n    [lms_loadchild_costs] numeric(18,2),\n    [lms_loadchild_estdeparturedatetime] datetime2(7),\n    [lms_loadchild_totalweight] numeric(18,2),\n    [lms_loadchild_ovrignore] int,\n    [lms_loadchild_childloadid] int,\n    [lms_loadchild_orvcode] int,\n    [lms_loadchild_companyid] int,\n    [lms_loadchild_editloaddate] datetime2(7),\n    [lms_loadchild_reopeneddate] datetime2(7),\n    [lms_loadchild_reopeneduserid] int,\n    [lms_loadchild_novehicle] int,\n    [lms_loadchild_mobilefeedbackreasonid] int,\n    [lms_loadchild_direct] int,\n    [lms_loadchild_noofpcls] int,\n    [lms_loadchild_debriefdt] datetime2(7),\n    [lms_loadchild_httpcode] int,\n    [lms_loadchild_parentloadid] int,\n    [lms_loadchild_mrpobversion] int,\n    [lms_loadchild_loadid] int,\n    [lms_loadchild_aggweight] float,\n    [lms_loadchild_aggchargeweight] numeric(18,2),\n    [lms_loadchild_aggvolweight] float,\n    [lms_loadchild_aggvolumiserweight] numeric(18,2),\n    [lms_loadchild_noparcels] bigint\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stloadchild.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STLoadChild \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLoadParent')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STLoadParent') )\n    DROP EXTERNAL TABLE dbo.T_STLoadParent\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STLoadParent (\n    [lms_loadparent_parentloadid] int,\n    [lms_loadparent_aggweight] float,\n    [lms_loadparent_aggchargeweight] numeric(18,2),\n    [lms_loadparent_aggvolweight] float,\n    [lms_loadparent_aggvolumiserweight] numeric(18,2),\n    [lms_loadparent_noparcels] bigint,\n    [orv_dispatch_id] bigint,\n    [orv_dispatch_lmsid] bigint,\n    [orv_dispatch_vid] bigint,\n    [orv_dispatch_did] bigint,\n    [orv_dispatch_status] nvarchar(4000),\n    [orv_dispatch_startdate] datetime2(7),\n    [orv_dispatch_stopdate] datetime2(7),\n    [orv_dispatch_vehicletype] int,\n    [orv_dispatch_uid] bigint,\n    [orv_dispatch_estdepdate] datetime2(7),\n    [orv_dispatch_trailer] bigint,\n    [orv_dispatch_trailer2] bigint,\n    [orv_dispatch_fromlocid] bigint,\n    [orv_dispatch_tolocid] bigint,\n    [orv_dispatch_site] nvarchar(4000),\n    [orv_dispatch_lastupdate] datetime2(7),\n    [orv_dispatch_etastatus] nvarchar(4000),\n    [orv_dispatch_startinglat] float,\n    [orv_dispatch_startinglng] float,\n    [orv_dispatch_endinglat] float,\n    [orv_dispatch_endinglng] float,\n    [orv_dispatch_startingfrom] nvarchar(4000),\n    [orv_dispatch_goingto] nvarchar(4000),\n    [orv_dispatch_importissue] nvarchar(4000),\n    [orv_dispatch_insdate] datetime2(7),\n    [orv_dispatch_estarrdate] datetime2(7),\n    [orv_dispatch_duration] bigint,\n    [orv_dispatch_distance] bigint,\n    [orv_dispatch_cost] bigint,\n    [orv_dispatch_stoplat] float,\n    [orv_dispatch_stoplng] float,\n    [orv_dispatch_stopreason] nvarchar(4000),\n    [orv_dispatch_startodo] bigint,\n    [orv_dispatch_stopodo] bigint,\n    [orv_dispatch_expduration] bigint,\n    [orv_dispatch_expdistance] bigint,\n    [orv_dispatch_expcost] bigint,\n    [orv_dispatch_collectionid] bigint,\n    [orv_dispatch_crew] int,\n    [orv_dispatch_crewnames] nvarchar(4000),\n    [orv_dispatch_bocloseuid] bigint,\n    [orv_dispatch_routing] nvarchar(4000),\n    [orv_dispatch_swapct] int,\n    [orv_dispatch_debriefed] int,\n    [orv_dispatch_debriefnotes] nvarchar(4000),\n    [orv_dispatch_bopin] nvarchar(4000),\n    [orv_dispatch_cpicost] bigint,\n    [orv_dispatch_labourcost] bigint,\n    [orv_dispatch_maintcost] bigint,\n    [orv_dispatch_inscost] bigint,\n    [orv_dispatch_tollcost] bigint,\n    [orv_dispatch_fuelcost] bigint,\n    [orv_dispatch_internal] int,\n    [orv_dispatch_childids] nvarchar(4000),\n    [orv_dispatch_guid] bigint,\n    [orv_dispatch_timedefinite] int,\n    [orv_dispatch_orvcode] int,\n    [orv_dispatch_tsstopdepoenter] datetime2(7),\n    [orv_dispatch_tsstartdepoexit] datetime2(7),\n    [orv_dispatch_reroutect] int,\n    [orv_dispatch_actualarrdate] datetime2(7),\n    [orv_dispatch_physicalstartlat] float,\n    [orv_dispatch_physicalstartlng] float,\n    [orv_dispatch_tsstartdepoexitapp] datetime2(7),\n    [orv_dispatch_tsstopdepoenterapp] datetime2(7),\n    [orv_dispatch_uncanceldate] datetime2(7),\n    [orv_dispatch_uncancelusername] nvarchar(4000),\n    [orv_dispatch_lmsdebrifed] int,\n    [orv_dispatch_reviseddebrief] int,\n    [orv_dispatch_lhtransporter] nvarchar(4000),\n    [orv_dispatch_triptype] nvarchar(4000),\n    [orv_dispatch_startreason] nvarchar(4000),\n    [orv_dispatch_route] nvarchar(4000),\n    [orv_dispatch_tmstraileridentify] nvarchar(4000),\n    [orv_dispatch_tmstrailer2identify] nvarchar(4000),\n    [orv_dispatch_tmscontroller] nvarchar(4000),\n    [orv_dispatch_routekey] nvarchar(4000),\n    [orv_dispatch_courierid] bigint,\n    [orv_dispatch_originalstartdate] datetime2(7),\n    [orv_dispatch_originalextarrival] datetime2(7),\n    [orv_dispatch_recomputeoriginals] int,\n    [orv_dispatch_originalextdistance] bigint,\n    [orv_dispatch_originalextduration] bigint,\n    [orv_dispatch_moddate] datetime2(7),\n    [orv_dispatch_tmsmode] int,\n    [orv_dispatch_driversignature] bigint\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stloadparent.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STLoadParent \nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STOrder')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STOrder') )\n    DROP EXTERNAL TABLE dbo.T_STOrder\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STOrder (\n    [lms_order_id] int,\n    [lms_order_corderno] nvarchar(4000),\n    [lms_order_custref] nvarchar(4000),\n    [lms_order_pickupcustid] int,\n    [lms_order_delivercustid] int,\n    [lms_order_billcustid] int,\n    [lms_order_weight] numeric(18,2),\n    [lms_order_ovalue] numeric(18,2),\n    [lms_order_hodate] datetime2(7),\n    [lms_order_cservice] nvarchar(4000),\n    [lms_order_courierid] nvarchar(4000),\n    [lms_order_custservice] nvarchar(4000),\n    [lms_order_userid] int,\n    [lms_order_appointment] datetime2(7),\n    [lms_order_deliverby] datetime2(7),\n    [lms_order_onfirmed] nvarchar(4000),\n    [lms_order_omment] nvarchar(4000),\n    [lms_order_efno] nvarchar(4000),\n    [lms_order_edate] datetime2(7),\n    [lms_order_tchno] int,\n    [lms_order_staccid] int,\n    [lms_order_rfreightflag] int,\n    [lms_order_ecdel] int,\n    [lms_parcelbyorder_aggweight] float,\n    [lms_parcelbyorder_aggchargeweight] numeric(18,2),\n    [lms_parcelbyorder_aggvolweight] float,\n    [lms_parcelbyorder_aggvolumiserweight] numeric(18,2),\n    [lms_parcelbyorder_noparcels] bigint,\n    [lms_order_maxpoddate] datetime2(7),\n    [lms_order_inserviceflag] int,\n    [lms_order_actualleaddays] int\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/storder.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STOrder \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STParcel')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STParcel') )\n    DROP EXTERNAL TABLE dbo.T_STParcel\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STParcel (\n\t[lms_parcel_id] int,\n    [lms_parcel_orderid] int,\n    [lms_parcel_consignid] int,\n    [lms_parcel_waybillid] int,\n    [lms_parcel_locid] int,\n    [lms_parcel_totcharge] numeric(18,2),\n    [lms_parcel_dimms] float,\n    [lms_parcel_noofpcls] int,\n    [lms_parcel_pl] numeric(18,2),\n    [lms_parcel_pw] numeric(18,2),\n    [lms_parcel_ph] numeric(18,2),\n    [lms_parcel_acceptancedate] datetime2(7),\n    [lms_parcel_barcode] nvarchar(4000),\n    [lms_parcel_volweight] float,\n    [lms_parcel_weight] float,\n    [lms_parcel_chargeweight] numeric(18,2),\n    [orv_parcel_pweight] float,\n    [lms_parcel_ptype] int,\n    [lms_parcel_handoverdate] datetime2(7),\n    [lms_parcel_floorstatus] nvarchar(4000),\n    [lms_parcel_claimid] int,\n    [lms_parcel_datevolumised] datetime2(7),\n    [lms_parcel_volumiserweight] numeric(18,2),\n    [lms_parcel_volumiserlength] numeric(18,2),\n    [lms_parcel_volumiserheight] numeric(18,2),\n    [lms_parcel_volumiserwidth] numeric(18,2),\n    [lms_parcel_volumiserid] int,\n    [lms_parcel_lastupdate] datetime2(7),\n    [lms_parcel_orderhodate] datetime2(7),\n    [lms_parcel_consignmentcdate] datetime2(7),\n    [lms_parcel_consignmentdeliverby] datetime2(7),\n    [lms_parcel_waybillpoddate ] datetime2(7),\n    [lms_parcel_waybilldate] datetime2(7),\n    [lms_parcel_parceldetailid] int,\n    [lms_parcel_parceldetailinservicestart] datetime2(7),\n    [lms_parcel_parceldetaildeliverby] datetime2(7),\n    [lms_parcel_parceldetailservicedays] int,\n    [lms_parcel_parceldetailservicetime] numeric(18,2),\n    [lms_parcel_parceldetailcutofftime] numeric(18,2),\n    [lms_parcel_parceldetailappointment] datetime2(7),\n    [lms_parcel_parceldetailnddid] int,\n    [lms_parcel_parceldetailcustonholdstart] datetime2(7),\n    [lms_parcel_parceldetailcustonholdend] datetime2(7),\n    [lms_parcel_parceldetailsplitinitial] int,\n    [lms_parcel_parceldetailweekendholidays] int,\n    [lms_parcel_parceldetailinbound] int,\n    [lms_parcel_parceldetailcourierid] nvarchar(4000),\n    [lms_parcel_parceldetailserviceid] nvarchar(4000),\n    [lms_parcel_parceldetailcustaccid] int,\n    [lms_parcel_parceldetailbroutemasterid] int,\n    [lms_parcel_parceldetailbroutemasterfromid] int,\n    [lms_parcel_parceldetailbroutemastertoid] int,\n    [lms_parcel_parceldetailleadtimeid] int,\n    [lms_parcel_inserviceflag] int,\n    [lms_parcel_actualleaddays] int,\n    [orv_parcel_scandate] datetime2(7),\n    [orv_parcel_scanstatus] nvarchar(4000),\n    [orv_parcel_scanmode] nvarchar(4000),\n    [orv_parcel_claimid] bigint,\n    [orv_parcel_courierid] bigint,\n    [orv_parcel_moddate] datetime2(7)\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stparcel.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STParcel \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STTMSTrack')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STTMSTrack') )\n    DROP EXTERNAL TABLE dbo.T_STTMSTrack\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STTMSTrack (\n    [tms_track_id] bigint,\n    [tms_track_tripid] bigint,\n    [tms_track_source] nvarchar(4000),\n    [tms_track_trackdate] datetime2(7),\n    [tms_track_tracktype] nvarchar(4000),\n    [tms_track_userid] bigint,\n    [tms_track_lat] float,\n    [tms_track_lng] float,\n    [tms_track_address] nvarchar(4000),\n    [tms_track_note] nvarchar(4000),\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/sttmstrack.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STTMSTrack \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STTripTrackingHistory')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STTripTrackingHistory') )\n    DROP EXTERNAL TABLE dbo.T_STTripTrackingHistory\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STTripTrackingHistory (\n    [tms_triptrackinghistory_id] bigint,\n    [tms_triptrackinghistory_tripid] bigint,\n    [tms_triptrackinghistory_controllerid] bigint,\n    [tms_triptrackinghistory_fromdate] datetime2(7),\n    [tms_triptrackinghistory_todate] datetime2(7),\n    [tms_triptrackinghistory_actionedby] bigint,\n    [tms_triptrackinghistory_controllername] nvarchar(4000),\n    [tms_triptrackinghistory_actionedbyname] nvarchar(4000),\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/sttriptrackinghistory.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STTripTrackingHistory \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STWaybill')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STWaybill') )\n    DROP EXTERNAL TABLE dbo.T_STWaybill\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STWaybill (\n    [lms_waybill_id] int,\n    [lms_waybill_date] datetime2(7),\n    [lms_waybill_customerid] int,\n    [lms_waybill_bservice] nvarchar(4000),\n    [lms_waybill_cservice] nvarchar(4000),\n    [lms_waybill_originid] nvarchar(4000),\n    [lms_waybill_defuser] nvarchar(4000),\n    [lms_waybill_distance] float,\n    [lms_waybill_courierid] nvarchar(4000),\n    [lms_waybill_courierwbno] nvarchar(4000),\n    [lms_waybill_billtype] int,\n    [lms_waybill_capdate] datetime2(7),\n    [lms_waybill_ordertype] int,\n    [lms_waybill_billcust] int,\n    [lms_waybill_pickupcustid] int,\n    [lms_waybill_delivercustid] int,\n    [lms_waybill_billto] nvarchar(4000),\n    [lms_waybill_claimable] int,\n    [lms_waybill_override] int,\n    [lms_waybill_vehiclecapacity] int,\n    [lms_waybill_poddate] datetime2(7),\n    [lms_waybill_signee] nvarchar(4000),\n    [lms_waybill_grvno] nvarchar(4000),\n    [lms_waybill_endorsements] nvarchar(4000),\n    [lms_waybill_loadid] int,\n    [lms_waybill_routeid] int,\n    [lms_waybill_mrpflag] int,\n    [lms_waybill_printed] int,\n    [lms_waybill_sreasonid] int,\n    [lms_waybill_hasprinted] nvarchar(4000),\n    [lms_waybill_site] nvarchar(4000),\n    [lms_waybill_deliveryno] int,\n    [lms_waybill_custaccid] int,\n    [lms_waybill_scanned] int,\n    [lms_waybill_userid] int,\n    [lms_waybill_autoprinted] int,\n    [lms_waybill_cref] nvarchar(4000),\n    [lms_waybill_ushort] int,\n    [lms_waybill_delays] nvarchar(4000),\n    [lms_waybill_debriefed] int,\n    [lms_waybill_debriefdt] datetime2(7),\n    [lms_waybill_dbctnsret] int,\n    [lms_waybill_uploaded] int,\n    [lms_waybill_serviceexclude] int,\n    [lms_waybill_failed] int,\n    [lms_waybill_delayreasonid] int,\n    [lms_waybill_notdebrievreasonid] int,\n    [lms_waybill_deliverystatid] int,\n    [lms_waybill_reasongroupid] int,\n    [lms_waybill_emailcust] int,\n    [lms_waybill_mobileissuereportedid] int,\n    [lms_waybill_ismobile] int,\n    [lms_waybill_custcomment] nvarchar(4000),\n    [lms_waybill_custfeedback] int,\n    [lms_waybill_reasondetailid] int,\n    [lms_waybill_mobilecomments] nvarchar(4000),\n    [lms_waybill_inservicereasonid] int,\n    [lms_waybill_notdebrievcom] nvarchar(4000),\n    [lms_waybill_lastupdate] datetime2(7),\n    [lms_waybill_dropsequence] int,\n    [lms_waybill_noofparcelssreturned] int,\n    [lms_parcelbywaybill_aggweight] float,\n    [lms_parcelbywaybill_aggchargeweight] numeric(18,2),\n    [lms_parcelbywaybill_aggvolweight] float,\n    [lms_parcelbywaybill_aggvolumiserweight] numeric(18,2),\n    [lms_parcelbywaybill_noparcels] bigint,\n    [orv_delivery_id] bigint,\n    [orv_delivery_did] bigint,\n    [orv_delivery_waybillid] bigint,\n    [orv_delivery_address] nvarchar(4000),\n    [orv_delivery_town] nvarchar(4000),\n    [orv_delivery_province] nvarchar(4000),\n    [orv_delivery_country] nvarchar(4000),\n    [orv_delivery_lat] float,\n    [orv_delivery_lng] float,\n    [orv_delivery_placeid] nvarchar(4000),\n    [orv_delivery_what3words] nvarchar(4000),\n    [orv_delivery_zipcode] nvarchar(4000),\n    [orv_delivery_eta] bigint,\n    [orv_delivery_actualeta] bigint,\n    [orv_delivery_deliverydate] bigint,\n    [orv_delivery_deliverby] bigint,\n    [orv_delivery_deliveryorder] int,\n    [orv_delivery_tsgeofenceenter] bigint,\n    [orv_delivery_tsscanningstart] bigint,\n    [orv_delivery_tsscanningstop] bigint,\n    [orv_delivery_tspodsignature] bigint,\n    [orv_delivery_aid] bigint,\n    [orv_delivery_numprcls] int,\n    [orv_delivery_geocodingstatus] nvarchar(4000),\n    [orv_delivery_skipdate] bigint,\n    [orv_delivery_skipreason] nvarchar(4000),\n    [orv_delivery_status] nvarchar(4000),\n    [orv_delivery_partialmatch] int,\n    [orv_delivery_approximated] int,\n    [orv_delivery_lmsorder] int,\n    [orv_delivery_optimizedorder] int,\n    [orv_delivery_seal] nvarchar(4000),\n    [orv_delivery_customerinvoice] int,\n    [orv_delivery_customerdn] int,\n    [orv_delivery_grv] nvarchar(4000),\n    [orv_delivery_chepslip] int,\n    [orv_delivery_cleandelivery] int,\n    [orv_delivery_trackingcode] nvarchar(4000),\n    [orv_delivery_mode] nvarchar(4000),\n    [orv_delivery_customorder] int,\n    [orv_delivery_verified] int,\n    [orv_delivery_altered] int,\n    [orv_delivery_orderid] int,\n    [orv_delivery_mergeid] bigint,\n    [orv_delivery_orderref] nvarchar(4000),\n    [orv_delivery_drivernote] nvarchar(4000),\n    [orv_delivery_guid] bigint,\n    [orv_delivery_timedefinite] int,\n    [orv_delivery_orvcode] int,\n    [orv_delivery_vaid] bigint,\n    [orv_delivery_delegatedate] bigint,\n    [orv_delivery_delegatemode] nvarchar(4000),\n    [orv_delivery_debriefmode] nvarchar(4000),\n    [orv_delivery_debriefed] int,\n    [orv_delivery_insdate] bigint,\n    [orv_delivery_reviseddebrief] int,\n    [orv_delivery_lmsdebriefed] int,\n    [orv_delivery_uncanceldate] bigint,\n    [orv_delivery_podlaterdate] bigint,\n    [orv_delivery_podmanualdate] bigint,\n    [orv_delivery_manualdebriefreason] nvarchar(4000),\n    [orv_delivery_submanualdebriefreason] nvarchar(4000),\n    [orv_delivery_outofgeofencereason] nvarchar(4000),\n    [orv_delivery_tsentergeofenceapp] bigint,\n    [orv_delivery_tsexitgeofenceapp] bigint,\n    [orv_delivery_comebacklater] bigint,\n    [orv_delivery_uncancelusername] nvarchar(4000),\n    [orv_delivery_cref] int,\n    [orv_delivery_division] int,\n    [orv_delivery_descriptionofgoods] nvarchar(4000),\n    [orv_delivery_skiplng] float,\n    [orv_delivery_skiplat] float,\n    [orv_delivery_courierid] bigint,\n    [orv_delivery_posreason] nvarchar(4000),\n    [orv_delivery_moddate] bigint,\n    [orv_delivery_mallid] int,\n    [orv_delivery_mallgid] bigint,\n    [orv_delivery_lmsidskipreason] bigint,\n    [orv_delivery_deleteforimport] int,\n    [orv_delivery_podoutofgeofence] int,\n    [orv_delivery_originalcustomerid] bigint\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stwaybill.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STWaybill \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/User Management - DB lvl Access')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT * FROM sys.database_scoped_credentials;\n\nCREATE USER [michelledb@citylogistics.co.za] FROM LOGIN [michelledb@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER  [michelledb@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [michelledb@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [michelledb@citylogistics.co.za];\n\nCREATE USER [nerakshab@citylogistics.co.za] FROM LOGIN [nerakshab@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER [nerakshab@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [nerakshab@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [nerakshab@citylogistics.co.za];\n\nCREATE USER [markb@citylogistics.co.za] FROM LOGIN [markb@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER [markb@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [markb@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [markb@citylogistics.co.za];\n\nCREATE USER [Carlyd@citylogistics.co.za] FROM LOGIN [Carlyd@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER [Carlyd@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [Carlyd@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [Carlyd@citylogistics.co.za];\n\nCREATE USER [riaans@citylogistics.co.za] FROM LOGIN [riaans@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER [riaans@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [riaans@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [riaans@citylogistics.co.za];\n\nCREATE USER [brianv@citylogistics.co.za] FROM LOGIN [brianv@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER [brianv@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [brianv@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [brianv@citylogistics.co.za];\n\nCREATE USER [ryang@citylogistics.co.za] FROM LOGIN [ryang@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER [ryang@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [ryang@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [ryang@citylogistics.co.za];\n\nCREATE USER [lucaa@citytech.co.za] FROM LOGIN [lucaa@citytech.co.za];\nALTER ROLE db_datareader ADD MEMBER [lucaa@citytech.co.za];\nGRANT VIEW DEFINITION TO [lucaa@citytech.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [lucaa@citytech.co.za];\n\nCREATE USER [kevinm@citylogistics.co.za] FROM LOGIN [kevinm@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER [kevinm@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [kevinm@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [kevinm@citylogistics.co.za];\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UserManagement - Master Logins')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE LOGIN [michelledb@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [nerakshab@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [markb@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [Carlyd@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [riaans@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [brianv@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [ryang@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [lucaa@citytech.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [kevinm@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nDROP LOGIN [marks@citylogistics.co.za];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTAggrParcelByX')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS Aggr"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "59691ea0-b0ef-4765-9220-7ff6e8f28e18"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Create SSTParcelByOrder \r\n",
							"## Create SSTParcelByWaybill\r\n",
							"## Create SSTParcelByConsignment\r\n",
							"## Create SSTParcelByLoad\r\n",
							"#\r\n",
							"##Create DataFrame for the sstparcelunion LMS Table\r\n",
							"#sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"#sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"#\r\n",
							"##Create DataFrame for the ssttrack LMS Table\r\n",
							"#ssttrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrack.parquet', format='parquet')\r\n",
							"#ssttrack.createOrReplaceTempView(\"ssttrack\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbyorder \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     P.orderid as lms_parcelbyorder_orderid\r\n",
							"    ,Sum(P.weight) as lms_parcelbyorder_aggweight\r\n",
							"    ,Sum(P.chargeweight) as lms_parcelbyorder_aggchargeweight\r\n",
							"    ,Sum(P.volweight) as lms_parcelbyorder_aggvolweight\r\n",
							"    ,Sum(P.volumiserweight) as lms_parcelbyorder_aggvolumiserweight\r\n",
							"    ,Count(P.id) as lms_parcelbyorder_noparcels\r\n",
							"FROM sstparcelunion P\r\n",
							"GROUP BY P.orderid"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbyorder = spark.sql(\"SELECT * FROM sstparcelbyorder\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#sstparcelbyorder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyorder.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbywaybill \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     P.waybillid as lms_parcelbywaybill_waybillid\r\n",
							"    ,Sum(P.weight) as lms_parcelbywaybill_aggweight\r\n",
							"    ,Sum(P.chargeweight) as lms_parcelbywaybill_aggchargeweight\r\n",
							"    ,Sum(P.volweight) as lms_parcelbywaybill_aggvolweight\r\n",
							"    ,Sum(P.volumiserweight) as lms_parcelbywaybill_aggvolumiserweight\r\n",
							"    ,Count(P.id) as lms_parcelbywaybill_noparcels\r\n",
							"FROM sstparcelunion P\r\n",
							"GROUP BY P.waybillid"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbywaybill = spark.sql(\"SELECT * FROM sstparcelbywaybill\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#sstparcelbywaybill.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbywaybill.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbyconsignment \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     P.consignid as lms_parcelbyconsignment_consignid\r\n",
							"    ,Sum(P.weight) as lms_parcelbyconsignment_aggweight\r\n",
							"    ,Sum(P.chargeweight) as lms_parcelbyconsignment_aggchargeweight\r\n",
							"    ,Sum(P.volweight) as lms_parcelbyconsignment_aggvolweight\r\n",
							"    ,Sum(P.volumiserweight) as lms_parcelbyconsignment_aggvolumiserweight\r\n",
							"    ,Count(P.id) as lms_parcelbyconsignment_noparcels\r\n",
							"FROM sstparcelunion P\r\n",
							"GROUP BY P.consignid"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbyconsignment = spark.sql(\"SELECT * FROM sstparcelbyconsignment\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#sstparcelbyconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyconsignment.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbyload \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     T.lms_track_loadid as lms_parcelbyload_loadid\r\n",
							"    ,Sum(T.lms_parcel_weight) as lms_parcelbyload_aggweight\r\n",
							"    ,Sum(T.lms_parcel_chargeweight) as lms_parcelbyload_aggchargeweight\r\n",
							"    ,Sum(T.lms_parcel_volweight) as lms_parcelbyload_aggvolweight\r\n",
							"    ,Sum(T.lms_parcel_volumiserweight) as lms_parcelbyload_aggvolumiserweight\r\n",
							"    ,Count(T.lms_track_parcelid) as lms_parcelbyload_noparcels\r\n",
							"FROM ssttrack T\r\n",
							"GROUP BY T.lms_track_loadid"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbyload = spark.sql(\"SELECT * FROM sstparcelbyload\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#sstparcelbyload.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyload.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 14
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTBooking')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/TMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4d737e6a-e78c-4278-b330-971e77131fc0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"##Create DataFrame for the publicnonbooking TMS Table\r\n",
							"#publicnonbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicnonbooking.parquet', format='parquet')\r\n",
							"#publicnonbooking.createOrReplaceTempView(\"publicnonbooking\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicbooking TMS Table\r\n",
							"#publicbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicbooking.parquet', format='parquet')\r\n",
							"#publicbooking.createOrReplaceTempView(\"publicbooking\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publiccustomer TMS Table\r\n",
							"#publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiccustomer.parquet', format='parquet')\r\n",
							"#publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicroute TMS Table\r\n",
							"#publicroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicroute.parquet', format='parquet')\r\n",
							"#publicroute.createOrReplaceTempView(\"publicroute\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicthirdparty TMS Table\r\n",
							"#publicthirdparty = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicthirdparty.parquet', format='parquet')\r\n",
							"#publicthirdparty.createOrReplaceTempView(\"publicthirdparty\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicfinancedata TMS Table\r\n",
							"#publicfinancedata = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfinancedata.parquet', format='parquet')\r\n",
							"#publicfinancedata.createOrReplaceTempView(\"publicfinancedata\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sstbooking_tmp = spark.sql(\"\"\"\r\n",
							"SELECT \r\n",
							"    b.id as tms_booking_id\r\n",
							"    ,'booking' as tms_booking_bookingtype\r\n",
							"    ,b.customerid as tms_booking_customerid\r\n",
							"    ,b.trailersize as tms_booking_trailersize\r\n",
							"    ,b.trailertype as tms_booking_trailertype\r\n",
							"    ,b.routeid as tms_booking_routeid\r\n",
							"    ,b.routename as tms_booking_routename\r\n",
							"    ,b.cargoweight as tms_booking_cargoweight\r\n",
							"    ,b.cubicvolume as tms_booking_cubicvolume\r\n",
							"    ,b.directbooking as tms_booking_directbooking\r\n",
							"    ,to_timestamp(b.pickupdate) as tms_booking_pickupdate\r\n",
							"    ,to_timestamp(b.dispatchdate) as tms_booking_dispatchdate\r\n",
							"    ,to_timestamp(b.deliverydate) as tms_booking_deliverydate\r\n",
							"    ,to_timestamp(b.insdate) as tms_booking_insdate\r\n",
							"    ,to_timestamp(b.moddate) as tms_booking_moddate\r\n",
							"    ,b.status as tms_booking_status\r\n",
							"    ,b.tripid as tms_booking_tripid\r\n",
							"    ,b.createdby as tms_booking_createdby\r\n",
							"    ,b.allocatedby as tms_booking_allocatedby\r\n",
							"    ,to_timestamp(b.allocateddate) as tms_booking_allocateddate\r\n",
							"    ,COALESCE(b.opsrouteid,b.routeid) as tms_booking_opsrouteid\r\n",
							"    ,COALESCE(b.opsroutename,b.routename) as tms_booking_opsroutename\r\n",
							"    ,b.childcustomerid as tms_booking_childcustomerid\r\n",
							"    ,b.thirdpartyreason as tms_booking_thirdpartyreason\r\n",
							"    ,b.thirdpartyrate as tms_booking_thirdpartyrate\r\n",
							"    ,b.cref1 as tms_booking_cref1\r\n",
							"    ,b.cref2 as tms_booking_cref2\r\n",
							"    ,b.thirdpartyvehicleflag as tms_booking_thirdpartyvehicleflag\r\n",
							"    ,b.thirdpartytrailerflag as tms_booking_thirdpartytrailerflag\r\n",
							"    ,b.thirdpartydriverflag as tms_booking_thirdpartydriverflag\r\n",
							"    ,b.invoiceid as tms_booking_invoiceid\r\n",
							"    ,b.docstatus as tms_booking_docstatus\r\n",
							"    ,b.billingstatus as tms_booking_billingstatus\r\n",
							"    ,b.thirdpartyagreedrate as tms_booking_thirdpartyagreedrate\r\n",
							"    ,to_timestamp(b.invoiceddate) as tms_booking_invoiceddate\r\n",
							"    ,b.legacyid as tms_booking_legacyid\r\n",
							"    ,b.createdbyname as tms_booking_createdbyname\r\n",
							"    ,b.note as tms_booking_note\r\n",
							"    ,b.manifests as tms_booking_manifests\r\n",
							"    ,b.local as tms_booking_local\r\n",
							"    ,to_timestamp(b.docdate) as tms_booking_docdate\r\n",
							"    ,b.billingmethod as tms_booking_billingmethod\r\n",
							"    ,b.originalpod as tms_booking_originalpod\r\n",
							"    ,b.ponumber as tms_booking_ponumber\r\n",
							"    ,b.customerrate as tms_booking_customerrate\r\n",
							"    ,b.customeragreedrate as tms_booking_customeragreedrate\r\n",
							"    ,to_timestamp(b.assetreleasedate) as tms_booking_assetreleasedate\r\n",
							"    ,b.thirdpartyid as tms_booking_thirdpartyid\r\n",
							"    ,b.transporter as tms_booking_transporter\r\n",
							"    ,b.emailrequester as tms_booking_emailrequester\r\n",
							"    ,b.frombranchid as tms_booking_frombranchid\r\n",
							"    ,b.tobranchid as tms_booking_tobranchid\r\n",
							"    ,b.frombranch as tms_booking_frombranch\r\n",
							"    ,b.tobranch as tms_booking_tobranch\r\n",
							"    ,null as tms_booking_reason\r\n",
							"    ,null as tms_booking_startaddress\r\n",
							"    ,null as tms_booking_startlat\r\n",
							"    ,null as tms_booking_startlng\r\n",
							"    ,null as tms_booking_endaddress\r\n",
							"    ,null as tms_booking_endlat\r\n",
							"    ,null as tms_booking_endlng\r\n",
							"    ,null as tms_booking_convertedbookingid\r\n",
							"    \r\n",
							"FROM publicBooking b\r\n",
							"\"\"\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sstnonbooking_tmp = spark.sql(\"\"\"\r\n",
							"SELECT\r\n",
							"    n.id as tms_booking_id\r\n",
							"    ,'nonbooking' as tms_booking_bookingtype\r\n",
							"    ,null as tms_booking_customerid\r\n",
							"    ,n.trailersize as tms_booking_trailersize\r\n",
							"    ,null as tms_booking_trailertype\r\n",
							"    ,n.routeid as tms_booking_routeid\r\n",
							"    ,n.routename as tms_booking_routename\r\n",
							"    ,null as tms_booking_cargoweight\r\n",
							"    ,null as tms_booking_cubicvolume\r\n",
							"    ,null as tms_booking_directbooking\r\n",
							"    ,null as tms_booking_pickupdate\r\n",
							"    ,to_timestamp(n.dispatchdate) as tms_booking_dispatchdate\r\n",
							"    ,to_timestamp(n.deliverydate) as tms_booking_deliverydate\r\n",
							"    ,to_timestamp(n.insdate) as tms_booking_insdate\r\n",
							"    ,to_timestamp(n.moddate) as tms_booking_moddate\r\n",
							"    ,n.status as tms_booking_status\r\n",
							"    ,n.tripid as tms_booking_tripid\r\n",
							"    ,null as tms_booking_createdby\r\n",
							"    ,null as tms_booking_allocatedby\r\n",
							"    ,to_timestamp(n.insdate) as tms_booking_allocateddate\r\n",
							"    ,n.routeid as tms_booking_opsrouteid\r\n",
							"    ,n.routename as tms_booking_opsroutename\r\n",
							"    ,null as tms_booking_childcustomerid\r\n",
							"    ,null as tms_booking_thirdpartyreason\r\n",
							"    ,null as tms_booking_thirdpartyrate\r\n",
							"    ,null as tms_booking_cref1\r\n",
							"    ,null as tms_booking_cref2\r\n",
							"    ,null as tms_booking_thirdpartyvehicleflag\r\n",
							"    ,null as tms_booking_thirdpartytrailerflag\r\n",
							"    ,null as tms_booking_thirdpartydriverflag\r\n",
							"    ,null as tms_booking_invoiceid\r\n",
							"    ,null as tms_booking_docstatus\r\n",
							"    ,n.billingstatus as tms_booking_billingstatus\r\n",
							"    ,null as tms_booking_thirdpartyagreedrate\r\n",
							"    ,null as tms_booking_invoiceddate\r\n",
							"    ,n.legacyid as tms_booking_legacyid\r\n",
							"    ,null as tms_booking_createdbyname\r\n",
							"    ,n.note as tms_booking_note\r\n",
							"    ,null as tms_booking_manifests\r\n",
							"    ,n.local as tms_booking_local\r\n",
							"    ,null as tms_booking_docdate\r\n",
							"    ,null as tms_booking_billingmethod\r\n",
							"    ,null as tms_booking_originalpod\r\n",
							"    ,null as tms_booking_ponumber\r\n",
							"    ,null as tms_booking_customerrate\r\n",
							"    ,null as tms_booking_customeragreedrate\r\n",
							"    ,to_timestamp(n.assetreleasedate) as tms_booking_assetreleasedate\r\n",
							"    ,null as tms_booking_thirdpartyid\r\n",
							"    ,null as tms_booking_transporter\r\n",
							"    ,null as tms_booking_emailrequester\r\n",
							"    ,n.frombranchid as tms_booking_frombranchid\r\n",
							"    ,n.tobranchid as tms_booking_tobranchid\r\n",
							"    ,n.frombranch as tms_booking_frombranch\r\n",
							"    ,n.tobranch as tms_booking_tobranch\r\n",
							"    ,n.reason as tms_booking_reason\r\n",
							"    ,n.startaddress as tms_booking_startaddress\r\n",
							"    ,n.startlat as tms_booking_startlat\r\n",
							"    ,n.startlng as tms_booking_startlng\r\n",
							"    ,n.endaddress as tms_booking_endaddress\r\n",
							"    ,n.endlat as tms_booking_endlat\r\n",
							"    ,n.endlng as tms_booking_endlng\r\n",
							"    ,n.convertedbookingid as tms_booking_convertedbookingid\r\n",
							"\r\n",
							"FROM publicNonBooking n\r\n",
							"\"\"\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstbooking_tmp.createOrReplaceTempView(\"sstbooking_tmp\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstnonbooking_tmp.createOrReplaceTempView(\"sstnonbooking_tmp\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"bookingunionnonbooking = sstbooking_tmp.unionByName(sstnonbooking_tmp, allowMissingColumns = True)\r\n",
							"bookingunionnonbooking.createOrReplaceTempView(\"bookingunionnonbooking\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstbooking \r\n",
							"AS \r\n",
							"SELECT\r\n",
							"    x.tms_booking_id\r\n",
							"    ,x.tms_booking_bookingtype\r\n",
							"    ,x.tms_booking_customerid\r\n",
							"    ,x.tms_booking_trailersize\r\n",
							"    ,x.tms_booking_trailertype\r\n",
							"    ,x.tms_booking_routeid\r\n",
							"    ,x.tms_booking_routename\r\n",
							"    ,x.tms_booking_cargoweight\r\n",
							"    ,x.tms_booking_cubicvolume\r\n",
							"    ,x.tms_booking_directbooking\r\n",
							"    ,x.tms_booking_pickupdate\r\n",
							"    ,x.tms_booking_dispatchdate\r\n",
							"    ,x.tms_booking_deliverydate\r\n",
							"    ,x.tms_booking_insdate\r\n",
							"    ,x.tms_booking_moddate\r\n",
							"    ,x.tms_booking_status\r\n",
							"    ,x.tms_booking_tripid\r\n",
							"    ,x.tms_booking_createdby\r\n",
							"    ,x.tms_booking_allocatedby\r\n",
							"    ,x.tms_booking_allocateddate\r\n",
							"    ,x.tms_booking_opsrouteid\r\n",
							"    ,x.tms_booking_opsroutename\r\n",
							"    ,x.tms_booking_childcustomerid\r\n",
							"    ,x.tms_booking_thirdpartyreason\r\n",
							"    ,x.tms_booking_thirdpartyrate\r\n",
							"    ,x.tms_booking_cref1\r\n",
							"    ,x.tms_booking_cref2\r\n",
							"    ,x.tms_booking_thirdpartyvehicleflag\r\n",
							"    ,x.tms_booking_thirdpartytrailerflag\r\n",
							"    ,x.tms_booking_thirdpartydriverflag\r\n",
							"    ,x.tms_booking_invoiceid\r\n",
							"    ,x.tms_booking_docstatus\r\n",
							"    ,x.tms_booking_billingstatus\r\n",
							"    ,x.tms_booking_thirdpartyagreedrate\r\n",
							"    ,x.tms_booking_invoiceddate\r\n",
							"    ,x.tms_booking_createdbyname\r\n",
							"    ,x.tms_booking_note\r\n",
							"    ,x.tms_booking_manifests\r\n",
							"    ,x.tms_booking_local\r\n",
							"    ,x.tms_booking_docdate\r\n",
							"    ,x.tms_booking_billingmethod\r\n",
							"    ,x.tms_booking_originalpod\r\n",
							"    ,x.tms_booking_ponumber\r\n",
							"    ,x.tms_booking_customerrate\r\n",
							"    ,x.tms_booking_customeragreedrate\r\n",
							"    ,x.tms_booking_assetreleasedate\r\n",
							"    ,x.tms_booking_thirdpartyid\r\n",
							"    ,x.tms_booking_transporter\r\n",
							"    ,x.tms_booking_emailrequester\r\n",
							"    ,x.tms_booking_frombranchid\r\n",
							"    ,x.tms_booking_tobranchid\r\n",
							"    ,x.tms_booking_frombranch\r\n",
							"    ,x.tms_booking_tobranch\r\n",
							"    ,x.tms_booking_reason\r\n",
							"    ,x.tms_booking_startaddress\r\n",
							"    ,x.tms_booking_startlat\r\n",
							"    ,x.tms_booking_startlng\r\n",
							"    ,x.tms_booking_endaddress\r\n",
							"    ,x.tms_booking_endlat\r\n",
							"    ,x.tms_booking_endlng\r\n",
							"    ,x.tms_booking_convertedbookingid\r\n",
							"    ,c.id as tms_customer_id\r\n",
							"    ,c.status as tms_customer_status\r\n",
							"    ,c.name as tms_customer_name\r\n",
							"    ,c.parentid as tms_customer_parentid\r\n",
							"    ,c.accountnumber as tms_customer_accountnumber\r\n",
							"    ,c.revenuecode as tms_customer_revenuecode\r\n",
							"    ,c.insdate as tms_customer_insdate\r\n",
							"    ,c.moddate as tms_customer_moddate\r\n",
							"    ,c.insby as tms_customer_insby\r\n",
							"    ,c.opaqueid as tms_customer_opaqueid\r\n",
							"    ,c.email as tms_customer_email\r\n",
							"    ,c.areacode as tms_customer_areacode\r\n",
							"    ,c.mobilenum as tms_customer_mobilenum\r\n",
							"    ,c.billingmethod as tms_customer_billingmethod\r\n",
							"    ,c.adjustmetric as tms_customer_adjustmetric\r\n",
							"    ,c.adjustvalue as tms_customer_adjustvalue\r\n",
							"    ,c.adjustnegativeallowed as tms_customer_adjustnegativeallowed\r\n",
							"    ,c.adjustvalueusingprevmonth as tms_customer_adjustvalueusingprevmonth\r\n",
							"    ,c.excludefromnotinvoicedreport as tms_customer_excludefromnotinvoicedreport\r\n",
							"    ,c.logictype as tms_customer_logictype\r\n",
							"    ,c1.id as tms_customer_childid\r\n",
							"    ,c1.status as tms_customer_childstatus\r\n",
							"    ,c1.name as tms_customer_childname\r\n",
							"    ,c1.parentid as tms_customer_childparentid\r\n",
							"    ,c1.accountnumber as tms_customer_childaccountnumber\r\n",
							"    ,c1.revenuecode as tms_customer_childrevenuecode\r\n",
							"    ,c1.insdate as tms_customer_childinsdate\r\n",
							"    ,c1.moddate as tms_customer_childmoddate\r\n",
							"    ,c1.insby as tms_customer_childinsby\r\n",
							"    ,c1.opaqueid as tms_customer_childopaqueid\r\n",
							"    ,c1.email as tms_customer_childemail\r\n",
							"    ,c1.areacode as tms_customer_childareacode\r\n",
							"    ,c1.mobilenum as tms_customer_childmobilenum\r\n",
							"    ,c1.billingmethod as tms_customer_childbillingmethod\r\n",
							"    ,c1.adjustmetric as tms_customer_childadjustmetric\r\n",
							"    ,c1.adjustvalue as tms_customer_childadjustvalue\r\n",
							"    ,c1.adjustnegativeallowed as tms_customer_childadjustnegativeallowed\r\n",
							"    ,c1.adjustvalueusingprevmonth as tms_customer_childadjustvalueusingprevmonth\r\n",
							"    ,c1.excludefromnotinvoicedreport as tms_customer_childexcludefromnotinvoicedreport\r\n",
							"    ,c1.logictype as tms_customer_childlogictype\r\n",
							"    ,c1.minliability as tms_customer_childminliability\r\n",
							"    ,r.id as tms_route_id\r\n",
							"    ,r.name as tms_route_name\r\n",
							"    ,r.slug as tms_route_slug\r\n",
							"    ,r.parentroute as tms_route_parentroute\r\n",
							"    ,r.insdate as tms_route_insdate\r\n",
							"    ,r.moddate as tms_route_moddate\r\n",
							"    ,r.insby as tms_route_insby\r\n",
							"    ,r.status as tms_route_status\r\n",
							"    ,r.crossborder as tms_route_crossborder\r\n",
							"    ,r.roundtripdays as tms_route_roundtripdays\r\n",
							"    ,r.distance as tms_route_distance\r\n",
							"    ,r.duration as tms_route_duration\r\n",
							"    ,r.numofuse as tms_route_numofuse\r\n",
							"    ,r.local as tms_route_local\r\n",
							"    ,r1.id as tms_route_opsrouteid\r\n",
							"    ,r1.name as tms_route_opsroutename\r\n",
							"    ,r1.slug as tms_route_opsrouteslug\r\n",
							"    ,r1.parentroute as tms_route_opsrouteparentroute\r\n",
							"    ,r1.insdate as tms_route_opsrouteinsdate\r\n",
							"    ,r1.moddate as tms_route_opsroutemoddate\r\n",
							"    ,r1.insby as tms_route_opsrouteinsby\r\n",
							"    ,r1.status as tms_route_opsroutestatus\r\n",
							"    ,r1.crossborder as tms_route_opsroutecrossborder\r\n",
							"    ,r1.roundtripdays as tms_route_opsrouteroundtripdays\r\n",
							"    ,r1.distance as tms_route_opsroutedistance\r\n",
							"    ,r1.duration as tms_route_opsrouteduration\r\n",
							"    ,r1.numofuse as tms_route_opsroutenumofuse\r\n",
							"    ,r1.local as tms_route_opsroutelocal\r\n",
							"    ,t.id as tms_thirdparty_id\r\n",
							"    ,t.name as tms_thirdparty_name\r\n",
							"    ,t.areacode as tms_thirdparty_areacode\r\n",
							"    ,t.telnumber as tms_thirdparty_telnumber\r\n",
							"    ,t.mobareacode as tms_thirdparty_mobareacode\r\n",
							"    ,t.mobnumer as tms_thirdparty_mobnumer\r\n",
							"    ,t.contact as tms_thirdparty_contact\r\n",
							"    ,t.address as tms_thirdparty_address\r\n",
							"    ,t.streetno as tms_thirdparty_streetno\r\n",
							"    ,t.zipcode as tms_thirdparty_zipcode\r\n",
							"    ,t.city as tms_thirdparty_city\r\n",
							"    ,t.province as tms_thirdparty_province\r\n",
							"    ,t.status as tms_thirdparty_status\r\n",
							"    ,t.mdvoid as tms_thirdparty_mdvoid\r\n",
							"    ,t.registration as tms_thirdparty_registration\r\n",
							"    ,t.email as tms_thirdparty_email\r\n",
							"    ,t.accnumber as tms_thirdparty_accnumber\r\n",
							"    ,t.insdate as tms_thirdparty_insdate\r\n",
							"    ,t.moddate as tms_thirdparty_moddate\r\n",
							"    ,t.gitstatus as tms_thirdparty_gitstatus\r\n",
							"    ,t.lat as tms_thirdparty_lat\r\n",
							"    ,t.lng as tms_thirdparty_lng\r\n",
							"    ,t.note as tms_thirdparty_note\r\n",
							"    ,t.revenuecode as tms_thirdparty_revenuecode\r\n",
							"    ,t.country as tms_thirdparty_country\r\n",
							"    ,fd.id as tms_financedata_id\r\n",
							"\t,fd.bookingid as tms_financedata_bookingid\r\n",
							"\t,fd.insdate as tms_financedata_insdate\r\n",
							"\t,fd.peaksurchagrebuy as tms_financedata_peaksurchagrebuy\r\n",
							"\t,fd.peaksurchagresell as tms_financedata_peaksurchagresell\r\n",
							"\t,fd.manualentryroadhaulsell as tms_financedata_manualentryroadhaulsell\r\n",
							"\t,fd.manualentryahocsell as tms_financedata_manualentryahocsell\r\n",
							"\t,fd.systemfuellevy as tms_financedata_systemfuellevy\r\n",
							"\t,fd.systemratefuellevy as tms_financedata_systemratefuellevy\r\n",
							"\t,fd.systemratefuelexlevy as tms_financedata_systemratefuelexlevy\r\n",
							"\t,fd.systemratefuelinclevy as tms_financedata_systemratefuelinclevy\r\n",
							"\t,fd.systemsellrate as tms_financedata_systemsellrate\r\n",
							"\t,fd.totalsellrate as tms_financedata_totalsellrate\r\n",
							"\t,fd.moddate as tms_financedata_moddate\r\n",
							"\t,fd.totalbuyrate as tms_financedata_totalbuyrate\r\n",
							"\t,fd.rateprofileid as tms_financedata_rateprofileid\r\n",
							"  \r\n",
							"\r\n",
							"FROM bookingunionnonbooking x\r\n",
							"\r\n",
							"LEFT JOIN publiccustomer c on c.id = x.tms_booking_customerid\r\n",
							"LEFT JOIN publiccustomer c1 on c1.id = x.tms_booking_childcustomerid\r\n",
							"LEFT JOIN publicroute r on r.id = x.tms_booking_routeid\r\n",
							"LEFT JOIN publicroute r1 on r1.id = x.tms_booking_opsrouteid\r\n",
							"LEFT JOIN publicthirdparty t on t.id = x.tms_booking_thirdpartyid\r\n",
							"LEFT JOIN publicfinancedata fd on fd.bookingid = x.tms_booking_id\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstbooking = spark.sql(\"SELECT * FROM sstbooking\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#sstbooking.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstbooking.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 9
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTCollect')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c1a9c9ed-6ece-4f79-8993-68400fe886c9"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"##Create DataFrame for the dbocollect LMS Table\r\n",
							"#dbocollect = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocollect.parquet', format='parquet')\r\n",
							"#dbocollect.createOrReplaceTempView(\"dbocollect\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbocustomer LMS Table\r\n",
							"#dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"#dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbousers LMS Table\r\n",
							"#dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"#dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbolocation LMS Table\r\n",
							"#dbolocation= spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"#dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbodb_collectstatus LMS Table\r\n",
							"#dbodb_collectstatus= spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_collectstatus.parquet', format='parquet')\r\n",
							"#dbodb_collectstatus.createOrReplaceTempView(\"dbodb_collectstatus\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicdraftcollection ORV Table\r\n",
							"#publicdraftcollection = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdraftcollection.parquet', format='parquet')\r\n",
							"#publicdraftcollection.createOrReplaceTempView(\"publicdraftcollection\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicdelivery ORV Table\r\n",
							"#publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"#publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicmall ORV Table\r\n",
							"#publicmall = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicmall.parquet', format='parquet')\r\n",
							"#publicmall.createOrReplaceTempView(\"publicmall\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publiccustomer ORV Table\r\n",
							"#publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiccustomer.parquet', format='parquet')\r\n",
							"#publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"#"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sstcollect = spark.sql(\"\"\"\r\n",
							"SELECT \r\n",
							"    c.id as lms_collect_id\r\n",
							"    ,c.date as lms_collect_date\r\n",
							"    ,c.cservice as lms_collect_cservice\r\n",
							"    ,c.billcust as lms_collect_billcust\r\n",
							"    ,c.pickupcustid as lms_collect_pickupcustid\r\n",
							"    ,c.delivercustid as lms_collect_delivercustid\r\n",
							"    ,c.locationid as lms_collect_locationid\r\n",
							"    ,c.noofparcels as lms_collect_noofparcels\r\n",
							"    ,c.weight as lms_collect_weight\r\n",
							"    ,c.timeready as lms_collect_timeready\r\n",
							"    ,c.vehiclecapacity as lms_collect_vehiclecapacity\r\n",
							"    ,c.collectrefno as lms_collect_collectrefno\r\n",
							"    ,c.timeclosed as lms_collect_timeclosed\r\n",
							"    ,c.securitycollect as lms_collect_securitycollect\r\n",
							"    ,c.confirmedby as lms_collect_confirmedby\r\n",
							"    ,c.courierid as lms_collect_courierid\r\n",
							"    ,c.confirmeddate as lms_collect_confirmeddate\r\n",
							"    ,c.transferreddate as lms_collect_transferreddate\r\n",
							"    ,c.senddate as lms_collect_senddate\r\n",
							"    ,c.orderid as lms_collect_orderid\r\n",
							"    ,c.orderdate as lms_collect_orderdate\r\n",
							"    ,c.userid as lms_collect_userid\r\n",
							"    ,c.reason as lms_collect_reason\r\n",
							"    ,c.cubes as lms_collect_cubes\r\n",
							"    ,c.custref as lms_collect_custref\r\n",
							"    ,c.custref3 as lms_collect_custref3\r\n",
							"    ,c.custaccid as lms_collect_custaccid\r\n",
							"    ,c.collectparentid as lms_collect_collectparentid\r\n",
							"    ,c.duedate as lms_collect_duedate\r\n",
							"    ,c.specdel as lms_collect_specdel\r\n",
							"    ,c.flunits as lms_collect_flunits\r\n",
							"    ,c.flkgs as lms_collect_flkgs\r\n",
							"    ,c.quote as lms_collect_quote\r\n",
							"    ,c.bill_vehicletype as lms_collect_bill_vehicletype\r\n",
							"    ,c.collectstatusid as lms_collect_collectstatusid\r\n",
							"    ,c.bill_collectstatusid as lms_collect_bill_collectstatusid\r\n",
							"    ,c.cancelreason as lms_collect_cancelreason\r\n",
							"    ,c.cancelcomments as lms_collect_cancelcomments\r\n",
							"    ,c.loadid as lms_collect_loadid\r\n",
							"    ,c.custref2 as lms_collect_custref2\r\n",
							"    ,c.created as lms_collect_created\r\n",
							"    ,c.oncollection as lms_collect_oncollection\r\n",
							"    ,c.collected as lms_collect_collected\r\n",
							"    ,c.complete as lms_collect_complete\r\n",
							"    ,c.cancelled as lms_collect_cancelled\r\n",
							"    ,c.failed as lms_collect_failed\r\n",
							"    ,c.ctype as lms_collect_ctype\r\n",
							"    ,c.quoteid as lms_collect_quoteid\r\n",
							"    ,c.lastupdate as lms_collect_lastupdate\r\n",
							"    ,c.notes as lms_collect_notes\r\n",
							"    ,c.docurl as lms_collect_docurl\r\n",
							"    ,c.docdate as lms_collect_docdate\r\n",
							"    ,c.orvstatus as lms_collect_orvstatus\r\n",
							"    ,c.orvcode as lms_collect_orvcode\r\n",
							"    ,c.oldloadid as lms_collect_oldloadid\r\n",
							"    ,bc.id as lms_bcustomer_id\r\n",
							"    ,bc.name as lms_bcustomer_name\r\n",
							"    ,pc.id as lms_pcustomer_id\r\n",
							"    ,pc.name as lms_pcustomer_name\r\n",
							"    ,dc.id as lms_dcustomer_id\r\n",
							"    ,dc.name as lms_dcustomer_name\r\n",
							"    ,u.id as lms_users_id\r\n",
							"    ,u.fullname as lms_users_fullname\r\n",
							"    ,l.id as lms_clocation_id\r\n",
							"    ,l.description as lms_clocation_description\r\n",
							"    ,cs.id as lms_collectstatus_id\r\n",
							"    ,cs.description as lms_collectstatus_description\r\n",
							"    ,dcl.id as orv_draftcollection_id\r\n",
							"    ,dcl.fromlocid as orv_draftcollection_fromlocid\r\n",
							"    ,dcl.loadid as orv_draftcollection_loadid\r\n",
							"    ,dcl.status as orv_draftcollection_status\r\n",
							"    ,to_timestamp(dcl.importedate) as orv_draftcollection_importedate\r\n",
							"    ,dcl.fromstr as orv_draftcollection_fromstr\r\n",
							"    ,dcl.did as orv_draftcollection_did\r\n",
							"    ,dcl.mergedlmsid as orv_draftcollection_mergedlmsid\r\n",
							"    ,to_timestamp(dcl.rejectdate) as orv_draftcollection_rejectdate\r\n",
							"    ,to_timestamp(dcl.confirmdate) as orv_draftcollection_confirmdate\r\n",
							"    ,dcl.customerref as orv_draftcollection_customerref\r\n",
							"    ,dcl.collectionwaybillid as orv_draftcollection_collectionwaybillid\r\n",
							"    ,to_timestamp(dcl.collectbydate) as orv_draftcollection_collectbydate\r\n",
							"    ,dcl.rejectreason as orv_draftcollection_rejectreason\r\n",
							"    ,dcl.cancelctr as orv_draftcollection_cancelctr\r\n",
							"    ,d.id as orv_delivery_id\r\n",
							"    ,d.did as orv_delivery_dispatchid\r\n",
							"    ,d.waybillid as orv_delivery_waybillid\r\n",
							"    ,d.address as orv_delivery_address\r\n",
							"    ,d.town as orv_delivery_town\r\n",
							"    ,d.province as orv_delivery_province\r\n",
							"    ,d.country as orv_delivery_country\r\n",
							"    ,d.lat as orv_delivery_lat\r\n",
							"    ,d.lng as orv_delivery_lng\r\n",
							"    ,d.placeid as orv_delivery_placeid\r\n",
							"    ,d.what3words as orv_delivery_what3words\r\n",
							"    ,d.zipcode as orv_delivery_zipcode\r\n",
							"    ,to_timestamp(d.eta) as orv_delivery_eta\r\n",
							"    ,to_timestamp(d.actualeta) as orv_delivery_actualeta\r\n",
							"    ,to_timestamp(d.deliverydate) as orv_delivery_deliverydate\r\n",
							"    ,to_timestamp(d.deliverby) as orv_delivery_deliverby\r\n",
							"    ,d.deliveryorder as orv_delivery_deliveryorder\r\n",
							"    ,to_timestamp(d.tsgeofenceenter) as orv_delivery_tsgeofenceenter\r\n",
							"    ,to_timestamp(d.tsscanningstart) as orv_delivery_tsscanningstart\r\n",
							"    ,to_timestamp(d.tsscanningstop) as orv_delivery_tsscanningstop\r\n",
							"    ,to_timestamp(d.tspodsignature) as orv_delivery_tspodsignature\r\n",
							"    ,d.aid as orv_delivery_aid\r\n",
							"    ,d.numprcls as orv_delivery_numprcls\r\n",
							"    ,d.geocodingstatus as orv_delivery_geocodingstatus\r\n",
							"    ,to_timestamp(d.skipdate) as orv_delivery_skipdate\r\n",
							"    ,d.skipreason as orv_delivery_skipreason\r\n",
							"    ,d.status as orv_delivery_status\r\n",
							"    ,d.partialmatch as orv_delivery_partialmatch\r\n",
							"    ,d.approximated as orv_delivery_approximated\r\n",
							"    ,d.lmsorder as orv_delivery_lmsorder\r\n",
							"    ,d.optimizedorder as orv_delivery_optimizedorder\r\n",
							"    ,d.seal as orv_delivery_seal\r\n",
							"    ,d.customerinvoice as orv_delivery_customerinvoice\r\n",
							"    ,d.customerdn as orv_delivery_customerdn\r\n",
							"    ,d.grv as orv_delivery_grv\r\n",
							"    ,d.chepslip as orv_delivery_chepslip\r\n",
							"    ,d.cleandelivery as orv_delivery_cleandelivery\r\n",
							"    ,d.trackingcode as orv_delivery_trackingcode\r\n",
							"    ,d.mode as orv_delivery_mode\r\n",
							"    ,d.customorder as orv_delivery_customorder\r\n",
							"    ,d.verified as orv_delivery_verified\r\n",
							"    ,d.altered as orv_delivery_altered\r\n",
							"    ,d.orderid as orv_delivery_orderid\r\n",
							"    ,d.mergeid as orv_delivery_mergeid\r\n",
							"    ,d.orderref as orv_delivery_orderref\r\n",
							"    ,d.drivernote as orv_delivery_drivernote\r\n",
							"    ,d.guid as orv_delivery_guid\r\n",
							"    ,d.timedefinite as orv_delivery_timedefinite\r\n",
							"    ,d.orvcode as orv_delivery_orvcode\r\n",
							"    ,d.vaid as orv_delivery_vaid\r\n",
							"    ,to_timestamp(d.delegatedate) as orv_delivery_delegatedate\r\n",
							"    ,d.delegatemode as orv_delivery_delegatemode\r\n",
							"    ,d.debriefmode as orv_delivery_debriefmode\r\n",
							"    ,d.debriefed as orv_delivery_debriefed\r\n",
							"    ,to_timestamp(d.insdate) as orv_delivery_insdate\r\n",
							"    ,d.reviseddebrief as orv_delivery_reviseddebrief\r\n",
							"    ,d.lmsdebriefed as orv_delivery_lmsdebriefed\r\n",
							"    ,to_timestamp(d.uncanceldate) as orv_delivery_uncanceldate\r\n",
							"    ,to_timestamp(d.podlaterdate) as orv_delivery_podlaterdate\r\n",
							"    ,to_timestamp(d.podmanualdate) as orv_delivery_podmanualdate\r\n",
							"    ,d.manualdebriefreason as orv_delivery_manualdebriefreason\r\n",
							"    ,d.submanualdebriefreason as orv_delivery_submanualdebriefreason\r\n",
							"    ,d.outofgeofencereason as orv_delivery_outofgeofencereason\r\n",
							"    ,to_timestamp(d.tsentergeofenceapp) as orv_delivery_tsentergeofenceapp\r\n",
							"    ,to_timestamp(d.tsexitgeofenceapp) as orv_delivery_tsexitgeofenceapp\r\n",
							"    ,d.comebacklater as orv_delivery_comebacklater\r\n",
							"    ,d.uncancelusername as orv_delivery_uncancelusername\r\n",
							"    ,d.cref as orv_delivery_cref\r\n",
							"    ,d.division as orv_delivery_division\r\n",
							"    ,d.descriptionofgoods as orv_delivery_descriptionofgoods\r\n",
							"    ,d.skiplng as orv_delivery_skiplng\r\n",
							"    ,d.skiplat as orv_delivery_skiplat\r\n",
							"    ,d.courierid as orv_delivery_courierid\r\n",
							"    ,d.posreason as orv_delivery_posreason\r\n",
							"    ,to_timestamp(d.moddate) as orv_delivery_moddate\r\n",
							"    ,d.mallid as orv_delivery_mallid\r\n",
							"    ,d.mallgid as orv_delivery_mallgid\r\n",
							"    ,d.lmsidskipreason as orv_delivery_lmsidskipreason\r\n",
							"    ,d.deleteforimport as orv_delivery_deleteforimport\r\n",
							"    ,d.podoutofgeofence as orv_delivery_podoutofgeofence\r\n",
							"    ,d.originalcustomerid as orv_delivery_originalcustomerid\r\n",
							"    ,oc.id as orv_originalcustomer_id\r\n",
							"    ,oc.name as orv_originalcustomer_name\r\n",
							"    ,m.id as orv_mall_id\r\n",
							"    ,m.mallname as orv_mall_mallname\r\n",
							"    ,m.branchname as orv_mall_branchname\r\n",
							"    ,m.gpretailer as orv_mall_gpretailer\r\n",
							"    ,m.highvoldelivery as orv_mall_highvoldelivery\r\n",
							"    ,m.stripmall as orv_mall_stripmall\r\n",
							"    ,m.standalonestore as orv_mall_standalonestore\r\n",
							"    ,m.streetsidestore as orv_mall_streetsidestore\r\n",
							"    ,m.dedicatedrouted as orv_mall_dedicatedrouted\r\n",
							"    ,to_timestamp(m.insdate) as orv_mall_insdate\r\n",
							"    ,m.address as orv_mall_address\r\n",
							"    ,m.deleted as orv_mall_deleted\r\n",
							"    ,m.lat as orv_mall_lat\r\n",
							"    ,m.lng as orv_mall_lng\r\n",
							"\r\n",
							"\r\n",
							"FROM dbocollect c\r\n",
							"\r\n",
							"LEFT JOIN dbocustomer bc on bc.id = c.billcust\r\n",
							"LEFT JOIN dbocustomer pc on pc.id = c.pickupcustid\r\n",
							"LEFT JOIN dbocustomer dc on dc.id = c.delivercustid\r\n",
							"LEFT JOIN dbousers u on u.id = c.userid\r\n",
							"LEFT JOIN dbolocation l on l.id = c.locationid\r\n",
							"LEFT JOIN dbodb_collectstatus cs on cs.id = c.collectstatusid\r\n",
							"LEFT JOIN publicdraftcollection dcl on dcl.collectionwaybillid = c.id\r\n",
							"LEFT JOIN publicdelivery d on d.waybillid = c.id and d.mode = 'collect'\r\n",
							"LEFT JOIN publiccustomer oc on oc.id = d.originalcustomerid\r\n",
							"LEFT JOIN publicmall m on m.id = d.mallid\r\n",
							"\r\n",
							"\"\"\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstcollect.createOrReplaceTempView(\"sstcollect\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstcollect.write.parquet('abfss://synapse@' + StorageAccountWrite + 'prod.dfs.core.windows.net/Semi Structured Data/OPS/sstcollect.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sqlContext.read.parquet('abfss://synapse@' + StorageAccountWrite + 'prod.dfs.core.windows.net/Semi Structured Data/OPS/sstcollect.parquet').schema.fields"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTConsignment')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4af26d56-4b86-4fa0-887b-5d906f3c448b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"##Create DataFrame for the dboconsignment LMS Table\r\n",
							"#dboconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"#dboconsignment.createOrReplaceTempView(\"dboconsignment\")\r\n",
							"#\r\n",
							"##Create DataFrame for the sstparcelbyconsignment LMS Table\r\n",
							"#sstparcelbyconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyconsignment.parquet', format='parquet')\r\n",
							"#sstparcelbyconsignment.createOrReplaceTempView(\"sstparcelbyconsignment\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbobill_consignmentr LMS Table\r\n",
							"#dbobill_consignmentr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_consignmentr.parquet', format='parquet')\r\n",
							"#dbobill_consignmentr.createOrReplaceTempView(\"dbobill_consignmentr\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbousers LMS Table\r\n",
							"#dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"#dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbocustomer LMS Table\r\n",
							"#dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"#dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbobill_delivertype LMS Table\r\n",
							"#dbobill_delivertype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_delivertype.parquet', format='parquet')\r\n",
							"#dbobill_delivertype.createOrReplaceTempView(\"dbobill_delivertype\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbobill_zone LMS Table\r\n",
							"#dbobill_zone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zone.parquet', format='parquet')\r\n",
							"#dbobill_zone.createOrReplaceTempView(\"dbobill_zone\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbobill_servicetype LMS Table\r\n",
							"#dbobill_servicetype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_servicetype.parquet', format='parquet')\r\n",
							"#dbobill_servicetype.createOrReplaceTempView(\"dbobill_servicetype\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbobill_zoneroute LMS Table\r\n",
							"#dbobill_zoneroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zoneroute.parquet', format='parquet')\r\n",
							"#dbobill_zoneroute.createOrReplaceTempView(\"dbobill_zoneroute\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbobill_billtypesr LMS Table\r\n",
							"#dbobill_billtypesr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_billtypesr.parquet', format='parquet')\r\n",
							"#dbobill_billtypesr.createOrReplaceTempView(\"dbobill_billtypesr\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbobill_routerate LMS Table\r\n",
							"#dbobill_routerate = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_routerate.parquet', format='parquet')\r\n",
							"#dbobill_routerate.createOrReplaceTempView(\"dbobill_routerate\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbobroutemaster LMS Table\r\n",
							"#dbobroutemaster = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobroutemaster.parquet', format='parquet')\r\n",
							"#dbobroutemaster.createOrReplaceTempView(\"dbobroutemaster\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstconsignment \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    c.id as lms_consignment_id\r\n",
							"    ,c.cref as lms_consignment_cref\r\n",
							"    ,c.cdate as lms_consignment_cdate\r\n",
							"    ,c.userid as lms_consignment_userid\r\n",
							"    ,c.appointment as lms_consignment_appointment\r\n",
							"    ,c.deliverby as lms_consignment_deliverby\r\n",
							"    ,c.dconfirmed as lms_consignment_dconfirmed\r\n",
							"    ,c.dcomment as lms_consignment_dcomment\r\n",
							"    ,c.drefno as lms_consignment_drefno\r\n",
							"    ,c.loadid as lms_consignment_loadid\r\n",
							"    ,c.delivercustid as lms_consignment_delivercustid\r\n",
							"    ,c.mrpcflag as lms_consignment_mrpcflag\r\n",
							"    ,c.mrpflag as lms_consignment_mrpflag\r\n",
							"    ,c.billcust as lms_consignment_billcust\r\n",
							"    ,c.cserviceid as lms_consignment_cserviceid\r\n",
							"    ,c.lastupdate as lms_consignment_lastupdate\r\n",
							"    ,c.billflag as lms_consignment_billflag\r\n",
							"    ,c.missingflag as lms_consignment_missingflag\r\n",
							"    ,c.routerateid as lms_consignment_routerateid\r\n",
							"    ,c.delivertypeid as lms_consignment_delivertypeid\r\n",
							"    ,c.billtypeid as lms_consignment_billtypeid\r\n",
							"    ,c.totothersurcharges as lms_consignment_totothersurcharges\r\n",
							"    ,c.lhaddrate as lms_consignment_lhaddrate\r\n",
							"    ,c.lhcharge as lms_consignment_lhcharge\r\n",
							"    ,c.sapbillperiodid as lms_consignment_sapbillperiodid\r\n",
							"    ,c.lhrouterateid as lms_consignment_lhrouterateid\r\n",
							"    ,pbc.lms_parcelbyconsignment_consignid as lms_parcelbyconsignment_consignid\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggweight as lms_parcelbyconsignment_aggweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggchargeweight as lms_parcelbyconsignment_aggchargeweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggvolweight as lms_parcelbyconsignment_aggvolweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggvolumiserweight as lms_parcelbyconsignment_aggvolumiserweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_noparcels as lms_parcelbyconsignment_noparcels\r\n",
							"    ,bcr.id as lms_bill_consignmentr_id\r\n",
							"    ,bcr.consignid as lms_bill_consignmentr_consignid\r\n",
							"    ,bcr.updatedate as lms_bill_consignmentr_updatedate\r\n",
							"    ,bcr.pickuprouteid as lms_bill_consignmentr_pickuprouteid\r\n",
							"    ,bcr.deliverrouteid as lms_bill_consignmentr_deliverrouteid\r\n",
							"    ,bcr.chargeweight as lms_bill_consignmentr_chargeweight\r\n",
							"    ,bcr.noofparcels as lms_bill_consignmentr_noofparcels\r\n",
							"    ,bcr.tripdistance as lms_bill_consignmentr_tripdistance\r\n",
							"    ,bcr.consignmentvalue as lms_bill_consignmentr_consignmentvalue\r\n",
							"    ,bcr.billcust as lms_bill_consignmentr_billcust\r\n",
							"    ,bcr.redflag as lms_bill_consignmentr_redflag\r\n",
							"    ,bcr.updind as lms_bill_consignmentr_updind\r\n",
							"    ,bcr.servicetypeid as lms_bill_consignmentr_servicetypeid\r\n",
							"    ,bcr.routemissingind as lms_bill_consignmentr_routemissingind\r\n",
							"    ,bcr.chargescalcind as lms_bill_consignmentr_chargescalcind\r\n",
							"    ,bcr.cdate1 as lms_bill_consignmentr_cdate1\r\n",
							"    ,bcr.invalidpcode as lms_bill_consignmentr_invalidpcode\r\n",
							"    ,bcr.programno as lms_bill_consignmentr_programno\r\n",
							"    ,bcr.totrate as lms_bill_consignmentr_totrate\r\n",
							"    ,bcr.routecharge as lms_bill_consignmentr_routecharge\r\n",
							"    ,bcr.minweight as lms_bill_consignmentr_minweight\r\n",
							"    ,bcr.minrate as lms_bill_consignmentr_minrate\r\n",
							"    ,bcr.corderno as lms_bill_consignmentr_corderno\r\n",
							"    ,bcr.custref as lms_bill_consignmentr_custref\r\n",
							"    ,bcr.manualupdateflag as lms_bill_consignmentr_manualupdateflag\r\n",
							"    ,bcr.prevbillcustid as lms_bill_consignmentr_prevbillcustid\r\n",
							"    ,bcr.specdelvehicleid as lms_bill_consignmentr_specdelvehicleid\r\n",
							"    ,bcr.specdelmissingrouteflag as lms_bill_consignmentr_specdelmissingrouteflag\r\n",
							"    ,bcr.overborderflag as lms_bill_consignmentr_overborderflag\r\n",
							"    ,bcr.samedeliverid as lms_bill_consignmentr_samedeliverid\r\n",
							"    ,bcr.combineroutecharge as lms_bill_consignmentr_combineroutecharge\r\n",
							"    ,bcr.waybillid as lms_bill_consignmentr_waybillid\r\n",
							"    ,bcr.routelinecount as lms_bill_consignmentr_routelinecount\r\n",
							"    ,bcr.samedelcount as lms_bill_consignmentr_samedelcount\r\n",
							"    ,bcr.aweight as lms_bill_consignmentr_aweight\r\n",
							"    ,bcr.vweight as lms_bill_consignmentr_vweight\r\n",
							"    ,bcr.custref3 as lms_bill_consignmentr_custref3\r\n",
							"    ,bcr.units as lms_bill_consignmentr_units\r\n",
							"    ,bcr.totsurcharges as lms_bill_consignmentr_totsurcharges\r\n",
							"    ,bcr.noofpallets as lms_bill_consignmentr_noofpallets\r\n",
							"    ,bcr.invalidpudel as lms_bill_consignmentr_invalidpudel\r\n",
							"    ,bcr.sharikaflag as lms_bill_consignmentr_sharikaflag\r\n",
							"    ,bcr.sapid as lms_bill_consignmentr_sapid\r\n",
							"    ,bcr.totfuelsurcharge as lms_bill_consignmentr_totfuelsurcharge\r\n",
							"    ,bcr.totdocsurcharge as lms_bill_consignmentr_totdocsurcharge\r\n",
							"    ,bcr.totothersurcharge as lms_bill_consignmentr_totothersurcharge\r\n",
							"    ,bcr.specdel as lms_bill_consignmentr_specdel\r\n",
							"    ,bcr.quoteflag as lms_bill_consignmentr_quoteflag\r\n",
							"    ,bcr.billperiod as lms_bill_consignmentr_billperiod\r\n",
							"    ,bcr.billweekr as lms_bill_consignmentr_billweekr\r\n",
							"    ,bcr.billperiodflag as lms_bill_consignmentr_billperiodflag\r\n",
							"    ,bcr.surhargeflag as lms_bill_consignmentr_surhargeflag\r\n",
							"    ,bcr.recalcflag as lms_bill_consignmentr_recalcflag\r\n",
							"    ,bcr.quotemissingflag as lms_bill_consignmentr_quotemissingflag\r\n",
							"    ,bcr.delivertypeid as lms_bill_consignmentr_delivertypeid\r\n",
							"    ,bcr.totcovidsurcharge as lms_bill_consignmentr_totcovidsurcharge\r\n",
							"    ,u.id as lms_users_id\r\n",
							"    ,u.fullname as lms_users_fullname\r\n",
							"    ,u.site as lms_users_site\r\n",
							"    ,bc.id as lms_bcustomer_id\r\n",
							"    ,bc.name as lms_bcustomer_name\r\n",
							"    ,dc.id as lms_dcustomer_id\r\n",
							"    ,dc.name as lms_dcustomer_name\r\n",
							"    ,brr.id as lms_bill_routerate_id\r\n",
							"    ,brr.billcustid as lms_bill_routerate_billcustid\r\n",
							"    ,brr.effectivedate as lms_bill_routerate_effectivedate\r\n",
							"    ,brr.uomid as lms_bill_routerate_uomid\r\n",
							"    ,brr.routetypeid as lms_bill_routerate_routetypeid\r\n",
							"    ,brr.servicetypeid as lms_bill_routerate_servicetypeid\r\n",
							"    ,brr.minkg as lms_bill_routerate_minkg\r\n",
							"    ,brr.minrate as lms_bill_routerate_minrate\r\n",
							"    ,brr.addrate as lms_bill_routerate_addrate\r\n",
							"    ,brr.servicedays as lms_bill_routerate_servicedays\r\n",
							"    ,brr.servicehours as lms_bill_routerate_servicehours\r\n",
							"    ,brr.ratecardind as lms_bill_routerate_ratecardind\r\n",
							"    ,brr.pickupid as lms_bill_routerate_pickupid\r\n",
							"    ,brr.deliverid as lms_bill_routerate_deliverid\r\n",
							"    ,brr.description as lms_bill_routerate_description\r\n",
							"    ,brr.activeflag as lms_bill_routerate_activeflag\r\n",
							"    ,brr.billroutetypeflag as lms_bill_routerate_billroutetypeflag\r\n",
							"    ,brr.samedayflag as lms_bill_routerate_samedayflag\r\n",
							"    ,brr.specialrateflag as lms_bill_routerate_specialrateflag\r\n",
							"    ,brr.tocustid as lms_bill_routerate_tocustid\r\n",
							"    ,brr.maxparcel as lms_bill_routerate_maxparcel\r\n",
							"    ,brr.returnflag as lms_bill_routerate_returnflag\r\n",
							"    ,brr.cutoff as lms_bill_routerate_cutoff\r\n",
							"    ,brr.rateperkg as lms_bill_routerate_rateperkg\r\n",
							"    ,brr.userid as lms_bill_routerate_userid\r\n",
							"    ,brr.authorizeperson as lms_bill_routerate_authorizeperson\r\n",
							"    ,brr.updatedate as lms_bill_routerate_updatedate\r\n",
							"    ,brr.delivertypeid as lms_bill_routerate_delivertypeid\r\n",
							"    ,brr.billyear as lms_bill_routerate_billyear\r\n",
							"    ,brr.ecommzoneid as lms_bill_routerate_ecommzoneid\r\n",
							"    ,brr.billareaid as lms_bill_routerate_billareaid\r\n",
							"    ,brr.routerateoverideflag as lms_bill_routerate_routerateoverideflag\r\n",
							"    ,bbt.id as lms_bill_billtypesr_id\r\n",
							"    ,bbt.description as lms_bill_billtypesr_description\r\n",
							"    ,bbt.surchargeflag as lms_bill_billtypesr_surchargeflag\r\n",
							"    ,bzrp.id as lms_bill_zoneroute_pickupid\r\n",
							"    ,bzrp.description as lms_bill_zoneroute_pickupdescription\r\n",
							"    ,bzrp.zoneid as lms_bill_zoneroute_pickupzoneid\r\n",
							"    ,bzrp.zrscode as lms_bill_zoneroute_pickupzrscode\r\n",
							"    ,bzrp.zonerouteorder as lms_bill_zoneroute_pickupzonerouteorder\r\n",
							"    ,bzrp.zonetype as lms_bill_zoneroute_pickupzonetype\r\n",
							"    ,bzrp.broutemasterid as lms_bill_zoneroute_pickupbroutemasterid\r\n",
							"    ,bzrp.broutecode as lms_bill_zoneroute_pickupbroutecode\r\n",
							"    ,bzrd.id as lms_bill_zoneroute_deliverid\r\n",
							"    ,bzrd.description as lms_bill_zoneroute_deliverdescription\r\n",
							"    ,bzrd.zoneid as lms_bill_zoneroute_deliverzoneid\r\n",
							"    ,bzrd.zrscode as lms_bill_zoneroute_deliverzrscode\r\n",
							"    ,bzrd.zonerouteorder as lms_bill_zoneroute_deliverzonerouteorder\r\n",
							"    ,bzrd.zonetype as lms_bill_zoneroute_deliverzonetype\r\n",
							"    ,bzrd.broutemasterid as lms_bill_zoneroute_deliverbroutemasterid\r\n",
							"    ,bzrd.broutecode as lms_bill_zoneroute_deliverbroutecode\r\n",
							"    ,bst.id as lms_bill_servicetype_id\r\n",
							"    ,bst.description as lms_bill_servicetype_description\r\n",
							"    ,bst.code as lms_bill_servicetype_code\r\n",
							"    ,bst.ccode as lms_bill_servicetype_ccode\r\n",
							"    ,bzp.id as lms_bill_zone_pickupid\r\n",
							"    ,bzp.description as lms_bill_zone_pickupdescription\r\n",
							"    ,bzp.zonemasterid as lms_bill_zone_pickupzonemasterid\r\n",
							"    ,bzp.countryid as lms_bill_zone_pickupcountryid\r\n",
							"    ,bzd.id as lms_bill_zone_deliverid\r\n",
							"    ,bzd.description as lms_bill_zone_deliverdescription\r\n",
							"    ,bzd.zonemasterid as lms_bill_zone_deliverzonemasterid\r\n",
							"    ,bzd.countryid as lms_bill_zone_delivercountryid\r\n",
							"    ,bdt.id as lms_bill_delivertype_id\r\n",
							"    ,bdt.description as lms_bill_delivertype_description\r\n",
							"    ,brmp.id as lms_broutemaster_pickupid\r\n",
							"    ,brmp.description as lms_broutemaster_pickupdescription\r\n",
							"    ,brmp.code as lms_broutemaster_pickupcode\r\n",
							"    ,brmp.brouteparentid as lms_broutemaster_pickupbrouteparentid\r\n",
							"    ,brmd.id as lms_broutemaster_deliverid\r\n",
							"    ,brmd.description as lms_broutemaster_deliverdescription\r\n",
							"    ,brmd.code as lms_broutemaster_delivercode\r\n",
							"    ,brmd.brouteparentid as lms_broutemaster_deliverbrouteparentid\r\n",
							"\r\n",
							"FROM dboconsignment c\r\n",
							"\r\n",
							"LEFT JOIN sstparcelbyconsignment pbc on pbc.lms_parcelbyconsignment_consignid = c.id\r\n",
							"LEFT JOIN dbobill_consignmentr bcr on bcr.consignid = c.id\r\n",
							"LEFT JOIN dbousers u on u.id = c.userid\r\n",
							"LEFT JOIN dbocustomer bc on bc.id = bcr.billcust\r\n",
							"LEFT JOIN dbocustomer dc on dc.id = c.delivercustid\r\n",
							"LEFT JOIN dbobill_routerate brr on brr.id = c.routerateid\r\n",
							"LEFT JOIN dbobill_billtypesr bbt on bbt.id = c.billtypeid \r\n",
							"LEFT JOIN dbobill_delivertype bdt on bdt.id = c.delivertypeid\r\n",
							"LEFT JOIN dbobill_servicetype bst on bst.id = bcr.servicetypeid\r\n",
							"LEFT JOIN dbobill_zoneroute bzrp on bzrp.id = bcr.pickuprouteid\r\n",
							"LEFT JOIN dbobill_zoneroute bzrd on bzrd.id = bcr.deliverrouteid\r\n",
							"LEFT JOIN dbobill_zone bzp on bzp.id = bzrp.zoneid\r\n",
							"LEFT JOIN dbobill_zone bzd on bzd.id = bzrd.zoneid\r\n",
							"LEFT JOIN dboBroutemaster brmp on brmp.id = bzrp.broutemasterid\r\n",
							"LEFT JOIN dboBroutemaster brmd on brmd.id = bzrd.broutemasterid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstconsignment = spark.sql(\"SELECT * FROM sstconsignment\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#sstconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignment.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 7
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTConsignmentUnion')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS Union"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "94828f88-139b-4a8c-b3fb-f853623de8f4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"##Create DataFrame for the dboconsignment_archive LMS Table\r\n",
							"#dboconsignment_archive = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboconsignment_archive.parquet', format='parquet')\r\n",
							"#dboconsignment_archive.createOrReplaceTempView(\"dboconsignment_archive\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dboconsignment LMS Table\r\n",
							"#dboconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboconsignment.parquet', format='parquet')\r\n",
							"#dboconsignment.createOrReplaceTempView(\"dboconsignment\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dboconsignmentunion = dboconsignment #dboconsignment_archive.unionByName(dboconsignment, allowMissingColumns = True)\r\n",
							"dboconsignmentunion.createOrReplaceTempView(\"dboconsignmentunion\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstconsignmentunion\r\n",
							"AS\r\n",
							"SELECT * \r\n",
							"FROM dboconsignmentunion"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstconsignmentunion = spark.sql(\"SELECT * FROM sstconsignmentunion\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#sstconsignmentunion.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 14
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTInstruction')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/TMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "12e828cb-94e2-4574-8c30-896b8ff985e0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"##Create DataFrame for the publicinstruction TMS Table\r\n",
							"#publicinstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinstruction.parquet', format='parquet')\r\n",
							"#publicinstruction.createOrReplaceTempView(\"publicinstruction\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicaddress TMS Table\r\n",
							"#publicaddress = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicaddress.parquet', format='parquet')\r\n",
							"#publicaddress.createOrReplaceTempView(\"publicaddress\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publiccustomer TMS Table\r\n",
							"#publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiccustomer.parquet', format='parquet')\r\n",
							"#publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publiclhdelivery ORV Table\r\n",
							"#publiclhdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiclhdelivery.parquet', format='parquet')\r\n",
							"#publiclhdelivery.createOrReplaceTempView(\"publiclhdelivery\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sstinstruction = spark.sql(\"\"\"\r\n",
							"SELECT \r\n",
							"    i.id as tms_instruction_id\r\n",
							"    ,i.bookingid as tms_instruction_bookingid\r\n",
							"    ,i.addressid as tms_instruction_addressid\r\n",
							"    ,to_timestamp(i.insdate) as tms_instruction_insdate\r\n",
							"    ,to_timestamp(i.moddate) as tms_instruction_moddate\r\n",
							"    ,i.insby as tms_instruction_insby\r\n",
							"    ,i.onroute as tms_instruction_onroute\r\n",
							"    ,i.instrtype as tms_instruction_instrtype\r\n",
							"    ,i.onrouteid as tms_instruction_onrouteid\r\n",
							"    ,i.sort as tms_instruction_sort\r\n",
							"    ,i.note as tms_instruction_note\r\n",
							"    ,i.onroutestatus as tms_instruction_onroutestatus\r\n",
							"    ,i.legacyid as tms_instruction_legacyid\r\n",
							"    ,i.legacyaddress as tms_instruction_legacyaddress\r\n",
							"    ,i.citybranchid as tms_instruction_citybranchid\r\n",
							"    ,i.citybranchname as tms_instruction_citybranchname\r\n",
							"    ,a.id as tms_address_id\r\n",
							"    ,a.customerid as tms_address_customerid\r\n",
							"    ,a.address as tms_address_address\r\n",
							"    ,a.streetno as tms_address_streetno\r\n",
							"    ,a.city as tms_address_city\r\n",
							"    ,a.province as tms_address_province\r\n",
							"    ,a.country as tms_address_country\r\n",
							"    ,a.addresstype as tms_address_addresstype\r\n",
							"    ,a.lat as tms_address_lat\r\n",
							"    ,a.lng as tms_address_lng\r\n",
							"    ,to_timestamp(a.insdate) as tms_address_insdate\r\n",
							"    ,to_timestamp(a.moddate) as tms_address_moddate\r\n",
							"    ,to_timestamp(a.lastuseddate) as tms_address_lastuseddate\r\n",
							"    ,a.searchfield as tms_address_searchfield\r\n",
							"    ,a.zipcode as tms_address_zipcode\r\n",
							"    ,a.slug as tms_address_slug\r\n",
							"    ,c.status as tms_customer_status\r\n",
							"    ,c.name as tms_customer_name\r\n",
							"    ,c.parentid as tms_customer_parentid\r\n",
							"    ,c.accountnumber as tms_customer_accountnumber\r\n",
							"    ,c.revenuecode as tms_customer_revenuecode\r\n",
							"    ,to_timestamp(c.insdate) as tms_customer_insdate\r\n",
							"    ,to_timestamp(c.moddate) as tms_customer_moddate\r\n",
							"    ,c.insby as tms_customer_insby\r\n",
							"    ,c.opaqueid as tms_customer_opaqueid\r\n",
							"    ,c.email as tms_customer_email\r\n",
							"    ,c.areacode as tms_customer_areacode\r\n",
							"    ,c.mobilenum as tms_customer_mobilenum\r\n",
							"    ,c.legacyid as tms_customer_legacyid\r\n",
							"    ,c.billingmethod as tms_customer_billingmethod\r\n",
							"    ,c.adjustmetric as tms_customer_adjustmetric\r\n",
							"    ,c.adjustvalue as tms_customer_adjustvalue\r\n",
							"    ,c.adjustnegativeallowed as tms_customer_adjustnegativeallowed\r\n",
							"    ,c.adjustvalueusingprevmonth as tms_customer_adjustvalueusingprevmonth\r\n",
							"    ,c.excludefromnotinvoicedreport as tms_customer_excludefromnotinvoicedreport\r\n",
							"    ,c.logictype as tms_customer_logictype\r\n",
							"    ,c.minliability as tms_customer_minliability\r\n",
							"    ,lhd.id as orv_lhdelivery_id\r\n",
							"    ,lhd.did as orv_lhdelivery_did\r\n",
							"    ,lhd.address as orv_lhdelivery_address\r\n",
							"    ,lhd.lat as orv_lhdelivery_lat\r\n",
							"    ,lhd.lng as orv_lhdelivery_lng\r\n",
							"    ,to_timestamp(lhd.actualeta) as orv_lhdelivery_actualeta\r\n",
							"    ,to_timestamp(lhd.eta) as orv_lhdelivery_eta\r\n",
							"    ,to_timestamp(lhd.tsgeofenceenter) as orv_lhdelivery_tsgeofenceenter\r\n",
							"    ,to_timestamp(lhd.tsdocuments) as orv_lhdelivery_tsdocuments\r\n",
							"    ,lhd.customerref1 as orv_lhdelivery_customerref1\r\n",
							"    ,lhd.customerref2 as orv_lhdelivery_customerref2\r\n",
							"    ,lhd.trailersize as orv_lhdelivery_trailersize\r\n",
							"    ,lhd.cargoweight as orv_lhdelivery_cargoweight\r\n",
							"    ,lhd.cubicvolume as orv_lhdelivery_cubicvolume\r\n",
							"    ,lhd.geocodingstatus as orv_lhdelivery_geocodingstatus\r\n",
							"    ,lhd.status as orv_lhdelivery_status\r\n",
							"    ,lhd.optimizedorder as orv_lhdelivery_optimizedorder\r\n",
							"    ,lhd.triporder as orv_lhdelivery_triporder\r\n",
							"    ,lhd.sequence as orv_lhdelivery_sequence\r\n",
							"    ,lhd.bookingid as orv_lhdelivery_bookingid\r\n",
							"    ,lhd.grv as orv_lhdelivery_grv\r\n",
							"    ,lhd.chepslip as orv_lhdelivery_chepslip\r\n",
							"    ,lhd.type as orv_lhdelivery_type\r\n",
							"    ,to_timestamp(lhd.insdate) as orv_lhdelivery_insdate\r\n",
							"    ,lhd.isdirect as orv_lhdelivery_isdirect\r\n",
							"    ,lhd.notes as orv_lhdelivery_notes\r\n",
							"    ,lhd.contactperson as orv_lhdelivery_contactperson\r\n",
							"    ,lhd.contactnumber as orv_lhdelivery_contactnumber\r\n",
							"    ,lhd.trailerfleetcode as orv_lhdelivery_trailerfleetcode\r\n",
							"    ,lhd.primarycustomerid as orv_lhdelivery_primarycustomerid\r\n",
							"    ,lhd.pcustomername as orv_lhdelivery_pcustomername\r\n",
							"    ,lhd.pcustomeraccountnumber as orv_lhdelivery_pcustomeraccountnumber\r\n",
							"    ,lhd.pcustomerrevenuecode as orv_lhdelivery_pcustomerrevenuecode\r\n",
							"    ,lhd.secondarycustomerid as orv_lhdelivery_secondarycustomerid\r\n",
							"    ,lhd.scustomername as orv_lhdelivery_scustomername\r\n",
							"    ,lhd.scustomeraccountnumber as orv_lhdelivery_scustomeraccountnumber\r\n",
							"    ,lhd.scustomerrevenuecode as orv_lhdelivery_scustomerrevenuecode\r\n",
							"    ,to_timestamp(lhd.actiondate) as orv_lhdelivery_actiondate\r\n",
							"    ,to_timestamp(lhd.tsgeofenceexit) as orv_lhdelivery_tsgeofenceexit\r\n",
							"    ,lhd.pctmsid as orv_lhdelivery_pctmsid\r\n",
							"    ,lhd.sctmsid as orv_lhdelivery_sctmsid\r\n",
							"    ,lhd.customorder as orv_lhdelivery_customorder\r\n",
							"    ,to_timestamp(lhd.skipdate) as orv_lhdelivery_skipdate\r\n",
							"    ,lhd.skipreason as orv_lhdelivery_skipreason\r\n",
							"    ,lhd.outofgeofencereason as orv_lhdelivery_outofgeofencereason\r\n",
							"    ,to_timestamp(lhd.tsarrivedcustomer) as orv_lhdelivery_tsarrivedcustomer\r\n",
							"    ,to_timestamp(lhd.tsdroppedoff) as orv_lhdelivery_tsdroppedoff\r\n",
							"    ,to_timestamp(lhd.tsstartoffloading) as orv_lhdelivery_tsstartoffloading\r\n",
							"    ,to_timestamp(lhd.tsstartloading) as orv_lhdelivery_tsstartloading\r\n",
							"    ,to_timestamp(lhd.tsloaded) as orv_lhdelivery_tsloaded\r\n",
							"    ,to_timestamp(lhd.tsfinishedoffloading) as orv_lhdelivery_tsfinishedoffloading\r\n",
							"    ,to_timestamp(lhd.tsdocumnetshanddovedriver) as orv_lhdelivery_tsdocumnetshanddovedriver\r\n",
							"    ,to_timestamp(lhd.tsleavingcustomer) as orv_lhdelivery_tsleavingcustomer\r\n",
							"    ,lhd.actionsubtype as orv_lhdelivery_actionsubtype\r\n",
							"    ,to_timestamp(lhd.tsstart) as orv_lhdelivery_tsstart\r\n",
							"    ,lhd.signame as orv_lhdelivery_signame\r\n",
							"    ,lhd.signcomment as orv_lhdelivery_signcomment\r\n",
							"    ,to_timestamp(lhd.signdate) as orv_lhdelivery_signdate\r\n",
							"    ,to_timestamp(lhd.tsendtate) as orv_lhdelivery_tsendtate\r\n",
							"    ,to_timestamp(lhd.tsentergeofenceapp) as orv_lhdelivery_tsentergeofenceapp\r\n",
							"    ,to_timestamp(lhd.tsexitgeofenceapp) as orv_lhdelivery_tsexitgeofenceapp\r\n",
							"    ,lhd.tmsid as orv_lhdelivery_tmsid\r\n",
							"    ,lhd.subtype as orv_lhdelivery_subtype\r\n",
							"    ,lhd.needbotrailerver as orv_lhdelivery_needbotrailerver\r\n",
							"    ,lhd.secondtrailerfleetcode as orv_lhdelivery_secondtrailerfleetcode\r\n",
							"    ,lhd.trailerverlat as orv_lhdelivery_trailerverlat\r\n",
							"    ,lhd.trailerverlng as orv_lhdelivery_trailerverlng\r\n",
							"    ,to_timestamp(lhd.tstrailerver) as orv_lhdelivery_tstrailerver\r\n",
							"    ,lhd.podlat as orv_lhdelivery_podlat\r\n",
							"    ,lhd.podlng as orv_lhdelivery_podlng\r\n",
							"    ,lhd.skiplat as orv_lhdelivery_skiplat\r\n",
							"    ,lhd.skiplng as orv_lhdelivery_skiplng\r\n",
							"    ,to_timestamp(lhd.uncanceldate) as orv_lhdelivery_uncanceldate\r\n",
							"\r\n",
							"\r\n",
							"    FROM publicinstruction i\r\n",
							"    LEFT JOIN publicaddress a on a.id = i.addressid\r\n",
							"    LEFT JOIN publiccustomer c on c.id = a.customerid\r\n",
							"    LEFT JOIN publiclhdelivery lhd on lhd.tmsid = i.id\r\n",
							"    \"\"\")\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstinstruction.createOrReplaceTempView(\"sstinstruction\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#sstinstruction.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstinstruction.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTLoadChild')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a41beb79-81b5-45fc-9a70-33338423e791"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"##Create DataFrame for the dboloads LMS Table\r\n",
							"#dboloads = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboloads.parquet', format='parquet')\r\n",
							"#dboloads.createOrReplaceTempView(\"dboloads\")\r\n",
							"#\r\n",
							"##Create DataFrame for the sstparcelbyload LMS Table\r\n",
							"#sstparcelbyload = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyload.parquet', format='parquet')\r\n",
							"#sstparcelbyload.createOrReplaceTempView(\"sstparcelbyload\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbosroute LMS Table\r\n",
							"#dbosroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbosroute.parquet', format='parquet')\r\n",
							"#dbosroute.createOrReplaceTempView(\"dbosroute\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbodriver LMS Table\r\n",
							"#dbodriver = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodriver.parquet', format='parquet')\r\n",
							"#dbodriver.createOrReplaceTempView(\"dbodriver\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbousers LMS Table\r\n",
							"#dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"#dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbovehicle LMS Table\r\n",
							"#dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"#dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbovehiclebasic LMS Table\r\n",
							"#dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"#dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstloadchild\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    l.id as lms_loads_id\r\n",
							"    ,l.routeid as lms_loads_routeid\r\n",
							"    ,l.driverid as lms_loads_driverid\r\n",
							"    ,l.sealno as lms_loads_sealno\r\n",
							"    ,l.vehicleid as lms_loads_vehicleid\r\n",
							"    ,l.ttypeid as lms_loads_ttypeid\r\n",
							"    ,l.userid as lms_loads_userid\r\n",
							"    ,l.ldate as lms_loads_ldate\r\n",
							"    ,l.courierid as lms_loads_courierid\r\n",
							"    ,l.site as lms_loads_site\r\n",
							"    ,l.fromlocid as lms_loads_fromlocid\r\n",
							"    ,l.tolocid as lms_loads_tolocid\r\n",
							"    ,l.cdate as lms_loads_cdate\r\n",
							"    ,l.trailer1 as lms_loads_trailer1\r\n",
							"    ,l.trailer2 as lms_loads_trailer2\r\n",
							"    ,l.cref as lms_loads_cref\r\n",
							"    ,l.debriefed as lms_loads_debriefed\r\n",
							"    ,l.mrpflag as lms_loads_mrpflag\r\n",
							"    ,l.mrpcflag as lms_loads_mrpcflag\r\n",
							"    ,l.finalflag as lms_loads_finalflag\r\n",
							"    ,l.alidaflag as lms_loads_alidaflag\r\n",
							"    ,l.puibts as lms_loads_puibts\r\n",
							"    ,l.pucols as lms_loads_pucols\r\n",
							"    ,l.planningref as lms_loads_planningref\r\n",
							"    ,l.interfacedate as lms_loads_interfacedate\r\n",
							"    ,l.nosealsret as lms_loads_nosealsret\r\n",
							"    ,l.excludeopsi as lms_loads_excludeopsi\r\n",
							"    ,l.dccref as lms_loads_dccref\r\n",
							"    ,l.srouteid as lms_loads_srouteid\r\n",
							"    ,l.fuellitres as lms_loads_fuellitres\r\n",
							"    ,l.outsourcedcrew as lms_loads_outsourcedcrew\r\n",
							"    ,l.masterloadid as lms_loads_masterloadid\r\n",
							"    ,l.securitygatedespatched as lms_loads_securitygatedespatched\r\n",
							"    ,l.securitygateuserid as lms_loads_securitygateuserid\r\n",
							"    ,l.securitygatearrived as lms_loads_securitygatearrived\r\n",
							"    ,l.securitygatearriveduserid as lms_loads_securitygatearriveduserid\r\n",
							"    ,l.lastupdate as lms_loads_lastupdate\r\n",
							"    ,l.bayno as lms_loads_bayno\r\n",
							"    ,l.costs as lms_loads_costs\r\n",
							"    ,l.estdeparturedatetime as lms_loads_estdeparturedatetime\r\n",
							"    ,l.totalweight as lms_loads_totalweight\r\n",
							"    ,l.ovrignore as lms_loads_ovrignore\r\n",
							"    ,l.childloadid as lms_loads_childloadid\r\n",
							"    ,l.orvcode as lms_loads_orvcode\r\n",
							"    ,l.companyid as lms_loads_companyid\r\n",
							"    ,l.editloaddate as lms_loads_editloaddate\r\n",
							"    ,l.reopeneddate as lms_loads_reopeneddate\r\n",
							"    ,l.reopeneduserid as lms_loads_reopeneduserid\r\n",
							"    ,l.novehicle as lms_loads_novehicle\r\n",
							"    ,l.mobilefeedbackreasonid as lms_loads_mobilefeedbackreasonid\r\n",
							"    ,l.direct as lms_loads_direct\r\n",
							"    ,l.noofpcls as lms_loads_noofpcls\r\n",
							"    ,l.debriefdt as lms_loads_debriefdt\r\n",
							"    ,l.httpcode as lms_loads_httpcode\r\n",
							"    ,l.parentloadid as lms_loads_parentloadid\r\n",
							"    ,l.mrpobversion as lms_loads_mrpobversion\r\n",
							"    ,pbl.lms_parcelbyload_loadid as lms_parcelbyload_loadid\r\n",
							"    ,pbl.lms_parcelbyload_aggweight as lms_parcelbyload_aggweight\r\n",
							"    ,pbl.lms_parcelbyload_aggchargeweight as lms_parcelbyload_aggchargeweight\r\n",
							"    ,pbl.lms_parcelbyload_aggvolweight as lms_parcelbyload_aggvolweight\r\n",
							"    ,pbl.lms_parcelbyload_aggvolumiserweight as lms_parcelbyload_aggvolumiserweight\r\n",
							"    ,pbl.lms_parcelbyload_noparcels as lms_parcelbyload_noparcels\r\n",
							"    ,sr.id as lms_sroute_id\r\n",
							"    ,sr.description as lms_sroute_description\r\n",
							"    ,d.id as lms_driver_id\r\n",
							"    ,d.dname as lms_driver_dname\r\n",
							"    ,u.id as lms_users_id\r\n",
							"    ,u.fullname as lms_users_fullname\r\n",
							"    ,u.site as lms_users_site\r\n",
							"    ,u2.id as lms_users_reopenuserid\r\n",
							"    ,u2.fullname as lms_users_reopenuserfullname\r\n",
							"    ,u2.site as lms_users_reopenusersite\r\n",
							"    ,v.id as lms_vehicle_id\r\n",
							"    ,v.fleetno as lms_vehicle_fleetno\r\n",
							"    ,v.uid as lms_vehicle_uid\r\n",
							"    ,v1.id as lms_vehicle_trailer1id\r\n",
							"    ,v1.fleetno as lms_vehicle_trailer1fleetno\r\n",
							"    ,v1.uid as lms_vehicle_trailer1uid\r\n",
							"    ,v2.id as lms_vehicle_trailer2id\r\n",
							"    ,v2.fleetno as lms_vehicle_trailer2fleetno\r\n",
							"    ,v2.uid as lms_vehicle_trailer2uid\r\n",
							"    ,vb.id as md_vehiclebasic_id\r\n",
							"    ,vb.uid as md_vehiclebasic_uid\r\n",
							"    ,vb.vehicletype as md_vehiclebasic_vehicletype\r\n",
							"    ,vb.internalexternal as md_vehiclebasic_internalexternal\r\n",
							"    ,vb.activeflag as md_vehiclebasic_activeflag\r\n",
							"    ,vb.vehiclestatus as md_vehiclebasic_vehiclestatus\r\n",
							"    ,vb.chassisnumber as md_vehiclebasic_chassisnumber\r\n",
							"    ,vb.depot as md_vehiclebasic_depot\r\n",
							"    ,vb.enginenumber as md_vehiclebasic_enginenumber\r\n",
							"    ,vb.fleetcode as md_vehiclebasic_fleetcode\r\n",
							"    ,vb.fueltype as md_vehiclebasic_fueltype\r\n",
							"    ,vb.registrationnumber as md_vehiclebasic_registrationnumber\r\n",
							"    ,vb.vehicleapplication as md_vehiclebasic_vehicleapplication\r\n",
							"    ,vb.vehiclebodymake as md_vehiclebasic_vehiclebodymake\r\n",
							"    ,vb.vehiclecolour as md_vehiclebasic_vehiclecolour\r\n",
							"    ,vb.vehiclemake as md_vehiclebasic_vehiclemake\r\n",
							"    ,vb.vehiclemodel as md_vehiclebasic_vehiclemodel\r\n",
							"    ,vb.vehicleseries as md_vehiclebasic_vehicleseries\r\n",
							"    ,vb.year as md_vehiclebasic_year\r\n",
							"    ,vb.vehicleownerid as md_vehiclebasic_vehicleownerid\r\n",
							"    ,vb.vehicleowner as md_vehiclebasic_vehicleowner\r\n",
							"    ,vb.staffvehicleflag as md_vehiclebasic_staffvehicleflag\r\n",
							"    ,vb.vehicletrailersize as md_vehiclebasic_vehicletrailersize\r\n",
							"    ,vb.vehicletrailertype as md_vehiclebasic_vehicletrailertype\r\n",
							"    ,vb.vehicleetollclass as md_vehiclebasic_vehicleetollclass\r\n",
							"    ,vb.brn as md_vehiclebasic_brn\r\n",
							"    ,vb.brnnumber as md_vehiclebasic_brnnumber\r\n",
							"    ,vb.vehicleregisterno as md_vehiclebasic_vehicleregisterno\r\n",
							"    ,vb.insdate as md_vehiclebasic_insdate\r\n",
							"    ,vb.insby as md_vehiclebasic_insby\r\n",
							"    ,vb.islinehaulvehicle as md_vehiclebasic_islinehaulvehicle\r\n",
							"    ,vb.internalheight as md_vehiclebasic_internalheight\r\n",
							"    ,vb.internallength as md_vehiclebasic_internallength\r\n",
							"    ,vb.internalvolume as md_vehiclebasic_internalvolume\r\n",
							"    ,vb.internalwidth as md_vehiclebasic_internalwidth\r\n",
							"    ,vb.moddate as md_vehiclebasic_moddate\r\n",
							"    ,vb.trailerflag as md_vehiclebasic_trailerflag\r\n",
							"    ,vb.workflowstatus as md_vehiclebasic_workflowstatus\r\n",
							"    ,vb.approveddate as md_vehiclebasic_approveddate\r\n",
							"    ,vb1.id as md_vehiclebasic_trailer1id\r\n",
							"    ,vb1.uid as md_vehiclebasic_trailer1uid\r\n",
							"    ,vb1.vehicletype as md_vehiclebasic_trailer1vehicletype\r\n",
							"    ,vb1.internalexternal as md_vehiclebasic_trailer1internalexternal\r\n",
							"    ,vb1.activeflag as md_vehiclebasic_trailer1activeflag\r\n",
							"    ,vb1.vehiclestatus as md_vehiclebasic_trailer1vehiclestatus\r\n",
							"    ,vb1.chassisnumber as md_vehiclebasic_trailer1chassisnumber\r\n",
							"    ,vb1.depot as md_vehiclebasic_trailer1depot\r\n",
							"    ,vb1.enginenumber as md_vehiclebasic_trailer1enginenumber\r\n",
							"    ,vb1.fleetcode as md_vehiclebasic_trailer1fleetcode\r\n",
							"    ,vb1.fueltype as md_vehiclebasic_trailer1fueltype\r\n",
							"    ,vb1.registrationnumber as md_vehiclebasic_trailer1registrationnumber\r\n",
							"    ,vb1.vehicleapplication as md_vehiclebasic_trailer1vehicleapplication\r\n",
							"    ,vb1.vehiclebodymake as md_vehiclebasic_trailer1vehiclebodymake\r\n",
							"    ,vb1.vehiclecolour as md_vehiclebasic_trailer1vehiclecolour\r\n",
							"    ,vb1.vehiclemake as md_vehiclebasic_trailer1vehiclemake\r\n",
							"    ,vb1.vehiclemodel as md_vehiclebasic_trailer1vehiclemodel\r\n",
							"    ,vb1.vehicleseries as md_vehiclebasic_trailer1vehicleseries\r\n",
							"    ,vb1.year as md_vehiclebasic_trailer1year\r\n",
							"    ,vb1.vehicleownerid as md_vehiclebasic_trailer1vehicleownerid\r\n",
							"    ,vb1.vehicleowner as md_vehiclebasic_trailer1vehicleowner\r\n",
							"    ,vb1.staffvehicleflag as md_vehiclebasic_trailer1staffvehicleflag\r\n",
							"    ,vb1.vehicletrailersize as md_vehiclebasic_trailer1vehicletrailersize\r\n",
							"    ,vb1.vehicletrailertype as md_vehiclebasic_trailer1vehicletrailertype\r\n",
							"    ,vb1.vehicleetollclass as md_vehiclebasic_trailer1vehicleetollclass\r\n",
							"    ,vb1.brn as md_vehiclebasic_trailer1brn\r\n",
							"    ,vb1.brnnumber as md_vehiclebasic_trailer1brnnumber\r\n",
							"    ,vb1.vehicleregisterno as md_vehiclebasic_trailer1vehicleregisterno\r\n",
							"    ,vb1.insdate as md_vehiclebasic_trailer1insdate\r\n",
							"    ,vb1.insby as md_vehiclebasic_trailer1insby\r\n",
							"    ,vb1.islinehaulvehicle as md_vehiclebasic_trailer1islinehaulvehicle\r\n",
							"    ,vb1.internalheight as md_vehiclebasic_trailer1internalheight\r\n",
							"    ,vb1.internallength as md_vehiclebasic_trailer1internallength\r\n",
							"    ,vb1.internalvolume as md_vehiclebasic_trailer1internalvolume\r\n",
							"    ,vb1.internalwidth as md_vehiclebasic_trailer1internalwidth\r\n",
							"    ,vb1.moddate as md_vehiclebasic_trailer1moddate\r\n",
							"    ,vb1.trailerflag as md_vehiclebasic_trailer1trailerflag\r\n",
							"    ,vb1.workflowstatus as md_vehiclebasic_trailer1workflowstatus\r\n",
							"    ,vb1.approveddate as md_vehiclebasic_trailer1approveddate\r\n",
							"    ,vb2.id as md_vehiclebasic_trailer2id\r\n",
							"    ,vb2.uid as md_vehiclebasic_trailer2uid\r\n",
							"    ,vb2.vehicletype as md_vehiclebasic_trailer2vehicletype\r\n",
							"    ,vb2.internalexternal as md_vehiclebasic_trailer2internalexternal\r\n",
							"    ,vb2.activeflag as md_vehiclebasic_trailer2activeflag\r\n",
							"    ,vb2.vehiclestatus as md_vehiclebasic_trailer2vehiclestatus\r\n",
							"    ,vb2.chassisnumber as md_vehiclebasic_trailer2chassisnumber\r\n",
							"    ,vb2.depot as md_vehiclebasic_trailer2depot\r\n",
							"    ,vb2.enginenumber as md_vehiclebasic_trailer2enginenumber\r\n",
							"    ,vb2.fleetcode as md_vehiclebasic_trailer2fleetcode\r\n",
							"    ,vb2.fueltype as md_vehiclebasic_trailer2fueltype\r\n",
							"    ,vb2.registrationnumber as md_vehiclebasic_trailer2registrationnumber\r\n",
							"    ,vb2.vehicleapplication as md_vehiclebasic_trailer2vehicleapplication\r\n",
							"    ,vb2.vehiclebodymake as md_vehiclebasic_trailer2vehiclebodymake\r\n",
							"    ,vb2.vehiclecolour as md_vehiclebasic_trailer2vehiclecolour\r\n",
							"    ,vb2.vehiclemake as md_vehiclebasic_trailer2vehiclemake\r\n",
							"    ,vb2.vehiclemodel as md_vehiclebasic_trailer2vehiclemodel\r\n",
							"    ,vb2.vehicleseries as md_vehiclebasic_trailer2vehicleseries\r\n",
							"    ,vb2.year as md_vehiclebasic_trailer2year\r\n",
							"    ,vb2.vehicleownerid as md_vehiclebasic_trailer2vehicleownerid\r\n",
							"    ,vb2.vehicleowner as md_vehiclebasic_trailer2vehicleowner\r\n",
							"    ,vb2.staffvehicleflag as md_vehiclebasic_trailer2staffvehicleflag\r\n",
							"    ,vb2.vehicletrailersize as md_vehiclebasic_trailer2vehicletrailersize\r\n",
							"    ,vb2.vehicletrailertype as md_vehiclebasic_trailer2vehicletrailertype\r\n",
							"    ,vb2.vehicleetollclass as md_vehiclebasic_trailer2vehicleetollclass\r\n",
							"    ,vb2.brn as md_vehiclebasic_trailer2brn\r\n",
							"    ,vb2.brnnumber as md_vehiclebasic_trailer2brnnumber\r\n",
							"    ,vb2.vehicleregisterno as md_vehiclebasic_trailer2vehicleregisterno\r\n",
							"    ,vb2.insdate as md_vehiclebasic_trailer2insdate\r\n",
							"    ,vb2.insby as md_vehiclebasic_trailer2insby\r\n",
							"    ,vb2.islinehaulvehicle as md_vehiclebasic_trailer2islinehaulvehicle\r\n",
							"    ,vb2.internalheight as md_vehiclebasic_trailer2internalheight\r\n",
							"    ,vb2.internallength as md_vehiclebasic_trailer2internallength\r\n",
							"    ,vb2.internalvolume as md_vehiclebasic_trailer2internalvolume\r\n",
							"    ,vb2.internalwidth as md_vehiclebasic_trailer2internalwidth\r\n",
							"    ,vb2.moddate as md_vehiclebasic_trailer2moddate\r\n",
							"    ,vb2.trailerflag as md_vehiclebasic_trailer2trailerflag\r\n",
							"    ,vb2.workflowstatus as md_vehiclebasic_trailer2workflowstatus\r\n",
							"    ,vb2.approveddate as md_vehiclebasic_trailer2approveddate\r\n",
							"\r\n",
							"FROM dboloads l\r\n",
							"LEFT JOIN sstparcelbyload pbl on pbl.lms_parcelbyload_loadid = l.id\r\n",
							"LEFT JOIN dbosroute sr on sr.id = l.routeid\r\n",
							"LEFT JOIN dbodriver d on d.id = l.driverid\r\n",
							"LEFT JOIN dbovehicle v on v.id = l.vehicleid\r\n",
							"LEFT JOIN dbovehicle v1 on v1.id = l.trailer1\r\n",
							"LEFT JOIN dbovehicle v2 on v2.id = l.trailer2\r\n",
							"LEFT JOIN dbovehiclebasic vb on vb.uid = v.uid\r\n",
							"LEFT JOIN dbovehiclebasic vb1 on vb1.uid = v1.uid\r\n",
							"LEFT JOIN dbovehiclebasic vb2 on vb2.uid = v2.uid\r\n",
							"LEFT JOIN dbousers u on u.id = l.userid\r\n",
							"LEFT JOIN dbousers u2 on u2.id = l.reopeneduserid\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstloadchild = spark.sql(\"SELECT * FROM sstloadchild\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#sstloadchild.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadchild.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTLoadParent')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "884e4d99-1d8b-438e-a4c0-0adf379ec31f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"##Create DataFrame for the dboloads LMS Table\r\n",
							"#dboloads = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboloads.parquet', format='parquet')\r\n",
							"#dboloads.createOrReplaceTempView(\"dboloads\")\r\n",
							"#\r\n",
							"##Create DataFrame for the sstloadchild LMS Table\r\n",
							"#sstloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadchild.parquet', format='parquet')\r\n",
							"#sstloadchild.createOrReplaceTempView(\"sstloadchild\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbovehicle LMS Table\r\n",
							"#dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"#dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicdispatch ORV Table\r\n",
							"#publicdispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
							"#publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicvehicle ORV Table\r\n",
							"#publicvehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicvehicle.parquet', format='parquet')\r\n",
							"#publicvehicle.createOrReplaceTempView(\"publicvehicle\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicorvuser ORV Table\r\n",
							"#publicorvuser = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicorvuser.parquet', format='parquet')\r\n",
							"#publicorvuser.createOrReplaceTempView(\"publicorvuser\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbovehiclebasic LMS Table\r\n",
							"#dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"#dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstloadparent_tmp\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lc.lms_loads_parentloadid as lms_loadchild_parentloadid\r\n",
							"    ,sum(lc.lms_parcelbyload_aggweight) as lms_loadchild_aggweight\r\n",
							"    ,sum(lc.lms_parcelbyload_aggchargeweight) as lms_loadchild_aggchargeweight\r\n",
							"    ,sum(lc.lms_parcelbyload_aggvolweight) as lms_loadchild_aggvolweight\r\n",
							"    ,sum(lc.lms_parcelbyload_aggvolumiserweight) as lms_loadchild_aggvolumiserweight\r\n",
							"    ,sum(lc.lms_parcelbyload_noparcels) as lms_loadchild_noparcels\r\n",
							"FROM sstloadchild lc \r\n",
							"WHERE lc.lms_loads_parentloadid is not null\r\n",
							"GROUP BY lc.lms_loads_parentloadid\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstloadparent_tmp = spark.sql(\"SELECT * FROM sstloadparent_tmp\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstloadparent\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    t.lms_loadchild_parentloadid as  lms_loadparent_parentloadid \r\n",
							"    ,t.lms_loadchild_aggweight  as  lms_loadparent_aggweight \r\n",
							"    ,t.lms_loadchild_aggchargeweight  as  lms_loadparent_aggchargeweight\r\n",
							"    ,t.lms_loadchild_aggvolweight  as  lms_loadparent_aggvolweight\r\n",
							"    ,t.lms_loadchild_aggvolumiserweight  as  lms_loadparent_aggvolumiserweight\r\n",
							"    ,t.lms_loadchild_noparcels  as  lms_loadparent_noparcels\r\n",
							"    ,d.id as orv_dispatch_id\r\n",
							"    ,d.lmsid as orv_dispatch_lmsid\r\n",
							"    ,d.vid as orv_dispatch_vid\r\n",
							"    ,d.did as orv_dispatch_did\r\n",
							"    ,d.status as orv_dispatch_status\r\n",
							"    ,to_timestamp(d.startdate) as orv_dispatch_startdate\r\n",
							"    ,to_timestamp(d.stopdate) as orv_dispatch_stopdate\r\n",
							"    ,d.vehicletype as orv_dispatch_vehicletype\r\n",
							"    ,d.uid as orv_dispatch_uid\r\n",
							"    ,to_timestamp(d.estdepdate) as orv_dispatch_estdepdate\r\n",
							"    ,d.trailer as orv_dispatch_trailer\r\n",
							"    ,d.trailer2 as orv_dispatch_trailer2\r\n",
							"    ,d.fromlocid as orv_dispatch_fromlocid\r\n",
							"    ,d.tolocid as orv_dispatch_tolocid\r\n",
							"    ,d.site as orv_dispatch_site\r\n",
							"    ,to_timestamp(d.lastupdate) as orv_dispatch_lastupdate\r\n",
							"    ,d.etastatus as orv_dispatch_etastatus\r\n",
							"    ,d.startinglat as orv_dispatch_startinglat\r\n",
							"    ,d.startinglng as orv_dispatch_startinglng\r\n",
							"    ,d.endinglat as orv_dispatch_endinglat\r\n",
							"    ,d.endinglng as orv_dispatch_endinglng\r\n",
							"    ,d.startingfrom as orv_dispatch_startingfrom\r\n",
							"    ,d.goingto as orv_dispatch_goingto\r\n",
							"    ,d.importissue as orv_dispatch_importissue\r\n",
							"    ,to_timestamp(d.insdate) as orv_dispatch_insdate\r\n",
							"    ,to_timestamp(d.estarrdate) as orv_dispatch_estarrdate\r\n",
							"    ,d.duration as orv_dispatch_duration\r\n",
							"    ,d.distance as orv_dispatch_distance\r\n",
							"    ,d.cost as orv_dispatch_cost\r\n",
							"    ,d.stoplat as orv_dispatch_stoplat\r\n",
							"    ,d.stoplng as orv_dispatch_stoplng\r\n",
							"    ,d.stopreason as orv_dispatch_stopreason\r\n",
							"    ,d.startodo as orv_dispatch_startodo\r\n",
							"    ,d.stopodo as orv_dispatch_stopodo\r\n",
							"    ,d.expduration as orv_dispatch_expduration\r\n",
							"    ,d.expdistance as orv_dispatch_expdistance\r\n",
							"    ,d.expcost as orv_dispatch_expcost\r\n",
							"    ,d.collectionid as orv_dispatch_collectionid\r\n",
							"    ,d.crew as orv_dispatch_crew\r\n",
							"    ,d.crewnames as orv_dispatch_crewnames\r\n",
							"    ,d.bocloseuid as orv_dispatch_bocloseuid\r\n",
							"    ,d.routing as orv_dispatch_routing\r\n",
							"    ,d.swapct as orv_dispatch_swapct\r\n",
							"    ,d.debriefed as orv_dispatch_debriefed\r\n",
							"    ,d.debriefnotes as orv_dispatch_debriefnotes\r\n",
							"    ,d.bopin as orv_dispatch_bopin\r\n",
							"    ,d.cpicost as orv_dispatch_cpicost\r\n",
							"    ,d.labourcost as orv_dispatch_labourcost\r\n",
							"    ,d.maintcost as orv_dispatch_maintcost\r\n",
							"    ,d.inscost as orv_dispatch_inscost\r\n",
							"    ,d.tollcost as orv_dispatch_tollcost\r\n",
							"    ,d.fuelcost as orv_dispatch_fuelcost\r\n",
							"    ,d.internal as orv_dispatch_internal\r\n",
							"    ,d.childids as orv_dispatch_childids\r\n",
							"    ,d.guid as orv_dispatch_guid\r\n",
							"    ,d.timedefinite as orv_dispatch_timedefinite\r\n",
							"    ,d.orvcode as orv_dispatch_orvcode\r\n",
							"    ,to_timestamp(d.tsstopdepoenter) as orv_dispatch_tsstopdepoenter\r\n",
							"    ,to_timestamp(d.tsstartdepoexit) as orv_dispatch_tsstartdepoexit\r\n",
							"    ,d.reroutect as orv_dispatch_reroutect\r\n",
							"    ,to_timestamp(d.actualarrdate) as orv_dispatch_actualarrdate\r\n",
							"    ,d.physicalstartlat as orv_dispatch_physicalstartlat\r\n",
							"    ,d.physicalstartlng as orv_dispatch_physicalstartlng\r\n",
							"    ,to_timestamp(d.tsstartdepoexitapp) as orv_dispatch_tsstartdepoexitapp\r\n",
							"    ,to_timestamp(d.tsstopdepoenterapp) as orv_dispatch_tsstopdepoenterapp\r\n",
							"    ,to_timestamp(d.uncanceldate) as orv_dispatch_uncanceldate\r\n",
							"    ,d.uncancelusername as orv_dispatch_uncancelusername\r\n",
							"    ,d.lmsdebrifed as orv_dispatch_lmsdebrifed\r\n",
							"    ,d.reviseddebrief as orv_dispatch_reviseddebrief\r\n",
							"    ,d.lhtransporter as orv_dispatch_lhtransporter\r\n",
							"    ,d.triptype as orv_dispatch_triptype\r\n",
							"    ,d.startreason as orv_dispatch_startreason\r\n",
							"    ,d.route as orv_dispatch_route\r\n",
							"    ,d.tmstraileridentify as orv_dispatch_tmstraileridentify\r\n",
							"    ,d.tmstrailer2identify as orv_dispatch_tmstrailer2identify\r\n",
							"    ,d.tmscontroller as orv_dispatch_tmscontroller\r\n",
							"    ,d.routekey as orv_dispatch_routekey\r\n",
							"    ,d.courierid as orv_dispatch_courierid\r\n",
							"    ,to_timestamp(d.originalstartdate) as orv_dispatch_originalstartdate\r\n",
							"    ,to_timestamp(d.originalextarrival) as orv_dispatch_originalextarrival\r\n",
							"    ,d.recomputeoriginals as orv_dispatch_recomputeoriginals\r\n",
							"    ,d.originalextdistance as orv_dispatch_originalextdistance\r\n",
							"    ,d.originalextduration as orv_dispatch_originalextduration\r\n",
							"    ,to_timestamp(d.moddate) as orv_dispatch_moddate\r\n",
							"    ,d.tmsmode as orv_dispatch_tmsmode\r\n",
							"    ,d.driversignature as orv_dispatch_driversignature\r\n",
							"    ,v.id as orv_vehicle_id\r\n",
							"    ,v.fleetcode as orv_vehicle_fleetcode\r\n",
							"    ,v.lmsid as orv_vehicle_lmsid\r\n",
							"    ,v1.id as orv_vehicle_trailer1id\r\n",
							"    ,v1.fleetcode as orv_vehicle_trailer1fleetcode\r\n",
							"    ,v1.lmsid as orv_vehicle_trailer1lmsid\r\n",
							"    ,v2.id as orv_vehicle_trailer2id\r\n",
							"    ,v2.fleetcode as orv_vehicle_trailer2fleetcode\r\n",
							"    ,v2.lmsid as orv_vehicle_trailer2lmsid\r\n",
							"    ,lv.id as lms_vehicle_id\r\n",
							"    ,lv.uid as lms_vehicle_uid\r\n",
							"    ,lv1.id as lms_vehicle_trailer1id\r\n",
							"    ,lv1.uid as lms_vehicle_trailer1uid\r\n",
							"    ,lv2.id as lms_vehicle_trailer2id\r\n",
							"    ,lv2.uid as lms_vehicle_trailer2uid\r\n",
							"    ,u.id as orv_orvuser_id\r\n",
							"    ,u.username as orv_orvuser_username\r\n",
							"    ,u.fname as orv_orvuser_fname\r\n",
							"    ,u.lname as orv_orvuser_lname\r\n",
							"    ,u.empcode as orv_orvuser_empcode\r\n",
							"    ,u.aka as orv_orvuser_aka\r\n",
							"    ,u.gender as orv_orvuser_gender\r\n",
							"    ,u.cellno as orv_orvuser_cellno\r\n",
							"    ,u.rsaid as orv_orvuser_rsaid\r\n",
							"    ,u.passportno as orv_orvuser_passportno\r\n",
							"    ,u.idpassportno as orv_orvuser_idpassportno\r\n",
							"    ,u.nationality as orv_orvuser_nationality\r\n",
							"    ,u.birthcountry as orv_orvuser_birthcountry\r\n",
							"    ,to_timestamp(u.engageddate) as orv_orvuser_engageddate\r\n",
							"    ,to_timestamp(u.joineddate) as orv_orvuser_joineddate\r\n",
							"    ,to_timestamp(u.termindate) as orv_orvuser_termindate\r\n",
							"    ,u.status as orv_orvuser_status\r\n",
							"    ,u.depot as orv_orvuser_depot\r\n",
							"    ,u.jobcategory as orv_orvuser_jobcategory\r\n",
							"    ,u.jobtitle as orv_orvuser_jobtitle\r\n",
							"    ,u.payroll as orv_orvuser_payroll\r\n",
							"    ,u.annualsalary as orv_orvuser_annualsalary\r\n",
							"    ,to_timestamp(u.insdate) as orv_orvuser_insdate\r\n",
							"    ,u.lmsid as orv_orvuser_lmsid\r\n",
							"    ,u.vipid as orv_orvuser_vipid\r\n",
							"    ,u.dadriver as orv_orvuser_dadriver\r\n",
							"    ,u.dasupervisor as orv_orvuser_dasupervisor\r\n",
							"    ,u.davanassistant as orv_orvuser_davanassistant\r\n",
							"    ,u.crewlmsid as orv_orvuser_crewlmsid\r\n",
							"    ,u.courierid as orv_orvuser_courierid\r\n",
							"    ,vb.id as md_vehiclebasic_id\r\n",
							"    ,vb.uid as md_vehiclebasic_uid\r\n",
							"    ,vb.vehicletype as md_vehiclebasic_vehicletype\r\n",
							"    ,vb.internalexternal as md_vehiclebasic_internalexternal\r\n",
							"    ,vb.activeflag as md_vehiclebasic_activeflag\r\n",
							"    ,vb.vehiclestatus as md_vehiclebasic_vehiclestatus\r\n",
							"    ,vb.chassisnumber as md_vehiclebasic_chassisnumber\r\n",
							"    ,vb.depot as md_vehiclebasic_depot\r\n",
							"    ,vb.enginenumber as md_vehiclebasic_enginenumber\r\n",
							"    ,vb.fleetcode as md_vehiclebasic_fleetcode\r\n",
							"    ,vb.fueltype as md_vehiclebasic_fueltype\r\n",
							"    ,vb.registrationnumber as md_vehiclebasic_registrationnumber\r\n",
							"    ,vb.vehicleapplication as md_vehiclebasic_vehicleapplication\r\n",
							"    ,vb.vehiclebodymake as md_vehiclebasic_vehiclebodymake\r\n",
							"    ,vb.vehiclecolour as md_vehiclebasic_vehiclecolour\r\n",
							"    ,vb.vehiclemake as md_vehiclebasic_vehiclemake\r\n",
							"    ,vb.vehiclemodel as md_vehiclebasic_vehiclemodel\r\n",
							"    ,vb.vehicleseries as md_vehiclebasic_vehicleseries\r\n",
							"    ,vb.year as md_vehiclebasic_year\r\n",
							"    ,vb.vehicleownerid as md_vehiclebasic_vehicleownerid\r\n",
							"    ,vb.vehicleowner as md_vehiclebasic_vehicleowner\r\n",
							"    ,vb.staffvehicleflag as md_vehiclebasic_staffvehicleflag\r\n",
							"    ,vb.vehicletrailersize as md_vehiclebasic_vehicletrailersize\r\n",
							"    ,vb.vehicletrailertype as md_vehiclebasic_vehicletrailertype\r\n",
							"    ,vb.vehicleetollclass as md_vehiclebasic_vehicleetollclass\r\n",
							"    ,vb.brn as md_vehiclebasic_brn\r\n",
							"    ,vb.brnnumber as md_vehiclebasic_brnnumber\r\n",
							"    ,vb.vehicleregisterno as md_vehiclebasic_vehicleregisterno\r\n",
							"    ,to_timestamp(vb.insdate) as md_vehiclebasic_insdate\r\n",
							"    ,vb.insby as md_vehiclebasic_insby\r\n",
							"    ,vb.islinehaulvehicle as md_vehiclebasic_islinehaulvehicle\r\n",
							"    ,vb.internalheight as md_vehiclebasic_internalheight\r\n",
							"    ,vb.internallength as md_vehiclebasic_internallength\r\n",
							"    ,vb.internalvolume as md_vehiclebasic_internalvolume\r\n",
							"    ,vb.internalwidth as md_vehiclebasic_internalwidth\r\n",
							"    ,to_timestamp(vb.moddate) as md_vehiclebasic_moddate\r\n",
							"    ,vb.trailerflag as md_vehiclebasic_trailerflag\r\n",
							"    ,vb.workflowstatus as md_vehiclebasic_workflowstatus\r\n",
							"    ,to_timestamp(vb.approveddate) as md_vehiclebasic_approveddate\r\n",
							"    ,vb1.id as md_vehiclebasic_trailer1id\r\n",
							"    ,vb1.uid as md_vehiclebasic_trailer1uid\r\n",
							"    ,vb1.vehicletype as md_vehiclebasic_trailer1vehicletype\r\n",
							"    ,vb1.internalexternal as md_vehiclebasic_trailer1internalexternal\r\n",
							"    ,vb1.activeflag as md_vehiclebasic_trailer1activeflag\r\n",
							"    ,vb1.vehiclestatus as md_vehiclebasic_trailer1vehiclestatus\r\n",
							"    ,vb1.chassisnumber as md_vehiclebasic_trailer1chassisnumber\r\n",
							"    ,vb1.depot as md_vehiclebasic_trailer1depot\r\n",
							"    ,vb1.enginenumber as md_vehiclebasic_trailer1enginenumber\r\n",
							"    ,vb1.fleetcode as md_vehiclebasic_trailer1fleetcode\r\n",
							"    ,vb1.fueltype as md_vehiclebasic_trailer1fueltype\r\n",
							"    ,vb1.registrationnumber as md_vehiclebasic_trailer1registrationnumber\r\n",
							"    ,vb1.vehicleapplication as md_vehiclebasic_trailer1vehicleapplication\r\n",
							"    ,vb1.vehiclebodymake as md_vehiclebasic_trailer1vehiclebodymake\r\n",
							"    ,vb1.vehiclecolour as md_vehiclebasic_trailer1vehiclecolour\r\n",
							"    ,vb1.vehiclemake as md_vehiclebasic_trailer1vehiclemake\r\n",
							"    ,vb1.vehiclemodel as md_vehiclebasic_trailer1vehiclemodel\r\n",
							"    ,vb1.vehicleseries as md_vehiclebasic_trailer1vehicleseries\r\n",
							"    ,vb1.year as md_vehiclebasic_trailer1year\r\n",
							"    ,vb1.vehicleownerid as md_vehiclebasic_trailer1vehicleownerid\r\n",
							"    ,vb1.vehicleowner as md_vehiclebasic_trailer1vehicleowner\r\n",
							"    ,vb1.staffvehicleflag as md_vehiclebasic_trailer1staffvehicleflag\r\n",
							"    ,vb1.vehicletrailersize as md_vehiclebasic_trailer1vehicletrailersize\r\n",
							"    ,vb1.vehicletrailertype as md_vehiclebasic_trailer1vehicletrailertype\r\n",
							"    ,vb1.vehicleetollclass as md_vehiclebasic_trailer1vehicleetollclass\r\n",
							"    ,vb1.brn as md_vehiclebasic_trailer1brn\r\n",
							"    ,vb1.brnnumber as md_vehiclebasic_trailer1brnnumber\r\n",
							"    ,vb1.vehicleregisterno as md_vehiclebasic_trailer1vehicleregisterno\r\n",
							"    ,to_timestamp(vb1.insdate) as md_vehiclebasic_trailer1insdate\r\n",
							"    ,vb1.insby as md_vehiclebasic_trailer1insby\r\n",
							"    ,vb1.islinehaulvehicle as md_vehiclebasic_trailer1islinehaulvehicle\r\n",
							"    ,vb1.internalheight as md_vehiclebasic_trailer1internalheight\r\n",
							"    ,vb1.internallength as md_vehiclebasic_trailer1internallength\r\n",
							"    ,vb1.internalvolume as md_vehiclebasic_trailer1internalvolume\r\n",
							"    ,vb1.internalwidth as md_vehiclebasic_trailer1internalwidth\r\n",
							"    ,to_timestamp(vb1.moddate) as md_vehiclebasic_trailer1moddate\r\n",
							"    ,vb1.trailerflag as md_vehiclebasic_trailer1trailerflag\r\n",
							"    ,vb1.workflowstatus as md_vehiclebasic_trailer1workflowstatus\r\n",
							"    ,to_timestamp(vb1.approveddate) as md_vehiclebasic_trailer1approveddate\r\n",
							"    ,vb2.id as md_vehiclebasic_trailer2id\r\n",
							"    ,vb2.uid as md_vehiclebasic_trailer2uid\r\n",
							"    ,vb2.vehicletype as md_vehiclebasic_trailer2vehicletype\r\n",
							"    ,vb2.internalexternal as md_vehiclebasic_trailer2internalexternal\r\n",
							"    ,vb2.activeflag as md_vehiclebasic_trailer2activeflag\r\n",
							"    ,vb2.vehiclestatus as md_vehiclebasic_trailer2vehiclestatus\r\n",
							"    ,vb2.chassisnumber as md_vehiclebasic_trailer2chassisnumber\r\n",
							"    ,vb2.depot as md_vehiclebasic_trailer2depot\r\n",
							"    ,vb2.enginenumber as md_vehiclebasic_trailer2enginenumber\r\n",
							"    ,vb2.fleetcode as md_vehiclebasic_trailer2fleetcode\r\n",
							"    ,vb2.fueltype as md_vehiclebasic_trailer2fueltype\r\n",
							"    ,vb2.registrationnumber as md_vehiclebasic_trailer2registrationnumber\r\n",
							"    ,vb2.vehicleapplication as md_vehiclebasic_trailer2vehicleapplication\r\n",
							"    ,vb2.vehiclebodymake as md_vehiclebasic_trailer2vehiclebodymake\r\n",
							"    ,vb2.vehiclecolour as md_vehiclebasic_trailer2vehiclecolour\r\n",
							"    ,vb2.vehiclemake as md_vehiclebasic_trailer2vehiclemake\r\n",
							"    ,vb2.vehiclemodel as md_vehiclebasic_trailer2vehiclemodel\r\n",
							"    ,vb2.vehicleseries as md_vehiclebasic_trailer2vehicleseries\r\n",
							"    ,vb2.year as md_vehiclebasic_trailer2year\r\n",
							"    ,vb2.vehicleownerid as md_vehiclebasic_trailer2vehicleownerid\r\n",
							"    ,vb2.vehicleowner as md_vehiclebasic_trailer2vehicleowner\r\n",
							"    ,vb2.staffvehicleflag as md_vehiclebasic_trailer2staffvehicleflag\r\n",
							"    ,vb2.vehicletrailersize as md_vehiclebasic_trailer2vehicletrailersize\r\n",
							"    ,vb2.vehicletrailertype as md_vehiclebasic_trailer2vehicletrailertype\r\n",
							"    ,vb2.vehicleetollclass as md_vehiclebasic_trailer2vehicleetollclass\r\n",
							"    ,vb2.brn as md_vehiclebasic_trailer2brn\r\n",
							"    ,vb2.brnnumber as md_vehiclebasic_trailer2brnnumber\r\n",
							"    ,vb2.vehicleregisterno as md_vehiclebasic_trailer2vehicleregisterno\r\n",
							"    ,to_timestamp(vb2.insdate) as md_vehiclebasic_trailer2insdate\r\n",
							"    ,vb2.insby as md_vehiclebasic_trailer2insby\r\n",
							"    ,vb2.islinehaulvehicle as md_vehiclebasic_trailer2islinehaulvehicle\r\n",
							"    ,vb2.internalheight as md_vehiclebasic_trailer2internalheight\r\n",
							"    ,vb2.internallength as md_vehiclebasic_trailer2internallength\r\n",
							"    ,vb2.internalvolume as md_vehiclebasic_trailer2internalvolume\r\n",
							"    ,vb2.internalwidth as md_vehiclebasic_trailer2internalwidth\r\n",
							"    ,to_timestamp(vb2.moddate) as md_vehiclebasic_trailer2moddate\r\n",
							"    ,vb2.trailerflag as md_vehiclebasic_trailer2trailerflag\r\n",
							"    ,vb2.workflowstatus as md_vehiclebasic_trailer2workflowstatus\r\n",
							"    ,to_timestamp(vb2.approveddate) as md_vehiclebasic_trailer2approveddate\r\n",
							"    \r\n",
							"FROM sstloadparent_tmp t\r\n",
							"LEFT JOIN publicdispatch d on d.lmsid = t.lms_loadchild_parentloadid and d.vehicletype = 6\r\n",
							"LEFT JOIN publicvehicle v on v.id = d.vid\r\n",
							"LEFT JOIN publicvehicle v1 on v1.id = d.trailer\r\n",
							"LEFT JOIN publicvehicle v2 on v2.id = d.trailer2\r\n",
							"LEFT JOIN dbovehicle lv on lv.id = v.lmsid \r\n",
							"LEFT JOIN dbovehicle lv1 on lv1.id = v1.lmsid \r\n",
							"LEFT JOIN dbovehicle lv2 on lv2.id = v2.lmsid \r\n",
							"LEFT JOIN publicorvuser u on u.id = d.did\r\n",
							"LEFT JOIN dbovehiclebasic vb on vb.uid = lv.uid\r\n",
							"LEFT JOIN dbovehiclebasic vb1 on vb1.uid = lv1.uid\r\n",
							"LEFT JOIN dbovehiclebasic vb2 on vb2.uid = lv2.uid\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstloadparent = spark.sql(\"SELECT * FROM sstloadparent\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstloadparent.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadparent.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 7
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTOrder')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4a90e86c-bc23-4280-8ae1-6882a2aa7c25"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##Create DataFrame for the dboorder LMS Table\r\n",
							"#dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"#dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbocustomer LMS Table\r\n",
							"#dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"#dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbousers LMS Table\r\n",
							"#dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"#dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"#\r\n",
							"##Create DataFrame for the sstparcelbyorder LMS Table\r\n",
							"#sstparcelbyorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyorder.parquet', format='parquet')\r\n",
							"#sstparcelbyorder.createOrReplaceTempView(\"sstparcelbyorder\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstorder \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     O.id as lms_order_id\r\n",
							"    ,O.idold as lms_order_idold\r\n",
							"    ,O.corderno as lms_order_corderno\r\n",
							"    ,O.custref as lms_order_custref\r\n",
							"    ,O.waybillid as lms_order_waybillid\r\n",
							"    ,O.pickupcustid as lms_order_pickupcustid\r\n",
							"    ,O.delivercustid as lms_order_delivercustid\r\n",
							"    ,O.billcustid as lms_order_billcustid\r\n",
							"    ,O.ovalue as lms_order_ovalue\r\n",
							"    ,O.hodate as lms_order_hodate\r\n",
							"    ,O.cservice as lms_order_cservice\r\n",
							"    ,O.courierid as lms_order_courierid\r\n",
							"    ,O.custservice as lms_order_custservice\r\n",
							"    ,O.userid as lms_order_userid\r\n",
							"    ,O.pcode as lms_order_pcode\r\n",
							"    ,O.appointment as lms_order_appointment\r\n",
							"    ,O.deliverby as lms_order_deliverby\r\n",
							"    ,O.dconfirmed as lms_order_dconfirmed\r\n",
							"    ,O.dcomment as lms_order_dcomment\r\n",
							"    ,O.drefno as lms_order_drefno\r\n",
							"    ,O.duserid as lms_order_duserid\r\n",
							"    ,O.nopods as lms_order_nopods\r\n",
							"    ,O.duedate as lms_order_duedate\r\n",
							"    ,O.batchno as lms_order_batchno\r\n",
							"    ,O.units as lms_order_units\r\n",
							"    ,O.airfreightflag as lms_order_airfreightflag\r\n",
							"    ,O.custref3 as lms_order_custref3\r\n",
							"    ,O.specdel as lms_order_specdel\r\n",
							"    ,O.flunits as lms_order_flunits\r\n",
							"    ,O.flkgs as lms_order_flkgs\r\n",
							"    ,O.inservice as lms_order_inservice\r\n",
							"    ,O.custdocs as lms_order_custdocs\r\n",
							"    ,O.scanned as lms_order_scanned\r\n",
							"    ,O.scanimagename1 as lms_order_scanimagename1\r\n",
							"    ,O.scanimagename as lms_order_scanimagename\r\n",
							"    ,O.changereasonid as lms_order_changereasonid\r\n",
							"    ,O.bill_servicetype as lms_order_bill_servicetype\r\n",
							"    ,O.bill_vehicletype as lms_order_bill_vehicletype\r\n",
							"    ,O.quote as lms_order_quote\r\n",
							"    ,O.consignlabel as lms_order_consignlabel\r\n",
							"    ,O.custref2 as lms_order_custref2\r\n",
							"    ,O.callprogid as lms_order_callprogid\r\n",
							"    ,O.callprogupddate as lms_order_callprogupddate\r\n",
							"    ,O.submitedi as lms_order_submitedi\r\n",
							"    ,O.lastupdate as lms_order_lastupdate\r\n",
							"    ,O.quoteflag as lms_order_quoteflag\r\n",
							"    ,O.bill_minrate as lms_order_bill_minrate\r\n",
							"    ,O.bill_addrate as lms_order_bill_addrate\r\n",
							"    ,O.bill_minkg as lms_order_bill_minkg\r\n",
							"    ,O.notes as lms_order_notes\r\n",
							"    ,O.quoteweight as lms_order_quoteweight\r\n",
							"    ,O.orderconsolidationid as lms_order_orderconsolidationid\r\n",
							"    ,O.quotefuellevy as lms_order_quotefuellevy\r\n",
							"    ,O.quoteothersurcharges as lms_order_quoteothersurcharges\r\n",
							"    ,O.quotedocfees as lms_order_quotedocfees\r\n",
							"    ,BC.id as lms_bcustomer_id\r\n",
							"    ,BC.name as lms_bcustomer_name\r\n",
							"    ,PC.id as lms_pcustomer_id\r\n",
							"    ,PC.name as lms_pcustomer_name\r\n",
							"    ,DC.id as lms_dcustomer_id\r\n",
							"    ,DC.name as lms_dcustomer_name\r\n",
							"    ,U.id as lms_users_id\r\n",
							"    ,U.fullname as lms_users_fullname\r\n",
							"    ,U.site as lms_users_site\r\n",
							"    ,lms_parcelbyorder_orderid as lms_parcelbyorder_orderid\r\n",
							"    ,lms_parcelbyorder_aggweight as lms_parcelbyorder_aggweight\r\n",
							"    ,lms_parcelbyorder_aggchargeweight as lms_parcelbyorder_aggchargeweight\r\n",
							"    ,lms_parcelbyorder_aggvolweight as lms_parcelbyorder_aggvolweight\r\n",
							"    ,lms_parcelbyorder_aggvolumiserweight as lms_parcelbyorder_aggvolumiserweight\r\n",
							"    ,lms_parcelbyorder_noparcels as lms_parcelbyorder_noparcels\r\n",
							"FROM dboorder O\r\n",
							"LEFT JOIN dbocustomer BC ON BC.id = O.billcustid\r\n",
							"LEFT JOIN dbocustomer PC ON PC.id = O.pickupcustid\r\n",
							"LEFT JOIN dbocustomer DC ON DC.id = O.delivercustid\r\n",
							"LEFT JOIN dbousers U ON U.id = O.userid\r\n",
							"LEFT JOIN sstparcelbyorder PBO ON PBO.lms_parcelbyorder_orderid  = O.id"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstorder = spark.sql(\"SELECT * FROM sstorder\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#sstorder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstorder.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTParcel')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 5,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "5",
						"spark.dynamicAllocation.maxExecutors": "5",
						"spark.autotune.trackingId": "2f85e3e3-e6e9-460c-b19e-674982e40aab"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##Create DataFrame for the dboparcel LMS Table\r\n",
							"#dboparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"#dboparcel.createOrReplaceTempView(\"dboparcel\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbowaybill LMS Table\r\n",
							"#dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"#dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dboorder LMS Table\r\n",
							"#dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"#dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dboconsignment LMS Table\r\n",
							"#dboconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"#dboconsignment.createOrReplaceTempView(\"dboconsignment\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dboparceldetail LMS Table\r\n",
							"#dboparceldetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparceldetail.parquet', format='parquet')\r\n",
							"#dboparceldetail.createOrReplaceTempView(\"dboparceldetail\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbocustomer LMS Table\r\n",
							"#dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"#dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbousers LMS Table\r\n",
							"#dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"#dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbobill_parceltype LMS Table\r\n",
							"#dbobill_parceltype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_parceltype.parquet', format='parquet')\r\n",
							"#dbobill_parceltype.createOrReplaceTempView(\"dbobill_parceltype\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbolocation LMS Table\r\n",
							"#dbolocation= spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"#dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbodstatus LMS Table\r\n",
							"#dbodstatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodstatus.parquet', format='parquet')\r\n",
							"#dbodstatus.createOrReplaceTempView(\"dbodstatus\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbovolumiser LMS Table\r\n",
							"#dbovolumiser = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovolumiser.parquet', format='parquet')\r\n",
							"#dbovolumiser.createOrReplaceTempView(\"dbovolumiser\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbobill_parceltype LMS Table\r\n",
							"#dbobill_parceltype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_parceltype.parquet', format='parquet')\r\n",
							"#dbobill_parceltype.createOrReplaceTempView(\"dbobill_parceltype\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicparcel ORV Table\r\n",
							"#publicparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicparcel.parquet', format='parquet')\r\n",
							"#publicparcel.createOrReplaceTempView(\"publicparcel\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicdelivery ORV Table\r\n",
							"#publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"#publicdelivery.createOrReplaceTempView(\"publicdelivery\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sstparcel_tmp = spark.sql(\"\"\"\r\n",
							"SELECT\r\n",
							"    ORVP.id \r\n",
							"    ,ORVP.lmsid \r\n",
							"    ,ORVP.did \r\n",
							"    ,to_timestamp(ORVP.scandate) as scandate\r\n",
							"    ,ORVP.scanstatus \r\n",
							"    ,ORVP.scanmode \r\n",
							"    ,ORVP.claimid \r\n",
							"    ,ORVP.courierid\r\n",
							"    ,to_timestamp(ORVP.moddate) as moddate\r\n",
							"    ,D.waybillid\r\n",
							"FROM publicparcel ORVP \r\n",
							"LEFT JOIN publicdelivery D ON ORVP.did = D.id\r\n",
							"WHERE D.mode ='deliver' and D.skipreason != 'Fix wrong data manipulation by the company'\r\n",
							"\"\"\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcel_tmp.createOrReplaceTempView(\"sstparcel_tmp\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcel \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     P.id as lms_parcel_id\r\n",
							"    ,P.weight as lms_parcel_weight\r\n",
							"    ,P.waybillid as lms_parcel_waybillid\r\n",
							"    ,P.orderid as lms_parcel_orderid\r\n",
							"    ,P.acceptancedate as lms_parcel_acceptancedate\r\n",
							"    ,P.userid as lms_parcel_userid\r\n",
							"    ,P.barcode as lms_parcel_barcode\r\n",
							"    ,P.endorsement as lms_parcel_endorsement\r\n",
							"    ,P.volweight as lms_parcel_volweight\r\n",
							"    ,P.chargeweight as lms_parcel_chargeweight\r\n",
							"    ,P.ptype as lms_parcel_ptype\r\n",
							"    ,P.description as lms_parcel_description\r\n",
							"    ,P.locid as lms_parcel_locid\r\n",
							"    ,P.handoverdate as lms_parcel_handoverdate\r\n",
							"    ,P.seqno as lms_parcel_seqno\r\n",
							"    ,P.floorstatus as lms_parcel_floorstatus\r\n",
							"    ,P.consignid as lms_parcel_consignid\r\n",
							"    ,P.cref as lms_parcel_cref\r\n",
							"    ,P.claimid as lms_parcel_claimid\r\n",
							"    ,P.duedate as lms_parcel_duedate\r\n",
							"    ,P.coddate as lms_parcel_coddate\r\n",
							"    ,P.disflag as lms_parcel_disflag\r\n",
							"    ,P.astoreid as lms_parcel_astoreid\r\n",
							"    ,P.mrpflag as lms_parcel_mrpflag\r\n",
							"    ,P.nmrflag as lms_parcel_nmrflag\r\n",
							"    ,P.consignflag as lms_parcel_consignflag\r\n",
							"    ,P.cmanifest as lms_parcel_cmanifest\r\n",
							"    ,P.cbranchid as lms_parcel_cbranchid\r\n",
							"    ,P.claimref as lms_parcel_claimref\r\n",
							"    ,P.cost as lms_parcel_cost\r\n",
							"    ,P.creason as lms_parcel_creason\r\n",
							"    ,P.customerbarcode as lms_parcel_customerbarcode\r\n",
							"    ,P.dbshorts as lms_parcel_dbshorts\r\n",
							"    ,P.holddate as lms_parcel_holddate\r\n",
							"    ,P.aflag as lms_parcel_aflag\r\n",
							"    ,P.stationid as lms_parcel_stationid\r\n",
							"    ,P.dbshortsdesc as lms_parcel_dbshortsdesc\r\n",
							"    ,P.dstatusid as lms_parcel_dstatusid\r\n",
							"    ,P.dflag as lms_parcel_dflag\r\n",
							"    ,P.callprogid as lms_parcel_callprogid\r\n",
							"    ,P.callprogupddate as lms_parcel_callprogupddate\r\n",
							"    ,P.duplflag as lms_parcel_duplflag\r\n",
							"    ,P.lastupdate as lms_parcel_lastupdate\r\n",
							"    ,P.datevolumised as lms_parcel_datevolumised\r\n",
							"    ,P.volumiserweight as lms_parcel_volumiserweight\r\n",
							"    ,P.volumiserlength as lms_parcel_volumiserlength\r\n",
							"    ,P.volumiserheight as lms_parcel_volumiserheight\r\n",
							"    ,P.volumiserwidth as lms_parcel_volumiserwidth\r\n",
							"    ,P.volumiserid as lms_parcel_volumiserid\r\n",
							"    ,P.pl as lms_parcel_pl\r\n",
							"    ,P.ph as lms_parcel_ph\r\n",
							"    ,P.pw as lms_parcel_pw\r\n",
							"    ,P.totcharge as lms_parcel_totcharge\r\n",
							"    ,P.dontrecalc as lms_parcel_dontrecalc\r\n",
							"    ,P.containerid as lms_parcel_containerid\r\n",
							"    ,P.avgvolweight as lms_parcel_avgvolweight\r\n",
							"    ,WB.id as lms_waybill_id\r\n",
							"    ,WB.poddate as lms_waybill_poddate\r\n",
							"    ,WB.date as lms_waybill_date\r\n",
							"    ,O.id as lms_order_id\r\n",
							"    ,O.hodate as lms_order_hodate\r\n",
							"    ,O.corderno as lms_order_corderno\r\n",
							"    ,O.billcustid as lms_order_billcustid\r\n",
							"    ,O.pickupcustid as lms_order_pickupcustid\r\n",
							"    ,O.delivercustid as lms_order_delivercustid\r\n",
							"    ,O.specdel as lms_order_specdel\r\n",
							"    ,C.id as lms_consignment_id\r\n",
							"    ,C.cdate as lms_consignment_cdate\r\n",
							"    ,C.deliverby as lms_consignment_deliverby\r\n",
							"    ,PD.parcelid as lms_parceldetail_parcelid\r\n",
							"    ,PD.inservicestart as lms_parceldetail_inservicestart\r\n",
							"    ,PD.deliverby as lms_parceldetail_deliverby\r\n",
							"    ,PD.servicedays as lms_parceldetail_servicedays\r\n",
							"    ,PD.servicetime as lms_parceldetail_servicetime\r\n",
							"    ,PD.cutofftime as lms_parceldetail_cutofftime\r\n",
							"    ,PD.appointment as lms_parceldetail_appointment\r\n",
							"    ,PD.nddid as lms_parceldetail_nddid\r\n",
							"    ,PD.custonholdstart as lms_parceldetail_custonholdstart\r\n",
							"    ,PD.custonholdend as lms_parceldetail_custonholdend\r\n",
							"    ,PD.splitinitial as lms_parceldetail_splitinitial\r\n",
							"    ,PD.weekendholidays as lms_parceldetail_weekendholidays\r\n",
							"    ,PD.inbound as lms_parceldetail_inbound\r\n",
							"    ,PD.courierid as lms_parceldetail_courierid\r\n",
							"    ,PD.serviceid as lms_parceldetail_serviceid\r\n",
							"    ,PD.custaccid as lms_parceldetail_custaccid\r\n",
							"    ,PD.broutemasterid as lms_parceldetail_broutemasterid\r\n",
							"    ,PD.broutemasterfromid as lms_parceldetail_broutemasterfromid\r\n",
							"    ,PD.broutemastertoid as lms_parceldetail_broutemastertoid\r\n",
							"    ,PD.leadtimeid as lms_parceldetail_leadtimeid\r\n",
							"    ,BC.id as lms_bcustomer_id\t\r\n",
							"    ,BC.name as lms_bcustomer_name\r\n",
							"    ,PC.id as lms_pcustomer_id\t\r\n",
							"    ,PC.name as lms_pcustomer_name\r\n",
							"    ,DC.id as lms_dcustomer_id\t\r\n",
							"    ,DC.name as lms_dcustomer_name\r\n",
							"    ,U.id as lms_users_id\r\n",
							"    ,U.fullname as lms_users_fullname\r\n",
							"    ,U.site as lms_users_site\r\n",
							"    ,PT.id as lms_bill_parceltype_id\r\n",
							"    ,PT.description as lms_bill_parceltype_description\r\n",
							"    ,PT.ptype as lms_bill_parceltype_ptype\r\n",
							"    ,L.id as lms_clocation_id\r\n",
							"    ,L.description as lms_clocation_description\r\n",
							"    ,DS.id as lms_dstatus_id\r\n",
							"    ,DS.description as lms_dstatus_description\r\n",
							"    ,V.id as lms_volumiser_id\r\n",
							"    ,V.locid as lms_volumiser_locid\r\n",
							"    ,V.volumisercode as lms_volumiser_volumisercode\r\n",
							"    ,V.volumiserdescription as lms_volumiser_volumiserdescription\r\n",
							"    ,V.userid as lms_volumiser_userid\r\n",
							"    ,V.inlinescale as lms_volumiser_inlinescale\r\n",
							"    ,ORVP.id as orv_parcel_id\r\n",
							"    ,ORVP.lmsid as orv_parcel_lmsid\r\n",
							"    ,ORVP.did as orv_parcel_did\r\n",
							"    ,ORVP.scandate as orv_parcel_scandate\r\n",
							"    ,ORVP.scanstatus as orv_parcel_scanstatus\r\n",
							"    ,ORVP.scanmode as orv_parcel_scanmode\r\n",
							"    ,ORVP.claimid as orv_parcel_claimid\r\n",
							"    ,ORVP.courierid as orv_parcel_courierid\r\n",
							"    ,ORVP.moddate as orv_parcel_moddate\r\n",
							"FROM dboParcel P\r\n",
							"LEFT JOIN dbowaybill WB ON WB.id = P.waybillid\r\n",
							"LEFT JOIN dboorder O ON O.id = P.orderid\r\n",
							"LEFT JOIN dboconsignment C ON C.id = P.consignid\r\n",
							"LEFT JOIN dboparceldetail PD ON PD.parcelid = P.id\r\n",
							"LEFT JOIN dbocustomer BC ON BC.id = O.billcustid  --Bill Customer Detail \r\n",
							"LEFT JOIN dbocustomer PC ON PC.id = O.pickupcustid --Pickup Customer Detail \r\n",
							"LEFT JOIN dbocustomer DC ON DC.id = O.delivercustid --Deliver Customer Detail\r\n",
							"LEFT JOIN dbousers U ON U.id = P.userid\r\n",
							"LEFT JOIN dbobill_parceltype PT ON PT.id = P.ptype\r\n",
							"LEFT JOIN dbolocation L ON L.id = P.locid\r\n",
							"LEFT JOIN dbodstatus DS ON DS.id = P.dstatusid\r\n",
							"LEFT JOIN dbovolumiser V ON V.id = P.volumiserid\r\n",
							"LEFT JOIN sstparcel_tmp ORVP ON ORVP.lmsid = P.id AND ORVP.waybillid = P.waybillid"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcel = spark.sql(\"SELECT * FROM sstparcel\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#sstparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcel.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTParcelUnion')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS Union"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "395308e1-92f5-4408-99ff-e5e4716b6442"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"##Create DataFrame for the dboparcel_archive LMS Table\r\n",
							"#dboparcel_archive = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparcel_archive.parquet', format='parquet')\r\n",
							"#dboparcel_archive.createOrReplaceTempView(\"dboparcel_archive\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dboparcel LMS Table\r\n",
							"#dboparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparcel.parquet', format='parquet')\r\n",
							"#dboparcel.createOrReplaceTempView(\"dboparcel\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dboparcelunion = dboparcel_archive.unionByName(dboparcel, allowMissingColumns = True)\r\n",
							"dboparcelunion.createOrReplaceTempView(\"dboparcelunion\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelunion\r\n",
							"AS\r\n",
							"SELECT * \r\n",
							"FROM dboparcelunion"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelunion = spark.sql(\"SELECT * FROM sstparcelunion\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#sstparcelunion.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 12
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTTrack')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "29dbb17f-d592-4e55-bbf6-d71eb7caf04b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##Create DataFrame for the dbotrack LMS Table\r\n",
							"#dbotrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"#dbotrack.createOrReplaceTempView(\"dbotrack\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dboparcel LMS Table\r\n",
							"#dboparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"#dboparcel.createOrReplaceTempView(\"dboparcel\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbolocation LMS Table\r\n",
							"#dbolocation= spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"#dbolocation.createOrReplaceTempView(\"dbolocation\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"ssttrack \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    t.id as lms_track_id\r\n",
							"    ,t.opendt as lms_track_opendt\r\n",
							"    ,t.closedt as lms_track_closedt\r\n",
							"    ,t.loadid as lms_track_loadid\r\n",
							"    ,t.userid as lms_track_userid\r\n",
							"    ,t.parcelid as lms_track_parcelid\r\n",
							"    ,t.tolocid as lms_track_tolocid\r\n",
							"    ,t.touserid as lms_track_touserid\r\n",
							"    ,t.fromlocid as lms_track_fromlocid\r\n",
							"    ,t.tracktypeid2 as lms_track_tracktypeid2\r\n",
							"    ,t.tracktypeid as lms_track_tracktypeid\r\n",
							"    ,t.lastupdate as lms_track_lastupdate\r\n",
							"    ,t.toloadid as lms_track_toloadid\r\n",
							"    ,t.openstationid as lms_track_openstationid\r\n",
							"    ,t.closestationid as lms_track_closestationid\r\n",
							"    ,p.weight as lms_parcel_weight\r\n",
							"    ,p.chargeweight as lms_parcel_chargeweight\r\n",
							"    ,p.volweight as lms_parcel_volweight\r\n",
							"    ,p.volumiserweight as lms_parcel_volumiserweight\r\n",
							"    ,fl.id as lms_flocation_id\r\n",
							"    ,fl.description as lms_flocation_description\r\n",
							"    ,tl.id as lms_tlocation_id\r\n",
							"    ,tl.description as lms_tlocation_description\r\n",
							"\r\n",
							"\r\n",
							"FROM dbotrack t\r\n",
							"LEFT JOIN dboparcel p on p.id = t.parcelid\r\n",
							"LEFT JOIN dbolocation tl on tl.id = t.tolocid\r\n",
							"LEFT JOIN dbolocation fl on fl.id = t.tolocid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrack = spark.sql(\"SELECT * FROM ssttrack\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#ssttrack.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrack.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTTrackUnion')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS Union"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0321deb3-f6b0-45ad-aea3-2c3c8bf6d2c8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"##Create DataFrame for the dbotrack_archive LMS Table\r\n",
							"#dbotrack_archive = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbotrack_archive.parquet', format='parquet')\r\n",
							"#dbotrack_archive.createOrReplaceTempView(\"dbotrack_archive\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbotrack LMS Table\r\n",
							"#dbotrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbotrack.parquet', format='parquet')\r\n",
							"#dbotrack.createOrReplaceTempView(\"dbotrack\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dbotrackunion = dbotrack_archive.unionByName(dbotrack, allowMissingColumns = True)\r\n",
							"dbotrackunion.createOrReplaceTempView(\"dbotrackunion\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"ssttrackunion\r\n",
							"AS\r\n",
							"SELECT * \r\n",
							"FROM dbotrackunion"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrackunion = spark.sql(\"SELECT * FROM ssttrackunion\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#ssttrackunion.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 12
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTTrip')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/TMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c2f878ca-d341-4a97-8054-598c8c073d8c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"##Create DataFrame for the publictrip TMS Table\r\n",
							"#publictrip = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publictrip.parquet', format='parquet')\r\n",
							"#publictrip.createOrReplaceTempView(\"publictrip\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbovehicle LMS Table\r\n",
							"#dbovehicle = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"#dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicdispatch ORV Table\r\n",
							"#publicdispatch = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
							"#publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicvehicle ORV Table\r\n",
							"#publicvehicle = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/Onroute/publicvehicle.parquet', format='parquet')\r\n",
							"#publicvehicle.createOrReplaceTempView(\"publicvehicle\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicorvuser ORV Table\r\n",
							"#publicorvuser = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/Onroute/publicorvuser.parquet', format='parquet')\r\n",
							"#publicorvuser.createOrReplaceTempView(\"publicorvuser\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbovehiclebasic MD Table\r\n",
							"#dbovehiclebasic = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"#dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicdriverpayitem TMS Table\r\n",
							"#publicdriverpayitem = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpayitem.parquet', format='parquet')\r\n",
							"#publicdriverpayitem.createOrReplaceTempView(\"publicdriverpayitem\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicfinancedata TMS Table\r\n",
							"#publicfinancedata = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publicfinancedata.parquet', format='parquet')\r\n",
							"#publicfinancedata.createOrReplaceTempView(\"publicfinancedata\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicbooking TMS Table\r\n",
							"#publicbooking = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publicbooking.parquet', format='parquet')\r\n",
							"#publicbooking.createOrReplaceTempView(\"publicbooking\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"ssttpublicfinancedata_tmp = spark.sql(\"\"\"\r\n",
							"SELECT \r\n",
							"b.tripid\r\n",
							",sum(f.peaksurchagrebuy) as peaksurchagrebuy\r\n",
							",sum(f.peaksurchagresell) as peaksurchagresell\r\n",
							",sum(f.manualentryroadhaulsell) as manualentryroadhaulsell\r\n",
							",sum(f.manualentryahocsell) as manualentryahocsell\r\n",
							",sum(f.systemfuellevy) as systemfuellevy\r\n",
							",sum(f.systemratefuellevy) as systemratefuellevy\r\n",
							",sum(f.systemratefuelexlevy) as systemratefuelexlevy\r\n",
							",sum(f.systemratefuelinclevy) as systemratefuelinclevy\r\n",
							",sum(f.systemsellrate) as systemsellrate\r\n",
							",sum(f.totalsellrate) as totalsellrate\r\n",
							",sum(f.totalbuyrate) as totalbuyrate\r\n",
							"\r\n",
							"FROM publicfinancedata f \r\n",
							"LEFT JOIN publicbooking b on b.id = f.bookingid\r\n",
							"GROUP BY b.tripid\r\n",
							"\"\"\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttpublicfinancedata_tmp.createOrReplaceTempView(\"ssttpublicfinancedata_tmp\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"ssttrip = spark.sql(\"\"\"\r\n",
							"SELECT \r\n",
							"    t.id as tms_trip_id\r\n",
							"    ,t.driverid as tms_trip_driverid\r\n",
							"    ,t.vehicleid as tms_trip_vehicleid\r\n",
							"    ,t.trailerid as tms_trip_trailerid\r\n",
							"    ,t.sectrailerid as tms_trip_sectrailerid\r\n",
							"    ,t.status as tms_trip_status\r\n",
							"    ,t.routeid as tms_trip_routeid\r\n",
							"    ,t.opsrouteid as tms_trip_opsrouteid\r\n",
							"    ,t.startfromaddress as tms_trip_startfromaddress\r\n",
							"    ,t.startfromlat as tms_trip_startfromlat\r\n",
							"    ,t.startfromlng as tms_trip_startfromlng\r\n",
							"    ,to_timestamp(t.dispatchdate) as tms_trip_dispatchdate\r\n",
							"    ,t.stopaddress as tms_trip_stopaddress\r\n",
							"    ,t.stoplat as tms_trip_stoplat\r\n",
							"    ,t.stoplng as tms_trip_stoplng\r\n",
							"    ,to_timestamp(t.insdate) as tms_trip_insdate\r\n",
							"    ,to_timestamp(t.moddate) as tms_trip_moddate\r\n",
							"    ,t.insby as tms_trip_insby\r\n",
							"    ,t.onrouteid as tms_trip_onrouteid\r\n",
							"    ,t.uuid as tms_trip_uuid\r\n",
							"    ,t.insbyuser as tms_trip_insbyuser\r\n",
							"    ,t.thirdpartyid as tms_trip_thirdpartyid\r\n",
							"    ,t.timehash as tms_trip_timehash\r\n",
							"    ,t.onroutestatus as tms_trip_onroutestatus\r\n",
							"    ,to_timestamp(t.lastupdate) as tms_trip_lastupdate\r\n",
							"    ,t.lastlng as tms_trip_lastlng\r\n",
							"    ,t.lastlat as tms_trip_lastlat\r\n",
							"    ,t.controllerid as tms_trip_controllerid\r\n",
							"    ,t.trackstatus as tms_trip_trackstatus\r\n",
							"    ,t.lastrackid as tms_trip_lastrackid\r\n",
							"    ,t.customer as tms_trip_customer\r\n",
							"    ,t.bookings as tms_trip_bookings\r\n",
							"    ,t.controller as tms_trip_controller\r\n",
							"    ,t.transporter as tms_trip_transporter\r\n",
							"    ,t.legacyid as tms_trip_legacyid\r\n",
							"    ,t.originatedfrom as tms_trip_originatedfrom\r\n",
							"    ,t.local as tms_trip_local\r\n",
							"    ,to_timestamp(t.startdate) as tms_trip_startdate\r\n",
							"    ,to_timestamp(t.enddate) as tms_trip_enddate\r\n",
							"    ,to_timestamp(t.actualdeliverydate) as tms_trip_actualdeliverydate\r\n",
							"    ,t.note as tms_trip_note\r\n",
							"    ,to_timestamp(t.deliverydate) as tms_trip_deliverydate\r\n",
							"    ,t.internalexternal as tms_trip_internalexternal\r\n",
							"    ,t.pickupstartaddress as tms_trip_pickupstartaddress\r\n",
							"    ,d.id as orv_dispatch_id\r\n",
							"    ,d.lmsid as orv_dispatch_lmsid\r\n",
							"    ,d.vid as orv_dispatch_vid\r\n",
							"    ,d.did as orv_dispatch_did\r\n",
							"    ,d.status as orv_dispatch_status\r\n",
							"    ,to_timestamp(d.startdate) as orv_dispatch_startdate\r\n",
							"    ,to_timestamp(d.stopdate) as orv_dispatch_stopdate\r\n",
							"    ,d.vehicletype as orv_dispatch_vehicletype\r\n",
							"    ,d.uid as orv_dispatch_uid\r\n",
							"    ,to_timestamp(d.estdepdate) as orv_dispatch_estdepdate\r\n",
							"    ,d.trailer as orv_dispatch_trailer\r\n",
							"    ,d.trailer2 as orv_dispatch_trailer2\r\n",
							"    ,d.fromlocid as orv_dispatch_fromlocid\r\n",
							"    ,d.tolocid as orv_dispatch_tolocid\r\n",
							"    ,d.site as orv_dispatch_site\r\n",
							"    ,to_timestamp(d.lastupdate) as orv_dispatch_lastupdate\r\n",
							"    ,d.etastatus as orv_dispatch_etastatus\r\n",
							"    ,d.startinglat as orv_dispatch_startinglat\r\n",
							"    ,d.startinglng as orv_dispatch_startinglng\r\n",
							"    ,d.endinglat as orv_dispatch_endinglat\r\n",
							"    ,d.endinglng as orv_dispatch_endinglng\r\n",
							"    ,d.startingfrom as orv_dispatch_startingfrom\r\n",
							"    ,d.goingto as orv_dispatch_goingto\r\n",
							"    ,d.importissue as orv_dispatch_importissue\r\n",
							"    ,to_timestamp(d.insdate) as orv_dispatch_insdate\r\n",
							"    ,to_timestamp(d.estarrdate) as orv_dispatch_estarrdate\r\n",
							"    ,d.duration as orv_dispatch_duration\r\n",
							"    ,d.distance as orv_dispatch_distance\r\n",
							"    ,d.cost as orv_dispatch_cost\r\n",
							"    ,d.stoplat as orv_dispatch_stoplat\r\n",
							"    ,d.stoplng as orv_dispatch_stoplng\r\n",
							"    ,d.stopreason as orv_dispatch_stopreason\r\n",
							"    ,d.startodo as orv_dispatch_startodo\r\n",
							"    ,d.stopodo as orv_dispatch_stopodo\r\n",
							"    ,d.expduration as orv_dispatch_expduration\r\n",
							"    ,d.expdistance as orv_dispatch_expdistance\r\n",
							"    ,d.expcost as orv_dispatch_expcost\r\n",
							"    ,d.collectionid as orv_dispatch_collectionid\r\n",
							"    ,d.crew as orv_dispatch_crew\r\n",
							"    ,d.crewnames as orv_dispatch_crewnames\r\n",
							"    ,d.bocloseuid as orv_dispatch_bocloseuid\r\n",
							"    ,d.routing as orv_dispatch_routing\r\n",
							"    ,d.swapct as orv_dispatch_swapct\r\n",
							"    ,d.debriefed as orv_dispatch_debriefed\r\n",
							"    ,d.debriefnotes as orv_dispatch_debriefnotes\r\n",
							"    ,d.bopin as orv_dispatch_bopin\r\n",
							"    ,d.cpicost as orv_dispatch_cpicost\r\n",
							"    ,d.labourcost as orv_dispatch_labourcost\r\n",
							"    ,d.maintcost as orv_dispatch_maintcost\r\n",
							"    ,d.inscost as orv_dispatch_inscost\r\n",
							"    ,d.tollcost as orv_dispatch_tollcost\r\n",
							"    ,d.fuelcost as orv_dispatch_fuelcost\r\n",
							"    ,d.internal as orv_dispatch_internal\r\n",
							"    ,d.childids as orv_dispatch_childids\r\n",
							"    ,d.guid as orv_dispatch_guid\r\n",
							"    ,d.timedefinite as orv_dispatch_timedefinite\r\n",
							"    ,d.orvcode as orv_dispatch_orvcode\r\n",
							"    ,to_timestamp(d.tsstopdepoenter) as orv_dispatch_tsstopdepoenter\r\n",
							"    ,to_timestamp(d.tsstartdepoexit) as orv_dispatch_tsstartdepoexit\r\n",
							"    ,d.reroutect as orv_dispatch_reroutect\r\n",
							"    ,to_timestamp(d.actualarrdate) as orv_dispatch_actualarrdate\r\n",
							"    ,d.physicalstartlat as orv_dispatch_physicalstartlat\r\n",
							"    ,d.physicalstartlng as orv_dispatch_physicalstartlng\r\n",
							"    ,to_timestamp(d.tsstartdepoexitapp) as orv_dispatch_tsstartdepoexitapp\r\n",
							"    ,to_timestamp(d.tsstopdepoenterapp) as orv_dispatch_tsstopdepoenterapp\r\n",
							"    ,to_timestamp(d.uncanceldate) as orv_dispatch_uncanceldate\r\n",
							"    ,d.uncancelusername as orv_dispatch_uncancelusername\r\n",
							"    ,d.lmsdebrifed as orv_dispatch_lmsdebrifed\r\n",
							"    ,d.reviseddebrief as orv_dispatch_reviseddebrief\r\n",
							"    ,d.lhtransporter as orv_dispatch_lhtransporter\r\n",
							"    ,d.triptype as orv_dispatch_triptype\r\n",
							"    ,d.startreason as orv_dispatch_startreason\r\n",
							"    ,d.route as orv_dispatch_route\r\n",
							"    ,d.tmstraileridentify as orv_dispatch_tmstraileridentify\r\n",
							"    ,d.tmstrailer2identify as orv_dispatch_tmstrailer2identify\r\n",
							"    ,d.tmscontroller as orv_dispatch_tmscontroller\r\n",
							"    ,d.routekey as orv_dispatch_routekey\r\n",
							"    ,d.courierid as orv_dispatch_courierid\r\n",
							"    ,to_timestamp(d.originalstartdate) as orv_dispatch_originalstartdate\r\n",
							"    ,to_timestamp(d.originalextarrival) as orv_dispatch_originalextarrival\r\n",
							"    ,d.recomputeoriginals as orv_dispatch_recomputeoriginals\r\n",
							"    ,d.originalextdistance as orv_dispatch_originalextdistance\r\n",
							"    ,d.originalextduration as orv_dispatch_originalextduration\r\n",
							"    ,to_timestamp(d.moddate) as orv_dispatch_moddate\r\n",
							"    ,d.tmsmode as orv_dispatch_tmsmode\r\n",
							"    ,d.driversignature as orv_dispatch_driversignature\r\n",
							"    ,v.id as orv_vehicle_id\r\n",
							"    ,v.fleetcode as orv_vehicle_fleetcode\r\n",
							"    ,v.lmsid as orv_vehicle_lmsid\r\n",
							"    ,v1.id as orv_vehicle_trailer1id\r\n",
							"    ,v1.fleetcode as orv_vehicle_trailer1fleetcode\r\n",
							"    ,v1.lmsid as orv_vehicle_trailer1lmsid\r\n",
							"    ,v2.id as orv_vehicle_trailer2id\r\n",
							"    ,v2.fleetcode as orv_vehicle_trailer2fleetcode\r\n",
							"    ,v2.lmsid as orv_vehicle_trailer2lmsid\r\n",
							"    ,lv.id as lms_vehicle_id\r\n",
							"    ,lv.uid as lms_vehicle_uid\r\n",
							"    ,lv1.id as lms_vehicle_trailer1id\r\n",
							"    ,lv1.uid as lms_vehicle_trailer1uid\r\n",
							"    ,lv2.id as lms_vehicle_trailer2id\r\n",
							"    ,lv2.uid as lms_vehicle_trailer2uid\r\n",
							"    ,u.id as orv_orvuser_id\r\n",
							"    ,u.username as orv_orvuser_username\r\n",
							"    ,u.fname as orv_orvuser_fname\r\n",
							"    ,u.lname as orv_orvuser_lname\r\n",
							"    ,u.empcode as orv_orvuser_empcode\r\n",
							"    ,u.aka as orv_orvuser_aka\r\n",
							"    ,u.gender as orv_orvuser_gender\r\n",
							"    ,u.cellno as orv_orvuser_cellno\r\n",
							"    ,u.rsaid as orv_orvuser_rsaid\r\n",
							"    ,u.passportno as orv_orvuser_passportno\r\n",
							"    ,u.idpassportno as orv_orvuser_idpassportno\r\n",
							"    ,u.nationality as orv_orvuser_nationality\r\n",
							"    ,u.birthcountry as orv_orvuser_birthcountry\r\n",
							"    ,to_timestamp(u.engageddate) as orv_orvuser_engageddate\r\n",
							"    ,to_timestamp(u.joineddate) as orv_orvuser_joineddate\r\n",
							"    ,to_timestamp(u.termindate) as orv_orvuser_termindate\r\n",
							"    ,u.status as orv_orvuser_status\r\n",
							"    ,u.depot as orv_orvuser_depot\r\n",
							"    ,u.jobcategory as orv_orvuser_jobcategory\r\n",
							"    ,u.jobtitle as orv_orvuser_jobtitle\r\n",
							"    ,u.payroll as orv_orvuser_payroll\r\n",
							"    ,u.annualsalary as orv_orvuser_annualsalary\r\n",
							"    ,to_timestamp(u.insdate) as orv_orvuser_insdate\r\n",
							"    ,vb.id as md_vehiclebasic_id\r\n",
							"    ,vb.uid as md_vehiclebasic_uid\r\n",
							"    ,vb.vehicletype as md_vehiclebasic_vehicletype\r\n",
							"    ,vb.internalexternal as md_vehiclebasic_internalexternal\r\n",
							"    ,vb.activeflag as md_vehiclebasic_activeflag\r\n",
							"    ,vb.vehiclestatus as md_vehiclebasic_vehiclestatus\r\n",
							"    ,vb.chassisnumber as md_vehiclebasic_chassisnumber\r\n",
							"    ,vb.depot as md_vehiclebasic_depot\r\n",
							"    ,vb.enginenumber as md_vehiclebasic_enginenumber\r\n",
							"    ,vb.fleetcode as md_vehiclebasic_fleetcode\r\n",
							"    ,vb.fueltype as md_vehiclebasic_fueltype\r\n",
							"    ,vb.registrationnumber as md_vehiclebasic_registrationnumber\r\n",
							"    ,vb.vehicleapplication as md_vehiclebasic_vehicleapplication\r\n",
							"    ,vb.vehiclebodymake as md_vehiclebasic_vehiclebodymake\r\n",
							"    ,vb.vehiclecolour as md_vehiclebasic_vehiclecolour\r\n",
							"    ,vb.vehiclemake as md_vehiclebasic_vehiclemake\r\n",
							"    ,vb.vehiclemodel as md_vehiclebasic_vehiclemodel\r\n",
							"    ,vb.vehicleseries as md_vehiclebasic_vehicleseries\r\n",
							"    ,vb.year as md_vehiclebasic_year\r\n",
							"    ,vb.vehicleownerid as md_vehiclebasic_vehicleownerid\r\n",
							"    ,vb.vehicleowner as md_vehiclebasic_vehicleowner\r\n",
							"    ,vb.staffvehicleflag as md_vehiclebasic_staffvehicleflag\r\n",
							"    ,vb.vehicletrailersize as md_vehiclebasic_vehicletrailersize\r\n",
							"    ,vb.vehicletrailertype as md_vehiclebasic_vehicletrailertype\r\n",
							"    ,vb.vehicleetollclass as md_vehiclebasic_vehicleetollclass\r\n",
							"    ,vb.brn as md_vehiclebasic_brn\r\n",
							"    ,vb.brnnumber as md_vehiclebasic_brnnumber\r\n",
							"    ,vb.vehicleregisterno as md_vehiclebasic_vehicleregisterno\r\n",
							"    ,to_timestamp(vb.insdate) as md_vehiclebasic_insdate\r\n",
							"    ,vb.insby as md_vehiclebasic_insby\r\n",
							"    ,vb.islinehaulvehicle as md_vehiclebasic_islinehaulvehicle\r\n",
							"    ,vb.internalheight as md_vehiclebasic_internalheight\r\n",
							"    ,vb.internallength as md_vehiclebasic_internallength\r\n",
							"    ,vb.internalvolume as md_vehiclebasic_internalvolume\r\n",
							"    ,vb.internalwidth as md_vehiclebasic_internalwidth\r\n",
							"    ,to_timestamp(vb.moddate) as md_vehiclebasic_moddate\r\n",
							"    ,vb.trailerflag as md_vehiclebasic_trailerflag\r\n",
							"    ,vb.workflowstatus as md_vehiclebasic_workflowstatus\r\n",
							"    ,to_timestamp(vb.approveddate) as md_vehiclebasic_approveddate\r\n",
							"    ,vb1.id as md_vehiclebasic_trailer1id\r\n",
							"    ,vb1.uid as md_vehiclebasic_trailer1uid\r\n",
							"    ,vb1.vehicletype as md_vehiclebasic_trailer1vehicletype\r\n",
							"    ,vb1.internalexternal as md_vehiclebasic_trailer1internalexternal\r\n",
							"    ,vb1.activeflag as md_vehiclebasic_trailer1activeflag\r\n",
							"    ,vb1.vehiclestatus as md_vehiclebasic_trailer1vehiclestatus\r\n",
							"    ,vb1.chassisnumber as md_vehiclebasic_trailer1chassisnumber\r\n",
							"    ,vb1.depot as md_vehiclebasic_trailer1depot\r\n",
							"    ,vb1.enginenumber as md_vehiclebasic_trailer1enginenumber\r\n",
							"    ,vb1.fleetcode as md_vehiclebasic_trailer1fleetcode\r\n",
							"    ,vb1.fueltype as md_vehiclebasic_trailer1fueltype\r\n",
							"    ,vb1.registrationnumber as md_vehiclebasic_trailer1registrationnumber\r\n",
							"    ,vb1.vehicleapplication as md_vehiclebasic_trailer1vehicleapplication\r\n",
							"    ,vb1.vehiclebodymake as md_vehiclebasic_trailer1vehiclebodymake\r\n",
							"    ,vb1.vehiclecolour as md_vehiclebasic_trailer1vehiclecolour\r\n",
							"    ,vb1.vehiclemake as md_vehiclebasic_trailer1vehiclemake\r\n",
							"    ,vb1.vehiclemodel as md_vehiclebasic_trailer1vehiclemodel\r\n",
							"    ,vb1.vehicleseries as md_vehiclebasic_trailer1vehicleseries\r\n",
							"    ,vb1.year as md_vehiclebasic_trailer1year\r\n",
							"    ,vb1.vehicleownerid as md_vehiclebasic_trailer1vehicleownerid\r\n",
							"    ,vb1.vehicleowner as md_vehiclebasic_trailer1vehicleowner\r\n",
							"    ,vb1.staffvehicleflag as md_vehiclebasic_trailer1staffvehicleflag\r\n",
							"    ,vb1.vehicletrailersize as md_vehiclebasic_trailer1vehicletrailersize\r\n",
							"    ,vb1.vehicletrailertype as md_vehiclebasic_trailer1vehicletrailertype\r\n",
							"    ,vb1.vehicleetollclass as md_vehiclebasic_trailer1vehicleetollclass\r\n",
							"    ,vb1.brn as md_vehiclebasic_trailer1brn\r\n",
							"    ,vb1.brnnumber as md_vehiclebasic_trailer1brnnumber\r\n",
							"    ,vb1.vehicleregisterno as md_vehiclebasic_trailer1vehicleregisterno\r\n",
							"    ,to_timestamp(vb1.insdate) as md_vehiclebasic_trailer1insdate\r\n",
							"    ,vb1.insby as md_vehiclebasic_trailer1insby\r\n",
							"    ,vb1.islinehaulvehicle as md_vehiclebasic_trailer1islinehaulvehicle\r\n",
							"    ,vb1.internalheight as md_vehiclebasic_trailer1internalheight\r\n",
							"    ,vb1.internallength as md_vehiclebasic_trailer1internallength\r\n",
							"    ,vb1.internalvolume as md_vehiclebasic_trailer1internalvolume\r\n",
							"    ,vb1.internalwidth as md_vehiclebasic_trailer1internalwidth\r\n",
							"    ,to_timestamp(vb1.moddate) as md_vehiclebasic_trailer1moddate\r\n",
							"    ,vb1.trailerflag as md_vehiclebasic_trailer1trailerflag\r\n",
							"    ,vb1.workflowstatus as md_vehiclebasic_trailer1workflowstatus\r\n",
							"    ,to_timestamp(vb1.approveddate) as md_vehiclebasic_trailer1approveddate\r\n",
							"    ,vb2.id as md_vehiclebasic_trailer2id\r\n",
							"    ,vb2.uid as md_vehiclebasic_trailer2uid\r\n",
							"    ,vb2.vehicletype as md_vehiclebasic_trailer2vehicletype\r\n",
							"    ,vb2.internalexternal as md_vehiclebasic_trailer2internalexternal\r\n",
							"    ,vb2.activeflag as md_vehiclebasic_trailer2activeflag\r\n",
							"    ,vb2.vehiclestatus as md_vehiclebasic_trailer2vehiclestatus\r\n",
							"    ,vb2.chassisnumber as md_vehiclebasic_trailer2chassisnumber\r\n",
							"    ,vb2.depot as md_vehiclebasic_trailer2depot\r\n",
							"    ,vb2.enginenumber as md_vehiclebasic_trailer2enginenumber\r\n",
							"    ,vb2.fleetcode as md_vehiclebasic_trailer2fleetcode\r\n",
							"    ,vb2.fueltype as md_vehiclebasic_trailer2fueltype\r\n",
							"    ,vb2.registrationnumber as md_vehiclebasic_trailer2registrationnumber\r\n",
							"    ,vb2.vehicleapplication as md_vehiclebasic_trailer2vehicleapplication\r\n",
							"    ,vb2.vehiclebodymake as md_vehiclebasic_trailer2vehiclebodymake\r\n",
							"    ,vb2.vehiclecolour as md_vehiclebasic_trailer2vehiclecolour\r\n",
							"    ,vb2.vehiclemake as md_vehiclebasic_trailer2vehiclemake\r\n",
							"    ,vb2.vehiclemodel as md_vehiclebasic_trailer2vehiclemodel\r\n",
							"    ,vb2.vehicleseries as md_vehiclebasic_trailer2vehicleseries\r\n",
							"    ,vb2.year as md_vehiclebasic_trailer2year\r\n",
							"    ,vb2.vehicleownerid as md_vehiclebasic_trailer2vehicleownerid\r\n",
							"    ,vb2.vehicleowner as md_vehiclebasic_trailer2vehicleowner\r\n",
							"    ,vb2.staffvehicleflag as md_vehiclebasic_trailer2staffvehicleflag\r\n",
							"    ,vb2.vehicletrailersize as md_vehiclebasic_trailer2vehicletrailersize\r\n",
							"    ,vb2.vehicletrailertype as md_vehiclebasic_trailer2vehicletrailertype\r\n",
							"    ,vb2.vehicleetollclass as md_vehiclebasic_trailer2vehicleetollclass\r\n",
							"    ,vb2.brn as md_vehiclebasic_trailer2brn\r\n",
							"    ,vb2.brnnumber as md_vehiclebasic_trailer2brnnumber\r\n",
							"    ,vb2.vehicleregisterno as md_vehiclebasic_trailer2vehicleregisterno\r\n",
							"    ,to_timestamp(vb2.insdate) as md_vehiclebasic_trailer2insdate\r\n",
							"    ,vb2.insby as md_vehiclebasic_trailer2insby\r\n",
							"    ,vb2.islinehaulvehicle as md_vehiclebasic_trailer2islinehaulvehicle\r\n",
							"    ,vb2.internalheight as md_vehiclebasic_trailer2internalheight\r\n",
							"    ,vb2.internallength as md_vehiclebasic_trailer2internallength\r\n",
							"    ,vb2.internalvolume as md_vehiclebasic_trailer2internalvolume\r\n",
							"    ,vb2.internalwidth as md_vehiclebasic_trailer2internalwidth\r\n",
							"    ,to_timestamp(vb2.moddate) as md_vehiclebasic_trailer2moddate\r\n",
							"    ,vb2.trailerflag as md_vehiclebasic_trailer2trailerflag\r\n",
							"    ,vb2.workflowstatus as md_vehiclebasic_trailer2workflowstatus\r\n",
							"    ,to_timestamp(vb2.approveddate) as md_vehiclebasic_trailer2approveddate\r\n",
							"    ,dpi.id as tms_driverpayitem_id\r\n",
							"    ,dpi.driverid as tms_driverpayitem_driverid\r\n",
							"    ,dpi.tripid as tms_driverpayitem_tripid\r\n",
							"    ,dpi.triprate as tms_driverpayitem_triprate\r\n",
							"    ,dpi.mealrate as tms_driverpayitem_mealrate\r\n",
							"    ,dpi.sleepoverrate as tms_driverpayitem_sleepoverrate\r\n",
							"    ,dpi.airtimerate as tms_driverpayitem_airtimerate\r\n",
							"    ,dpi.linkrate as tms_driverpayitem_linkrate\r\n",
							"    ,dpi.totalrate as tms_driverpayitem_totalrate\r\n",
							"    ,dpi.routeid as tms_driverpayitem_routeid\r\n",
							"    ,dpi.routename as tms_driverpayitem_routename\r\n",
							"    ,to_timestamp(dpi.insdate) as tms_driverpayitem_insdate\r\n",
							"    ,to_timestamp(dpi.moddate) as tms_driverpayitem_moddate\r\n",
							"    ,dpi.horse as tms_driverpayitem_horse\r\n",
							"    ,dpi.trailers as tms_driverpayitem_trailers\r\n",
							"    ,dpi.linkused as tms_driverpayitem_linkused\r\n",
							"    ,dpi.manualadjustment as tms_driverpayitem_manualadjustment\r\n",
							"    ,dpi.editby as tms_driverpayitem_editby\r\n",
							"    ,dpi.drivername as tms_driverpayitem_drivername\r\n",
							"    ,to_timestamp(dpi.dispatchdate) as tms_driverpayitem_dispatchdate\r\n",
							"    ,dpi.bookings as tms_driverpayitem_bookings\r\n",
							"    ,dpi.employeecode as tms_driverpayitem_employeecode\r\n",
							"    ,dpi.originatedfrom as tms_driverpayitem_originatedfrom\r\n",
							"    ,dpi.reportid as tms_driverpayitem_reportid\r\n",
							"    ,f.peaksurchagrebuy as tms_financedata_aggrpeaksurchagrebuy\r\n",
							"    ,f.peaksurchagresell as tms_financedata_aggrpeaksurchagresell\r\n",
							"    ,f.manualentryroadhaulsell as tms_financedata_aggrmanualentryroadhaulsell\r\n",
							"    ,f.manualentryahocsell as tms_financedata_aggrmanualentryahocsell\r\n",
							"    ,f.systemfuellevy as tms_financedata_aggrsystemfuellevy\r\n",
							"    ,f.systemratefuellevy as tms_financedata_aggrsystemratefuellevy\r\n",
							"    ,f.systemratefuelexlevy as tms_financedata_aggrsystemratefuelexlevy\r\n",
							"    ,f.systemratefuelinclevy as tms_financedata_aggrsystemratefuelinclevy\r\n",
							"    ,f.systemsellrate as tms_financedata_aggrsystemsellrate\r\n",
							"    ,f.totalsellrate as tms_financedata_aggrtotalsellrate\r\n",
							"    ,f.totalbuyrate as tms_financedata_aggrtotalbuyrate\r\n",
							"\r\n",
							"FROM publictrip t\r\n",
							"LEFT JOIN publicdispatch d on d.lmsid = t.id and d.vehicletype = 2\r\n",
							"LEFT JOIN publicvehicle v on v.id = d.vid\r\n",
							"LEFT JOIN publicvehicle v1 on v1.id = d.trailer\r\n",
							"LEFT JOIN publicvehicle v2 on v2.id = d.trailer2\r\n",
							"LEFT JOIN dbovehicle lv on lv.id = v.lmsid \r\n",
							"LEFT JOIN dbovehicle lv1 on lv1.id = v1.lmsid \r\n",
							"LEFT JOIN dbovehicle lv2 on lv2.id = v2.lmsid \r\n",
							"LEFT JOIN publicorvuser u on u.id = d.did\r\n",
							"LEFT JOIN dbovehiclebasic vb on vb.uid = lv.uid\r\n",
							"LEFT JOIN dbovehiclebasic vb1 on vb1.uid = lv1.uid\r\n",
							"LEFT JOIN dbovehiclebasic vb2 on vb2.uid = lv2.uid\r\n",
							"LEFT JOIN publicdriverpayitem dpi on dpi.tripid = t.id\r\n",
							"LEFT JOIN ssttpublicfinancedata_tmp f on f.tripid = t.id \r\n",
							"\"\"\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrip.createOrReplaceTempView(\"ssttrip\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#ssttrip.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Semi Structured Data/OPS/ssttrip.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTWaybill')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5eadd2b3-5c90-4379-9828-41eff8c98259"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"##Create DataFrame for the dbowaybill LMS Table\r\n",
							"#dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"#dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbocustomer LMS Table\r\n",
							"#dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"#dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbousers LMS Table\r\n",
							"#dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"#dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbodb_delayreason LMS Table\r\n",
							"#dbodb_delayreason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_delayreason.parquet', format='parquet')\r\n",
							"#dbodb_delayreason.createOrReplaceTempView(\"dbodb_delayreason\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbodb_reasondetail LMS Table\r\n",
							"#dbodb_reasondetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_reasondetail.parquet', format='parquet')\r\n",
							"#dbodb_reasondetail.createOrReplaceTempView(\"dbodb_reasondetail\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbodb_reasongroup LMS Table\r\n",
							"#dbodb_reasongroup = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_reasongroup.parquet', format='parquet')\r\n",
							"#dbodb_reasongroup.createOrReplaceTempView(\"dbodb_reasongroup\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbodb_deliverystatus LMS Table\r\n",
							"#dbodb_deliverystatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_deliverystatus.parquet', format='parquet')\r\n",
							"#dbodb_deliverystatus.createOrReplaceTempView(\"dbodb_deliverystatus\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbodb_mobilefeedbackreason LMS Table\r\n",
							"#dbodb_mobilefeedbackreason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_mobilefeedbackreason.parquet', format='parquet')\r\n",
							"#dbodb_mobilefeedbackreason.createOrReplaceTempView(\"dbodb_mobilefeedbackreason\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicdelivery ORV Table\r\n",
							"#publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"#publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publicmall ORV Table\r\n",
							"#publicmall = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicmall.parquet', format='parquet')\r\n",
							"#publicmall.createOrReplaceTempView(\"publicmall\")\r\n",
							"#\r\n",
							"##Create DataFrame for the publiccustomer ORV Table\r\n",
							"#publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiccustomer.parquet', format='parquet')\r\n",
							"#publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"#\r\n",
							"##Create DataFrame for the sstparcelbywaybill LMS Table\r\n",
							"#sstparcelbywaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbywaybill.parquet', format='parquet')\r\n",
							"#sstparcelbywaybill.createOrReplaceTempView(\"sstparcelbywaybill\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"sstwaybill = spark.sql(\"\"\"\r\n",
							"SELECT \r\n",
							"\r\n",
							"    w.id as lms_waybill_id\r\n",
							"    ,w.date as lms_waybill_date\r\n",
							"    ,w.bservice as lms_waybill_bservice\r\n",
							"    ,w.cservice as lms_waybill_cservice\r\n",
							"    ,w.originid as lms_waybill_originid\r\n",
							"    ,w.defuser as lms_waybill_defuser\r\n",
							"    ,w.distance as lms_waybill_distance\r\n",
							"    ,w.courierid as lms_waybill_courierid\r\n",
							"    ,w.courierwbno as lms_waybill_courierwbno\r\n",
							"    ,w.billtype as lms_waybill_billtype\r\n",
							"    ,w.capdate as lms_waybill_capdate\r\n",
							"    ,w.surcharge as lms_waybill_surcharge\r\n",
							"    ,w.insurance as lms_waybill_insurance\r\n",
							"    ,w.tax as lms_waybill_tax\r\n",
							"    ,w.totalcharge as lms_waybill_totalcharge\r\n",
							"    ,w.destinationname as lms_waybill_destinationname\r\n",
							"    ,w.ordertype as lms_waybill_ordertype\r\n",
							"    ,w.pickupcustid as lms_waybill_pickupcustid\r\n",
							"    ,w.delivercustid as lms_waybill_delivercustid\r\n",
							"    ,w.billto as lms_waybill_billto\r\n",
							"    ,w.claimable as lms_waybill_claimable\r\n",
							"    ,w.override as lms_waybill_override\r\n",
							"    ,w.vehiclecapacity as lms_waybill_vehiclecapacity\r\n",
							"    ,w.custpoddate as lms_waybill_custpoddate\r\n",
							"    ,w.poddate as lms_waybill_poddate\r\n",
							"    ,w.signee as lms_waybill_signee\r\n",
							"    ,w.grvno as lms_waybill_grvno\r\n",
							"    ,w.endorsements as lms_waybill_endorsements\r\n",
							"    ,w.billcust as lms_waybill_billcust\r\n",
							"    ,w.courier_from as lms_waybill_courier_from\r\n",
							"    ,w.courier_to as lms_waybill_courier_to\r\n",
							"    ,w.charge as lms_waybill_charge\r\n",
							"    ,w.tvalue as lms_waybill_tvalue\r\n",
							"    ,w.inservice as lms_waybill_inservice\r\n",
							"    ,w.dbtotalcharge as lms_waybill_dbtotalcharge\r\n",
							"    ,w.loadid as lms_waybill_loadid\r\n",
							"    ,w.mrpflag as lms_waybill_mrpflag\r\n",
							"    ,w.printed as lms_waybill_printed\r\n",
							"    ,w.sreasonid as lms_waybill_sreasonid\r\n",
							"    ,w.minkg as lms_waybill_minkg\r\n",
							"    ,w.minrate as lms_waybill_minrate\r\n",
							"    ,w.addrate as lms_waybill_addrate\r\n",
							"    ,w.docfees as lms_waybill_docfees\r\n",
							"    ,w.volumetric as lms_waybill_volumetric\r\n",
							"    ,w.hasprinted as lms_waybill_hasprinted\r\n",
							"    ,w.site as lms_waybill_site\r\n",
							"    ,w.deliveryno as lms_waybill_deliveryno\r\n",
							"    ,w.fuellevy as lms_waybill_fuellevy\r\n",
							"    ,w.totfuellevy as lms_waybill_totfuellevy\r\n",
							"    ,w.custaccid as lms_waybill_custaccid\r\n",
							"    ,w.podadded as lms_waybill_podadded\r\n",
							"    ,w.scanned as lms_waybill_scanned\r\n",
							"    ,w.userid as lms_waybill_userid\r\n",
							"    ,w.autoprinted as lms_waybill_autoprinted\r\n",
							"    ,w.poduserid as lms_waybill_poduserid\r\n",
							"    ,w.scanuserid as lms_waybill_scanuserid\r\n",
							"    ,w.cref as lms_waybill_cref\r\n",
							"    ,w.ushort as lms_waybill_ushort\r\n",
							"    ,w.delays as lms_waybill_delays\r\n",
							"    ,w.debriefed as lms_waybill_debriefed\r\n",
							"    ,w.debriefdt as lms_waybill_debriefdt\r\n",
							"    ,w.dbctnsret as lms_waybill_dbctnsret\r\n",
							"    ,w.uploaded as lms_waybill_uploaded\r\n",
							"    ,w.serviceexclude as lms_waybill_serviceexclude\r\n",
							"    ,w.failed as lms_waybill_failed\r\n",
							"    ,w.delayreasonid as lms_waybill_delayreasonid\r\n",
							"    ,w.notdebrievreasonid as lms_waybill_notdebrievreasonid\r\n",
							"    ,w.deliverystatid as lms_waybill_deliverystatid\r\n",
							"    ,w.reasongroupid as lms_waybill_reasongroupid\r\n",
							"    ,w.emailcust as lms_waybill_emailcust\r\n",
							"    ,w.mobileissuereportedid as lms_waybill_mobileissuereportedid\r\n",
							"    ,w.ismobile as lms_waybill_ismobile\r\n",
							"    ,bc.id as lms_bcustomer_id\r\n",
							"    ,bc.name as lms_bcustomer_name\r\n",
							"    ,pc.id as lms_pcustomer_id\r\n",
							"    ,pc.name as lms_pcustomer_name\r\n",
							"    ,dc.id as lms_dcustomer_id\r\n",
							"    ,dc.name as lms_dcustomer_name\r\n",
							"    ,u.id as lms_users_id\r\n",
							"    ,u.fullname as lms_users_fullname\r\n",
							"    ,u.site as lms_users_site\r\n",
							"    ,pu.id as lms_podusers_id\r\n",
							"    ,pu.fullname as lms_podusers_fullname\r\n",
							"    ,pu.site as lms_podusers_site\r\n",
							"    ,su.id as lms_scanusers_id\r\n",
							"    ,su.fullname as lms_scanusers_fullname\r\n",
							"    ,su.site as lms_scanusers_site\r\n",
							"    ,dr.id as lms_delayreason_id\r\n",
							"    ,dr.description as lms_delayreason_description\r\n",
							"    ,mfr.id as lms_mobilefeedbackreason_id\r\n",
							"    ,mfr.description as lms_mobilefeedbackreason_description\r\n",
							"    ,rd.id as lms_reasondetail_id\r\n",
							"    ,rd.description as lms_reasondetail_description\r\n",
							"    ,rd.db_reasongroupid as lms_reasondetail_reasongroupid\r\n",
							"    ,rg.id as lms_reasongroup_id\r\n",
							"    ,rg.description as lms_reasongroup_description\r\n",
							"    ,ds.id as lms_deliverystatus_id\r\n",
							"    ,ds.description as lms_deliverystatus_description\r\n",
							"    ,pbw.lms_parcelbywaybill_waybillid as lms_parcelbywaybill_waybillid\r\n",
							"    ,pbw.lms_parcelbywaybill_aggweight as lms_parcelbywaybill_aggweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggchargeweight as lms_parcelbywaybill_aggchargeweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggvolweight as lms_parcelbywaybill_aggvolweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggvolumiserweight as lms_parcelbywaybill_aggvolumiserweight\r\n",
							"    ,pbw.lms_parcelbywaybill_noparcels as lms_parcelbywaybill_noparcels\r\n",
							"    ,d.id as orv_delivery_id\r\n",
							"    ,d.did as orv_delivery_dispatchid\r\n",
							"    ,d.waybillid as orv_delivery_waybillid\r\n",
							"    ,d.address as orv_delivery_address\r\n",
							"    ,d.town as orv_delivery_town\r\n",
							"    ,d.province as orv_delivery_province\r\n",
							"    ,d.country as orv_delivery_country\r\n",
							"    ,d.lat as orv_delivery_lat\r\n",
							"    ,d.lng as orv_delivery_lng\r\n",
							"    ,d.placeid as orv_delivery_placeid\r\n",
							"    ,d.what3words as orv_delivery_what3words\r\n",
							"    ,d.zipcode as orv_delivery_zipcode\r\n",
							"    ,to_timestamp(d.eta) as orv_delivery_eta\r\n",
							"    ,to_timestamp(d.actualeta) as orv_delivery_actualeta\r\n",
							"    ,to_timestamp(d.deliverydate) as orv_delivery_deliverydate\r\n",
							"    ,to_timestamp(d.deliverby) as orv_delivery_deliverby\r\n",
							"    ,d.deliveryorder as orv_delivery_deliveryorder\r\n",
							"    ,to_timestamp(d.tsgeofenceenter) as orv_delivery_tsgeofenceenter\r\n",
							"    ,to_timestamp(d.tsscanningstart) as orv_delivery_tsscanningstart\r\n",
							"    ,to_timestamp(d.tsscanningstop) as orv_delivery_tsscanningstop\r\n",
							"    ,to_timestamp(d.tspodsignature) as orv_delivery_tspodsignature\r\n",
							"    ,d.aid as orv_delivery_aid\r\n",
							"    ,d.numprcls as orv_delivery_numprcls\r\n",
							"    ,d.geocodingstatus as orv_delivery_geocodingstatus\r\n",
							"    ,to_timestamp(d.skipdate) as orv_delivery_skipdate\r\n",
							"    ,d.skipreason as orv_delivery_skipreason\r\n",
							"    ,d.status as orv_delivery_status\r\n",
							"    ,d.partialmatch as orv_delivery_partialmatch\r\n",
							"    ,d.approximated as orv_delivery_approximated\r\n",
							"    ,d.lmsorder as orv_delivery_lmsorder\r\n",
							"    ,d.optimizedorder as orv_delivery_optimizedorder\r\n",
							"    ,d.seal as orv_delivery_seal\r\n",
							"    ,d.customerinvoice as orv_delivery_customerinvoice\r\n",
							"    ,d.customerdn as orv_delivery_customerdn\r\n",
							"    ,d.grv as orv_delivery_grv\r\n",
							"    ,d.chepslip as orv_delivery_chepslip\r\n",
							"    ,d.cleandelivery as orv_delivery_cleandelivery\r\n",
							"    ,d.trackingcode as orv_delivery_trackingcode\r\n",
							"    ,d.mode as orv_delivery_mode\r\n",
							"    ,d.customorder as orv_delivery_customorder\r\n",
							"    ,d.verified as orv_delivery_verified\r\n",
							"    ,d.altered as orv_delivery_altered\r\n",
							"    ,d.orderid as orv_delivery_orderid\r\n",
							"    ,d.mergeid as orv_delivery_mergeid\r\n",
							"    ,d.orderref as orv_delivery_orderref\r\n",
							"    ,d.drivernote as orv_delivery_drivernote\r\n",
							"    ,d.timedefinite as orv_delivery_timedefinite\r\n",
							"    ,d.orvcode as orv_delivery_orvcode\r\n",
							"    ,d.vaid as orv_delivery_vaid\r\n",
							"    ,to_timestamp(d.delegatedate) as orv_delivery_delegatedate\r\n",
							"    ,d.delegatemode as orv_delivery_delegatemode\r\n",
							"    ,d.debriefmode as orv_delivery_debriefmode\r\n",
							"    ,d.debriefed as orv_delivery_debriefed\r\n",
							"    ,to_timestamp(d.insdate) as orv_delivery_insdate\r\n",
							"    ,d.reviseddebrief as orv_delivery_reviseddebrief\r\n",
							"    ,d.lmsdebriefed as orv_delivery_lmsdebriefed\r\n",
							"    ,to_timestamp(d.uncanceldate) as orv_delivery_uncanceldate\r\n",
							"    ,to_timestamp(d.podlaterdate) as orv_delivery_podlaterdate\r\n",
							"    ,to_timestamp(d.podmanualdate) as orv_delivery_podmanualdate\r\n",
							"    ,d.manualdebriefreason as orv_delivery_manualdebriefreason\r\n",
							"    ,d.submanualdebriefreason as orv_delivery_submanualdebriefreason\r\n",
							"    ,d.outofgeofencereason as orv_delivery_outofgeofencereason\r\n",
							"    ,to_timestamp(d.tsentergeofenceapp) as orv_delivery_tsentergeofenceapp\r\n",
							"    ,to_timestamp(d.tsexitgeofenceapp) as orv_delivery_tsexitgeofenceapp\r\n",
							"    ,d.comebacklater as orv_delivery_comebacklater\r\n",
							"    ,d.uncancelusername as orv_delivery_uncancelusername\r\n",
							"    ,d.cref as orv_delivery_cref\r\n",
							"    ,d.division as orv_delivery_division\r\n",
							"    ,d.descriptionofgoods as orv_delivery_descriptionofgoods\r\n",
							"    ,d.skiplng as orv_delivery_skiplng\r\n",
							"    ,d.skiplat as orv_delivery_skiplat\r\n",
							"    ,d.courierid as orv_delivery_courierid\r\n",
							"    ,d.posreason as orv_delivery_posreason\r\n",
							"    ,to_timestamp(d.moddate) as orv_delivery_moddate\r\n",
							"    ,d.mallid as orv_delivery_mallid\r\n",
							"    ,d.mallgid as orv_delivery_mallgid\r\n",
							"    ,d.lmsidskipreason as orv_delivery_lmsidskipreason\r\n",
							"    ,d.deleteforimport as orv_delivery_deleteforimport\r\n",
							"    ,d.podoutofgeofence as orv_delivery_podoutofgeofence\r\n",
							"    ,d.originalcustomerid as orv_delivery_originalcustomerid\r\n",
							"    ,c.id as orv_originalcustomer_id\r\n",
							"    ,c.name as orv_originalcustomer_name\r\n",
							"    ,m.id as orv_mall_id\r\n",
							"    ,m.mallname as orv_mall_mallname\r\n",
							"    ,m.branchname as orv_mall_branchname\r\n",
							"    ,m.gpretailer as orv_mall_gpretailer\r\n",
							"    ,m.highvoldelivery as orv_mall_highvoldelivery\r\n",
							"    ,m.stripmall as orv_mall_stripmall\r\n",
							"    ,m.standalonestore as orv_mall_standalonestore\r\n",
							"    ,m.streetsidestore as orv_mall_streetsidestore\r\n",
							"    ,m.dedicatedrouted as orv_mall_dedicatedrouted\r\n",
							"    ,to_timestamp(m.insdate) as orv_mall_insdate\r\n",
							"    ,m.address as orv_mall_address\r\n",
							"    ,m.deleted as orv_mall_deleted\r\n",
							"    ,m.lat as orv_mall_lat\r\n",
							"    ,m.lng as orv_mall_lng\r\n",
							"\r\n",
							"FROM dbowaybill w\r\n",
							"LEFT JOIN dbocustomer bc on bc.id = w.billcust\r\n",
							"LEFT JOIN dbocustomer pc on pc.id = w.pickupcustid\r\n",
							"LEFT JOIN dbocustomer dc on dc.id = w.delivercustid\r\n",
							"LEFT JOIN dbousers u on u.id = w.userid\r\n",
							"LEFT JOIN dbousers pu on pu.id = w.poduserid\r\n",
							"LEFT JOIN dbousers su on su.id = w.scanuserid\r\n",
							"LEFT JOIN dbodb_delayreason dr on dr.id = w.delayreasonid\r\n",
							"LEFT JOIN dbodb_reasondetail rd on rd.id = w.notdebrievreasonid\r\n",
							"LEFT JOIN dbodb_reasongroup rg on rg.id = w.reasongroupid\r\n",
							"LEFT JOIN dbodb_deliverystatus ds on ds.id = w.deliverystatid\r\n",
							"LEFT JOIN dbodb_mobilefeedbackreason mfr on mfr.id = w.mobileissuereportedid\r\n",
							"LEFT JOIN publicdelivery d on d.waybillid = w.id AND d.mode = 'deliver'\r\n",
							"LEFT JOIN publicmall m on m.id = d.mallid\r\n",
							"LEFT JOIN publiccustomer c on c.id = d.originalcustomerid\r\n",
							"LEFT JOIN sstparcelbywaybill pbw on pbw.lms_parcelbywaybill_waybillid = w.id\r\n",
							"\"\"\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstwaybill.createOrReplaceTempView(\"sstwaybill\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#sstwaybill.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstwaybill.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTWaybilsPerParcel')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "270e42bb-d729-40cc-928f-9ef6835d7a76"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"##Create DataFrame for the sstparcelunion LMS Table\r\n",
							"#sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"#sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"#\r\n",
							"##Create DataFrame for the ssttrackunion LMS Table\r\n",
							"#ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"#ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbowaybillsperparcel LMS Table\r\n",
							"#dbowaybillsperparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybillsperparcel.parquet', format='parquet')\r\n",
							"#dbowaybillsperparcel.createOrReplaceTempView(\"dbowaybillsperparcel\")\r\n",
							"#\r\n",
							"##Create DataFrame for the dbowaybill LMS Table\r\n",
							"#dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"#dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"#"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstwaybillsperparcelunion_tmp1\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    p.id as parcelid,\r\n",
							"    p.waybillid\r\n",
							"FROM SSTParcelUnion p\r\n",
							"UNION ALL\r\n",
							"SELECT \r\n",
							"    w.parcelid,\r\n",
							"    w.waybillid\r\n",
							"FROM dbowaybillsperparcel w"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstwaybillsperparcel\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"    parcelid as lms_waybillsperparcel_parcelid,\r\n",
							"    waybillid as lms_waybillsperparcel_waybillid,\r\n",
							"    b.loadid as lms_waybillsperparcel_loadid\r\n",
							"FROM sstwaybillsperparcelunion_tmp1 a\r\n",
							"LEFT JOIN dbowaybill b on b.id = a.waybillid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstwaybillsperparcel = spark.sql(\"SELECT * FROM sstwaybillsperparcel\")"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstwaybillsperparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstwaybillsperparcel.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 15
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SST_RunOrder')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d522940c-0438-404d-93f4-2bf6c80833a2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dboconsignment_archive LMS Table\r\n",
							"dboconsignment_archive = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboconsignment_archive.parquet', format='parquet')\r\n",
							"dboconsignment_archive.createOrReplaceTempView(\"dboconsignment_archive\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboconsignment LMS Table\r\n",
							"dboconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboconsignment.parquet', format='parquet')\r\n",
							"dboconsignment.createOrReplaceTempView(\"dboconsignment\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/LMS Union/SSTConsignmentUnion"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstconsignmentunion.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dboparcel_archive LMS Table\r\n",
							"dboparcel_archive = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparcel_archive.parquet', format='parquet')\r\n",
							"dboparcel_archive.createOrReplaceTempView(\"dboparcel_archive\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboparcel LMS Table\r\n",
							"dboparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparcel.parquet', format='parquet')\r\n",
							"dboparcel.createOrReplaceTempView(\"dboparcel\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/LMS Union/SSTParcelUnion"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelunion.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dbotrack_archive LMS Table\r\n",
							"dbotrack_archive = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbotrack_archive.parquet', format='parquet')\r\n",
							"dbotrack_archive.createOrReplaceTempView(\"dbotrack_archive\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbotrack LMS Table\r\n",
							"dbotrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbotrack.parquet', format='parquet')\r\n",
							"dbotrack.createOrReplaceTempView(\"dbotrack\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/LMS Union/SSTTrackUnion"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrackunion.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dbocollect LMS Table\r\n",
							"dbocollect = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocollect.parquet', format='parquet')\r\n",
							"dbocollect.createOrReplaceTempView(\"dbocollect\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbocustomer LMS Table\r\n",
							"dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbousers LMS Table\r\n",
							"dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolocation LMS Table\r\n",
							"dbolocation= spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_collectstatus LMS Table\r\n",
							"dbodb_collectstatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_collectstatus.parquet', format='parquet')\r\n",
							"dbodb_collectstatus.createOrReplaceTempView(\"dbodb_collectstatus\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdraftcollection ORV Table\r\n",
							"publicdraftcollection = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdraftcollection.parquet', format='parquet')\r\n",
							"publicdraftcollection.createOrReplaceTempView(\"publicdraftcollection\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdelivery ORV Table\r\n",
							"publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicmall ORV Table\r\n",
							"publicmall = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicmall.parquet', format='parquet')\r\n",
							"publicmall.createOrReplaceTempView(\"publicmall\")\r\n",
							"\r\n",
							"#Create DataFrame for the publiccustomer ORV Table\r\n",
							"publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiccustomer.parquet', format='parquet')\r\n",
							"publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV/SSTCollect"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstcollect.write.parquet('abfss://synapse@' + StorageAccountWrite + 'prod.dfs.core.windows.net/Semi Structured Data/OPS/sstcollect.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dbotrack LMS Table\r\n",
							"dbotrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"dbotrack.createOrReplaceTempView(\"dbotrack\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboparcel LMS Table\r\n",
							"dboparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"dboparcel.createOrReplaceTempView(\"dboparcel\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV/SSTTrack"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrack.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrack.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the sstparcelunion LMS Table\r\n",
							"sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the ssttrack LMS Table\r\n",
							"ssttrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrack.parquet', format='parquet')\r\n",
							"ssttrack.createOrReplaceTempView(\"ssttrack\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/LMS Aggr/SSTAggrParcelByX"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbyorder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyorder.parquet', mode = \"overwrite\")\r\n",
							"sstparcelbywaybill.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbywaybill.parquet', mode = \"overwrite\")\r\n",
							"sstparcelbyconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyconsignment.parquet', mode = \"overwrite\")\r\n",
							"sstparcelbyload.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyload.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dboconsignment LMS Table\r\n",
							"dboconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"dboconsignment.createOrReplaceTempView(\"dboconsignment\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelbyconsignment LMS Table\r\n",
							"sstparcelbyconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyconsignment.parquet', format='parquet')\r\n",
							"sstparcelbyconsignment.createOrReplaceTempView(\"sstparcelbyconsignment\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbobill_consignmentr LMS Table\r\n",
							"dbobill_consignmentr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_consignmentr.parquet', format='parquet')\r\n",
							"dbobill_consignmentr.createOrReplaceTempView(\"dbobill_consignmentr\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbobill_delivertype LMS Table\r\n",
							"dbobill_delivertype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_delivertype.parquet', format='parquet')\r\n",
							"dbobill_delivertype.createOrReplaceTempView(\"dbobill_delivertype\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbobill_zone LMS Table\r\n",
							"dbobill_zone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zone.parquet', format='parquet')\r\n",
							"dbobill_zone.createOrReplaceTempView(\"dbobill_zone\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbobill_servicetype LMS Table\r\n",
							"dbobill_servicetype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_servicetype.parquet', format='parquet')\r\n",
							"dbobill_servicetype.createOrReplaceTempView(\"dbobill_servicetype\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbobill_zoneroute LMS Table\r\n",
							"dbobill_zoneroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zoneroute.parquet', format='parquet')\r\n",
							"dbobill_zoneroute.createOrReplaceTempView(\"dbobill_zoneroute\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbobill_billtypesr LMS Table\r\n",
							"dbobill_billtypesr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_billtypesr.parquet', format='parquet')\r\n",
							"dbobill_billtypesr.createOrReplaceTempView(\"dbobill_billtypesr\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbobill_routerate LMS Table\r\n",
							"dbobill_routerate = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_routerate.parquet', format='parquet')\r\n",
							"dbobill_routerate.createOrReplaceTempView(\"dbobill_routerate\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbobroutemaster LMS Table\r\n",
							"dbobroutemaster = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobroutemaster.parquet', format='parquet')\r\n",
							"dbobroutemaster.createOrReplaceTempView(\"dbobroutemaster\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV/SSTConsignment"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignment.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dboloads LMS Table\r\n",
							"dboloads = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboloads.parquet', format='parquet')\r\n",
							"dboloads.createOrReplaceTempView(\"dboloads\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelbyload LMS Table\r\n",
							"sstparcelbyload = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyload.parquet', format='parquet')\r\n",
							"sstparcelbyload.createOrReplaceTempView(\"sstparcelbyload\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbosroute LMS Table\r\n",
							"dbosroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbosroute.parquet', format='parquet')\r\n",
							"dbosroute.createOrReplaceTempView(\"dbosroute\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodriver LMS Table\r\n",
							"dbodriver = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodriver.parquet', format='parquet')\r\n",
							"dbodriver.createOrReplaceTempView(\"dbodriver\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehicle LMS Table\r\n",
							"dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehiclebasic LMS Table\r\n",
							"dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV/SSTLoadChild"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstloadchild.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadchild.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the sstloadchild LMS Table\r\n",
							"sstloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadchild.parquet', format='parquet')\r\n",
							"sstloadchild.createOrReplaceTempView(\"sstloadchild\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdispatch ORV Table\r\n",
							"publicdispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
							"publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicvehicle ORV Table\r\n",
							"publicvehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicvehicle.parquet', format='parquet')\r\n",
							"publicvehicle.createOrReplaceTempView(\"publicvehicle\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicorvuser ORV Table\r\n",
							"publicorvuser = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicorvuser.parquet', format='parquet')\r\n",
							"publicorvuser.createOrReplaceTempView(\"publicorvuser\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV/SSTLoadParent"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstloadparent.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadparent.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dboorder LMS Table\r\n",
							"dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelbyorder LMS Table\r\n",
							"sstparcelbyorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyorder.parquet', format='parquet')\r\n",
							"sstparcelbyorder.createOrReplaceTempView(\"sstparcelbyorder\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV/SSTOrder"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstorder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstorder.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dbowaybill LMS Table\r\n",
							"dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboparceldetail LMS Table\r\n",
							"dboparceldetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparceldetail.parquet', format='parquet')\r\n",
							"dboparceldetail.createOrReplaceTempView(\"dboparceldetail\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbobill_parceltype LMS Table\r\n",
							"dbobill_parceltype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_parceltype.parquet', format='parquet')\r\n",
							"dbobill_parceltype.createOrReplaceTempView(\"dbobill_parceltype\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodstatus LMS Table\r\n",
							"dbodstatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodstatus.parquet', format='parquet')\r\n",
							"dbodstatus.createOrReplaceTempView(\"dbodstatus\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovolumiser LMS Table\r\n",
							"dbovolumiser = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovolumiser.parquet', format='parquet')\r\n",
							"dbovolumiser.createOrReplaceTempView(\"dbovolumiser\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicparcel ORV Table\r\n",
							"publicparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicparcel.parquet', format='parquet')\r\n",
							"publicparcel.createOrReplaceTempView(\"publicparcel\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV/SSTParcel"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcel.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dbodb_delayreason LMS Table\r\n",
							"dbodb_delayreason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_delayreason.parquet', format='parquet')\r\n",
							"dbodb_delayreason.createOrReplaceTempView(\"dbodb_delayreason\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_reasondetail LMS Table\r\n",
							"dbodb_reasondetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_reasondetail.parquet', format='parquet')\r\n",
							"dbodb_reasondetail.createOrReplaceTempView(\"dbodb_reasondetail\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_reasongroup LMS Table\r\n",
							"dbodb_reasongroup = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_reasongroup.parquet', format='parquet')\r\n",
							"dbodb_reasongroup.createOrReplaceTempView(\"dbodb_reasongroup\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_deliverystatus LMS Table\r\n",
							"dbodb_deliverystatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_deliverystatus.parquet', format='parquet')\r\n",
							"dbodb_deliverystatus.createOrReplaceTempView(\"dbodb_deliverystatus\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_mobilefeedbackreason LMS Table\r\n",
							"dbodb_mobilefeedbackreason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_mobilefeedbackreason.parquet', format='parquet')\r\n",
							"dbodb_mobilefeedbackreason.createOrReplaceTempView(\"dbodb_mobilefeedbackreason\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelbywaybill LMS Table\r\n",
							"sstparcelbywaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbywaybill.parquet', format='parquet')\r\n",
							"sstparcelbywaybill.createOrReplaceTempView(\"sstparcelbywaybill\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV/SSTWaybill"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstwaybill.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstwaybill.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Create DataFrame for the ssttrackunion LMS Table\r\n",
							"ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbowaybillsperparcel LMS Table\r\n",
							"dbowaybillsperparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybillsperparcel.parquet', format='parquet')\r\n",
							"dbowaybillsperparcel.createOrReplaceTempView(\"dbowaybillsperparcel\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/LMS + ORV/SSTWaybillsPerParcel"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstwaybillsperparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstwaybillsperparcel.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the publicnonbooking TMS Table\r\n",
							"publicnonbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicnonbooking.parquet', format='parquet')\r\n",
							"publicnonbooking.createOrReplaceTempView(\"publicnonbooking\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicbooking TMS Table\r\n",
							"publicbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicbooking.parquet', format='parquet')\r\n",
							"publicbooking.createOrReplaceTempView(\"publicbooking\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicroute TMS Table\r\n",
							"publicroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicroute.parquet', format='parquet')\r\n",
							"publicroute.createOrReplaceTempView(\"publicroute\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicthirdparty TMS Table\r\n",
							"publicthirdparty = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicthirdparty.parquet', format='parquet')\r\n",
							"publicthirdparty.createOrReplaceTempView(\"publicthirdparty\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicfinancedata TMS Table\r\n",
							"publicfinancedata = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfinancedata.parquet', format='parquet')\r\n",
							"publicfinancedata.createOrReplaceTempView(\"publicfinancedata\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/TMS + ORV/SSTBooking"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstbooking.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstbooking.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the publicinstruction TMS Table\r\n",
							"publicinstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinstruction.parquet', format='parquet')\r\n",
							"publicinstruction.createOrReplaceTempView(\"publicinstruction\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicaddress TMS Table\r\n",
							"publicaddress = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicaddress.parquet', format='parquet')\r\n",
							"publicaddress.createOrReplaceTempView(\"publicaddress\")\r\n",
							"\r\n",
							"#Create DataFrame for the publiclhdelivery ORV Table\r\n",
							"publiclhdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiclhdelivery.parquet', format='parquet')\r\n",
							"publiclhdelivery.createOrReplaceTempView(\"publiclhdelivery\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/TMS + ORV/SSTInstruction"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstinstruction.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstinstruction.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the publictrip TMS Table\r\n",
							"publictrip = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publictrip.parquet', format='parquet')\r\n",
							"publictrip.createOrReplaceTempView(\"publictrip\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdriverpayitem TMS Table\r\n",
							"publicdriverpayitem = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpayitem.parquet', format='parquet')\r\n",
							"publicdriverpayitem.createOrReplaceTempView(\"publicdriverpayitem\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/TMS + ORV/SSTTrip"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrip.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Semi Structured Data/OPS/ssttrip.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STBooking')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8d38746d-d654-4340-81fa-cfb9dfb37747"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccountRead + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the publicbooking TMS Table\r\n",
							"publicbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicbooking.parquet', format='parquet')\r\n",
							"publicbooking.createOrReplaceTempView(\"publicbooking\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicnonbooking TMS Table\r\n",
							"publicnonbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicnonbooking.parquet', format='parquet')\r\n",
							"publicnonbooking.createOrReplaceTempView(\"publicnonbooking\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolhbooking TMS Table\r\n",
							"dboLHBooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_booking.parquet', format='parquet')\r\n",
							"dboLHBooking.createOrReplaceTempView(\"dboLHBooking\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolhroutes TMS Table\r\n",
							"dbolhroutes = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_routes.parquet', format='parquet')\r\n",
							"dbolhroutes.createOrReplaceTempView(\"dbolhroutes\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolhbookingspertrip TMS Table\r\n",
							"dbolhbookingspertrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_bookingspertrip.parquet', format='parquet')\r\n",
							"dbolhbookingspertrip.createOrReplaceTempView(\"dbolhbookingspertrip\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stbooking_tms\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    b.id as tms_booking_id\r\n",
							"    ,b.allocatedby as tms_booking_allocatedby\r\n",
							"    ,to_timestamp(b.allocateddate) as tms_booking_allocateddate\r\n",
							"    ,to_timestamp(b.assetreleasedate) as tms_booking_assetreleasedate\r\n",
							"    ,b.billingmethod as tms_booking_billingmethod\r\n",
							"    ,b.billingstatus as tms_booking_billingstatus\r\n",
							"    ,null as tms_booking_convertedbookingid\r\n",
							"    ,b.cargoweight as tms_booking_cargoweight\r\n",
							"    ,b.customerid as tms_booking_customerid\r\n",
							"    ,b.childcustomerid as tms_booking_childcustomerid\r\n",
							"    ,b.createdby as tms_booking_createdby\r\n",
							"    ,b.createdbyname as tms_booking_createdbyname\r\n",
							"    ,b.cref1 as tms_booking_cref1\r\n",
							"    ,b.cref2 as tms_booking_cref2\r\n",
							"    ,b.cubicvolume as tms_booking_cubicvolume\r\n",
							"    ,b.customeragreedrate as tms_booking_customeragreedrate\r\n",
							"    ,b.customerrate as tms_booking_customerrate\r\n",
							"    ,to_timestamp(b.deliverydate) as tms_booking_deliverydate\r\n",
							"    ,b.directbooking as tms_booking_directbooking\r\n",
							"    ,to_timestamp(b.dispatchdate) as tms_booking_dispatchdate\r\n",
							"    ,to_timestamp(b.docdate) as tms_booking_docdate\r\n",
							"    ,b.docstatus as tms_booking_docstatus\r\n",
							"    ,b.emailrequester as tms_booking_emailrequester\r\n",
							"    ,b.frombranch as tms_booking_frombranch\r\n",
							"    ,b.frombranchid as tms_booking_frombranchid\r\n",
							"    ,to_timestamp(b.insdate) as tms_booking_insdate\r\n",
							"    ,to_timestamp(b.invoiceddate) as tms_booking_invoiceddate\r\n",
							"    ,b.invoiceid as tms_booking_invoiceid\r\n",
							"    ,b.legacyid as tms_booking_legacyid\r\n",
							"    ,b.local as tms_booking_local\r\n",
							"    ,b.manifests as tms_booking_manifests\r\n",
							"    ,to_timestamp(b.moddate) as tms_booking_moddate\r\n",
							"    ,b.note as tms_booking_note\r\n",
							"    ,b.opsrouteid as tms_booking_opsrouteid\r\n",
							"    ,b.opsroutename as tms_booking_opsroutename\r\n",
							"    ,b.originalpod as tms_booking_originalpod\r\n",
							"    ,to_timestamp(b.pickupdate) as tms_booking_pickupdate\r\n",
							"    ,b.ponumber as tms_booking_ponumber\r\n",
							"    ,b.routeid as tms_booking_routeid\r\n",
							"    ,b.routename as tms_booking_routename\r\n",
							"    ,b.status as tms_booking_status\r\n",
							"    ,b.thirdpartyagreedrate as tms_booking_thirdpartyagreedrate\r\n",
							"    ,b.thirdpartydriverflag as tms_booking_thirdpartydriverflag\r\n",
							"    ,b.thirdpartyid as tms_booking_thirdpartyid\r\n",
							"    ,b.thirdpartyrate as tms_booking_thirdpartyrate\r\n",
							"    ,b.thirdpartyreason as tms_booking_thirdpartyreason\r\n",
							"    ,b.thirdpartytrailerflag as tms_booking_thirdpartytrailerflag\r\n",
							"    ,b.thirdpartyvehicleflag as tms_booking_thirdpartyvehicleflag\r\n",
							"    ,b.tobranch as tms_booking_tobranch\r\n",
							"    ,b.tobranchid as tms_booking_tobranchid\r\n",
							"    ,b.trailersize as tms_booking_trailersize\r\n",
							"    ,b.trailertype as tms_booking_trailertype\r\n",
							"    ,b.transporter as tms_booking_transporter\r\n",
							"    ,b.tripid as tms_booking_tripid\r\n",
							"    ,null as tms_booking_reason\r\n",
							"\r\n",
							"FROM publicbooking b\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbooking_tms = spark.sql(\"SELECT * FROM stbooking_tms\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbooking_tms.createOrReplaceTempView(\"stbooking_tms\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stnonbooking_tms\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    b.id as tms_booking_id\r\n",
							"    ,null as tms_booking_allocatedby\r\n",
							"    ,to_timestamp(b.insdate) as tms_booking_allocateddate\r\n",
							"    ,to_timestamp(b.assetreleasedate) as tms_booking_assetreleasedate\r\n",
							"    ,null as tms_booking_billingmethod\r\n",
							"    ,b.billingstatus as tms_booking_billingstatus\r\n",
							"    ,b.convertedbookingid as tms_booking_convertedbookingid\r\n",
							"    ,null as tms_booking_cargoweight \r\n",
							"    ,null as tms_booking_customerid\r\n",
							"    ,null as tms_booking_childcustomerid\r\n",
							"    ,b.insby as tms_booking_insby\r\n",
							"    ,b.insbyname as tms_booking_insbyname\r\n",
							"    ,null as tms_booking_cref1\r\n",
							"    ,null as tms_booking_cref2\r\n",
							"    ,null as tms_booking_cubicvolume\r\n",
							"    ,null as tms_booking_customeragreedrate\r\n",
							"    ,null as tms_booking_customerrate\r\n",
							"    ,to_timestamp(b.deliverydate) as tms_booking_deliverydate\r\n",
							"    ,null as tms_booking_directbooking\r\n",
							"    ,to_timestamp(b.dispatchdate) as tms_booking_dispatchdate\r\n",
							"    ,null as tms_booking_docdate\r\n",
							"    ,null as tms_booking_docstatus\r\n",
							"    ,null as tms_booking_emailrequester\r\n",
							"    ,b.frombranch as tms_booking_frombranch\r\n",
							"    ,b.frombranchid as tms_booking_frombranchid\r\n",
							"    ,to_timestamp(b.insdate) as tms_booking_insdate\r\n",
							"    ,null as tms_booking_invoiceddate\r\n",
							"    ,null as tms_booking_invoiceid\r\n",
							"    ,b.legacyid as tms_booking_legacyid\r\n",
							"    ,b.local as tms_booking_local\r\n",
							"    ,null as tms_booking_manifests\r\n",
							"    ,to_timestamp(b.moddate) as tms_booking_moddate\r\n",
							"    ,b.note as tms_booking_note\r\n",
							"    ,b.routeid as tms_booking_opsrouteid\r\n",
							"    ,b.routename as tms_booking_opsroutename\r\n",
							"    ,null as tms_booking_originalpod\r\n",
							"    ,null as tms_booking_pickupdate\r\n",
							"    ,null as tms_booking_ponumber\r\n",
							"    ,null as tms_booking_routeid\r\n",
							"    ,null as tms_booking_routename\r\n",
							"    ,b.status as tms_booking_status\r\n",
							"    ,null as tms_booking_thirdpartyagreedrate\r\n",
							"    ,null as tms_booking_thirdpartydriverflag\r\n",
							"    ,null as tms_booking_thirdpartyid\r\n",
							"    ,null as tms_booking_thirdpartyrate\r\n",
							"    ,null as tms_booking_thirdpartyreason\r\n",
							"    ,null as tms_booking_thirdpartytrailerflag\r\n",
							"    ,null as tms_booking_thirdpartyvehicleflag\r\n",
							"    ,null as tms_booking_tobranch\r\n",
							"    ,null as tms_booking_tobranchid\r\n",
							"    ,b.trailersize as tms_booking_trailersize\r\n",
							"    ,null as tms_booking_trailertype\r\n",
							"    ,null as tms_booking_transporter\r\n",
							"    ,b.tripid as tms_booking_tripid\r\n",
							"    ,b.reason as tms_booking_reason\r\n",
							"\r\n",
							"\r\n",
							"FROM publicnonbooking b\r\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stnonbooking_tms = spark.sql(\"SELECT * FROM stnonbooking_tms\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stnonbooking_tms.createOrReplaceTempView(\"stnonbooking_tms\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stbooking_lms\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    b.id as tms_booking_id\r\n",
							"    ,b.allocationuserid as tms_booking_allocatedby\r\n",
							"    ,to_timestamp(b.AllocationDate) as tms_booking_allocateddate\r\n",
							"    ,null as tms_booking_assetreleasedate\r\n",
							"    ,null as tms_booking_billingmethod\r\n",
							"    ,null as tms_booking_billingstatus\r\n",
							"    ,null as tms_booking_convertedbookingid\r\n",
							"    ,b.cargoweight as tms_booking_cargoweight\r\n",
							"    ,b.primaryaccountid as tms_booking_customerid\r\n",
							"    ,b.secondaryaccountid as tms_booking_childcustomerid\r\n",
							"    ,null as tms_booking_insby\r\n",
							"    ,b.userid as tms_booking_insbyname\r\n",
							"    ,b.customerreference1 as tms_booking_cref1\r\n",
							"    ,b.customerreference2 as tms_booking_cref2\r\n",
							"    ,b.cubicvolume as tms_booking_cubicvolume\r\n",
							"    ,null as tms_booking_customeragreedrate\r\n",
							"    ,null as tms_booking_customerrate\r\n",
							"    ,b.deliverydate as tms_booking_deliverydate\r\n",
							"    ,b.isdirect as tms_booking_directbooking\r\n",
							"    ,b.dispatchdate as tms_booking_dispatchdate\r\n",
							"    ,null as tms_booking_docdate\r\n",
							"    ,null as tms_booking_docstatus\r\n",
							"    ,null as tms_booking_emailrequester\r\n",
							"    ,null as tms_booking_frombranch\r\n",
							"    ,null as tms_booking_frombranchid\r\n",
							"    ,b.createddate as tms_booking_insdate\r\n",
							"    ,null as tms_booking_invoiceddate\r\n",
							"    ,null as tms_booking_invoiceid\r\n",
							"    ,null as tms_booking_legacyid\r\n",
							"    ,b.islocal as tms_booking_local\r\n",
							"    ,null as tms_booking_manifests\r\n",
							"    ,null as tms_booking_moddate\r\n",
							"    ,b.notes as tms_booking_note\r\n",
							"    ,b.routeid as tms_booking_opsrouteid\r\n",
							"    ,r.description as tms_booking_opsroutename\r\n",
							"    ,null as tms_booking_originalpod\r\n",
							"    -- ,b.orginalpodreceiveddate as tms_booking_originalpod\r\n",
							"    ,b.pickupdate as tms_booking_pickupdate\r\n",
							"    ,null as tms_booking_ponumber\r\n",
							"    ,null as tms_booking_routeid\r\n",
							"    ,null as tms_booking_routename\r\n",
							"    ,b.statusid as tms_booking_status\r\n",
							"    ,null as tms_booking_thirdpartyagreedrate\r\n",
							"    ,null as tms_booking_thirdpartydriverflag\r\n",
							"    ,b.3pl_accountid as tms_booking_thirdpartyid\r\n",
							"    ,null as tms_booking_thirdpartyrate\r\n",
							"    ,b.3pl_reason as tms_booking_thirdpartyreason\r\n",
							"    ,null as tms_booking_thirdpartytrailerflag\r\n",
							"    ,null as tms_booking_thirdpartyvehicleflag\r\n",
							"    ,null as tms_booking_tobranch\r\n",
							"    ,null as tms_booking_tobranchid\r\n",
							"    ,b.trailersizeid as tms_booking_trailersize\r\n",
							"    ,b.trailertypeid as tms_booking_trailertype\r\n",
							"    ,null as tms_booking_transporter\r\n",
							"    ,bpt.tripid as tms_booking_tripid\r\n",
							"    ,b.nonbookingreasonid as tms_booking_reason\r\n",
							"\r\n",
							"FROM dbolhbooking b\r\n",
							"LEFT JOIN dbolhroutes r on r.id = b.routeid\r\n",
							"LEFT JOIN dbolhbookingspertrip bpt on bpt.bookingid = b.id\r\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbooking_lms = spark.sql(\"SELECT * FROM stbooking_lms\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbooking_lms.createOrReplaceTempView(\"stbooking_lms\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbooking_tmp = stbooking_tms.unionByName(stnonbooking_tms, allowMissingColumns = True)\r\n",
							"stbooking_tmp.createOrReplaceTempView(\"stbooking_tmp\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbooking = stbooking_tmp.unionByName(stbooking_lms, allowMissingColumns = True)\r\n",
							"stbooking.createOrReplaceTempView(\"stbooking\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbooking.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stbooking.parquet', mode = \"overwrite\")\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 13
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STConsignment')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "56a54651-62d2-4507-a311-1c562c811bdc"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#create dataframe for the sstconsignemntunion lms table\r\n",
							"sstconsignemntunion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet/', format='parquet')\r\n",
							"sstconsignemntunion.createOrReplaceTempView(\"sstconsignemntunion\")\r\n",
							"\r\n",
							"#create dataframe for the sstparcelbyconsignment lms table\r\n",
							"sstparcelbyconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyconsignment.parquet', format='parquet')\r\n",
							"sstparcelbyconsignment.createOrReplaceTempView(\"sstparcelbyconsignment\")\r\n",
							"\r\n",
							"#create dataframe for the dbobill_consignmentr lms table\r\n",
							"dbobill_consignmentr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_consignmentr.parquet', format='parquet')\r\n",
							"dbobill_consignmentr.createOrReplaceTempView(\"dbobill_consignmentr\")\r\n",
							"\r\n",
							"#create dataframe for the sstparcelunion lms table\r\n",
							"sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"#create dataframe for the dbowaybill lms table\r\n",
							"dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stconsignment_tmp1\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    c.id as lms_consignment_id\r\n",
							"    ,c.CRef as lms_consignment_cref\r\n",
							"    ,c.CDate as lms_consignment_cdate\r\n",
							"    ,c.UserID as lms_consignment_userid\r\n",
							"    ,c.Appointment as lms_consignment_appointment\r\n",
							"    ,c.DeliverBy as lms_consignment_deliverby\r\n",
							"    ,c.DeliverByOriginal as lms_consignment_deliverbyoriginal\r\n",
							"    ,c.CustAccID as lms_consignment_custaccid\r\n",
							"    ,c.BillCust as lms_consignment_billcust\r\n",
							"    ,c.DeliverCustID as lms_consignment_delivercustid\r\n",
							"    ,c.InServiceReasonID as lms_consignment_inservicereasonid\r\n",
							"    ,c.InServiceComment as lms_consignment_inservicecomment\r\n",
							"    ,c.LastUpdate as lms_consignment_lastupdate\r\n",
							"    ,c.CollectID as lms_consignment_collectid\r\n",
							"    ,c.DeliverTypeID as lms_consignment_delivertypeid\r\n",
							"    ,c.BillTypeID as lms_consignment_billtypeid\r\n",
							"    ,c.LoadID as lms_consignment_loadid\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggchargeweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggvolweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggvolumiserweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_noparcels\r\n",
							"    ,bcr.id as lms_billconsignmentr_id\r\n",
							"    ,bcr.ConsignID as lms_billconsignmentr_consignid\r\n",
							"    ,bcr.UpdateDate as lms_billconsignmentr_updatedate\r\n",
							"    ,bcr.PickUpRouteID as lms_billconsignmentr_pickuprouteid\r\n",
							"    ,bcr.DeliverRouteID as lms_billconsignmentr_deliverrouteid\r\n",
							"    ,bcr.ChargeWeight as lms_billconsignmentr_chargeweight\r\n",
							"    ,bcr.NoOfParcels as lms_billconsignmentr_noofparcels\r\n",
							"    ,bcr.TripDistance as lms_billconsignmentr_tripdistance\r\n",
							"    ,bcr.ConsignmentValue as lms_billconsignmentr_consignmentvalue\r\n",
							"    ,bcr.BillCust as lms_billconsignmentr_billcust\r\n",
							"    ,bcr.RedFlag as lms_billconsignmentr_redflag\r\n",
							"    ,bcr.UpdInd as lms_billconsignmentr_updind\r\n",
							"    ,bcr.ServiceTypeID as lms_billconsignmentr_servicetypeid\r\n",
							"    ,bcr.RouteMissingInd as lms_billconsignmentr_routemissingind\r\n",
							"    ,bcr.ChargesCalcInd as lms_billconsignmentr_chargescalcind\r\n",
							"    ,bcr.CDate1 as lms_billconsignmentr_cdate1\r\n",
							"    ,bcr.InvalidPCode as lms_billconsignmentr_invalidpcode\r\n",
							"    ,bcr.ProgramNo as lms_billconsignmentr_programno\r\n",
							"    ,bcr.TotRate as lms_billconsignmentr_totrate\r\n",
							"    ,bcr.RouteCharge as lms_billconsignmentr_routecharge\r\n",
							"    ,bcr.MinWeight as lms_billconsignmentr_minweight\r\n",
							"    ,bcr.MinRate as lms_billconsignmentr_minrate\r\n",
							"    ,bcr.COrderNo as lms_billconsignmentr_corderno\r\n",
							"    ,bcr.CustRef as lms_billconsignmentr_custref\r\n",
							"    ,bcr.ManualUpdateFlag as lms_billconsignmentr_manualupdateflag\r\n",
							"    ,bcr.PrevBillCustID as lms_billconsignmentr_prevbillcustid\r\n",
							"    ,bcr.SpecDelVehicleID as lms_billconsignmentr_specdelvehicleid\r\n",
							"    ,bcr.SpecDelMissingRouteFlag as lms_billconsignmentr_specdelmissingrouteflag\r\n",
							"    ,bcr.OverBorderFlag as lms_billconsignmentr_overborderflag\r\n",
							"    ,bcr.SameDeliverID as lms_billconsignmentr_samedeliverid\r\n",
							"    ,bcr.CombineRouteCharge as lms_billconsignmentr_combineroutecharge\r\n",
							"    ,bcr.WaybillID as lms_billconsignmentr_waybillid\r\n",
							"    ,bcr.RouteLineCount as lms_billconsignmentr_routelinecount\r\n",
							"    ,bcr.SameDelCount as lms_billconsignmentr_samedelcount\r\n",
							"    ,bcr.AWeight as lms_billconsignmentr_aweight\r\n",
							"    ,bcr.VWeight as lms_billconsignmentr_vweight\r\n",
							"    ,bcr.CustRef3 as lms_billconsignmentr_custref3\r\n",
							"    ,bcr.Units as lms_billconsignmentr_units\r\n",
							"    ,bcr.TotSurcharges as lms_billconsignmentr_totsurcharges\r\n",
							"    ,bcr.NoOfPallets as lms_billconsignmentr_noofpallets\r\n",
							"    ,bcr.InvalidPUDel as lms_billconsignmentr_invalidpudel\r\n",
							"    ,bcr.SharikaFlag as lms_billconsignmentr_sharikaflag\r\n",
							"    ,bcr.SapID as lms_billconsignmentr_sapid\r\n",
							"    ,bcr.TotFuelSurcharge as lms_billconsignmentr_totfuelsurcharge\r\n",
							"    ,bcr.TotDocSurcharge as lms_billconsignmentr_totdocsurcharge\r\n",
							"    ,bcr.TotOtherSurcharge as lms_billconsignmentr_totothersurcharge\r\n",
							"    ,bcr.SpecDel as lms_billconsignmentr_specdel\r\n",
							"    ,bcr.QuoteFlag as lms_billconsignmentr_quoteflag\r\n",
							"    ,bcr.BillPeriod as lms_billconsignmentr_billperiod\r\n",
							"    ,bcr.BillWeekR as lms_billconsignmentr_billweekr\r\n",
							"    ,bcr.BillPeriodFlag as lms_billconsignmentr_billperiodflag\r\n",
							"    ,bcr.SurhargeFlag as lms_billconsignmentr_surhargeflag\r\n",
							"    ,bcr.RecalcFlag as lms_billconsignmentr_recalcflag\r\n",
							"    ,bcr.QuoteMissingFlag as lms_billconsignmentr_quotemissingflag\r\n",
							"    ,bcr.DeliverTypeID as lms_billconsignmentr_delivertypeid\r\n",
							"    ,bcr.TotCovidSurcharge as lms_billconsignmentr_totcovidsurcharge\r\n",
							"\r\n",
							"FROM\r\n",
							"sstconsignemntunion c\r\n",
							"LEFT JOIN sstparcelbyconsignment pbc on c.id= pbc.lms_parcelbyconsignment_consignid\r\n",
							"LEFT JOIN dbobill_consignmentr bcr on c.id= bcr.consignid\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stconsignment_tmp2\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"\r\n",
							"p.consignid,\r\n",
							"max(w.poddate) as lms_consignment_maxpoddate\r\n",
							"\r\n",
							"FROM  sstparcelunion p\r\n",
							"LEFT JOIN dbowaybill w on w.id = p.waybillid\r\n",
							"WHERE p.consignid is not null\r\n",
							"GROUP BY p.consignid"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stconsignment\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    c.*\r\n",
							"    ,c2.lms_consignment_maxpoddate\r\n",
							"    ,CASE \r\n",
							"\t    WHEN (coalesce(c2.lms_consignment_maxpoddate,CURRENT_TIMESTAMP)) <= (date(c.lms_consignment_deliverby) + interval '86399 seconds') THEN 1\r\n",
							"\t    ELSE 0\r\n",
							"    END lms_consignment_inserviceflag\r\n",
							"    ,CASE\r\n",
							"        WHEN c2.lms_consignment_maxpoddate is null then 0  \r\n",
							"        ELSE DATE_PART('day', c2.lms_consignment_maxpoddate - c.lms_consignment_cdate)\r\n",
							"    END as lms_consignment_actualleaddays\r\n",
							"\r\n",
							"FROM stconsignment_tmp1 c\r\n",
							"LEFT JOIN stconsignment_Tmp2 c2 ON c2.consignid = c.lms_consignment_id"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"stconsignment = spark.sql(\"SELECT * FROM stconsignment\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stconsignment.parquet', mode = \"overwrite\")\r\n",
							"\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STDCTransfer')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "273ae256-df61-4500-8d58-446c4f2c40fc"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the dbodc_transfer LMS Table\r\n",
							"dbodc_transfer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodc_transfer.parquet', format='parquet')\r\n",
							"dbodc_transfer.createOrReplaceTempView(\"dbodc_transfer\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdctransfer\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    dct.id as lms_dctransfer_id\r\n",
							"    ,dct.destinationstoreid as lms_dctransfer_destinationstoreid\r\n",
							"    ,dct.transfercode as lms_dctransfer_transfercode\r\n",
							"    ,dct.audittype as lms_dctransfer_audittype\r\n",
							"    ,dct.qty as lms_dctransfer_qty\r\n",
							"    ,dct.dc_prepackid as lms_dctransfer_dc_prepackid\r\n",
							"    ,dct.acceptancedate as lms_dctransfer_acceptancedate\r\n",
							"    ,dct.auditflag as lms_dctransfer_auditflag\r\n",
							"    ,dct.audituserid as lms_dctransfer_audituserid\r\n",
							"    ,dct.auditlocid as lms_dctransfer_auditlocid\r\n",
							"    ,dct.counted as lms_dctransfer_counted\r\n",
							"    ,dct.damagecount as lms_dctransfer_damagecount\r\n",
							"    ,dct.uploaded as lms_dctransfer_uploaded\r\n",
							"    ,dct.dc_torderid as lms_dctransfer_dc_torderid\r\n",
							"    ,dct.duedate as lms_dctransfer_duedate\r\n",
							"    ,dct.destinationlocationcode as lms_dctransfer_destinationlocationcode\r\n",
							"    ,dct.destinationlocationtypecode as lms_dctransfer_destinationlocationtypecode\r\n",
							"    ,dct.processfamilycode as lms_dctransfer_processfamilycode\r\n",
							"    ,dct.grnversion as lms_dctransfer_grnversion\r\n",
							"\r\n",
							"FROM dbodc_transfer dct\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdctransfer = spark.sql(\"SELECT * FROM stdctransfer\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdctransfer.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdctransfer.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STDistributionFacts')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "66f08846-983b-49ec-ad2f-efebe74bd1ac"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#create dataframe for the publicdispatchsegment orv table\r\n",
							"publicdispatchsegment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatchsegment.parquet', format='parquet')\r\n",
							"publicdispatchsegment.createOrReplaceTempView(\"publicdispatchsegment\")\r\n",
							"\r\n",
							"#create dataframe for the publicorvuser orv table\r\n",
							"publicorvuser = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicorvuser.parquet', format='parquet')\r\n",
							"publicorvuser.createOrReplaceTempView(\"publicorvuser\")\r\n",
							"\r\n",
							"#create dataframe for the publicvehicle orv table\r\n",
							"publicvehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicvehicle.parquet', format='parquet')\r\n",
							"publicvehicle.createOrReplaceTempView(\"publicvehicle\")\r\n",
							"\r\n",
							"#create dataframe for the publicdepot orv table\r\n",
							"publicdepot = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdepo.parquet', format='parquet')\r\n",
							"publicdepot.createOrReplaceTempView(\"publicdepot\")\r\n",
							"\r\n",
							"#create dataframe for the publiccustomer orv table\r\n",
							"publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiccustomer.parquet', format='parquet')\r\n",
							"publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"\r\n",
							"#create dataframe for the dbocustomer lms table\r\n",
							"dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"\r\n",
							"#create dataframe for the dbozone lms table\r\n",
							"dbozone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbozone.parquet', format='parquet')\r\n",
							"dbozone.createOrReplaceTempView(\"dbozone\")\r\n",
							"\r\n",
							"#create dataframe for the dbosroute lms table\r\n",
							"dbosroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbosroute.parquet', format='parquet')\r\n",
							"dbosroute.createOrReplaceTempView(\"dbosroute\")\r\n",
							"\r\n",
							"#create dataframe for the dbobillzoneroute lms table\r\n",
							"dbobillzoneroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zoneroute.parquet', format='parquet')\r\n",
							"dbobillzoneroute.createOrReplaceTempView(\"dbobillzoneroute\")\r\n",
							"\r\n",
							"#create dataframe for the dbobillzone lms table\r\n",
							"dbobillzone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zone.parquet', format='parquet')\r\n",
							"dbobillzone.createOrReplaceTempView(\"dbobillzone\")\r\n",
							"\r\n",
							"#create dataframe for the dbobillbillcustomersr  lms table\r\n",
							"dbobillbillcustomersr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_billcustomersr.parquet', format='parquet')\r\n",
							"dbobillbillcustomersr.createOrReplaceTempView(\"dbobillbillcustomersr\")\r\n",
							"\r\n",
							"#create dataframe for the dbobillcustomergroups  lms table\r\n",
							"dbobillcustomergroups  = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_customergroups.parquet', format='parquet')\r\n",
							"dbobillcustomergroups.createOrReplaceTempView(\"dbobillcustomergroups\")\r\n",
							"\r\n",
							"#create dataframe for the dbobillcustomergrouptypes  lms table\r\n",
							"dbobillcustomergrouptypes  = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_customergrouptypes.parquet', format='parquet')\r\n",
							"dbobillcustomergrouptypes.createOrReplaceTempView(\"dbobillcustomergrouptypes\")\r\n",
							"\r\n",
							"#create dataframe for the dbolocation  lms table\r\n",
							"dbolocation  = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodepot LMS Table\r\n",
							"dbodepot = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbodepot.parquet', format='parquet')\r\n",
							"dbodepot.createOrReplaceTempView(\"dbodepot\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehicle LMS Table\r\n",
							"dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_reasongroup LMS Table\r\n",
							"dbodb_reasongroup = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_reasongroup.parquet', format='parquet')\r\n",
							"dbodb_reasongroup.createOrReplaceTempView(\"dbodb_reasongroup\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_inservicereason LMS Table\r\n",
							"dbodb_inservicereason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_inservicereason.parquet', format='parquet')\r\n",
							"dbodb_inservicereason.createOrReplaceTempView(\"dbodb_inservicereason\")\r\n",
							"\r\n",
							"#create dataframe for the publicpod orv table\r\n",
							"publicpod = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicpod.parquet', format='parquet')\r\n",
							"publicpod.createOrReplaceTempView(\"publicpod\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stpod\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    p.id as orv_pod_id\r\n",
							"    ,p.did as orv_pod_did\r\n",
							"\t,p.name as orv_pod_name\r\n",
							"\t,to_timestamp(p.poddate) as orv_pod_poddate\r\n",
							"\t,p.lat as orv_pod_lat\r\n",
							"\t,p.lng as orv_pod_lng\r\n",
							"\t,p.customerrating as orv_pod_customerrating\r\n",
							"\t,p.customerfeedback as orv_pod_customerfeedback\r\n",
							"FROM publicpod p"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpod = spark.sql(\"SELECT * FROM stpod\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpod.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stpod.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stinservicereasons\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    isr.ID as lms_inservicereason_id\r\n",
							"\t,isr.ReasonGroupID as lms_inservicereason_reasongroupid\r\n",
							"\t,rg.Description as lms_reasongroup_description\r\n",
							"    ,isr.Reason as lms_inservicereason_reason\r\n",
							"    ,isr.Valid as lms_inservicereason_valid\r\n",
							"FROM dbodb_inservicereason isr\r\n",
							"LEFT JOIN dbodb_reasongroup rg on rg.id = isr.ReasonGroupID;"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stinservicereasons = spark.sql(\"SELECT * FROM stinservicereasons\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stinservicereasons.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stinservicereasons.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdispatchsegment\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    d.id as orv_dispatchsegment_id\r\n",
							"    ,d.fromdelid as orv_dispatchsegment_fromdelid\r\n",
							"    ,d.todelid as orv_dispatchsegment_todelid\r\n",
							"    ,d.distance as orv_dispatchsegment_distance\r\n",
							"    ,d.duration as orv_dispatchsegment_duration\r\n",
							"    ,d.encodedpolyline as orv_dispatchsegment_encodedpolyline\r\n",
							"    ,d.did as orv_dispatchsegment_did\r\n",
							"    ,d.tollcost as orv_dispatchsegment_tollcost\r\n",
							"    ,d.fuelcost as orv_dispatchsegment_fuelcost\r\n",
							"    ,d.inscost as orv_dispatchsegment_inscost\r\n",
							"    ,d.labourcost as orv_dispatchsegment_labourcost\r\n",
							"    ,d.maintcost as orv_dispatchsegment_maintcost\r\n",
							"    ,d.cpicost as orv_dispatchsegment_cpicost\r\n",
							"    ,d.vehicleclass as orv_dispatchsegment_vehicleclass\r\n",
							"    ,d.fromlat as orv_dispatchsegment_fromlat\r\n",
							"    ,d.fromlng as orv_dispatchsegment_fromlng\r\n",
							"    ,d.tolat as orv_dispatchsegment_tolat\r\n",
							"    ,d.tolng as orv_dispatchsegment_tolng\r\n",
							"    ,to_timestamp(d.departuredate) as orv_dispatchsegment_departuredate\r\n",
							"    ,to_timestamp(d.arrivaldate) as orv_dispatchsegment_arrivaldate\r\n",
							"    ,to_timestamp(d.debriefeddate) as orv_dispatchsegment_debriefeddate\r\n",
							"    ,d.optimized as orv_dispatchsegment_optimized\r\n",
							"    ,d.segmentorder as orv_dispatchsegment_segmentorder\r\n",
							"    ,d.customized as orv_dispatchsegment_customized\r\n",
							"    ,d.parcelct as orv_dispatchsegment_parcelct\r\n",
							"\r\n",
							"FROM publicdispatchsegment d\r\n",
							"    "
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdispatchsegment = spark.sql(\"SELECT * FROM stdispatchsegment\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdispatchsegment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdispatchsegment.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storvuser\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    o.id as orv_orvuser_id\r\n",
							"    ,o.username as orv_orvuser_username\r\n",
							"    ,o.fname as orv_orvuser_fname\r\n",
							"    ,o.lname as orv_orvuser_lname\r\n",
							"    ,o.empcode as orv_orvuser_empcode\r\n",
							"    ,o.aka as orv_orvuser_aka\r\n",
							"    ,o.gender as orv_orvuser_gender\r\n",
							"    ,o.rsaid as orv_orvuser_rsaid\r\n",
							"    ,o.passportno as orv_orvuser_passportno\r\n",
							"    ,o.idpassportno as orv_orvuser_idpassportno\r\n",
							"    ,o.nationality as orv_orvuser_nationality\r\n",
							"    ,to_timestamp(o.termindate) as orv_orvuser_termindate\r\n",
							"    ,o.status as orv_orvuser_status\r\n",
							"    ,o.depot as orv_orvuser_depot\r\n",
							"    ,o.jobcategory as orv_orvuser_jobcategory\r\n",
							"    ,o.lmsid as orv_orvuser_lmsid\r\n",
							"    ,o.vipid as orv_orvuser_vipid\r\n",
							"    ,o.crewlmsid as orv_orvuser_crewlmsid\r\n",
							"    ,o.courierid as orv_orvuser_courierid\r\n",
							"\r\n",
							"    FROM publicorvuser o\r\n",
							"    \r\n",
							""
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"storvuser = spark.sql(\"SELECT * FROM storvuser\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"storvuser.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/storvuser.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stvehicle\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    v.id as lms_vehicle_id\r\n",
							"    ,v.FleetNo as lms_vehicle_fleetno\r\n",
							"    ,v.RegNo as lms_vehicle_regno\r\n",
							"    ,v.UID as lms_vehicle_uid\r\n",
							"    ,v2.id as orv_vehicle_id\r\n",
							"    ,v2.tollclass as orv_vehicle_tollclass\r\n",
							"    ,v2.sapcode as orv_vehicle_sapcode\r\n",
							"    ,v2.lmsid as orv_vehicle_lmsid\r\n",
							"\r\n",
							"FROM dbovehicle v\r\n",
							"LEFT JOIN publicvehicle v2 on v2.lmsid = v.id\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stvehicle = spark.sql(\"SELECT * FROM stvehicle\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stvehicle.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stvehicle.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdepotorv\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    d.id as orv_depot_id\r\n",
							"    ,d.name as orv_depot_name\r\n",
							"    ,d.depcode as orv_depot_depcode\r\n",
							"    ,d.address as orv_depot_address\r\n",
							"    ,d.suburb as orv_depot_suburb\r\n",
							"    ,d.city as orv_depot_city\r\n",
							"    ,d.zipcode as orv_depot_zipcode\r\n",
							"    ,d.region as orv_depot_region\r\n",
							"    ,d.lat as orv_depot_lat\r\n",
							"    ,d.lng as orv_depot_lng\r\n",
							"    ,d.placeid as orv_depot_placeid\r\n",
							"    ,d.w3w as orv_depot_w3w\r\n",
							"    ,to_timestamp(d.insdate) as orv_depot_insdate\r\n",
							"    ,to_timestamp(d.update) as orv_depot_update\r\n",
							"    ,d.lmsid as orv_depot_lmsid\r\n",
							"    ,d.country as orv_depot_country\r\n",
							"    ,d.status as orv_depot_status\r\n",
							"\r\n",
							"FROM publicdepot d\r\n",
							""
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdepotorv = spark.sql(\"SELECT * FROM stdepotorv\")"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdepotorv.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdepotorv.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdepot\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    d.id as md_depot_id\r\n",
							"    ,d.itemlabel as md_depot_itemlabel\r\n",
							"    ,d.itemvalue as md_depot_itemvalue\r\n",
							"    ,d.depotname as md_depot_depotname\r\n",
							"    ,d.parentdepotcode as md_depot_parentdepotcode\r\n",
							"    ,d.division as md_depot_division\r\n",
							"    ,d.address as md_depot_address\r\n",
							"    ,d.latitude as md_depot_latitude\r\n",
							"    ,d.longitude as md_depot_longitude\r\n",
							"    ,d.sapdepreciationaccountcode as md_depot_sapdepreciationaccountcode\r\n",
							"    ,d.mfrauthoriser as md_depot_mfrauthoriser\r\n",
							"    ,d.mfrapplicationflag as md_depot_mfrapplicationflag\r\n",
							"    ,d.activeflag as md_depot_activeflag\r\n",
							"    ,d.operationsmanager as md_depot_operationsmanager\r\n",
							"    ,d.branchmanager as md_depot_branchmanager\r\n",
							"    ,d.fleetmanager as md_depot_fleetmanager\r\n",
							"\r\n",
							"\r\n",
							"FROM dbodepot d\r\n",
							""
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdepot = spark.sql(\"SELECT * FROM stdepot\")"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdepot.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdepot.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stbillcustomer \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lc.id as lms_customer_id\r\n",
							"    ,lc.ActiveFlag as lms_customer_activeflag\r\n",
							"    ,lc.Adres1 as lms_customer_adres1\r\n",
							"    ,lc.Adres2 as lms_customer_adres2\r\n",
							"    ,lc.Appointment as lms_customer_appointment\r\n",
							"    ,lc.AreaDesc as lms_customer_areadesc\r\n",
							"    ,lc.AutoEmailFlag as lms_customer_autoemailflag\r\n",
							"    ,lc.Bill_RouteID as lms_customer_bill_routeid\r\n",
							"    ,lc.Bill_ServiceTypeID as lms_customer_bill_servicetypeid\r\n",
							"    ,lc.Bill_ZoneRouteID as lms_customer_bill_zonerouteid\r\n",
							"    ,lc.brouteid as lms_customer_brouteid\r\n",
							"    ,lc.BType as lms_customer_btype\r\n",
							"    ,lc.ccDepot as lms_customer_ccdepot\r\n",
							"    ,lc.ccRoute as lms_customer_ccroute\r\n",
							"    ,lc.ChainStoreFlag as lms_customer_chainstoreflag\r\n",
							"    ,lc.CONSPerORD as lms_customer_consperord\r\n",
							"    ,lc.ContactPerson as lms_customer_contactperson\r\n",
							"    ,lc.CountryCode as lms_customer_countrycode\r\n",
							"    ,lc.CRef as lms_customer_cref\r\n",
							"    ,lc.CREF2 as lms_customer_cref2\r\n",
							"    ,lc.CRouteID as lms_customer_crouteid\r\n",
							"    ,lc.CType as lms_customer_ctype\r\n",
							"    ,lc.CustAccID as lms_customer_custaccid\r\n",
							"    ,lc.CustGroupID as lms_customer_custgroupid\r\n",
							"    ,lc.CustMainID as lms_customer_custmainid\r\n",
							"    ,lc.CustRateid as lms_customer_custrateid\r\n",
							"    ,lc.CustRouteGroupID as lms_customer_custroutegroupid\r\n",
							"    ,lc.CustServiceDays as lms_customer_custservicedays\r\n",
							"    ,lc.CustServiceTime as lms_customer_custservicetime\r\n",
							"    ,lc.DC as lms_customer_dc\r\n",
							"    ,lc.DefDelPCode as lms_customer_defdelpcode\r\n",
							"    ,lc.DeliveryDepotID as lms_customer_deliverydepotid\r\n",
							"    ,lc.DeliveryType as lms_customer_deliverytype\r\n",
							"    ,lc.DestinationLocationCode as lms_customer_destinationlocationcode\r\n",
							"    ,lc.DualBillCourier as lms_customer_dualbillcourier\r\n",
							"    ,lc.Email as lms_customer_email\r\n",
							"    ,lc.FaxNo as lms_customer_faxno\r\n",
							"    ,lc.FCType as lms_customer_fctype\r\n",
							"    ,lc.FLevy as lms_customer_flevy\r\n",
							"    ,lc.InCompleteOrderChkFlag as lms_customer_incompleteorderchkflag\r\n",
							"    ,lc.InsertDate as lms_customer_insertdate\r\n",
							"    ,lc.IsBillTo as lms_customer_isbillto\r\n",
							"    ,lc.isBooking as lms_customer_isbooking\r\n",
							"    ,lc.isHighVolume as lms_customer_ishighvolume\r\n",
							"    ,lc.IsManual as lms_customer_ismanual\r\n",
							"    ,lc.LastUpdate as lms_customer_lastupdate\r\n",
							"    ,lc.LocationTypeCode as lms_customer_locationtypecode\r\n",
							"    ,lc.MaxCartons as lms_customer_maxcartons\r\n",
							"    ,lc.Name as lms_customer_name\r\n",
							"    ,lc.NDDID as lms_customer_nddid\r\n",
							"    ,lc.OnHoldID as lms_customer_onholdid\r\n",
							"    ,lc.PCode as lms_customer_pcode\r\n",
							"    ,lc.PCodeID as lms_customer_pcodeid\r\n",
							"    ,lc.ServRouteID as lms_customer_servrouteid\r\n",
							"    ,lc.SRouteID as lms_customer_srouteid\r\n",
							"    ,lc.StoreID as lms_customer_storeid\r\n",
							"    ,lc.Suburb as lms_customer_suburb\r\n",
							"    ,lc.TelNo as lms_customer_telno\r\n",
							"    ,lc.Town as lms_customer_town\r\n",
							"    ,lc.VolFact as lms_customer_volfact\r\n",
							"    ,lc.WType as lms_customer_wtype\r\n",
							"    ,oc.id as orv_customer_id\r\n",
							"    ,oc.name as orv_customer_name\r\n",
							"    ,oc.contact as orv_customer_contact\r\n",
							"    ,oc.email as orv_customer_email\r\n",
							"    ,oc.mobileno as orv_customer_mobileno\r\n",
							"    ,oc.landline as orv_customer_landline\r\n",
							"    ,oc.ctype as orv_customer_ctype\r\n",
							"    ,oc.parent as orv_customer_parent\r\n",
							"    ,to_timestamp(oc.lastupdate) as orv_customer_lastupdate\r\n",
							"    ,oc.lmsid as orv_customer_lmsid\r\n",
							"    ,oc.srouteid as orv_customer_srouteid\r\n",
							"    ,oc.verified as orv_customer_verified\r\n",
							"    ,oc.defaultmaildomain as orv_customer_defaultmaildomain\r\n",
							"    ,oc.autoassignticketid as orv_customer_autoassignticketid\r\n",
							"    ,oc.sendinfodel as orv_customer_sendinfodel\r\n",
							"    ,oc.anonemailcustsupportemail as orv_customer_anonemailcustsupportemail\r\n",
							"    ,oc.anonemailcustsupporttel as orv_customer_anonemailcustsupporttel\r\n",
							"    ,oc.cref as orv_customer_cref\r\n",
							"    ,oc.division as orv_customer_division\r\n",
							"    ,oc.ecomm as orv_customer_ecomm\r\n",
							"    ,oc.preverifiedaddid as orv_customer_preverifiedaddid\r\n",
							"    ,oc.mallname as orv_customer_mallname\r\n",
							"    ,oc.mallid as orv_customer_mallid\r\n",
							"    ,oc.mallflag as orv_customer_mallflag\r\n",
							"    ,oc.malllmsid as orv_customer_malllmsid\r\n",
							"    ,oc.highvolume as orv_customer_highvolume\r\n",
							"    ,oc.custreference as orv_customer_custreference\r\n",
							"    ,oc.unverdate as orv_customer_unverdate\r\n",
							"    ,oc.verdate as orv_customer_verdate\r\n",
							"    ,oc.groupid as orv_customer_groupid\r\n",
							"    ,oc.postalcodecustgroupid as orv_customer_postalcodecustgroupid\r\n",
							"    ,oc.webhookauthcredential as orv_customer_webhookauthcredential\r\n",
							"    ,oc.mergedinto as orv_customer_mergedinto\r\n",
							"    ,oc.cusmergedate as orv_customer_cusmergedate\r\n",
							"    ,oc.customerref as orv_customer_customerref\r\n",
							"    ,oc.routemaint as orv_customer_routemaint\r\n",
							"    ,bcr.id as lms_customer_billcustid\r\n",
							"    ,bcr.billcustid as lms_customer_billcustbillcustid\r\n",
							"    ,bcr.incovalue as lms_customer_billcustincovalue\r\n",
							"    ,bcr.daterangelimit as lms_customer_billcustdaterangelimit\r\n",
							"    ,bcr.status as lms_customer_billcuststatus\r\n",
							"    ,bcr.note as lms_customer_billcustnote\r\n",
							"    ,bcr.custgroupid as lms_customer_billcustcustgroupid\r\n",
							"    ,bcr.activeflag as lms_customer_billcustactiveflag\r\n",
							"    ,bcr.routerateeffectivedate as lms_customer_billcustrouterateeffectivedate\r\n",
							"    ,bcr.ratesaddedflag as lms_customer_billcustratesaddedflag\r\n",
							"    ,bcr.ibtratesflag as lms_customer_billcustibtratesflag\r\n",
							"    ,bcr.slidingscaleflag as lms_customer_billcustslidingscaleflag\r\n",
							"    ,bcr.sapflag as lms_customer_billcustsapflag\r\n",
							"    ,bcr.sapcode as lms_customer_billcustsapcode\r\n",
							"    ,bcr.sapcustname as lms_customer_billcustsapcustname\r\n",
							"    ,bcr.averagepclrateflag as lms_customer_billcustaveragepclrateflag\r\n",
							"    ,bcr.averagepclkg as lms_customer_billcustaveragepclkg\r\n",
							"    ,bcr.billdatestart as lms_customer_billcustbilldatestart\r\n",
							"    ,bcr.itemcode as lms_customer_billcustitemcode\r\n",
							"    ,bcr.servicetypeflag as lms_customer_billcustservicetypeflag\r\n",
							"    ,bcr.returnreverserateflag as lms_customer_billcustreturnreverserateflag\r\n",
							"    ,bcr.minnoofpcls as lms_customer_billcustminnoofpcls\r\n",
							"    ,bcr.productcategoryid as lms_customer_billcustproductcategoryid\r\n",
							"    ,bcr.samedayconsolidation as lms_customer_billcustsamedayconsolidation\r\n",
							"    ,bcr.rategroupid as lms_customer_billcustrategroupid\r\n",
							"    ,bcr.risksurchargeflag as lms_customer_billcustrisksurchargeflag\r\n",
							"    ,bcr.applyavgvolweight as lms_customer_billcustapplyavgvolweight\r\n",
							"    ,bcr.avgvolweight as lms_customer_billcustavgvolweight\r\n",
							"    ,bcr.ecommcustomerflag as lms_customer_billcustecommcustomerflag\r\n",
							"    ,bcr.leadtimestructureid as lms_customer_billcustleadtimestructureid\r\n",
							"    ,bcr.recalcinprogress as lms_customer_billcustrecalcinprogress\r\n",
							"    ,bcr.recalcuserid as lms_customer_billcustrecalcuserid\r\n",
							"    ,bcr.needwebhook as lms_customer_billcustneedwebhook\r\n",
							"    ,bcr.routemaint as lms_customer_billcustroutemaint\r\n",
							"    ,bcr.lhdistrflag as lms_customer_billcustlhdistrflag\r\n",
							"    ,bcg.id as lms_customer_billcustgroupid\r\n",
							"    ,bcg.description as lms_customer_billcustgroupdescription\r\n",
							"    ,bcg.grouptypeid as lms_customer_billcustgroupgrouptypeid\r\n",
							"    ,bcgt.id as lms_customer_billcustgrouptypeid\r\n",
							"    ,bcgt.description as lms_customer_billcustgrouptypedescription\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"FROM dbocustomer lc\r\n",
							"LEFT JOIN publiccustomer oc on oc.lmsid = lc.id\r\n",
							"LEFT JOIN dbobillbillcustomersr bcr on bcr.billcustid = lc.id \r\n",
							"LEFT JOIN dbobillcustomergroups bcg  on bcg.id = bcr.custgroupid\r\n",
							"LEFT JOIN dbobillcustomergrouptypes bcgt on bcgt.id = bcg.grouptypeid\r\n",
							"\r\n",
							"WHERE lc.isbillto = 1"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbillcustomer = spark.sql(\"SELECT * FROM stbillcustomer\")"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbillcustomer.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stbillcustomer.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdeliverypickupcustomer \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lc.id as lms_customer_id\r\n",
							"    ,lc.ActiveFlag as lms_customer_activeflag\r\n",
							"    ,lc.Adres1 as lms_customer_adres1\r\n",
							"    ,lc.Adres2 as lms_customer_adres2\r\n",
							"    ,lc.Appointment as lms_customer_appointment\r\n",
							"    ,lc.AreaDesc as lms_customer_areadesc\r\n",
							"    ,lc.AutoEmailFlag as lms_customer_autoemailflag\r\n",
							"    ,lc.Bill_RouteID as lms_customer_bill_routeid\r\n",
							"    ,lc.Bill_ServiceTypeID as lms_customer_bill_servicetypeid\r\n",
							"    ,lc.Bill_ZoneRouteID as lms_customer_bill_zonerouteid\r\n",
							"    ,lc.brouteid as lms_customer_brouteid\r\n",
							"    ,lc.BType as lms_customer_btype\r\n",
							"    ,lc.ccDepot as lms_customer_ccdepot\r\n",
							"    ,lc.ccRoute as lms_customer_ccroute\r\n",
							"    ,lc.ChainStoreFlag as lms_customer_chainstoreflag\r\n",
							"    ,lc.CONSPerORD as lms_customer_consperord\r\n",
							"    ,lc.ContactPerson as lms_customer_contactperson\r\n",
							"    ,lc.CountryCode as lms_customer_countrycode\r\n",
							"    ,lc.CRef as lms_customer_cref\r\n",
							"    ,lc.CREF2 as lms_customer_cref2\r\n",
							"    ,lc.CRouteID as lms_customer_crouteid\r\n",
							"    ,lc.CType as lms_customer_ctype\r\n",
							"    ,lc.CustAccID as lms_customer_custaccid\r\n",
							"    ,lc.CustGroupID as lms_customer_custgroupid\r\n",
							"    ,lc.CustMainID as lms_customer_custmainid\r\n",
							"    ,lc.CustRateid as lms_customer_custrateid\r\n",
							"    ,lc.CustRouteGroupID as lms_customer_custroutegroupid\r\n",
							"    ,lc.CustServiceDays as lms_customer_custservicedays\r\n",
							"    ,lc.CustServiceTime as lms_customer_custservicetime\r\n",
							"    ,lc.DC as lms_customer_dc\r\n",
							"    ,lc.DefDelPCode as lms_customer_defdelpcode\r\n",
							"    ,lc.DeliveryDepotID as lms_customer_deliverydepotid\r\n",
							"    ,lc.DeliveryType as lms_customer_deliverytype\r\n",
							"    ,lc.DestinationLocationCode as lms_customer_destinationlocationcode\r\n",
							"    ,lc.DualBillCourier as lms_customer_dualbillcourier\r\n",
							"    ,lc.Email as lms_customer_email\r\n",
							"    ,lc.FaxNo as lms_customer_faxno\r\n",
							"    ,lc.FCType as lms_customer_fctype\r\n",
							"    ,lc.FLevy as lms_customer_flevy\r\n",
							"    ,lc.InCompleteOrderChkFlag as lms_customer_incompleteorderchkflag\r\n",
							"    ,lc.InsertDate as lms_customer_insertdate\r\n",
							"    ,lc.IsBillTo as lms_customer_isbillto\r\n",
							"    ,lc.isBooking as lms_customer_isbooking\r\n",
							"    ,lc.isHighVolume as lms_customer_ishighvolume\r\n",
							"    ,lc.IsManual as lms_customer_ismanual\r\n",
							"    ,lc.LastUpdate as lms_customer_lastupdate\r\n",
							"    ,lc.LocationTypeCode as lms_customer_locationtypecode\r\n",
							"    ,lc.MaxCartons as lms_customer_maxcartons\r\n",
							"    ,lc.Name as lms_customer_name\r\n",
							"    ,lc.NDDID as lms_customer_nddid\r\n",
							"    ,lc.OnHoldID as lms_customer_onholdid\r\n",
							"    ,lc.PCode as lms_customer_pcode\r\n",
							"    ,lc.PCodeID as lms_customer_pcodeid\r\n",
							"    ,lc.ServRouteID as lms_customer_servrouteid\r\n",
							"    ,lc.SRouteID as lms_customer_srouteid\r\n",
							"    ,lc.StoreID as lms_customer_storeid\r\n",
							"    ,lc.Suburb as lms_customer_suburb\r\n",
							"    ,lc.TelNo as lms_customer_telno\r\n",
							"    ,lc.Town as lms_customer_town\r\n",
							"    ,lc.VolFact as lms_customer_volfact\r\n",
							"    ,lc.WType as lms_customer_wtype\r\n",
							"    ,oc.id as orv_customer_id\r\n",
							"    ,oc.name as orv_customer_name\r\n",
							"    ,oc.contact as orv_customer_contact\r\n",
							"    ,oc.email as orv_customer_email\r\n",
							"    ,oc.mobileno as orv_customer_mobileno\r\n",
							"    ,oc.landline as orv_customer_landline\r\n",
							"    ,oc.ctype as orv_customer_ctype\r\n",
							"    ,oc.parent as orv_customer_parent\r\n",
							"    ,to_timestamp(oc.lastupdate) as orv_customer_lastupdate\r\n",
							"    ,oc.lmsid as orv_customer_lmsid\r\n",
							"    ,oc.srouteid as orv_customer_srouteid\r\n",
							"    ,oc.verified as orv_customer_verified\r\n",
							"    ,oc.defaultmaildomain as orv_customer_defaultmaildomain\r\n",
							"    ,oc.autoassignticketid as orv_customer_autoassignticketid\r\n",
							"    ,oc.sendinfodel as orv_customer_sendinfodel\r\n",
							"    ,oc.anonemailcustsupportemail as orv_customer_anonemailcustsupportemail\r\n",
							"    ,oc.anonemailcustsupporttel as orv_customer_anonemailcustsupporttel\r\n",
							"    ,oc.cref as orv_customer_cref\r\n",
							"    ,oc.division as orv_customer_division\r\n",
							"    ,oc.ecomm as orv_customer_ecomm\r\n",
							"    ,oc.preverifiedaddid as orv_customer_preverifiedaddid\r\n",
							"    ,oc.mallname as orv_customer_mallname\r\n",
							"    ,oc.mallid as orv_customer_mallid\r\n",
							"    ,oc.mallflag as orv_customer_mallflag\r\n",
							"    ,oc.malllmsid as orv_customer_malllmsid\r\n",
							"    ,oc.highvolume as orv_customer_highvolume\r\n",
							"    ,oc.custreference as orv_customer_custreference\r\n",
							"    ,oc.unverdate as orv_customer_unverdate\r\n",
							"    ,oc.verdate as orv_customer_verdate\r\n",
							"    ,oc.groupid as orv_customer_groupid\r\n",
							"    ,oc.postalcodecustgroupid as orv_customer_postalcodecustgroupid\r\n",
							"    ,oc.webhookauthcredential as orv_customer_webhookauthcredential\r\n",
							"    ,oc.mergedinto as orv_customer_mergedinto\r\n",
							"    ,oc.cusmergedate as orv_customer_cusmergedate\r\n",
							"    ,oc.customerref as orv_customer_customerref\r\n",
							"    ,oc.routemaint as orv_customer_routemaint\r\n",
							"    ,bcr.id as lms_customer_billcustid\r\n",
							"    ,bcr.billcustid as lms_customer_billcustbillcustid\r\n",
							"    ,bcr.incovalue as lms_customer_billcustincovalue\r\n",
							"    ,bcr.daterangelimit as lms_customer_billcustdaterangelimit\r\n",
							"    ,bcr.status as lms_customer_billcuststatus\r\n",
							"    ,bcr.note as lms_customer_billcustnote\r\n",
							"    ,bcr.custgroupid as lms_customer_billcustcustgroupid\r\n",
							"    ,bcr.activeflag as lms_customer_billcustactiveflag\r\n",
							"    ,bcr.routerateeffectivedate as lms_customer_billcustrouterateeffectivedate\r\n",
							"    ,bcr.ratesaddedflag as lms_customer_billcustratesaddedflag\r\n",
							"    ,bcr.ibtratesflag as lms_customer_billcustibtratesflag\r\n",
							"    ,bcr.slidingscaleflag as lms_customer_billcustslidingscaleflag\r\n",
							"    ,bcr.sapflag as lms_customer_billcustsapflag\r\n",
							"    ,bcr.sapcode as lms_customer_billcustsapcode\r\n",
							"    ,bcr.sapcustname as lms_customer_billcustsapcustname\r\n",
							"    ,bcr.averagepclrateflag as lms_customer_billcustaveragepclrateflag\r\n",
							"    ,bcr.averagepclkg as lms_customer_billcustaveragepclkg\r\n",
							"    ,bcr.billdatestart as lms_customer_billcustbilldatestart\r\n",
							"    ,bcr.itemcode as lms_customer_billcustitemcode\r\n",
							"    ,bcr.servicetypeflag as lms_customer_billcustservicetypeflag\r\n",
							"    ,bcr.returnreverserateflag as lms_customer_billcustreturnreverserateflag\r\n",
							"    ,bcr.minnoofpcls as lms_customer_billcustminnoofpcls\r\n",
							"    ,bcr.productcategoryid as lms_customer_billcustproductcategoryid\r\n",
							"    ,bcr.samedayconsolidation as lms_customer_billcustsamedayconsolidation\r\n",
							"    ,bcr.rategroupid as lms_customer_billcustrategroupid\r\n",
							"    ,bcr.risksurchargeflag as lms_customer_billcustrisksurchargeflag\r\n",
							"    ,bcr.applyavgvolweight as lms_customer_billcustapplyavgvolweight\r\n",
							"    ,bcr.avgvolweight as lms_customer_billcustavgvolweight\r\n",
							"    ,bcr.ecommcustomerflag as lms_customer_billcustecommcustomerflag\r\n",
							"    ,bcr.leadtimestructureid as lms_customer_billcustleadtimestructureid\r\n",
							"    ,bcr.recalcinprogress as lms_customer_billcustrecalcinprogress\r\n",
							"    ,bcr.recalcuserid as lms_customer_billcustrecalcuserid\r\n",
							"    ,bcr.needwebhook as lms_customer_billcustneedwebhook\r\n",
							"    ,bcr.routemaint as lms_customer_billcustroutemaint\r\n",
							"    ,bcr.lhdistrflag as lms_customer_billcustlhdistrflag\r\n",
							"    ,bcg.id as lms_customer_billcustgroupid\r\n",
							"    ,bcg.description as lms_customer_billcustgroupdescription\r\n",
							"    ,bcg.grouptypeid as lms_customer_billcustgroupgrouptypeid\r\n",
							"    ,bcgt.id as lms_customer_billcustgrouptypeid\r\n",
							"    ,bcgt.description as lms_customer_billcustgrouptypedescription\r\n",
							"\r\n",
							"\r\n",
							"FROM dbocustomer lc\r\n",
							"LEFT JOIN publiccustomer oc on oc.lmsid = lc.id\r\n",
							"LEFT JOIN dbobillbillcustomersr bcr on bcr.billcustid = lc.id \r\n",
							"LEFT JOIN dbobillcustomergroups bcg  on bcg.id = bcr.custgroupid\r\n",
							"LEFT JOIN dbobillcustomergrouptypes bcgt on bcgt.id = bcg.grouptypeid\r\n",
							"\r\n",
							"WHERE isbillto <> 1"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdeliverypickupcustomer = spark.sql(\"SELECT * FROM stdeliverypickupcustomer\")"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdeliverypickupcustomer.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stzone \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    z.Id as lms_zone_id\r\n",
							"    ,z.Code as lms_zone_code\r\n",
							"    ,z.Description as lms_zone_description\r\n",
							"    ,z.ISOCode as lms_zone_isocode\r\n",
							"    ,z.LocID as lms_zone_locid\r\n",
							"    ,z.ZoneMasterID as lms_zone_zonemasterid\r\n",
							"FROM dbozone z\r\n",
							""
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stzone = spark.sql(\"SELECT * FROM stzone\")"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stzone.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stzone.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stsroute \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    sr.ID as lms_sroute_id\r\n",
							"    ,sr.BillCustID as lms_sroute_billcustid\r\n",
							"    ,sr.CourierID as lms_sroute_courierid\r\n",
							"    ,sr.Description as lms_sroute_description\r\n",
							"    ,sr.Code as lms_sroute_code\r\n",
							"    ,sr.id2 as lms_sroute_id2\r\n",
							"    ,sr.SRouteGroupID as lms_sroute_sroutegroupid\r\n",
							"    ,sr.ZoneID as lms_sroute_zoneid\r\n",
							"    ,sr.broutemasterID as lms_sroute_broutemasterid\r\n",
							"    ,sr.LocalFlag as lms_sroute_localflag\r\n",
							"    ,sr.Area as lms_sroute_area\r\n",
							"    ,sr.HighVolume as lms_sroute_highvolume\r\n",
							"FROM dbosroute sr\r\n",
							""
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsroute = spark.sql(\"SELECT * FROM stsroute\")"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsroute.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stsroute.parquet', mode = \"overwrite\")\r\n",
							"\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stbillzoneroute \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    bzr.ID as lms_billzoneroute_id\r\n",
							"    ,bzr.Description as lms_billzoneroute_description\r\n",
							"    ,bzr.ZoneID as lms_billzoneroute_zoneid\r\n",
							"    ,bzr.ZRSCode as lms_billzoneroute_zrscode\r\n",
							"    ,bzr.ZoneRouteOrder as lms_billzoneroute_zonerouteorder\r\n",
							"    ,bzr.ZoneType as lms_billzoneroute_zonetype\r\n",
							"    ,bzr.BRouteMasterID as lms_billzoneroute_broutemasterid\r\n",
							"    ,bzr.BrouteCode as lms_billzoneroute_broutecode\r\n",
							"\r\n",
							"FROM dbobillzoneroute bzr\r\n",
							""
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbillzoneroute = spark.sql(\"SELECT * FROM stbillzoneroute\")"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbillzoneroute.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stbillzoneroute.parquet', mode = \"overwrite\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stbillzone \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    bz.ID as lms_customer_id\r\n",
							"    ,bz.Description as lms_billzone_description\r\n",
							"    ,bz.ZoneMasterID as lms_billzone_zonemasterid\r\n",
							"    ,bz.CountryID as lms_billzone_countryid\r\n",
							"FROM dbobillzone bz\r\n",
							""
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbillzone = spark.sql(\"SELECT * FROM stbillzone\")"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbillzone.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stbillzone.parquet', mode = \"overwrite\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stlocation \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    l.id as lms_location_id\r\n",
							"    ,l.description as lms_location_description\r\n",
							"    ,l.code as lms_location_code\r\n",
							"    ,l.collect as lms_location_collect\r\n",
							"    ,l.pcode as lms_location_pcode\r\n",
							"    ,l.custid as lms_location_custid\r\n",
							"    ,l.retail as lms_location_retail\r\n",
							"    ,l.scale as lms_location_scale\r\n",
							"    ,l.custcode as lms_location_custcode\r\n",
							"    ,l.captureonly as lms_location_captureonly\r\n",
							"    ,l.zoneid as lms_location_zoneid\r\n",
							"    ,l.scantype as lms_location_scantype\r\n",
							"    ,l.billcustid as lms_location_billcustid\r\n",
							"    ,l.latitude as lms_location_latitude\r\n",
							"    ,l.longitude as lms_location_longitude\r\n",
							"    ,l.holdlocid as lms_location_holdlocid\r\n",
							"    ,l.branchmanageruserid as lms_location_branchmanageruserid\r\n",
							"    ,l.fwcostcentre as lms_location_fwcostcentre\r\n",
							"    ,l.fwuserid as lms_location_fwuserid\r\n",
							"    ,l.fwmultibusinessid as lms_location_fwmultibusinessid\r\n",
							"    ,l.glcode as lms_location_glcode\r\n",
							"    ,l.hubcode as lms_location_hubcode\r\n",
							"    ,l.fwapikey as lms_location_fwapikey\r\n",
							"    ,l.geolocationgroupid as lms_location_geolocationgroupid\r\n",
							"    ,l.geolocationflag as lms_location_geolocationflag\r\n",
							"    ,l.orvactive as lms_location_orvactive\r\n",
							"    ,l.cref as lms_location_cref\r\n",
							"    ,l.tempcol as lms_location_tempcol\r\n",
							"    ,l.holdlocparentlocid as lms_location_holdlocparentlocid\r\n",
							"    ,l.floorsize as lms_location_floorsize\r\n",
							"    ,l.isstationidenabled as lms_location_isstationidenabled\r\n",
							"    ,l.activeflag as lms_location_activeflag\r\n",
							"    ,l.masterlocid as lms_location_masterlocid\r\n",
							"    ,l.locationtypeid as lms_location_locationtypeid\r\n",
							"    ,l.locationcode as lms_location_locationcode\r\n",
							"\r\n",
							"\r\n",
							"FROM dbolocation l"
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlocation = spark.sql(\"SELECT * FROM stlocation\")"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlocation.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet', mode = \"overwrite\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 44
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STDriverPayItem')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5c5257ff-8e90-471c-9fbb-1374ce5e8c34"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccountRead + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the publicdriverpayitem TMS Table\r\n",
							"publicdriverpayitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpayitem.parquet', format='parquet')\r\n",
							"publicdriverpayitem.createOrReplaceTempView(\"publicdriverpayitem\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdriverpayitem\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    d.id as tms_driverpayitem_id\r\n",
							"    ,d.driverid as tms_driverpayitem_driverid\r\n",
							"    ,d.tripid as tms_driverpayitem_tripid\r\n",
							"    ,d.triprate as tms_driverpayitem_triprate\r\n",
							"    ,d.mealrate as tms_driverpayitem_mealrate\r\n",
							"    ,d.sleepoverrate as tms_driverpayitem_sleepoverrate\r\n",
							"    ,d.airtimerate as tms_driverpayitem_airtimerate\r\n",
							"    ,d.linkrate as tms_driverpayitem_linkrate\r\n",
							"    ,d.totalrate as tms_driverpayitem_totalrate\r\n",
							"    ,d.routeid as tms_driverpayitem_routeid\r\n",
							"    ,d.routename as tms_driverpayitem_routename\r\n",
							"    ,d.insdate as tms_driverpayitem_insdate\r\n",
							"    ,d.moddate as tms_driverpayitem_moddate\r\n",
							"    ,d.horse as tms_driverpayitem_horse\r\n",
							"    ,d.trailers as tms_driverpayitem_trailers\r\n",
							"    ,d.linkused as tms_driverpayitem_linkused\r\n",
							"    ,d.manualadjustment as tms_driverpayitem_manualadjustment\r\n",
							"    ,d.editby as tms_driverpayitem_editby\r\n",
							"    ,d.drivername as tms_driverpayitem_drivername\r\n",
							"    ,d.dispatchdate as tms_driverpayitem_dispatchdate\r\n",
							"    ,d.bookings as tms_driverpayitem_bookings\r\n",
							"    ,d.employeecode as tms_driverpayitem_employeecode\r\n",
							"    ,d.originatedfrom as tms_driverpayitem_originatedfrom\r\n",
							"    ,d.reportid as tms_driverpayitem_reportid\r\n",
							"\r\n",
							"FROM publicdriverpayitem d\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdriverpayitem = spark.sql(\"SELECT * FROM stdriverpayitem\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdriverpayitem.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdriverpayitem.parquet', mode = \"overwrite\")\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STEndorsments')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2b029bcb-0e0c-4420-a1b0-01f0aff7e6ee"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#create dataframe for the publicclaim orv table\r\n",
							"publicclaim = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicclaim.parquet', format='parquet')\r\n",
							"publicclaim.createOrReplaceTempView(\"publicclaim\")\r\n",
							"\r\n",
							"#create dataframe for the publicdelivery orv table\r\n",
							"publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbowbendorsement LMS Table\r\n",
							"dbowbendorsement = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowbendorsement.parquet', format='parquet')\r\n",
							"dbowbendorsement.createOrReplaceTempView(\"dbowbendorsement\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_endorsement LMS Table\r\n",
							"dbodb_endorsement = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_endorsement.parquet', format='parquet')\r\n",
							"dbodb_endorsement.createOrReplaceTempView(\"dbodb_endorsement\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stendorsments_tmp\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    c.id\r\n",
							"    ,c.delid\r\n",
							"\t,c.claimtype\r\n",
							"\t,to_timestamp(c.claimdate) as claimdate\r\n",
							"\t,c.did\r\n",
							"\t,c.parcelid\r\n",
							"\t,c.barcode\r\n",
							"\t,c.attachid\r\n",
							"\t,c.note\r\n",
							"    ,d.waybillid\r\n",
							"    \r\n",
							"FROM publicclaim c\r\n",
							"LEFT JOIN publicdelivery d on d.id = c.delid"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stendorsments\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    e.ID as lms_db_endorsement_id\r\n",
							"\t,e.Description as lms_db_endorsement_description\r\n",
							"    ,er.ID as lms_wbendorsement_id\r\n",
							"    ,er.Barcode as lms_wbendorsement_barcode\r\n",
							"    ,er.WaybillID as lms_wbendorsement_waybillid\r\n",
							"    ,et.id as orv_claim_id\r\n",
							"    ,et.delid as orv_claim_delid\r\n",
							"\t,et.claimtype as orv_claim_claimtype\r\n",
							"\t,et.claimdate as orv_claim_claimdate\r\n",
							"\t,et.did as orv_claim_did\r\n",
							"\t,et.parcelid as orv_claim_parcelid\r\n",
							"\t,et.barcode as orv_claim_barcode\r\n",
							"\t,et.attachid as orv_claim_attachid\r\n",
							"\t,et.note as orv_claim_note\r\n",
							"    \r\n",
							"FROM dbodb_endorsement e\r\n",
							"LEFT JOIN dbowbendorsement er on er.EType = e.ID\r\n",
							"LEFT JOIN stendorsments_tmp et on et.waybillid||'|'||et.barcode = er.WaybillID||'|'||er.barcode"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stendorsments = spark.sql(\"SELECT * FROM stendorsments\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stendorsments.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stendorsments.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STFinanceData')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9fac34de-dd64-47a0-990d-b594bf11b2e9"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccountRead + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the publicfinancedata TMS Table\r\n",
							"publicfinancedata = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfinancedata.parquet', format='parquet')\r\n",
							"publicfinancedata.createOrReplaceTempView(\"publicfinancedata\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stfinancedata\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    f.id as tms_financedata_id\r\n",
							"    ,f.bookingid as tms_financedata_bookingid\r\n",
							"    ,to_timestamp(f.insdate) as tms_financedata_insdate\r\n",
							"    ,f.peaksurchagrebuy as tms_financedata_peaksurchagrebuy\r\n",
							"    ,f.peaksurchagresell as tms_financedata_peaksurchagresell\r\n",
							"    ,f.manualentryroadhaulsell as tms_financedata_manualentryroadhaulsell\r\n",
							"    ,f.manualentryahocsell as tms_financedata_manualentryahocsell\r\n",
							"    ,f.systemfuellevy as tms_financedata_systemfuellevy\r\n",
							"    ,f.systemratefuellevy as tms_financedata_systemratefuellevy\r\n",
							"    ,f.systemratefuelexlevy as tms_financedata_systemratefuelexlevy\r\n",
							"    ,f.systemratefuelinclevy as tms_financedata_systemratefuelinclevy\r\n",
							"    ,f.systemsellrate as tms_financedata_systemsellrate\r\n",
							"    ,f.totalsellrate as tms_financedata_totalsellrate\r\n",
							"    ,to_timestamp(f.moddate) as tms_financedata_moddate\r\n",
							"    ,f.totalbuyrate as tms_financedata_totalbuyrate\r\n",
							"    ,f.rateprofileid as tms_financedata_rateprofileid\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"FROM publicfinancedata f\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stfinancedata = spark.sql(\"SELECT * FROM stfinancedata\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stfinancedata.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfinancedata.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STInstruction')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b27ec3a1-1d54-447e-b398-cc6a01a05d6c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccountRead + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the publicInstruction TMS Table\r\n",
							"publicInstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinstruction.parquet', format='parquet')\r\n",
							"publicInstruction.createOrReplaceTempView(\"publicInstruction\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboLHInstruction LMS Table\r\n",
							"dboLHInstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_instruction.parquet', format='parquet')\r\n",
							"dboLHInstruction.createOrReplaceTempView(\"dboLHInstruction\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicLHInstruction LMS Table\r\n",
							"publicLHInstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiclhdelivery.parquet', format='parquet')\r\n",
							"publicLHInstruction.createOrReplaceTempView(\"publicLHInstruction\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"STInstruction_tms\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    i.id as tms_instruction_id\r\n",
							"    ,i.bookingid as tms_instruction_bookingid\r\n",
							"    ,i.addressid as tms_instruction_addressid\r\n",
							"    ,i.instrtype as tms_instruction_instrtype\r\n",
							"    ,i.onroute as tms_instruction_onroute\r\n",
							"    ,i.onrouteid as tms_instruction_onrouteid\r\n",
							"    ,i.sort as tms_instruction_sort\r\n",
							"    ,i.onroutestatus as tms_instruction_onroutestatus\r\n",
							"    ,i.note as tms_instruction_note\r\n",
							"    ,i.citybranchid as tms_instruction_citybranchid\r\n",
							"    ,i.citybranchname as tms_instruction_citybranchname\r\n",
							"    ,i.insdate as tms_instruction_insdate\r\n",
							"    ,i.moddate as tms_instruction_moddate\r\n",
							"    ,i.insby as tms_instruction_insby\r\n",
							"\r\n",
							"FROM publicInstruction i\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"STInstruction_tms = spark.sql(\"SELECT * FROM STInstruction_tms\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"STInstruction_lms = spark.sql(\"\"\"\r\n",
							"SELECT    \r\n",
							"    CAST(CONCAT('-',CAST(i.id as string)) as int) as tms_instruction_id\r\n",
							"    ,CAST(CONCAT('-',CAST(i.bookingid as string)) as int) as tms_instruction_bookingid\r\n",
							"    ,CAST(CONCAT('-',CAST(i.addressid as string)) as int) as tms_instruction_addressid\r\n",
							"    ,CASE\r\n",
							"        WHEN i.instructiontypeid = 1 THEN 'pickup'\r\n",
							"        ELSE 'delivery'    \r\n",
							"    END as tms_instruction_instrtype\r\n",
							"    ,null as tms_instruction_onroute\r\n",
							"    ,null as tms_instruction_onrouteid\r\n",
							"    ,i.sequence as tms_instruction_sort\r\n",
							"    ,null as tms_instruction_onroutestatus\r\n",
							"    ,null as tms_instruction_note\r\n",
							"    ,null as tms_instruction_citybranchid\r\n",
							"    ,null as tms_instruction_citybranchname\r\n",
							"    ,unix_timestamp(i.createddate) as tms_instruction_insdate\r\n",
							"    ,unix_timestamp(i.createddate) as tms_instruction_moddate\r\n",
							"    ,CAST(CONCAT('-',CAST(i.userid as string)) as int) as tms_instruction_insby\r\n",
							"\r\n",
							"FROM dboLHInstruction i\r\n",
							"\"\"\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"STInstruction_tmp = STInstruction_lms.unionByName(STInstruction_tms, allowMissingColumns = True)\r\n",
							"STInstruction_tmp.createOrReplaceTempView(\"STInstruction_tmp\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"STInstruction\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    si.tms_instruction_id\r\n",
							"    ,si.tms_instruction_bookingid\r\n",
							"    ,si.tms_instruction_addressid\r\n",
							"    ,si.tms_instruction_instrtype\r\n",
							"    ,si.tms_instruction_onroute\r\n",
							"    ,si.tms_instruction_onrouteid\r\n",
							"    ,si.tms_instruction_sort\r\n",
							"    ,si.tms_instruction_onroutestatus\r\n",
							"    ,si.tms_instruction_note\r\n",
							"    ,si.tms_instruction_citybranchid\r\n",
							"    ,si.tms_instruction_citybranchname\r\n",
							"    ,si.tms_instruction_insdate\r\n",
							"    ,si.tms_instruction_moddate\r\n",
							"    ,si.tms_instruction_insby\r\n",
							"    ,i.id as orv_lhdelivery_id\r\n",
							"    ,i.did as orv_lhdelivery_did\r\n",
							"    ,i.lat as orv_lhdelivery_lat\r\n",
							"    ,i.lng as orv_lhdelivery_lng\r\n",
							"    ,i.actualeta as orv_lhdelivery_actualeta\r\n",
							"    ,i.eta as orv_lhdelivery_eta\r\n",
							"    ,i.tsgeofenceenter as orv_lhdelivery_tsgeofenceenter\r\n",
							"    ,i.tsdocuments as orv_lhdelivery_tsdocuments\r\n",
							"    ,i.customerref1 as orv_lhdelivery_customerref1\r\n",
							"    ,i.customerref2 as orv_lhdelivery_customerref2\r\n",
							"    ,i.trailersize as orv_lhdelivery_trailersize\r\n",
							"    ,i.cargoweight as orv_lhdelivery_cargoweight\r\n",
							"    ,i.cubicvolume as orv_lhdelivery_cubicvolume\r\n",
							"    ,i.geocodingstatus as orv_lhdelivery_geocodingstatus\r\n",
							"    ,i.status as orv_lhdelivery_status\r\n",
							"    ,i.optimizedorder as orv_lhdelivery_optimizedorder\r\n",
							"    ,i.triporder as orv_lhdelivery_triporder\r\n",
							"    ,i.sequence as orv_lhdelivery_sequence\r\n",
							"    ,i.bookingid as orv_lhdelivery_bookingid\r\n",
							"    ,i.grv as orv_lhdelivery_grv\r\n",
							"    ,i.chepslip as orv_lhdelivery_chepslip\r\n",
							"    ,i.type as orv_lhdelivery_type\r\n",
							"    ,i.insdate as orv_lhdelivery_insdate\r\n",
							"    ,i.isdirect as orv_lhdelivery_isdirect\r\n",
							"    ,i.notes as orv_lhdelivery_notes\r\n",
							"    ,i.contactperson as orv_lhdelivery_contactperson\r\n",
							"    ,i.contactnumber as orv_lhdelivery_contactnumber\r\n",
							"    ,i.trailerfleetcode as orv_lhdelivery_trailerfleetcode\r\n",
							"    ,i.primarycustomerid as orv_lhdelivery_primarycustomerid\r\n",
							"    ,i.pcustomername as orv_lhdelivery_pcustomername\r\n",
							"    ,i.pcustomeraccountnumber as orv_lhdelivery_pcustomeraccountnumber\r\n",
							"    ,i.pcustomerrevenuecode as orv_lhdelivery_pcustomerrevenuecode\r\n",
							"    ,i.secondarycustomerid as orv_lhdelivery_secondarycustomerid\r\n",
							"    ,i.scustomername as orv_lhdelivery_scustomername\r\n",
							"    ,i.scustomeraccountnumber as orv_lhdelivery_scustomeraccountnumber\r\n",
							"    ,i.scustomerrevenuecode as orv_lhdelivery_scustomerrevenuecode\r\n",
							"    ,i.actiondate as orv_lhdelivery_actiondate\r\n",
							"    ,i.tsgeofenceexit as orv_lhdelivery_tsgeofenceexit\r\n",
							"    ,i.pctmsid as orv_lhdelivery_pctmsid\r\n",
							"    ,i.sctmsid as orv_lhdelivery_sctmsid\r\n",
							"    ,i.customorder as orv_lhdelivery_customorder\r\n",
							"    ,i.skipdate as orv_lhdelivery_skipdate\r\n",
							"    ,i.skipreason as orv_lhdelivery_skipreason\r\n",
							"    ,i.outofgeofencereason as orv_lhdelivery_outofgeofencereason\r\n",
							"    ,i.tsarrivedcustomer as orv_lhdelivery_tsarrivedcustomer\r\n",
							"    ,i.tsdroppedoff as orv_lhdelivery_tsdroppedoff\r\n",
							"    ,i.tsstartoffloading as orv_lhdelivery_tsstartoffloading\r\n",
							"    ,i.tsstartloading as orv_lhdelivery_tsstartloading\r\n",
							"    ,i.tsloaded as orv_lhdelivery_tsloaded\r\n",
							"    ,i.tsfinishedoffloading as orv_lhdelivery_tsfinishedoffloading\r\n",
							"    ,i.tsdocumnetshanddovedriver as orv_lhdelivery_tsdocumnetshanddovedriver\r\n",
							"    ,i.tsleavingcustomer as orv_lhdelivery_tsleavingcustomer\r\n",
							"    ,i.actionsubtype as orv_lhdelivery_actionsubtype\r\n",
							"    ,i.tsstart as orv_lhdelivery_tsstart\r\n",
							"    ,i.signame as orv_lhdelivery_signame\r\n",
							"    ,i.signcomment as orv_lhdelivery_signcomment\r\n",
							"    ,i.signdate as orv_lhdelivery_signdate\r\n",
							"    ,i.tsendtate as orv_lhdelivery_tsendtate\r\n",
							"    ,i.tsentergeofenceapp as orv_lhdelivery_tsentergeofenceapp\r\n",
							"    ,i.tsexitgeofenceapp as orv_lhdelivery_tsexitgeofenceapp\r\n",
							"    ,i.tmsid as orv_lhdelivery_tmsid\r\n",
							"    ,i.subtype as orv_lhdelivery_subtype\r\n",
							"    ,i.needbotrailerver as orv_lhdelivery_needbotrailerver\r\n",
							"    ,i.secondtrailerfleetcode as orv_lhdelivery_secondtrailerfleetcode\r\n",
							"    ,i.trailerverlat as orv_lhdelivery_trailerverlat\r\n",
							"    ,i.trailerverlng as orv_lhdelivery_trailerverlng\r\n",
							"    ,i.tstrailerver as orv_lhdelivery_tstrailerver\r\n",
							"    ,i.podlat as orv_lhdelivery_podlat\r\n",
							"    ,i.podlng as orv_lhdelivery_podlng\r\n",
							"    ,i.skiplat as orv_lhdelivery_skiplat\r\n",
							"    ,i.skiplng as orv_lhdelivery_skiplng\r\n",
							"    ,i.uncanceldate as orv_lhdelivery_uncanceldate\r\n",
							"    --,i.citybranchname as orv_lhdelivery_citybranchname\r\n",
							"\r\n",
							"FROM STInstruction_tmp si\r\n",
							"LEFT JOIN publicLHInstruction i on i.tmsid = si.tms_instruction_id\r\n",
							""
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"STInstruction = spark.sql(\"SELECT * FROM STInstruction\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")\r\n",
							"\r\n",
							"#STInstruction.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/STInstruction.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 8
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STInvoice')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d1f03df7-a3a2-462d-a4f6-42bf1465d89d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccountRead + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the publicinvoice TMS Table\r\n",
							"publicinvoice = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinvoice.parquet', format='parquet')\r\n",
							"publicinvoice.createOrReplaceTempView(\"publicinvoice\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicinvoiceitem TMS Table\r\n",
							"publicinvoiceitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinvoiceitem.parquet', format='parquet')\r\n",
							"publicinvoiceitem.createOrReplaceTempView(\"publicinvoiceitem\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stinvoice\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    i.id as tms_invoice_id\r\n",
							"    ,i.customerid as tms_invoice_customerid\r\n",
							"    ,to_timestamp(i.invoicedate) as tms_invoice_invoicedate\r\n",
							"    ,i.reference as tms_invoice_reference\r\n",
							"    ,i.status as tms_invoice_status\r\n",
							"    ,i.insby as tms_invoice_insby\r\n",
							"    ,to_timestamp(i.insdate) as tms_invoice_insdate\r\n",
							"    ,i.total as tms_invoice_total\r\n",
							"    ,i.vat as tms_invoice_vat\r\n",
							"    ,i.invoicenum as tms_invoice_invoicenum\r\n",
							"    ,i.opaqueid as tms_invoice_opaqueid\r\n",
							"    ,i.sapstatus as tms_invoice_sapstatus\r\n",
							"    ,i.sapid as tms_invoice_sapid\r\n",
							"    ,to_timestamp(i.sendsapdate) as tms_invoice_sendsapdate\r\n",
							"    ,i.legacyid as tms_invoice_legacyid\r\n",
							"    ,i.customercode as tms_invoice_customercode\r\n",
							"    ,i.revennuecode as tms_invoice_revennuecode\r\n",
							"    ,i.depotcode  as tms_invoice_depotcode \r\n",
							"    ,i2.id as tms_invoiceitem_id\r\n",
							"    ,i2.invoiceid as tms_invoiceitem_invoiceid\r\n",
							"    ,i2.bookingid as tms_invoiceitem_bookingid\r\n",
							"    ,i2.amount as tms_invoiceitem_amount\r\n",
							"    ,i2.vat as tms_invoiceitem_vat\r\n",
							"    ,i2.linetotal as tms_invoiceitem_linetotal\r\n",
							"    ,to_timestamp(i2.insdate) as tms_invoiceitem_insdate\r\n",
							"    ,to_timestamp(i2.moddate) as tms_invoiceitem_moddate\r\n",
							"    ,i2.insby as tms_invoiceitem_insby\r\n",
							"    ,i2.linenum as tms_invoiceitem_linenum\r\n",
							"    ,i2.legacyid as tms_invoiceitem_legacyid\r\n",
							"    ,i2.sapid as tms_invoiceitem_sapid\r\n",
							"    ,i2.vatable as tms_invoiceitem_vatable\r\n",
							"    ,i2.routeid as tms_invoiceitem_routeid\r\n",
							"    ,i2.routename as tms_invoiceitem_routename\r\n",
							"FROM publicinvoice i\r\n",
							"LEFT JOIN publicinvoiceitem i2 on i2.invoiceid = i.id"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stinvoice = spark.sql(\"SELECT * FROM stinvoice\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stinvoice.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stinvoice.parquet', mode = \"overwrite\")\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STLMSTrack')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "052f3d70-e50e-41df-8204-0c14acf4bf04"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the ssttrackunion LMS Table\r\n",
							"ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstwaybillsperparcel LMS Table\r\n",
							"sstwaybillsperparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstwaybillsperparcel.parquet', format='parquet')\r\n",
							"sstwaybillsperparcel.createOrReplaceTempView(\"sstwaybillsperparcel\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stlmstrack\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"t.ID as lms_track_id,\r\n",
							"t.LoadID as lms_track_loadid,\r\n",
							"t.ParcelID as lms_track_parcelid,\r\n",
							"w.lms_waybillsperparcel_waybillid as lms_track_waybillid,\r\n",
							"t.fromlocid as lms_track_fromlocid,\r\n",
							"t.tolocid as lms_track_tolocid,\r\n",
							"t.TrackTypeID as lms_track_tracktypeid,\r\n",
							"t.OpenDt as lms_track_opendt,\r\n",
							"t.CloseDt as lms_track_closedt\r\n",
							"\r\n",
							"FROM ssttrackunion t\r\n",
							"LEFT JOIN sstwaybillsperparcel w on w.lms_waybillsperparcel_loadid = t.loadid and w.lms_waybillsperparcel_parcelid = t.parcelid"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmstrack = spark.sql(\"SELECT * FROM stlmstrack\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmstrack.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet', mode = \"overwrite\")\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STLinehaulFacts')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a2c5a6ae-a674-499f-bf55-8d1320d9dc90"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccountRead + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the publiccustomer TMS Table\r\n",
							"publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiccustomer.parquet', format='parquet')\r\n",
							"publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicthirdparty TMS Table\r\n",
							"publicthirdparty = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicthirdparty.parquet', format='parquet')\r\n",
							"publicthirdparty.createOrReplaceTempView(\"publicthirdparty\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicroute TMS Table\r\n",
							"publicroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicroute.parquet', format='parquet')\r\n",
							"publicroute.createOrReplaceTempView(\"publicroute\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicaddress TMS Table\r\n",
							"publicaddress = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicaddress.parquet', format='parquet')\r\n",
							"publicaddress.createOrReplaceTempView(\"publicaddress\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicfuelcard TMS Table\r\n",
							"publicfuelcard = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfuelcard.parquet', format='parquet')\r\n",
							"publicfuelcard.createOrReplaceTempView(\"publicfuelcard\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicfuelzone TMS Table\r\n",
							"publicfuelzone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfuelzone.parquet', format='parquet')\r\n",
							"publicfuelzone.createOrReplaceTempView(\"publicfuelzone\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicfuelzonehistory TMS Table\r\n",
							"publicfuelzonehistory = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfuelzonehistory.parquet', format='parquet')\r\n",
							"publicfuelzonehistory.createOrReplaceTempView(\"publicfuelzonehistory\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicratecomponent TMS Table\r\n",
							"publicratecomponent = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicratecomponent.parquet', format='parquet')\r\n",
							"publicratecomponent.createOrReplaceTempView(\"publicratecomponent\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicrateprofile TMS Table\r\n",
							"publicrateprofile = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicrateprofile.parquet', format='parquet')\r\n",
							"publicrateprofile.createOrReplaceTempView(\"publicrateprofile\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicselist TMS Table\r\n",
							"publicselist = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicselist.parquet', format='parquet')\r\n",
							"publicselist.createOrReplaceTempView(\"publicselist\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicselistitem TMS Table\r\n",
							"publicselistitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicselistitem.parquet', format='parquet')\r\n",
							"publicselistitem.createOrReplaceTempView(\"publicselistitem\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdriverpay TMS Table\r\n",
							"publicdriverpay = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpay.parquet', format='parquet')\r\n",
							"publicdriverpay.createOrReplaceTempView(\"publicdriverpay\")\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdriverpay\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    d.id as tms_driverpay_id\r\n",
							"    ,d.routeid as tms_driverpay_routeid\r\n",
							"    ,d.triprate as tms_driverpay_triprate\r\n",
							"    ,d.mealrate as tms_driverpay_mealrate\r\n",
							"    ,d.linkrate as tms_driverpay_linkrate\r\n",
							"    ,d.sleepoverrate as tms_driverpay_sleepoverrate\r\n",
							"    ,d.numsleepover as tms_driverpay_numsleepover\r\n",
							"    ,d.nummeal as tms_driverpay_nummeal\r\n",
							"    ,to_timestamp(d.validfromdate) as tms_driverpay_validfromdate\r\n",
							"    ,to_timestamp(d.validtodate) as tms_driverpay_validtodate\r\n",
							"    ,to_timestamp(d.insdate) as tms_driverpay_insdate\r\n",
							"    ,to_timestamp(d.moddate) as tms_driverpay_moddate\r\n",
							"    ,d.insby as tms_driverpay_insby\r\n",
							"    ,d.airtimerate as tms_driverpay_airtimerate\r\n",
							"    ,d.status as tms_driverpay_status\r\n",
							"    ,d.legacyid as tms_driverpay_legacyid\r\n",
							"FROM publicdriverpay d\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdriverpay = spark.sql(\"SELECT * FROM stdriverpay\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdriverpay.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdriverpay.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdriverpay.dtypes"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stfuelcard\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    f.id as tms_fuelcard_id\r\n",
							"    ,f.eid as tms_fuelcard_eid\r\n",
							"    ,f.entity as tms_fuelcard_entity\r\n",
							"    ,f.baseprice as tms_fuelcard_baseprice\r\n",
							"    ,f.routeid as tms_fuelcard_routeid\r\n",
							"    ,f.operatingpercentage as tms_fuelcard_operatingpercentage\r\n",
							"    ,to_timestamp(f.insdate) as tms_fuelcard_insdate\r\n",
							"    ,to_timestamp(f.activefromdate) as tms_fuelcard_activefromdate\r\n",
							"    ,to_timestamp(f.activetodate) as tms_fuelcard_activetodate\r\n",
							"    ,to_timestamp(f.moddate) as tms_fuelcard_moddate\r\n",
							"    ,f.status as tms_fuelcard_status\r\n",
							"    ,f.insby as tms_fuelcard_insby\r\n",
							"    ,f.zoneid as tms_fuelcard_zoneid\r\n",
							"    ,f.legacyid as tms_fuelcard_legacyid\r\n",
							"\r\n",
							"FROM publicfuelcard f"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"stfuelcard = spark.sql(\"SELECT * FROM stfuelcard\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"stfuelcard.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfuelcard.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stfuelzone\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    f.id as tms_fuelzone_id\r\n",
							"    ,f.zonename as tms_fuelzone_zonename\r\n",
							"    ,f.rulingprice as tms_fuelzone_rulingprice\r\n",
							"    ,to_timestamp(f.insdate) as tms_fuelzone_insdate\r\n",
							"    ,to_timestamp(f.moddate) as tms_fuelzone_moddate\r\n",
							"    ,f.insby as tms_fuelzone_insby\r\n",
							"    ,f.lastrulingprice as tms_fuelzone_lastrulingprice\r\n",
							"    ,f.legacyid as tms_fuelzone_legacyid\r\n",
							"\r\n",
							"FROM publicfuelzone f\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"stfuelzone = spark.sql(\"SELECT * FROM stfuelzone\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"stfuelzone.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfuelzone.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stfuelzonehistory\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    f.id as tms_fuelzonehistory_id\r\n",
							"    ,f.zoneid as tms_fuelzonehistory_zoneid\r\n",
							"    ,f.rulingprice as tms_fuelzonehistory_rulingprice\r\n",
							"    ,f.validfromdate as tms_fuelzonehistory_validfromdate\r\n",
							"    ,f.validtodate as tms_fuelzonehistory_validtodate\r\n",
							"    ,f.editby as tms_fuelzonehistory_editby\r\n",
							"    ,to_timestamp(f.insdate) as tms_fuelzonehistory_insdate\r\n",
							"    ,to_timestamp(f.moddate) as tms_fuelzonehistory_moddate\r\n",
							"\r\n",
							"\r\n",
							"FROM publicfuelzonehistory f\r\n",
							""
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stfuelzonehistory = spark.sql(\"SELECT * FROM stfuelzonehistory\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stfuelzonehistory.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfuelzonehistory.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stratecomponent\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    r.id as tms_ratecomponent_id\r\n",
							"    ,r.profileid as tms_ratecomponent_profileid\r\n",
							"    ,r.ratetype as tms_ratecomponent_ratetype\r\n",
							"    ,r.amount as tms_ratecomponent_amount\r\n",
							"    ,r.applyfuellevy as tms_ratecomponent_applyfuellevy\r\n",
							"    ,r.note as tms_ratecomponent_note\r\n",
							"    ,to_timestamp(r.insdate) as tms_ratecomponent_insdate\r\n",
							"    ,to_timestamp(r.moddate) as tms_ratecomponent_moddate\r\n",
							"    ,r.insby as tms_ratecomponent_insby\r\n",
							"    ,r.legacyid as tms_ratecomponent_legacyid\r\n",
							"\r\n",
							"\r\n",
							"FROM publicratecomponent r"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stratecomponent = spark.sql(\"SELECT * FROM stratecomponent\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stratecomponent.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stratecomponent.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"strateprofile\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    r.id as tms_rateprofile_id\r\n",
							"    ,r.eid as tms_rateprofile_eid\r\n",
							"    ,r.entity as tms_rateprofile_entity\r\n",
							"    ,r.trailersize as tms_rateprofile_trailersize\r\n",
							"    ,r.routeid as tms_rateprofile_routeid\r\n",
							"    ,r.profiletype as tms_rateprofile_profiletype\r\n",
							"    ,to_timestamp(r.fromdate) as tms_rateprofile_fromdate\r\n",
							"    ,to_timestamp(r.todate) as tms_rateprofile_todate\r\n",
							"    ,r.insby as tms_rateprofile_insby\r\n",
							"    ,r.status as tms_rateprofile_status\r\n",
							"    ,to_timestamp(r.insdate) as tms_rateprofile_insdate\r\n",
							"    ,to_timestamp(r.moddate) as tms_rateprofile_moddate\r\n",
							"    ,r.note as tms_rateprofile_note\r\n",
							"    ,r.legacyid as tms_rateprofile_legacyid\r\n",
							"    ,r.usedfuelprice as tms_rateprofile_usedfuelprice\r\n",
							"\r\n",
							"FROM publicrateprofile r\r\n",
							""
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"strateprofile = spark.sql(\"SELECT * FROM strateprofile\")"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"strateprofile.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/strateprofile.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttmslist\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    s.id as tms_list_id\r\n",
							"    ,s.slug as tms_list_slug\r\n",
							"    ,s.valuetype as tms_list_valuetype\r\n",
							"    ,s.descr as tms_list_descr\r\n",
							"    ,to_timestamp(s.insdate) as tms_list_insdate\r\n",
							"    ,to_timestamp(s.moddate) as tms_list_moddate\r\n",
							"    ,s.refcols as tms_list_refcols\r\n",
							"    ,s.editable  as tms_list_editable \r\n",
							"    ,s2.id as tms_listitem_id\r\n",
							"    ,s2.lid as tms_listitem_lid\r\n",
							"    ,s2.itemlabel as tms_listitem_itemlabel\r\n",
							"    ,s2.itemvalue as tms_listitem_itemvalue\r\n",
							"    ,s2.sort as tms_listitem_sort\r\n",
							"    ,s2.mdid as tms_listitem_mdid\r\n",
							"\r\n",
							"FROM publicselist s\r\n",
							"LEFT JOIN publicselistitem s2 on s2.lid = s.id\r\n",
							""
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttmslist = spark.sql(\"SELECT * FROM sttmslist\")"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttmslist.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/sttmslist.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttmslist.dtypes"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stprimarycustomer\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    c.id as tms_customer_id\r\n",
							"    ,c.status as tms_customer_status\r\n",
							"    ,c.name as tms_customer_name\r\n",
							"    ,c.parentid as tms_customer_parentid\r\n",
							"    ,c.accountnumber as tms_customer_accountnumber\r\n",
							"    ,c.revenuecode as tms_customer_revenuecode\r\n",
							"    ,to_timestamp(c.insdate) as tms_customer_insdate\r\n",
							"    ,to_timestamp(c.moddate) as tms_customer_moddate\r\n",
							"    ,c.insby as tms_customer_insby\r\n",
							"    ,c.opaqueid as tms_customer_opaqueid\r\n",
							"    ,c.email as tms_customer_email\r\n",
							"    ,c.areacode as tms_customer_areacode\r\n",
							"    ,c.mobilenum as tms_customer_mobilenum\r\n",
							"    ,c.legacyid as tms_customer_legacyid\r\n",
							"    ,c.billingmethod as tms_customer_billingmethod\r\n",
							"    ,c.adjustmetric as tms_customer_adjustmetric\r\n",
							"    ,c.adjustvalue as tms_customer_adjustvalue\r\n",
							"    ,c.adjustnegativeallowed as tms_customer_adjustnegativeallowed\r\n",
							"    ,c.adjustvalueusingprevmonth as tms_customer_adjustvalueusingprevmonth\r\n",
							"    ,c.excludefromnotinvoicedreport as tms_customer_excludefromnotinvoicedreport\r\n",
							"    ,c.logictype as tms_customer_logictype\r\n",
							"    ,c.minliability as tms_customer_minliability\r\n",
							" \r\n",
							"FROM publiccustomer c\r\n",
							"WHERE c.parentid is null\r\n",
							""
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stprimarycustomer = spark.sql(\"SELECT * FROM stprimarycustomer\")"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stprimarycustomer.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stprimarycustomer.parquet', mode = \"overwrite\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stsecondarycustomer\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    c.id as tms_customer_id\r\n",
							"    ,c.status as tms_customer_status\r\n",
							"    ,c.name as tms_customer_name\r\n",
							"    ,c.parentid as tms_customer_parentid\r\n",
							"    ,c.accountnumber as tms_customer_accountnumber\r\n",
							"    ,c.revenuecode as tms_customer_revenuecode\r\n",
							"    ,to_timestamp(c.insdate) as tms_customer_insdate\r\n",
							"    ,to_timestamp(c.moddate) as tms_customer_moddate\r\n",
							"    ,c.insby as tms_customer_insby\r\n",
							"    ,c.opaqueid as tms_customer_opaqueid\r\n",
							"    ,c.email as tms_customer_email\r\n",
							"    ,c.areacode as tms_customer_areacode\r\n",
							"    ,c.mobilenum as tms_customer_mobilenum\r\n",
							"    ,c.legacyid as tms_customer_legacyid\r\n",
							"    ,c.billingmethod as tms_customer_billingmethod\r\n",
							"    ,c.adjustmetric as tms_customer_adjustmetric\r\n",
							"    ,c.adjustvalue as tms_customer_adjustvalue\r\n",
							"    ,c.adjustnegativeallowed as tms_customer_adjustnegativeallowed\r\n",
							"    ,c.adjustvalueusingprevmonth as tms_customer_adjustvalueusingprevmonth\r\n",
							"    ,c.excludefromnotinvoicedreport as tms_customer_excludefromnotinvoicedreport\r\n",
							"    ,c.logictype as tms_customer_logictype\r\n",
							"    ,c.minliability as tms_customer_minliability\r\n",
							" \r\n",
							"FROM publiccustomer c\r\n",
							"WHERE c.parentid is not null\r\n",
							""
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsecondarycustomer = spark.sql(\"SELECT * FROM stsecondarycustomer\")"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsecondarycustomer.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stsecondarycustomer.parquet', mode = \"overwrite\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stthirdparty\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    t.id as tms_thirdparty_id\r\n",
							"    ,t.name as tms_thirdparty_name\r\n",
							"    ,t.areacode as tms_thirdparty_areacode\r\n",
							"    ,t.telnumber as tms_thirdparty_telnumber\r\n",
							"    ,t.mobareacode as tms_thirdparty_mobareacode\r\n",
							"    ,t.mobnumer as tms_thirdparty_mobnumer\r\n",
							"    ,t.contact as tms_thirdparty_contact\r\n",
							"    ,t.address as tms_thirdparty_address\r\n",
							"    ,t.streetno as tms_thirdparty_streetno\r\n",
							"    ,t.zipcode as tms_thirdparty_zipcode\r\n",
							"    ,t.city as tms_thirdparty_city\r\n",
							"    ,t.province as tms_thirdparty_province\r\n",
							"    ,t.status as tms_thirdparty_status\r\n",
							"    ,t.mdvoid as tms_thirdparty_mdvoid\r\n",
							"    ,t.registration as tms_thirdparty_registration\r\n",
							"    ,t.email as tms_thirdparty_email\r\n",
							"    ,t.accnumber as tms_thirdparty_accnumber\r\n",
							"    ,to_timestamp(t.insdate) as tms_thirdparty_insdate\r\n",
							"    ,to_timestamp(t.moddate) as tms_thirdparty_moddate\r\n",
							"    ,t.gitstatus as tms_thirdparty_gitstatus\r\n",
							"    ,t.legacyid as tms_thirdparty_legacyid\r\n",
							"    ,t.lat as tms_thirdparty_lat\r\n",
							"    ,t.lng as tms_thirdparty_lng\r\n",
							"    ,t.note as tms_thirdparty_note\r\n",
							"    ,t.revenuecode as tms_thirdparty_revenuecode\r\n",
							"    ,t.country as tms_thirdparty_country\r\n",
							"\r\n",
							"FROM publicthirdparty t"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stthirdparty = spark.sql(\"SELECT * FROM stthirdparty\")"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stthirdparty.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stthirdparty.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparentroute\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    r.id as tms_parentroute_id\r\n",
							"    ,r.name as tms_parentroute_name\r\n",
							"    ,r.slug as tms_parentroute_slug\r\n",
							"    ,r.parentroute as tms_parentroute_parentroute\r\n",
							"    ,to_timestamp(r.insdate) as tms_parentroute_insdate\r\n",
							"    ,to_timestamp(r.moddate) as tms_parentroute_moddate\r\n",
							"    ,r.insby as tms_parentroute_insby\r\n",
							"    ,r.status as tms_parentroute_status\r\n",
							"    ,r.crossborder as tms_parentroute_crossborder\r\n",
							"    ,r.roundtripdays as tms_parentroute_roundtripdays\r\n",
							"    ,r.distance as tms_parentroute_distance\r\n",
							"    ,r.duration as tms_parentroute_duration\r\n",
							"    ,r.numofuse as tms_parentroute_numofuse\r\n",
							"    ,r.legacyid as tms_parentroute_legacyid\r\n",
							"    ,r.local as tms_parentroute_local\r\n",
							"\r\n",
							"FROM publicroute r\r\n",
							"WHERE r.parentroute is null\r\n",
							""
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stparentroute = spark.sql(\"SELECT * FROM stparentroute\")"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stparentroute.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stparentroute.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stopsroute\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    r.id as tms_parentroute_id\r\n",
							"    ,r.name as tms_parentroute_name\r\n",
							"    ,r.slug as tms_parentroute_slug\r\n",
							"    ,r.parentroute as tms_parentroute_parentroute\r\n",
							"    ,to_timestamp(r.insdate) as tms_parentroute_insdate\r\n",
							"    ,to_timestamp(r.moddate) as tms_parentroute_moddate\r\n",
							"    ,r.insby as tms_parentroute_insby\r\n",
							"    ,r.status as tms_parentroute_status\r\n",
							"    ,r.crossborder as tms_parentroute_crossborder\r\n",
							"    ,r.roundtripdays as tms_parentroute_roundtripdays\r\n",
							"    ,r.distance as tms_parentroute_distance\r\n",
							"    ,r.duration as tms_parentroute_duration\r\n",
							"    ,r.numofuse as tms_parentroute_numofuse\r\n",
							"    ,r.legacyid as tms_parentroute_legacyid\r\n",
							"    ,r.local as tms_parentroute_local\r\n",
							"\r\n",
							"FROM publicroute r\r\n",
							"WHERE r.parentroute is not null\r\n",
							""
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stopsroute = spark.sql(\"SELECT * FROM stopsroute\")"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stopsroute.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stopsroute.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 41
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STLoadChild')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "65845163-beaf-4f96-a8e3-71785d75aa07"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the sstloadchild LMS Table\r\n",
							"sstloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadchild.parquet', format='parquet')\r\n",
							"sstloadchild.createOrReplaceTempView(\"sstloadchild\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stloadchild\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lms_loads_id as lms_loadchild_id\r\n",
							"    ,lms_loads_routeid as lms_loadchild_routeid\r\n",
							"    ,lms_loads_driverid as lms_loadchild_driverid\r\n",
							"    ,lms_loads_sealno as lms_loadchild_sealno\r\n",
							"    ,lms_loads_vehicleid as lms_loadchild_vehicleid\r\n",
							"    ,lms_loads_ttypeid as lms_loadchild_ttypeid\r\n",
							"    ,lms_loads_userid as lms_loadchild_userid\r\n",
							"    ,lms_loads_ldate as lms_loadchild_ldate\r\n",
							"    ,lms_loads_courierid as lms_loadchild_courierid\r\n",
							"    ,lms_loads_site as lms_loadchild_site\r\n",
							"    ,lms_loads_fromlocid as lms_loadchild_fromlocid\r\n",
							"    ,lms_loads_tolocid as lms_loadchild_tolocid\r\n",
							"    ,lms_loads_cdate as lms_loadchild_cdate\r\n",
							"    ,lms_loads_trailer1 as lms_loadchild_trailer1\r\n",
							"    ,lms_loads_trailer2 as lms_loadchild_trailer2\r\n",
							"    ,lms_loads_cref as lms_loadchild_cref\r\n",
							"    ,lms_loads_debriefed as lms_loadchild_debriefed\r\n",
							"    ,lms_loads_mrpflag as lms_loadchild_mrpflag\r\n",
							"    ,lms_loads_mrpcflag as lms_loadchild_mrpcflag\r\n",
							"    ,lms_loads_finalflag as lms_loadchild_finalflag\r\n",
							"    ,lms_loads_alidaflag as lms_loadchild_alidaflag\r\n",
							"    ,lms_loads_puibts as lms_loadchild_puibts\r\n",
							"    ,lms_loads_pucols as lms_loadchild_pucols\r\n",
							"    ,lms_loads_planningref as lms_loadchild_planningref\r\n",
							"    ,lms_loads_interfacedate as lms_loadchild_interfacedate\r\n",
							"    ,lms_loads_nosealsret as lms_loadchild_nosealsret\r\n",
							"    ,lms_loads_excludeopsi as lms_loadchild_excludeopsi\r\n",
							"    ,lms_loads_dccref as lms_loadchild_dccref\r\n",
							"    ,lms_loads_srouteid as lms_loadchild_srouteid\r\n",
							"    ,lms_loads_fuellitres as lms_loadchild_fuellitres\r\n",
							"    ,lms_loads_outsourcedcrew as lms_loadchild_outsourcedcrew\r\n",
							"    ,lms_loads_masterloadid as lms_loadchild_masterloadid\r\n",
							"    ,lms_loads_securitygatedespatched as lms_loadchild_securitygatedespatched\r\n",
							"    ,lms_loads_securitygateuserid as lms_loadchild_securitygateuserid\r\n",
							"    ,lms_loads_securitygatearrived as lms_loadchild_securitygatearrived\r\n",
							"    ,lms_loads_securitygatearriveduserid as lms_loadchild_securitygatearriveduserid\r\n",
							"    ,lms_loads_lastupdate as lms_loadchild_lastupdate\r\n",
							"    ,lms_loads_bayno as lms_loadchild_bayno\r\n",
							"    ,lms_loads_costs as lms_loadchild_costs\r\n",
							"    ,lms_loads_estdeparturedatetime as lms_loadchild_estdeparturedatetime\r\n",
							"    ,lms_loads_totalweight as lms_loadchild_totalweight\r\n",
							"    ,lms_loads_ovrignore as lms_loadchild_ovrignore\r\n",
							"    ,lms_loads_childloadid as lms_loadchild_childloadid\r\n",
							"    ,lms_loads_orvcode as lms_loadchild_orvcode\r\n",
							"    ,lms_loads_companyid as lms_loadchild_companyid\r\n",
							"    ,lms_loads_editloaddate as lms_loadchild_editloaddate\r\n",
							"    ,lms_loads_reopeneddate as lms_loadchild_reopeneddate\r\n",
							"    ,lms_loads_reopeneduserid as lms_loadchild_reopeneduserid\r\n",
							"    ,lms_loads_novehicle as lms_loadchild_novehicle\r\n",
							"    ,lms_loads_mobilefeedbackreasonid as lms_loadchild_mobilefeedbackreasonid\r\n",
							"    ,lms_loads_direct as lms_loadchild_direct\r\n",
							"    ,lms_loads_noofpcls as lms_loadchild_noofpcls\r\n",
							"    ,lms_loads_debriefdt as lms_loadchild_debriefdt\r\n",
							"    ,lms_loads_httpcode as lms_loadchild_httpcode\r\n",
							"    ,lms_loads_parentloadid as lms_loadchild_parentloadid\r\n",
							"    ,lms_loads_mrpobversion as lms_loadchild_mrpobversion\r\n",
							"    ,lms_parcelbyload_loadid as lms_loadchild_loadid\r\n",
							"    ,lms_parcelbyload_aggweight as lms_loadchild_aggweight\r\n",
							"    ,lms_parcelbyload_aggchargeweight as lms_loadchild_aggchargeweight\r\n",
							"    ,lms_parcelbyload_aggvolweight as lms_loadchild_aggvolweight\r\n",
							"    ,lms_parcelbyload_aggvolumiserweight as lms_loadchild_aggvolumiserweight\r\n",
							"    ,lms_parcelbyload_noparcels as lms_loadchild_noparcels\r\n",
							"\r\n",
							"FROM sstloadchild"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadchild = spark.sql(\"SELECT * FROM stloadchild\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadchild.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stloadchild.parquet', mode = \"overwrite\")\r\n",
							"\r\n",
							"print(\"SUCCESS\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STLoadParent')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "81a10d6d-d4ce-4cf8-a209-f16f20887244"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the sstloadparent LMS Table\r\n",
							"sstloadparent = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadparent.parquet', format='parquet')\r\n",
							"sstloadparent.createOrReplaceTempView(\"sstloadparent\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stloadparent\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lms_loadparent_parentloadid \r\n",
							"    ,lms_loadparent_aggweight \r\n",
							"    ,lms_loadparent_aggchargeweight\r\n",
							"    ,lms_loadparent_aggvolweight\r\n",
							"    ,lms_loadparent_aggvolumiserweight\r\n",
							"    ,lms_loadparent_noparcels\r\n",
							"    ,orv_dispatch_id\r\n",
							"    ,orv_dispatch_lmsid as orv_dispatch_lmsid\r\n",
							"    ,orv_dispatch_vid as orv_dispatch_vid\r\n",
							"    ,orv_dispatch_did as orv_dispatch_did\r\n",
							"    ,orv_dispatch_status as orv_dispatch_status\r\n",
							"    ,orv_dispatch_startdate as orv_dispatch_startdate\r\n",
							"    ,orv_dispatch_stopdate as orv_dispatch_stopdate\r\n",
							"    ,orv_dispatch_vehicletype as orv_dispatch_vehicletype\r\n",
							"    ,orv_dispatch_uid as orv_dispatch_uid\r\n",
							"    ,orv_dispatch_estdepdate as orv_dispatch_estdepdate\r\n",
							"    ,orv_dispatch_trailer as orv_dispatch_trailer\r\n",
							"    ,orv_dispatch_trailer2 as orv_dispatch_trailer2\r\n",
							"    ,orv_dispatch_fromlocid as orv_dispatch_fromlocid\r\n",
							"    ,orv_dispatch_tolocid as orv_dispatch_tolocid\r\n",
							"    ,orv_dispatch_site as orv_dispatch_site\r\n",
							"    ,orv_dispatch_lastupdate as orv_dispatch_lastupdate\r\n",
							"    ,orv_dispatch_etastatus as orv_dispatch_etastatus\r\n",
							"    ,orv_dispatch_startinglat as orv_dispatch_startinglat\r\n",
							"    ,orv_dispatch_startinglng as orv_dispatch_startinglng\r\n",
							"    ,orv_dispatch_endinglat as orv_dispatch_endinglat\r\n",
							"    ,orv_dispatch_endinglng as orv_dispatch_endinglng\r\n",
							"    ,orv_dispatch_startingfrom as orv_dispatch_startingfrom\r\n",
							"    ,orv_dispatch_goingto as orv_dispatch_goingto\r\n",
							"    ,orv_dispatch_importissue as orv_dispatch_importissue\r\n",
							"    ,orv_dispatch_insdate as orv_dispatch_insdate\r\n",
							"    ,orv_dispatch_estarrdate as orv_dispatch_estarrdate\r\n",
							"    ,orv_dispatch_duration as orv_dispatch_duration\r\n",
							"    ,orv_dispatch_distance as orv_dispatch_distance\r\n",
							"    ,orv_dispatch_cost as orv_dispatch_cost\r\n",
							"    ,orv_dispatch_stoplat as orv_dispatch_stoplat\r\n",
							"    ,orv_dispatch_stoplng as orv_dispatch_stoplng\r\n",
							"    ,orv_dispatch_stopreason as orv_dispatch_stopreason\r\n",
							"    ,orv_dispatch_startodo as orv_dispatch_startodo\r\n",
							"    ,orv_dispatch_stopodo as orv_dispatch_stopodo\r\n",
							"    ,orv_dispatch_expduration as orv_dispatch_expduration\r\n",
							"    ,orv_dispatch_expdistance as orv_dispatch_expdistance\r\n",
							"    ,orv_dispatch_expcost as orv_dispatch_expcost\r\n",
							"    ,orv_dispatch_collectionid as orv_dispatch_collectionid\r\n",
							"    ,orv_dispatch_crew as orv_dispatch_crew\r\n",
							"    ,orv_dispatch_crewnames as orv_dispatch_crewnames\r\n",
							"    ,orv_dispatch_bocloseuid as orv_dispatch_bocloseuid\r\n",
							"    ,orv_dispatch_routing as orv_dispatch_routing\r\n",
							"    ,orv_dispatch_swapct as orv_dispatch_swapct\r\n",
							"    ,orv_dispatch_debriefed as orv_dispatch_debriefed\r\n",
							"    ,orv_dispatch_debriefnotes as orv_dispatch_debriefnotes\r\n",
							"    ,orv_dispatch_bopin as orv_dispatch_bopin\r\n",
							"    ,orv_dispatch_cpicost as orv_dispatch_cpicost\r\n",
							"    ,orv_dispatch_labourcost as orv_dispatch_labourcost\r\n",
							"    ,orv_dispatch_maintcost as orv_dispatch_maintcost\r\n",
							"    ,orv_dispatch_inscost as orv_dispatch_inscost\r\n",
							"    ,orv_dispatch_tollcost as orv_dispatch_tollcost\r\n",
							"    ,orv_dispatch_fuelcost as orv_dispatch_fuelcost\r\n",
							"    ,orv_dispatch_internal as orv_dispatch_internal\r\n",
							"    ,orv_dispatch_childids as orv_dispatch_childids\r\n",
							"    ,orv_dispatch_guid as orv_dispatch_guid\r\n",
							"    ,orv_dispatch_timedefinite as orv_dispatch_timedefinite\r\n",
							"    ,orv_dispatch_orvcode as orv_dispatch_orvcode\r\n",
							"    ,orv_dispatch_tsstopdepoenter as orv_dispatch_tsstopdepoenter\r\n",
							"    ,orv_dispatch_tsstartdepoexit as orv_dispatch_tsstartdepoexit\r\n",
							"    ,orv_dispatch_reroutect as orv_dispatch_reroutect\r\n",
							"    ,orv_dispatch_actualarrdate as orv_dispatch_actualarrdate\r\n",
							"    ,orv_dispatch_physicalstartlat as orv_dispatch_physicalstartlat\r\n",
							"    ,orv_dispatch_physicalstartlng as orv_dispatch_physicalstartlng\r\n",
							"    ,orv_dispatch_tsstartdepoexitapp as orv_dispatch_tsstartdepoexitapp\r\n",
							"    ,orv_dispatch_tsstopdepoenterapp as orv_dispatch_tsstopdepoenterapp\r\n",
							"    ,orv_dispatch_uncanceldate as orv_dispatch_uncanceldate\r\n",
							"    ,orv_dispatch_uncancelusername as orv_dispatch_uncancelusername\r\n",
							"    ,orv_dispatch_lmsdebrifed as orv_dispatch_lmsdebrifed\r\n",
							"    ,orv_dispatch_reviseddebrief as orv_dispatch_reviseddebrief\r\n",
							"    ,orv_dispatch_lhtransporter as orv_dispatch_lhtransporter\r\n",
							"    ,orv_dispatch_triptype as orv_dispatch_triptype\r\n",
							"    ,orv_dispatch_startreason as orv_dispatch_startreason\r\n",
							"    ,orv_dispatch_route as orv_dispatch_route\r\n",
							"    ,orv_dispatch_tmstraileridentify as orv_dispatch_tmstraileridentify\r\n",
							"    ,orv_dispatch_tmstrailer2identify as orv_dispatch_tmstrailer2identify\r\n",
							"    ,orv_dispatch_tmscontroller as orv_dispatch_tmscontroller\r\n",
							"    ,orv_dispatch_routekey as orv_dispatch_routekey\r\n",
							"    ,orv_dispatch_courierid as orv_dispatch_courierid\r\n",
							"    ,orv_dispatch_originalstartdate as orv_dispatch_originalstartdate\r\n",
							"    ,orv_dispatch_originalextarrival as orv_dispatch_originalextarrival\r\n",
							"    ,orv_dispatch_recomputeoriginals as orv_dispatch_recomputeoriginals\r\n",
							"    ,orv_dispatch_originalextdistance as orv_dispatch_originalextdistance\r\n",
							"    ,orv_dispatch_originalextduration as orv_dispatch_originalextduration\r\n",
							"    ,orv_dispatch_moddate as orv_dispatch_moddate\r\n",
							"    ,orv_dispatch_tmsmode as orv_dispatch_tmsmode\r\n",
							"    ,orv_dispatch_driversignature as orv_dispatch_driversignature\r\n",
							" \r\n",
							"FROM sstloadparent"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadparent = spark.sql(\"SELECT * FROM stloadparent\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadparent.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet', mode = \"overwrite\")\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STMDPeople')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/MasterData"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b4279951-f4e4-4ff0-aa8d-ca47ae183d46"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the dbopeoplebasic MD Table\r\n",
							"dbopeoplebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeoplebasic.parquet', format='parquet')\r\n",
							"dbopeoplebasic.createOrReplaceTempView(\"dbopeoplebasic\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbopeopledriver MD Table\r\n",
							"dbopeopledriver = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeopledriver.parquet', format='parquet')\r\n",
							"dbopeopledriver.createOrReplaceTempView(\"dbopeopledriver\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbopeoplepersonal MD Table\r\n",
							"dbopeoplepersonal = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeoplepersonal.parquet', format='parquet')\r\n",
							"dbopeoplepersonal.createOrReplaceTempView(\"dbopeoplepersonal\")\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stmdpeople\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    pb.id as md_people_id\r\n",
							"    ,pb.empid as md_people_empid\r\n",
							"    ,pb.employeecode as md_people_employeecode\r\n",
							"    ,pb.uid as md_people_uid\r\n",
							"    ,pb.firstname as md_people_firstname\r\n",
							"    ,pb.lastname as md_people_lastname\r\n",
							"    ,pb.knownasname as md_people_knownasname\r\n",
							"    ,pb.birthdate as md_people_birthdate\r\n",
							"    ,pb.gender as md_people_gender\r\n",
							"    ,pb.cellno as md_people_cellno\r\n",
							"    ,pb.emailaddress as md_people_emailaddress\r\n",
							"    ,pb.nationality as md_people_nationality\r\n",
							"    ,pb.idnumber as md_people_idnumber\r\n",
							"    ,pb.passportno as md_people_passportno\r\n",
							"    ,pb.passportcountrycode as md_people_passportcountrycode\r\n",
							"    ,pb.idpassportno as md_people_idpassportno\r\n",
							"    ,to_timestamp(pb.dateengaged) as md_people_dateengaged\r\n",
							"    ,to_timestamp(pb.datejoinedgroup) as md_people_datejoinedgroup\r\n",
							"    ,pb.employeestatus as md_people_employeestatus\r\n",
							"    ,to_timestamp(pb.terminationdate) as md_people_terminationdate\r\n",
							"    ,pb.terminationreasonid as md_people_terminationreasonid\r\n",
							"    ,pb.depotcode as md_people_depotcode\r\n",
							"    ,pb.jobcategory as md_people_jobcategory\r\n",
							"    ,pb.jobtitle as md_people_jobtitle\r\n",
							"    ,pb.source as md_people_source\r\n",
							"    ,pb.insby as md_people_insby\r\n",
							"    ,pb.islinehaul as md_people_islinehaul\r\n",
							"    ,pb.companycode as md_people_companycode\r\n",
							"    ,pb.companydisplayname as md_people_companydisplayname\r\n",
							"    ,pb.companyrulecode as md_people_companyrulecode\r\n",
							"    ,pb.reportstoemployee as md_people_reportstoemployee\r\n",
							"    ,pb.reporttoempid as md_people_reporttoempid\r\n",
							"    ,pb.internalexternal as md_people_internalexternal\r\n",
							"    -- ,to_timestamp(pb.moddate) as md_people_moddate\r\n",
							"    -- ,to_timestamp(pb.insdate) as md_people_insdate\r\n",
							"    ,pd.id as md_people_driverid\r\n",
							"    ,pd.licenseno as md_people_licenseno\r\n",
							"    ,pd.driverrestriction as md_people_driverrestriction\r\n",
							"    ,pd.issuecountry as md_people_issuecountry\r\n",
							"    ,to_timestamp(pd.issuedate) as md_people_issuedate\r\n",
							"    ,to_timestamp(pd.licensevalidfrom) as md_people_licensevalidfrom\r\n",
							"    ,to_timestamp(pd.licensevalidto) as md_people_licensevalidto\r\n",
							"    ,pd.vehiclecode as md_people_vehiclecode\r\n",
							"    ,pd.vehiclerestriction as md_people_vehiclerestriction\r\n",
							"    ,pd.driverphoto as md_people_driverphoto\r\n",
							"    ,pd.licenseexpired as md_people_licenseexpired\r\n",
							"    ,pd.prdpcode as md_people_prdpcode\r\n",
							"    ,to_timestamp(pd.prdpexpiry) as md_people_prdpexpiry\r\n",
							"    ,pp.id as md_people_personalid\r\n",
							"    ,pp.physicalblock as md_people_physicalblock\r\n",
							"    ,pp.physicalcitytown as md_people_physicalcitytown\r\n",
							"    ,pp.physicalcomplex as md_people_physicalcomplex\r\n",
							"    ,pp.physicalcountrycode as md_people_physicalcountrycode\r\n",
							"    ,pp.physicaldistrictid as md_people_physicaldistrictid\r\n",
							"    ,pp.physicallevelfloor as md_people_physicallevelfloor\r\n",
							"    ,pp.physicalpostalcode as md_people_physicalpostalcode\r\n",
							"    ,pp.physicalprovince as md_people_physicalprovince\r\n",
							"    ,pp.physicalstreetfarmname as md_people_physicalstreetfarmname\r\n",
							"    ,pp.physicalstreetnumber as md_people_physicalstreetnumber\r\n",
							"    ,pp.physicalsuburbdistrict as md_people_physicalsuburbdistrict\r\n",
							"    ,pp.physicalunitpostalnumber as md_people_physicalunitpostalnumber\r\n",
							"    ,pp.postaladdressid as md_people_postaladdressid\r\n",
							"    ,pp.postaladdressservicetype as md_people_postaladdressservicetype\r\n",
							"    ,pp.postalblock as md_people_postalblock\r\n",
							"    ,pp.postalcitytown as md_people_postalcitytown\r\n",
							"    ,pp.postalcomplex as md_people_postalcomplex\r\n",
							"    ,pp.postalconcat as md_people_postalconcat\r\n",
							"    ,pp.postaldistrictid as md_people_postaldistrictid\r\n",
							"    ,pp.postallevelfloor as md_people_postallevelfloor\r\n",
							"    ,pp.postalpostalcode as md_people_postalpostalcode\r\n",
							"    ,pp.postalprovince as md_people_postalprovince\r\n",
							"    ,pp.postalstreetfarmname as md_people_postalstreetfarmname\r\n",
							"    ,pp.postalstreetnumber as md_people_postalstreetnumber\r\n",
							"    ,pp.postalsuburbdistrict as md_people_postalsuburbdistrict\r\n",
							"    ,pp.postalunitpostalnumber as md_people_postalunitpostalnumber\r\n",
							"    ,pp.racialgroup as md_people_racialgroup\r\n",
							"\r\n",
							"\r\n",
							"FROM dbopeoplebasic pb\r\n",
							"LEFT JOIN dbopeoplepersonal pp on pp.pid = pb.id\r\n",
							"LEFT JOIN dbopeopledriver pd on pd.pid = pb.id \r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmdpeople = spark.sql(\"SELECT * FROM stmdpeople\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmdpeople.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stmdpeople.parquet', mode = \"overwrite\")\r\n",
							"\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STMDVehicle')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/MasterData"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b0b8aadb-6a0c-4c6b-9cbb-3ad5052cf9d1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the dbovehiclebasic MD Table\r\n",
							"dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehicleadmin MD Table\r\n",
							"dbovehicleadmin = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehicleadmin.parquet', format='parquet')\r\n",
							"dbovehicleadmin.createOrReplaceTempView(\"dbovehicleadmin\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehicleoperations MD Table\r\n",
							"dbovehicleoperations = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehicleoperations.parquet', format='parquet')\r\n",
							"dbovehicleoperations.createOrReplaceTempView(\"dbovehicleoperations\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehiclefinance MD Table\r\n",
							"dbovehiclefinance = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclefinance.parquet', format='parquet')\r\n",
							"dbovehiclefinance.createOrReplaceTempView(\"dbovehiclefinance\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehicletracking MD Table\r\n",
							"dbovehicletracking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehicletracking.parquet', format='parquet')\r\n",
							"dbovehicletracking.createOrReplaceTempView(\"dbovehicletracking\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stmdvehicle\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    vb.id as md_vehicle_id\r\n",
							"    ,vb.uid as md_vehicle_uid\r\n",
							"    ,vb.vehicletype as md_vehicle_vehicletype\r\n",
							"    ,vb.internalexternal as md_vehicle_internalexternal\r\n",
							"    ,vb.activeflag as md_vehicle_activeflag\r\n",
							"    ,vb.vehiclestatus as md_vehicle_vehiclestatus\r\n",
							"    ,vb.chassisnumber as md_vehicle_chassisnumber\r\n",
							"    ,vb.depot as md_vehicle_depot\r\n",
							"    ,vb.enginenumber as md_vehicle_enginenumber\r\n",
							"    ,vb.fleetcode as md_vehicle_fleetcode\r\n",
							"    ,vb.fueltype as md_vehicle_fueltype\r\n",
							"    ,vb.registrationnumber as md_vehicle_registrationnumber\r\n",
							"    ,vb.vehicleapplication as md_vehicle_vehicleapplication\r\n",
							"    ,vb.vehiclebodymake as md_vehicle_vehiclebodymake\r\n",
							"    ,vb.vehiclecolour as md_vehicle_vehiclecolour\r\n",
							"    ,vb.vehiclemake as md_vehicle_vehiclemake\r\n",
							"    ,vb.vehiclemodel as md_vehicle_vehiclemodel\r\n",
							"    ,vb.vehicleseries as md_vehicle_vehicleseries\r\n",
							"    ,vb.year as md_vehicle_year\r\n",
							"    ,vb.vehicleownerid as md_vehicle_vehicleownerid\r\n",
							"    ,vb.vehicleowner as md_vehicle_vehicleowner\r\n",
							"    ,vb.staffvehicleflag as md_vehicle_staffvehicleflag\r\n",
							"    ,vb.vehicletrailersize as md_vehicle_vehicletrailersize\r\n",
							"    ,vb.vehicletrailertype as md_vehicle_vehicletrailertype\r\n",
							"    ,vb.vehicleetollclass as md_vehicle_vehicleetollclass\r\n",
							"    ,vb.brn as md_vehicle_brn\r\n",
							"    ,vb.brnnumber as md_vehicle_brnnumber\r\n",
							"    ,vb.vehicleregisterno as md_vehicle_vehicleregisterno\r\n",
							"    ,to_timestamp(vb.insdate) as md_vehicle_vehiclebasicinsdate\r\n",
							"    ,vb.insby as md_vehicle_insby\r\n",
							"    ,vb.islinehaulvehicle as md_vehicle_islinehaulvehicle\r\n",
							"    ,vb.internalheight as md_vehicle_internalheight\r\n",
							"    ,vb.internallength as md_vehicle_internallength\r\n",
							"    ,vb.internalvolume as md_vehicle_internalvolume\r\n",
							"    ,vb.internalwidth as md_vehicle_internalwidth\r\n",
							"    ,to_timestamp(vb.moddate) as md_vehicle_vehiclebasicmoddate\r\n",
							"    ,vb.trailerflag as md_vehicle_trailerflag\r\n",
							"    ,vb.workflowstatus as md_vehicle_workflowstatus\r\n",
							"    ,to_timestamp(vb.approveddate) as md_vehicle_vehicleapproveddate\r\n",
							"    ,vb.mmcode as md_vehicle_mmcode\r\n",
							"    ,vb.tmplicenseexpiery as md_vehicle_tmplicenseexpiery\r\n",
							"    ,va.currentadvertising as md_vehicle_currentadvertising\r\n",
							"    ,va.fuelcardnumber as md_vehicle_fuelcardnumber\r\n",
							"    ,to_timestamp(va.fuelcardreceivedate) as md_vehicle_fuelcardreceivedate\r\n",
							"    ,to_timestamp(va.licenseexpirydate) as md_vehicle_licenseexpirydate\r\n",
							"    ,va.licensefee as md_vehicle_licensefee\r\n",
							"    ,va.vehicleadvertisingindicator as md_vehicle_vehicleadvertisingindicator\r\n",
							"    ,va.vehiclespeedgoverningdevice as md_vehicle_vehiclespeedgoverningdevice\r\n",
							"    ,va.oldregistrationnumber as md_vehicle_oldregistrationnumber\r\n",
							"    ,va.oldchassisnumber as md_vehicle_oldchassisnumber\r\n",
							"    ,va.oldenginenumber as md_vehicle_oldenginenumber\r\n",
							"    ,va.logbookrecord as md_vehicle_logbookrecord\r\n",
							"    ,va.status as md_vehicle_adminstatus\r\n",
							"    ,to_timestamp(va.completebydate) as md_vehicle_vehicleadmincompletebydate\r\n",
							"    ,vo.backdoorheight as md_vehicle_backdoorheight\r\n",
							"    ,vo.backdoorwidth as md_vehicle_backdoorwidth\r\n",
							"    ,vo.externalheight as md_vehicle_externalheight\r\n",
							"    ,vo.externallength as md_vehicle_externallength\r\n",
							"    ,vo.externalwidth as md_vehicle_externalwidth\r\n",
							"    ,vo.fleximounts as md_vehicle_fleximounts\r\n",
							"    ,vo.fuelcapacity as md_vehicle_fuelcapacity\r\n",
							"    ,vo.grossvehiclemass as md_vehicle_grossvehiclemass\r\n",
							"    ,vo.numberoftyres as md_vehicle_numberoftyres\r\n",
							"    ,vo.numberoftyresrear as md_vehicle_numberoftyresrear\r\n",
							"    ,vo.numberoftyressteering as md_vehicle_numberoftyressteering\r\n",
							"    ,vo.payload as md_vehicle_payload\r\n",
							"    ,vo.peoplecarrier as md_vehicle_peoplecarrier\r\n",
							"    ,vo.tareweight as md_vehicle_tareweight\r\n",
							"    ,vo.tyresize as md_vehicle_tyresize\r\n",
							"    ,vo.tyresizealternative as md_vehicle_tyresizealternative\r\n",
							"    ,vo.targetfuelconsumption as md_vehicle_targetfuelconsumption\r\n",
							"    ,vo.tankrange as md_vehicle_tankrange\r\n",
							"    ,vo.status as md_vehicle_operationsstatus\r\n",
							"    ,to_timestamp(vo.completebydate) as md_vehicle_vehiclevehicleoperationscompletebydate\r\n",
							"    ,vf.assetnumber as md_vehicle_assetnumber\r\n",
							"    ,to_timestamp(vf.contractenddate) as md_vehicle_contractenddate\r\n",
							"    ,vf.contractnumber as md_vehicle_contractnumber\r\n",
							"    ,to_timestamp(vf.contractstartdate) as md_vehicle_contractstartdate\r\n",
							"    ,vf.vehiclefinancecompany as md_vehicle_vehiclefinancecompany\r\n",
							"    ,vf.budgetrmcpk as md_vehicle_budgetrmcpk\r\n",
							"    ,vf.budgettyrecpk as md_vehicle_budgettyrecpk\r\n",
							"    ,vf.retailvalue as md_vehicle_retailvalue\r\n",
							"    ,vf.tradeinvalue as md_vehicle_tradeinvalue\r\n",
							"    ,vf.loadbodyreplacementcost as md_vehicle_loadbodyreplacementcost\r\n",
							"    ,vf.status as md_vehicle_financestatus\r\n",
							"    ,to_timestamp(vf.completebydate) as md_vehicle_vehiclefinancecompletebydate\r\n",
							"    ,vt.status as md_vehicle_trackingstatus\r\n",
							"    ,to_timestamp(vt.completebydate) as md_vehicle_vehicletrackingcompletebydate\r\n",
							"    ,to_timestamp(vt.moddate) as md_vehicle_vehicletrackingmoddate\r\n",
							"    ,vt.assetid as md_vehicle_assetid\r\n",
							"    ,vt.providerid as md_vehicle_providerid\r\n",
							"    ,vt.providername as md_vehicle_providername\r\n",
							"    ,vt.serial as md_vehicle_serial\r\n",
							"    ,to_timestamp(vt.insdate) as md_vehicle_vehicletrackinginsdate\r\n",
							"    ,to_timestamp(vt.linkdate) as md_vehicle_linkdate\r\n",
							"    ,vt.linkby as md_vehicle_linkby\r\n",
							"    ,vt.linkbyname as md_vehicle_linkbyname\r\n",
							"\r\n",
							"\r\n",
							"FROM dbovehiclebasic vb \r\n",
							"LEFT JOIN dbovehicleadmin va on va.vid = vb.id\r\n",
							"LEFT JOIN dbovehicleoperations vo on vo.vid = vb.id\r\n",
							"LEFT JOIN dbovehiclefinance vf on vf.vid = vb.id\r\n",
							"LEFT JOIN dbovehicletracking vt on vt.vid = vb.id\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmdvehicle = spark.sql(\"SELECT * FROM stmdvehicle\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmdvehicle.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stmdvehicle.parquet', mode = \"overwrite\")\r\n",
							"\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STMD_RunOrder')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/MasterData"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "08df5fbc-a0f9-4cb6-b3f1-313467010a92"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STOrder')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0ebe5a57-f1f0-4041-a8df-d21249a87016"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the dboorder LMS Table\r\n",
							"dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelbyorder LMS Table\r\n",
							"sstparcelbyorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyorder.parquet', format='parquet')\r\n",
							"sstparcelbyorder.createOrReplaceTempView(\"sstparcelbyorder\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbowaybill LMS Table\r\n",
							"dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelunion LMS Table\r\n",
							"sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstconsignmentunion LMS Table\r\n",
							"sstconsignmentunion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"sstconsignmentunion.createOrReplaceTempView(\"sstconsignmentunion\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storder_tmp1\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    o.id as lms_order_id\r\n",
							"    ,o.COrderNo as lms_order_corderno\r\n",
							"    ,o.CustRef as lms_order_custref\r\n",
							"    ,o.PickUpCustID as lms_order_pickupcustid\r\n",
							"    ,o.DeliverCustID as lms_order_delivercustid\r\n",
							"    ,o.BillCustID as lms_order_billcustid\r\n",
							"    ,o.Weight as lms_order_weight\r\n",
							"    ,o.OValue as lms_order_ovalue\r\n",
							"    ,o.HODate as lms_order_hodate\r\n",
							"    ,o.CService as lms_order_cservice\r\n",
							"    ,o.CourierID as lms_order_courierid\r\n",
							"    ,o.CustService as lms_order_custservice\r\n",
							"    ,o.UserID as lms_order_userid\r\n",
							"    ,o.Appointment as lms_order_appointment\r\n",
							"    ,o.DeliverBy as lms_order_deliverby\r\n",
							"    ,o.DConfirmed as lms_order_onfirmed\r\n",
							"    ,o.DComment as lms_order_omment\r\n",
							"    ,o.DRefNo as lms_order_efno\r\n",
							"    ,o.DueDate as lms_order_edate\r\n",
							"    ,o.BatchNo as lms_order_tchno\r\n",
							"    ,o.CustAccID as lms_order_staccid\r\n",
							"    ,o.Airfreightflag as lms_order_rfreightflag\r\n",
							"    ,o.SpecDel as lms_order_ecdel\r\n",
							"    ,pbo.lms_parcelbyorder_aggweight\r\n",
							"    ,pbo.lms_parcelbyorder_aggchargeweight\r\n",
							"    ,pbo.lms_parcelbyorder_aggvolweight\r\n",
							"    ,pbo.lms_parcelbyorder_aggvolumiserweight\r\n",
							"    ,pbo.lms_parcelbyorder_noparcels\r\n",
							"\r\n",
							"FROM dboorder o\r\n",
							"LEFT JOIN sstparcelbyorder pbo on pbo.lms_parcelbyorder_orderid =  o.id\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storder_tmp2\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"\r\n",
							"p.orderid,\r\n",
							"max(w.poddate) as lms_order_maxpoddate,\r\n",
							"min(c.deliverby) as lms_order_mindeliverby\r\n",
							"\r\n",
							"FROM  sstparcelunion p\r\n",
							"LEFT JOIN dbowaybill w on w.id = p.waybillid\r\n",
							"LEFT JOIN sstconsignmentunion c on c.id = p.consignid\r\n",
							"WHERE p.orderid is not null and p.consignid is not null\r\n",
							"GROUP BY p.orderid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storder\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    o.*\r\n",
							"    ,o2.lms_order_maxpoddate\r\n",
							"    ,CASE \r\n",
							"\t    WHEN (coalesce(o2.lms_order_maxpoddate,CURRENT_TIMESTAMP)) <= (date(o2.lms_order_mindeliverby) + interval '86399 seconds') THEN 1\r\n",
							"\t    ELSE 0\r\n",
							"    END lms_order_inserviceflag\r\n",
							"    ,CASE\r\n",
							"        WHEN o2.lms_order_maxpoddate is null then 0  \r\n",
							"        ELSE DATE_PART('day', o2.lms_order_maxpoddate - o.lms_order_hodate)\r\n",
							"    END as lms_order_actualleaddays\r\n",
							"\r\n",
							"FROM storder_tmp1 o\r\n",
							"LEFT JOIN storder_tmp2 o2 ON o2.orderid = o.lms_order_id"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"storder = spark.sql(\"SELECT * FROM storder\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"storder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/storder.parquet', mode = \"overwrite\")\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STParcel - incre')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "1.Need to add a field for \"finalparcelweight\" applying the customer Billing matrix principle",
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b31b3514-d5d9-4899-8bba-bcaa983b8081"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"#Create DataFrame for the sstparcelunion LMS Table\r\n",
							"sstparcelunion = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboorder LMS Table\r\n",
							"dboorder = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstconsignmentunion LMS Table\r\n",
							"sstconsignmentunion = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"sstconsignmentunion.createOrReplaceTempView(\"sstconsignmentunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbowaybill LMS Table\r\n",
							"dbowaybill = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboparceldetail LMS Table\r\n",
							"dboparceldetail = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboparceldetail.parquet', format='parquet')\r\n",
							"dboparceldetail.createOrReplaceTempView(\"dboparceldetail\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicparcel LMS Table\r\n",
							"publicparcel = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicparcel.parquet', format='parquet')\r\n",
							"publicparcel.createOrReplaceTempView(\"publicparcel\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import datetime"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from dateutil.relativedelta import relativedelta"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"IncrementingMonth = str(datetime.datetime.now())[0:7] + '-01'\r\n",
							"IncrementingMonth1 = str(datetime.datetime.now() + relativedelta(months = -1))[0:7] + '-01'\r\n",
							"IncrementingMonth12 = str(datetime.datetime.now() + relativedelta(months = -12))[0:7] + '-01'\r\n",
							"IncrementingMonth24 = str(datetime.datetime.now() + relativedelta(months = -24))[0:7] + '-01'"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"IncrementingMonth1"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the publicparcel LMS Table\r\n",
							"stparcelunion_lake = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet', format='parquet')\r\n",
							"stparcelunion_lake.createOrReplaceTempView(\"stparcelunion_lake\")"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"MaxDate = spark.sql(\"Select MAX(lms_parcel_lastupdate) FROM stparcelunion_lake\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"MaxDate = str(MaxDate.collect()[0][0])[0:19]"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"MaxDate"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"SET MaxDate = '\" + IncrementingMonth1 + \"'\")"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparcel_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    p.id as lms_parcel_id\r\n",
							"    ,p.OrderID as lms_parcel_orderid\r\n",
							"    ,p.ConsignID as lms_parcel_consignid\r\n",
							"    ,p.WaybillID as lms_parcel_waybillid\r\n",
							"    ,p.LocID as lms_parcel_locid\r\n",
							"    ,p.Weight as lms_parcel_weight\r\n",
							"    ,p.TotCharge as lms_parcel_totcharge\r\n",
							"    ,p.DIMMS as lms_parcel_dimms\r\n",
							"    ,p.NoOfPcls as lms_parcel_noofpcls\r\n",
							"    ,p.PL as lms_parcel_pl\r\n",
							"    ,p.PW as lms_parcel_pw\r\n",
							"    ,p.PH as lms_parcel_ph\r\n",
							"    ,p.AcceptanceDate as lms_parcel_acceptancedate\r\n",
							"    ,p.Barcode as lms_parcel_barcode\r\n",
							"    ,p.VolWeight as lms_parcel_volweight\r\n",
							"    ,p.ChargeWeight as lms_parcel_chargeweight\r\n",
							"    ,p.PType as lms_parcel_ptype\r\n",
							"    ,p.HandOverDate as lms_parcel_handoverdate\r\n",
							"    ,p.FloorStatus as lms_parcel_floorstatus\r\n",
							"    ,p.ClaimID as lms_parcel_claimid\r\n",
							"    ,p.DateVolumised as lms_parcel_datevolumised\r\n",
							"    ,p.VolumiserWeight as lms_parcel_volumiserweight\r\n",
							"    ,p.VolumiserLength as lms_parcel_volumiserlength\r\n",
							"    ,p.VolumiserHeight as lms_parcel_volumiserheight\r\n",
							"    ,p.VolumiserWidth as lms_parcel_volumiserwidth\r\n",
							"    ,p.Volumiserid as lms_parcel_volumiserid\r\n",
							"    ,p.LastUpdate as lms_parcel_lastupdate\r\n",
							"    ,o.HODate as lms_parcel_orderhodate\r\n",
							"    ,c.CDate as lms_parcel_consignmentcdate\r\n",
							"    ,c.DeliverBy as lms_parcel_consignmentdeliverby\r\n",
							"    ,w.PODDate  as lms_parcel_waybillpoddate \r\n",
							"    ,w.Date as lms_parcel_waybilldate\r\n",
							"    ,pd.id as lms_parcel_parceldetailid\r\n",
							"    ,pd.InServiceStart as lms_parcel_parceldetailinservicestart\r\n",
							"    ,pd.DeliverBy as lms_parcel_parceldetaildeliverby\r\n",
							"    ,pd.ServiceDays as lms_parcel_parceldetailservicedays\r\n",
							"    ,pd.ServiceTime as lms_parcel_parceldetailservicetime\r\n",
							"    ,pd.Cutofftime as lms_parcel_parceldetailcutofftime\r\n",
							"    ,pd.Appointment as lms_parcel_parceldetailappointment\r\n",
							"    ,pd.NDDID as lms_parcel_parceldetailnddid\r\n",
							"    ,pd.CustOnholdStart as lms_parcel_parceldetailcustonholdstart\r\n",
							"    ,pd.CustOnholdEnd as lms_parcel_parceldetailcustonholdend\r\n",
							"    ,pd.SplitInitial as lms_parcel_parceldetailsplitinitial\r\n",
							"    ,pd.WeekendHolidays as lms_parcel_parceldetailweekendholidays\r\n",
							"    ,pd.Inbound as lms_parcel_parceldetailinbound\r\n",
							"    ,pd.CourierID as lms_parcel_parceldetailcourierid\r\n",
							"    ,pd.ServiceID as lms_parcel_parceldetailserviceid\r\n",
							"    ,pd.CustAccID as lms_parcel_parceldetailcustaccid\r\n",
							"    ,pd.BrouteMasterID as lms_parcel_parceldetailbroutemasterid\r\n",
							"    ,pd.BrouteMasterFromID as lms_parcel_parceldetailbroutemasterfromid\r\n",
							"    ,pd.BrouteMasterToID as lms_parcel_parceldetailbroutemastertoid\r\n",
							"    ,pd.LeadTimeID as lms_parcel_parceldetailleadtimeid\r\n",
							"    ,CASE \r\n",
							"        WHEN pd.id is null and (coalesce(w.PODDate,CURRENT_TIMESTAMP) > c.DeliverBy) then 0 \r\n",
							"        WHEN coalesce(w.PODDate,CURRENT_TIMESTAMP) > pd.DeliverBy then 0 \r\n",
							"        ELSE 1 \r\n",
							"    END as lms_parcel_inserviceflag\r\n",
							"    ,CASE\r\n",
							"        WHEN pd.id is null then (DATE_PART('day', (coalesce(w.PODDate,CURRENT_TIMESTAMP)) - (date(c.cdate) + interval '86399 seconds')))\r\n",
							"        WHEN w.PODDate is null then 0  \r\n",
							"        ELSE DATE_PART('day', w.PODDate - pd.InServiceStart)\r\n",
							"    END as lms_parcel_actualleaddays\r\n",
							"\r\n",
							"FROM sstparcelunion p\r\n",
							"\r\n",
							"LEFT JOIN dboorder o on p.orderid = o.id\r\n",
							"LEFT JOIN sstconsignmentunion c on p.consignid = c.id\r\n",
							"LEFT JOIN dbowaybill w on p.waybillid = w.ID\r\n",
							"LEFT JOIN dboparceldetail pd on p.id = pd.parcelid\r\n",
							"WHERE p.LastUpdate > ${MaxDate} AND coalesce(p.acceptanceDate,p.handoverdate) IS NOT NULL\r\n",
							"AND p.locid NOT IN (163,110,213,27)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparcel_R\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sp.*\r\n",
							"    ,to_timestamp(p.scandate) as orv_parcel_scandate\r\n",
							"    ,p.scanstatus as orv_parcel_scanstatus\r\n",
							"\t,p.scanmode as orv_parcel_scanmode\r\n",
							"\t,p.claimid as orv_parcel_claimid\r\n",
							"\t,p.courierid as orv_parcel_courierid\r\n",
							"    ,to_timestamp(p.moddate) as orv_parcel_moddate\r\n",
							"\r\n",
							"FROM stparcel_tmp sp\r\n",
							"LEFT JOIN publicParcel p on p.lmsid = sp.lms_parcel_id\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stparcel_R = spark.sql(\"SELECT * FROM stparcel_R\")\r\n",
							"stparcel_R.cache()\r\n",
							"stparcel_R.count()"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stparcelunion_lake.cache()\r\n",
							"stparcelunion_lake.count()"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparcel_Unioned\r\n",
							"AS\r\n",
							"SELECT * FROM stparcelunion_lake\r\n",
							"WHERE lms_parcel_lastupdate <= ${MaxDate}\r\n",
							"\r\n",
							"UNION ALL\r\n",
							"\r\n",
							"SELECT * FROM stparcel_R"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stparcel = spark.sql(\"SELECT * FROM stparcel_Unioned\")\r\n",
							"stparcel.cache()\r\n",
							"stparcel.count()"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stparcel.createOrReplaceTempView(\"stparcel\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT DISTINCT lms_parcel_id, COUNT(lms_parcel_id) FROM stparcel GROUP BY lms_parcel_id HAVING COUNT(lms_parcel_id) >= 3"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")\r\n",
							"\r\n",
							"#stparcel.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STParcel')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "1.Need to add a field for \"finalparcelweight\" applying the customer Billing matrix principle",
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "966b74f0-eee4-4ae9-9db8-1136aa08cef5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the sstparcelunion LMS Table\r\n",
							"sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboorder LMS Table\r\n",
							"dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstconsignmentunion LMS Table\r\n",
							"sstconsignmentunion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"sstconsignmentunion.createOrReplaceTempView(\"sstconsignmentunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbowaybill LMS Table\r\n",
							"dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboparceldetail LMS Table\r\n",
							"dboparceldetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparceldetail.parquet', format='parquet')\r\n",
							"dboparceldetail.createOrReplaceTempView(\"dboparceldetail\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicparcel LMS Table\r\n",
							"publicparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicparcel.parquet', format='parquet')\r\n",
							"publicparcel.createOrReplaceTempView(\"publicparcel\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdelivery ORV Table\r\n",
							"publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparcel_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    p.id \r\n",
							"    ,p.lmsid \r\n",
							"    ,p.did \r\n",
							"    ,to_timestamp(p.scandate) as orv_parcel_scandate\r\n",
							"    ,p.scanstatus as orv_parcel_scanstatus\r\n",
							"\t,p.scanmode as orv_parcel_scanmode\r\n",
							"\t,p.claimid as orv_parcel_claimid\r\n",
							"\t,p.courierid as orv_parcel_courierid\r\n",
							"    ,to_timestamp(p.moddate) as orv_parcel_moddate\r\n",
							"    ,d.waybillid\r\n",
							"\r\n",
							"FROM publicparcel p\r\n",
							"LEFT JOIN publicdelivery d ON d.did = p.id\r\n",
							"WHERE d.mode ='deliver' and D.skipreason != 'Fix wrong data manipulation by the company'\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparcel\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    p.id as lms_parcel_id\r\n",
							"    ,p.OrderID as lms_parcel_orderid\r\n",
							"    ,p.ConsignID as lms_parcel_consignid\r\n",
							"    ,p.WaybillID as lms_parcel_waybillid\r\n",
							"    ,p.LocID as lms_parcel_locid\r\n",
							"    ,p.TotCharge as lms_parcel_totcharge\r\n",
							"    ,p.DIMMS as lms_parcel_dimms\r\n",
							"    ,p.NoOfPcls as lms_parcel_noofpcls\r\n",
							"    ,p.PL as lms_parcel_pl\r\n",
							"    ,p.PW as lms_parcel_pw\r\n",
							"    ,p.PH as lms_parcel_ph\r\n",
							"    ,coalesce(p.acceptanceDate,p.handoverdate) as lms_parcel_pdate\r\n",
							"    ,p.AcceptanceDate as lms_parcel_acceptancedate\r\n",
							"    ,p.Barcode as lms_parcel_barcode\r\n",
							"    ,p.VolWeight as lms_parcel_volweight\r\n",
							"    ,p.Weight as lms_parcel_weight\r\n",
							"    ,p.ChargeWeight as lms_parcel_chargeweight\r\n",
							"    ,CASE \r\n",
							"        WHEN (p.ChargeWeight = 0 OR p.ChargeWeight is null) THEN GREATEST((p.weight),(p.VolWeight))\r\n",
							"        ELSE p.ChargeWeight \r\n",
							"    END as orv_parcel_pweight\r\n",
							"    ,p.PType as lms_parcel_ptype\r\n",
							"    ,p.HandOverDate as lms_parcel_handoverdate\r\n",
							"    ,p.FloorStatus as lms_parcel_floorstatus\r\n",
							"    ,p.ClaimID as lms_parcel_claimid\r\n",
							"    ,p.DateVolumised as lms_parcel_datevolumised\r\n",
							"    ,p.VolumiserWeight as lms_parcel_volumiserweight\r\n",
							"    ,p.VolumiserLength as lms_parcel_volumiserlength\r\n",
							"    ,p.VolumiserHeight as lms_parcel_volumiserheight\r\n",
							"    ,p.VolumiserWidth as lms_parcel_volumiserwidth\r\n",
							"    ,p.Volumiserid as lms_parcel_volumiserid\r\n",
							"    ,p.LastUpdate as lms_parcel_lastupdate\r\n",
							"    ,o.HODate as lms_parcel_orderhodate\r\n",
							"    ,o.PickUpCustID as lms_parcel_orderpickupcustid\r\n",
							"    ,o.DeliverCustID as lms_parcel_orderdelivercustid\r\n",
							"    ,o.BillCustID as lms_parcel_orderbillcustid\r\n",
							"    ,c.CDate as lms_parcel_consignmentcdate\r\n",
							"    ,c.DeliverBy as lms_parcel_consignmentdeliverby\r\n",
							"    ,w.PODDate  as lms_parcel_waybillpoddate \r\n",
							"    ,w.Date as lms_parcel_waybilldate\r\n",
							"    ,pd.id as lms_parcel_parceldetailid\r\n",
							"    ,pd.InServiceStart as lms_parcel_parceldetailinservicestart\r\n",
							"    ,pd.DeliverBy as lms_parcel_parceldetaildeliverby\r\n",
							"    ,pd.ServiceDays as lms_parcel_parceldetailservicedays\r\n",
							"    ,pd.ServiceTime as lms_parcel_parceldetailservicetime\r\n",
							"    ,pd.Cutofftime as lms_parcel_parceldetailcutofftime\r\n",
							"    ,pd.Appointment as lms_parcel_parceldetailappointment\r\n",
							"    ,pd.NDDID as lms_parcel_parceldetailnddid\r\n",
							"    ,pd.CustOnholdStart as lms_parcel_parceldetailcustonholdstart\r\n",
							"    ,pd.CustOnholdEnd as lms_parcel_parceldetailcustonholdend\r\n",
							"    ,pd.SplitInitial as lms_parcel_parceldetailsplitinitial\r\n",
							"    ,pd.WeekendHolidays as lms_parcel_parceldetailweekendholidays\r\n",
							"    ,pd.Inbound as lms_parcel_parceldetailinbound\r\n",
							"    ,pd.CourierID as lms_parcel_parceldetailcourierid\r\n",
							"    ,pd.ServiceID as lms_parcel_parceldetailserviceid\r\n",
							"    ,pd.CustAccID as lms_parcel_parceldetailcustaccid\r\n",
							"    ,pd.BrouteMasterID as lms_parcel_parceldetailbroutemasterid\r\n",
							"    ,pd.BrouteMasterFromID as lms_parcel_parceldetailbroutemasterfromid\r\n",
							"    ,pd.BrouteMasterToID as lms_parcel_parceldetailbroutemastertoid\r\n",
							"    ,pd.LeadTimeID as lms_parcel_parceldetailleadtimeid\r\n",
							"    ,CASE \r\n",
							"        WHEN pd.id is null and (coalesce(w.PODDate,CURRENT_TIMESTAMP) > c.DeliverBy) then 0 \r\n",
							"        WHEN coalesce(w.PODDate,CURRENT_TIMESTAMP) > pd.DeliverBy then 0 \r\n",
							"        ELSE 1 \r\n",
							"    END as lms_parcel_inserviceflag\r\n",
							"    ,CASE\r\n",
							"        WHEN pd.id is null then (DATE_PART('day', (coalesce(w.PODDate,CURRENT_TIMESTAMP)) - (date(c.cdate) + interval '86399 seconds')))\r\n",
							"        WHEN w.PODDate is null then 0  \r\n",
							"        ELSE DATE_PART('day', w.PODDate - pd.InServiceStart)\r\n",
							"    END as lms_parcel_actualleaddays\r\n",
							"    ,pt.orv_parcel_scandate\r\n",
							"    ,pt.orv_parcel_scanstatus\r\n",
							"\t,pt.orv_parcel_scanmode\r\n",
							"\t,pt.orv_parcel_claimid\r\n",
							"\t,pt.orv_parcel_courierid\r\n",
							"    ,pt.orv_parcel_moddate\r\n",
							"\r\n",
							"FROM sstparcelunion p\r\n",
							"LEFT JOIN stparcel_tmp pt on pt.lmsid = p.id AND pt.waybillid = p.waybillid\r\n",
							"LEFT JOIN dboorder o on p.orderid = o.id\r\n",
							"LEFT JOIN sstconsignmentunion c on p.consignid = c.id\r\n",
							"LEFT JOIN dbowaybill w on p.waybillid = w.ID\r\n",
							"LEFT JOIN dboparceldetail pd on p.id = pd.parcelid\r\n",
							"WHERE  coalesce(p.acceptanceDate,p.handoverdate) IS NOT NULL\r\n",
							"AND p.locid NOT IN (163,110,213,27)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stparcel = spark.sql(\"SELECT * FROM stparcel\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet', mode = \"overwrite\")\r\n",
							"\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STTMSTrack')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b3bff6f7-6ac8-4e70-b020-f0865129d039"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccountRead + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the publictrack TMS Table\r\n",
							"publictrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrack.parquet', format='parquet')\r\n",
							"publictrack.createOrReplaceTempView(\"publictrack\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttmstrack\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    t.id as tms_track_id\r\n",
							"    ,t.tripid as tms_track_tripid\r\n",
							"    ,t.source as tms_track_source\r\n",
							"    ,to_timestamp(t.trackdate) as tms_track_trackdate\r\n",
							"    ,t.tracktype as tms_track_tracktype\r\n",
							"    ,t.userid as tms_track_userid\r\n",
							"    ,t.lat as tms_track_lat\r\n",
							"    ,t.lng as tms_track_lng\r\n",
							"    ,t.address as tms_track_address\r\n",
							"    ,t.note as tms_track_note\r\n",
							"\r\n",
							"FROM publictrack t\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttmstrack = spark.sql(\"SELECT * FROM sttmstrack\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttmstrack.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/sttmstrack.parquet', mode = \"overwrite\")\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STTrip')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a4541b14-1e6b-4925-a992-08067216fed9"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccountRead + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the publicTrip TMS Table\r\n",
							"publicTrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrip.parquet', format='parquet')\r\n",
							"publicTrip.createOrReplaceTempView(\"publicTrip\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicDispatch ORV Table\r\n",
							"publicDispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
							"publicDispatch.createOrReplaceTempView(\"publicDispatch\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboLHTrip LMS Table\r\n",
							"dboLHTrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_trip.parquet', format='parquet')\r\n",
							"dboLHTrip.createOrReplaceTempView(\"dboLHTrip\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboLHTrackStatus LMS Table\r\n",
							"dboLHTrackStatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_trackstatus.parquet', format='parquet')\r\n",
							"dboLHTrackStatus.createOrReplaceTempView(\"dboLHTrackStatus\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"STTrip_tms\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lt.id as tms_trip_id\r\n",
							"    ,lt.driverid as tms_trip_driverid\r\n",
							"    ,lt.vehicleid as tms_trip_vehicleid\r\n",
							"    ,lt.trailerid as tms_trip_trailerid\r\n",
							"    ,lt.sectrailerid as tms_trip_sectrailerid\r\n",
							"    ,lt.status as tms_trip_status\r\n",
							"    ,lt.routeid as tms_trip_routeid\r\n",
							"    ,lt.opsrouteid as tms_trip_opsrouteid\r\n",
							"    ,lt.startfromaddress as tms_trip_startfromaddress\r\n",
							"    ,lt.startfromlat as tms_trip_startfromlat\r\n",
							"    ,lt.startfromlng as tms_trip_startfromlng\r\n",
							"    ,lt.dispatchdate as tms_trip_dispatchdate\r\n",
							"    ,lt.stopaddress as tms_trip_stopaddress\r\n",
							"    ,lt.stoplat as tms_trip_stoplat\r\n",
							"    ,lt.stoplng as tms_trip_stoplng\r\n",
							"    ,lt.insdate as tms_trip_insdate\r\n",
							"    ,lt.moddate as tms_trip_moddate\r\n",
							"    ,lt.insby as tms_trip_insby\r\n",
							"    ,lt.onrouteid as tms_trip_onrouteid\r\n",
							"    ,lt.uuid as tms_trip_uuid\r\n",
							"    ,lt.insbyuser as tms_trip_insbyuser\r\n",
							"    ,lt.thirdpartyid as tms_trip_thirdpartyid\r\n",
							"    ,lt.timehash as tms_trip_timehash\r\n",
							"    ,lt.onroutestatus as tms_trip_onroutestatus\r\n",
							"    ,lt.lastupdate as tms_trip_lastupdate\r\n",
							"    ,lt.lastlng as tms_trip_lastlng\r\n",
							"    ,lt.lastlat as tms_trip_lastlat\r\n",
							"    ,lt.controllerid as tms_trip_controllerid\r\n",
							"    ,lt.trackstatus as tms_trip_trackstatus\r\n",
							"    ,lt.lastrackid as tms_trip_lastrackid\r\n",
							"    ,lt.customer as tms_trip_customer\r\n",
							"    ,lt.bookings as tms_trip_bookings\r\n",
							"    ,lt.controller as tms_trip_controller\r\n",
							"    ,lt.transporter as tms_trip_transporter\r\n",
							"    ,lt.legacyid as tms_trip_legacyid\r\n",
							"    ,lt.originatedfrom as tms_trip_originatedfrom\r\n",
							"    ,lt.local as tms_trip_local\r\n",
							"    ,lt.startdate as tms_trip_startdate\r\n",
							"    ,lt.enddate as tms_trip_enddate\r\n",
							"    ,lt.actualdeliverydate as tms_trip_actualdeliverydate\r\n",
							"    ,lt.note as tms_trip_note\r\n",
							"    ,lt.deliverydate as tms_trip_deliverydate\r\n",
							"    ,lt.internalexternal as tms_trip_internalexternal\r\n",
							"    ,lt.pickupstartaddress as tms_trip_pickupstartaddress\r\n",
							"FROM publicTrip lt\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"STTrip_tms = spark.sql(\"SELECT * FROM STTrip_tms\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"STTrip_lms\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lt.id as tms_trip_id\r\n",
							"    ,lt.driverid as tms_trip_driverid\r\n",
							"    ,lt.vehicleid as tms_trip_vehicleid\r\n",
							"    ,lt.trailerid as tms_trip_trailerid\r\n",
							"    ,lt.trailer2id as tms_trip_sectrailerid\r\n",
							"    ,ts.description as tms_trip_status\r\n",
							"    ,null as tms_trip_routeid\r\n",
							"    ,lt.routeid as tms_trip_opsrouteid\r\n",
							"    ,lt.dispatchaddress as tms_trip_startfromaddress\r\n",
							"    ,lt.dispatchlongitude as tms_trip_startfromlat\r\n",
							"    ,lt.dispatchlatitude as tms_trip_startfromlng\r\n",
							"    ,unix_timestamp( lt.dispatchdate) as tms_trip_dispatchdate\r\n",
							"    ,lt.destinationaddress as tms_trip_stopaddress\r\n",
							"    ,lt.destinationlongitude as tms_trip_stoplat\r\n",
							"    ,lt.destinationlatitude as tms_trip_stoplng\r\n",
							"    ,null as tms_trip_insdate\r\n",
							"    ,null as tms_trip_moddate\r\n",
							"    ,null as tms_trip_insby\r\n",
							"    ,null as tms_trip_onrouteid\r\n",
							"    ,lt.userid as tms_trip_uuid\r\n",
							"    ,null as tms_trip_insbyuser\r\n",
							"    ,null as tms_trip_thirdpartyid\r\n",
							"    ,null as tms_trip_timehash\r\n",
							"    ,null as tms_trip_onroutestatus\r\n",
							"    ,null as tms_trip_lastupdate\r\n",
							"    ,null as tms_trip_lastlng\r\n",
							"    ,null as tms_trip_lastlat\r\n",
							"    ,null as tms_trip_controllerid\r\n",
							"    ,null as tms_trip_trackstatus\r\n",
							"    ,null as tms_trip_lastrackid\r\n",
							"    ,null as tms_trip_customer\r\n",
							"    ,null as tms_trip_bookings\r\n",
							"    ,null as tms_trip_controller\r\n",
							"    ,null as tms_trip_transporter\r\n",
							"    ,null as tms_trip_legacyid\r\n",
							"    ,null as tms_trip_originatedfrom\r\n",
							"    ,null as tms_trip_local\r\n",
							"    ,null as tms_trip_startdate\r\n",
							"    ,null as tms_trip_enddate\r\n",
							"    ,null as tms_trip_actualdeliverydate\r\n",
							"    ,null as tms_trip_note\r\n",
							"    ,null as tms_trip_deliverydate\r\n",
							"    ,null as tms_trip_internalexternal\r\n",
							"    ,null as tms_trip_pickupstartaddress   \r\n",
							"FROM dboLHTrip lt\r\n",
							"LEFT JOIN dboLHTrackStatus ts on ts.id = lt.tripstatusid\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"STTrip_lms = spark.sql(\"SELECT * FROM STTrip_tms\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"STTrip_tmp = STTrip_tms.unionByName(STTrip_lms, allowMissingColumns = True)\r\n",
							"STTrip_tmp.createOrReplaceTempView(\"STTrip_tmp\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"STTrip\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    st.*\r\n",
							"    ,d.id as orv_dispatch_id\r\n",
							"    ,d.lmsid as orv_dispatch_lmsid\r\n",
							"    ,d.vid as orv_dispatch_vid\r\n",
							"    ,d.did as orv_dispatch_did\r\n",
							"    ,d.status as orv_dispatch_status\r\n",
							"    ,d.startdate as orv_dispatch_startdate\r\n",
							"    ,d.stopdate as orv_dispatch_stopdate\r\n",
							"    ,d.vehicletype as orv_dispatch_vehicletype\r\n",
							"    ,d.uid as orv_dispatch_uid\r\n",
							"    ,d.estdepdate as orv_dispatch_estdepdate\r\n",
							"    ,d.trailer as orv_dispatch_trailer\r\n",
							"    ,d.trailer2 as orv_dispatch_trailer2\r\n",
							"    ,d.fromlocid as orv_dispatch_fromlocid\r\n",
							"    ,d.tolocid as orv_dispatch_tolocid\r\n",
							"    ,d.site as orv_dispatch_site\r\n",
							"    ,d.lastupdate as orv_dispatch_lastupdate\r\n",
							"    ,d.etastatus as orv_dispatch_etastatus\r\n",
							"    ,d.startinglat as orv_dispatch_startinglat\r\n",
							"    ,d.startinglng as orv_dispatch_startinglng\r\n",
							"    ,d.endinglat as orv_dispatch_endinglat\r\n",
							"    ,d.endinglng as orv_dispatch_endinglng\r\n",
							"    ,d.startingfrom as orv_dispatch_startingfrom\r\n",
							"    ,d.goingto as orv_dispatch_goingto\r\n",
							"    ,d.importissue as orv_dispatch_importissue\r\n",
							"    ,d.insdate as orv_dispatch_insdate\r\n",
							"    ,d.estarrdate as orv_dispatch_estarrdate\r\n",
							"    ,d.duration as orv_dispatch_duration\r\n",
							"    ,d.distance as orv_dispatch_distance\r\n",
							"    ,d.cost as orv_dispatch_cost\r\n",
							"    ,d.stoplat as orv_dispatch_stoplat\r\n",
							"    ,d.stoplng as orv_dispatch_stoplng\r\n",
							"    ,d.stopreason as orv_dispatch_stopreason\r\n",
							"    ,d.startodo as orv_dispatch_startodo\r\n",
							"    ,d.stopodo as orv_dispatch_stopodo\r\n",
							"    ,d.expduration as orv_dispatch_expduration\r\n",
							"    ,d.expdistance as orv_dispatch_expdistance\r\n",
							"    ,d.expcost as orv_dispatch_expcost\r\n",
							"    ,d.collectionid as orv_dispatch_collectionid\r\n",
							"    ,d.crew as orv_dispatch_crew\r\n",
							"    ,d.crewnames as orv_dispatch_crewnames\r\n",
							"    ,d.bocloseuid as orv_dispatch_bocloseuid\r\n",
							"    ,d.routing as orv_dispatch_routing\r\n",
							"    ,d.swapct as orv_dispatch_swapct\r\n",
							"    ,d.debriefed as orv_dispatch_debriefed\r\n",
							"    ,d.debriefnotes as orv_dispatch_debriefnotes\r\n",
							"    ,d.bopin as orv_dispatch_bopin\r\n",
							"    ,d.cpicost as orv_dispatch_cpicost\r\n",
							"    ,d.labourcost as orv_dispatch_labourcost\r\n",
							"    ,d.maintcost as orv_dispatch_maintcost\r\n",
							"    ,d.inscost as orv_dispatch_inscost\r\n",
							"    ,d.tollcost as orv_dispatch_tollcost\r\n",
							"    ,d.fuelcost as orv_dispatch_fuelcost\r\n",
							"    ,d.internal as orv_dispatch_internal\r\n",
							"    ,d.childids as orv_dispatch_childids\r\n",
							"    ,d.guid as orv_dispatch_guid\r\n",
							"    ,d.timedefinite as orv_dispatch_timedefinite\r\n",
							"    ,d.orvcode as orv_dispatch_orvcode\r\n",
							"    ,d.tsstopdepoenter as orv_dispatch_tsstopdepoenter\r\n",
							"    ,d.tsstartdepoexit as orv_dispatch_tsstartdepoexit\r\n",
							"    ,d.reroutect as orv_dispatch_reroutect\r\n",
							"    ,d.actualarrdate as orv_dispatch_actualarrdate\r\n",
							"    ,d.physicalstartlat as orv_dispatch_physicalstartlat\r\n",
							"    ,d.physicalstartlng as orv_dispatch_physicalstartlng\r\n",
							"    ,d.tsstartdepoexitapp as orv_dispatch_tsstartdepoexitapp\r\n",
							"    ,d.tsstopdepoenterapp as orv_dispatch_tsstopdepoenterapp\r\n",
							"    ,d.uncanceldate as orv_dispatch_uncanceldate\r\n",
							"    ,d.uncancelusername as orv_dispatch_uncancelusername\r\n",
							"    ,d.lmsdebrifed as orv_dispatch_lmsdebrifed\r\n",
							"    ,d.reviseddebrief as orv_dispatch_reviseddebrief\r\n",
							"    ,d.lhtransporter as orv_dispatch_lhtransporter\r\n",
							"    ,d.triptype as orv_dispatch_triptype\r\n",
							"    ,d.startreason as orv_dispatch_startreason\r\n",
							"    ,d.route as orv_dispatch_route\r\n",
							"    ,d.tmstraileridentify as orv_dispatch_tmstraileridentify\r\n",
							"    ,d.tmstrailer2identify as orv_dispatch_tmstrailer2identify\r\n",
							"    ,d.tmscontroller as orv_dispatch_tmscontroller\r\n",
							"    ,d.routekey as orv_dispatch_routekey\r\n",
							"    ,d.courierid as orv_dispatch_courierid\r\n",
							"    ,d.originalstartdate as orv_dispatch_originalstartdate\r\n",
							"    ,d.originalextarrival as orv_dispatch_originalextarrival\r\n",
							"    ,d.recomputeoriginals as orv_dispatch_recomputeoriginals\r\n",
							"    ,d.originalextdistance as orv_dispatch_originalextdistance\r\n",
							"    ,d.originalextduration as orv_dispatch_originalextduration\r\n",
							"    ,d.moddate as orv_dispatch_moddate\r\n",
							"    ,d.tmsmode as orv_dispatch_tmsmode\r\n",
							"    ,d.driversignature as orv_dispatch_driversignature\r\n",
							"FROM STTrip_tmp st\r\n",
							"LEFT JOIN publicDispatch d on d.lmsid = st.tms_trip_id and d.vehicletype = 2"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"STTrip = spark.sql(\"SELECT * FROM STTrip\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")\r\n",
							"\r\n",
							"#STTrip.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/STTrip.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STTripTrackingHistory')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c8d796c6-df49-4743-bb17-8393fe207f15"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccountRead + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the publictriptrackinghistory TMS Table\r\n",
							"publictriptrackinghistory = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictriptrackinghistory.parquet', format='parquet')\r\n",
							"publictriptrackinghistory.createOrReplaceTempView(\"publictriptrackinghistory\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttriptrackinghistory\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    t.id as tms_triptrackinghistory_id\r\n",
							"    ,t.tripid as tms_triptrackinghistory_tripid\r\n",
							"    ,t.controllerid as tms_triptrackinghistory_controllerid\r\n",
							"    ,to_timestamp(t.fromdate) as tms_triptrackinghistory_fromdate\r\n",
							"    ,to_timestamp(t.todate) as tms_triptrackinghistory_todate\r\n",
							"    ,t.actionedby as tms_triptrackinghistory_actionedby\r\n",
							"    ,t.controllername as tms_triptrackinghistory_controllername\r\n",
							"    ,t.actionedbyname as tms_triptrackinghistory_actionedbyname\r\n",
							"\r\n",
							"\r\n",
							"FROM publictriptrackinghistory t"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttriptrackinghistory = spark.sql(\"SELECT * FROM sttriptrackinghistory\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttriptrackinghistory.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/sttriptrackinghistory.parquet', mode = \"overwrite\")\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STWaybill')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ceb79f81-8e6b-4a1f-b976-88db44ba3b48"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccountRead + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the dbowaybill LMS Table\r\n",
							"dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelbywaybill LMS Table\r\n",
							"sstparcelbywaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbywaybill.parquet', format='parquet')\r\n",
							"sstparcelbywaybill.createOrReplaceTempView(\"sstparcelbywaybill\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdelivery ORV Table\r\n",
							"publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stwaybill\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    w.ID as lms_waybill_id\r\n",
							"    ,w.date as lms_waybill_date\r\n",
							"    ,w.CustomerID as lms_waybill_customerid\r\n",
							"    ,w.BService as lms_waybill_bservice\r\n",
							"    ,w.CService as lms_waybill_cservice\r\n",
							"    ,w.OriginID as lms_waybill_originid\r\n",
							"    ,w.DefUser as lms_waybill_defuser\r\n",
							"    ,w.Distance as lms_waybill_distance\r\n",
							"    ,w.CourierID as lms_waybill_courierid\r\n",
							"    ,w.CourierWBNo as lms_waybill_courierwbno\r\n",
							"    ,w.BillType as lms_waybill_billtype\r\n",
							"    ,w.CapDate as lms_waybill_capdate\r\n",
							"    ,w.OrderType as lms_waybill_ordertype\r\n",
							"    ,w.BillCust as lms_waybill_billcust\r\n",
							"    ,w.PickupCustID as lms_waybill_pickupcustid\r\n",
							"    ,w.DeliverCustID as lms_waybill_delivercustid\r\n",
							"    ,w.BillTo as lms_waybill_billto\r\n",
							"    ,w.Claimable as lms_waybill_claimable\r\n",
							"    ,w.Override as lms_waybill_override\r\n",
							"    ,w.VehicleCapacity as lms_waybill_vehiclecapacity\r\n",
							"    ,w.PODDate as lms_waybill_poddate\r\n",
							"    ,w.Signee as lms_waybill_signee\r\n",
							"    ,w.GRVNo as lms_waybill_grvno\r\n",
							"    ,w.Endorsements as lms_waybill_endorsements\r\n",
							"    ,w.LoadID as lms_waybill_loadid\r\n",
							"    ,w.RouteID as lms_waybill_routeid\r\n",
							"    ,w.mrpFlag as lms_waybill_mrpflag\r\n",
							"    ,w.Printed as lms_waybill_printed\r\n",
							"    ,w.SReasonID as lms_waybill_sreasonid\r\n",
							"    ,w.HasPrinted as lms_waybill_hasprinted\r\n",
							"    ,w.Site as lms_waybill_site\r\n",
							"    ,w.DeliveryNo as lms_waybill_deliveryno\r\n",
							"    ,w.CustAccID as lms_waybill_custaccid\r\n",
							"    ,w.Scanned as lms_waybill_scanned\r\n",
							"    ,w.UserID as lms_waybill_userid\r\n",
							"    ,w.Autoprinted as lms_waybill_autoprinted\r\n",
							"    ,w.cref as lms_waybill_cref\r\n",
							"    ,w.UShort as lms_waybill_ushort\r\n",
							"    ,w.Delays as lms_waybill_delays\r\n",
							"    ,w.DeBriefed as lms_waybill_debriefed\r\n",
							"    ,w.DeBriefDt as lms_waybill_debriefdt\r\n",
							"    ,w.DBCtnsRet as lms_waybill_dbctnsret\r\n",
							"    ,w.Uploaded as lms_waybill_uploaded\r\n",
							"    ,w.ServiceExclude as lms_waybill_serviceexclude\r\n",
							"    ,w.Failed as lms_waybill_failed\r\n",
							"    ,w.DelayReasonID as lms_waybill_delayreasonid\r\n",
							"    ,w.NotDebrievReasonID as lms_waybill_notdebrievreasonid\r\n",
							"    ,w.DeliveryStatID as lms_waybill_deliverystatid\r\n",
							"    ,w.ReasonGroupID as lms_waybill_reasongroupid\r\n",
							"    ,w.eMailCust as lms_waybill_emailcust\r\n",
							"    ,w.MobileIssueReportedID as lms_waybill_mobileissuereportedid\r\n",
							"    ,w.isMobile as lms_waybill_ismobile\r\n",
							"    ,w.CustComment as lms_waybill_custcomment\r\n",
							"    ,w.CustFeedback as lms_waybill_custfeedback\r\n",
							"    ,w.ReasonDetailID as lms_waybill_reasondetailid\r\n",
							"    ,w.MobileComments as lms_waybill_mobilecomments\r\n",
							"    ,w.InServiceReasonID as lms_waybill_inservicereasonid\r\n",
							"    ,w.NotDebrievCom as lms_waybill_notdebrievcom\r\n",
							"    ,w.LastUpdate as lms_waybill_lastupdate\r\n",
							"    ,w.Dropsequence as lms_waybill_dropsequence\r\n",
							"    ,w.Noofparcelssreturned as lms_waybill_noofparcelssreturned\r\n",
							"    ,pbw.lms_parcelbywaybill_aggweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggchargeweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggvolweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggvolumiserweight\r\n",
							"    ,pbw.lms_parcelbywaybill_noparcels\r\n",
							"    ,d.id as orv_delivery_id\r\n",
							"    ,d.did as orv_delivery_did\r\n",
							"    ,d.waybillid as orv_delivery_waybillid\r\n",
							"    ,d.address as orv_delivery_address\r\n",
							"    ,d.town as orv_delivery_town\r\n",
							"    ,d.province as orv_delivery_province\r\n",
							"    ,d.country as orv_delivery_country\r\n",
							"    ,d.lat as orv_delivery_lat\r\n",
							"    ,d.lng as orv_delivery_lng\r\n",
							"    ,d.placeid as orv_delivery_placeid\r\n",
							"    ,d.what3words as orv_delivery_what3words\r\n",
							"    ,d.zipcode as orv_delivery_zipcode\r\n",
							"    ,d.eta as orv_delivery_eta\r\n",
							"    ,d.actualeta as orv_delivery_actualeta\r\n",
							"    ,d.deliverydate as orv_delivery_deliverydate\r\n",
							"    ,d.deliverby as orv_delivery_deliverby\r\n",
							"    ,d.deliveryorder as orv_delivery_deliveryorder\r\n",
							"    ,d.tsgeofenceenter as orv_delivery_tsgeofenceenter\r\n",
							"    ,d.tsscanningstart as orv_delivery_tsscanningstart\r\n",
							"    ,d.tsscanningstop as orv_delivery_tsscanningstop\r\n",
							"    ,d.tspodsignature as orv_delivery_tspodsignature\r\n",
							"    ,d.aid as orv_delivery_aid\r\n",
							"    ,d.numprcls as orv_delivery_numprcls\r\n",
							"    ,d.geocodingstatus as orv_delivery_geocodingstatus\r\n",
							"    ,d.skipdate as orv_delivery_skipdate\r\n",
							"    ,d.skipreason as orv_delivery_skipreason\r\n",
							"    ,d.status as orv_delivery_status\r\n",
							"    ,d.partialmatch as orv_delivery_partialmatch\r\n",
							"    ,d.approximated as orv_delivery_approximated\r\n",
							"    ,d.lmsorder as orv_delivery_lmsorder\r\n",
							"    ,d.optimizedorder as orv_delivery_optimizedorder\r\n",
							"    ,d.seal as orv_delivery_seal\r\n",
							"    ,d.customerinvoice as orv_delivery_customerinvoice\r\n",
							"    ,d.customerdn as orv_delivery_customerdn\r\n",
							"    ,d.grv as orv_delivery_grv\r\n",
							"    ,d.chepslip as orv_delivery_chepslip\r\n",
							"    ,d.cleandelivery as orv_delivery_cleandelivery\r\n",
							"    ,d.trackingcode as orv_delivery_trackingcode\r\n",
							"    ,d.mode as orv_delivery_mode\r\n",
							"    ,d.customorder as orv_delivery_customorder\r\n",
							"    ,d.verified as orv_delivery_verified\r\n",
							"    ,d.altered as orv_delivery_altered\r\n",
							"    ,d.orderid as orv_delivery_orderid\r\n",
							"    ,d.mergeid as orv_delivery_mergeid\r\n",
							"    ,d.orderref as orv_delivery_orderref\r\n",
							"    ,d.drivernote as orv_delivery_drivernote\r\n",
							"    ,d.guid as orv_delivery_guid\r\n",
							"    ,d.timedefinite as orv_delivery_timedefinite\r\n",
							"    ,d.orvcode as orv_delivery_orvcode\r\n",
							"    ,d.vaid as orv_delivery_vaid\r\n",
							"    ,d.delegatedate as orv_delivery_delegatedate\r\n",
							"    ,d.delegatemode as orv_delivery_delegatemode\r\n",
							"    ,d.debriefmode as orv_delivery_debriefmode\r\n",
							"    ,d.debriefed as orv_delivery_debriefed\r\n",
							"    ,d.insdate as orv_delivery_insdate\r\n",
							"    ,d.reviseddebrief as orv_delivery_reviseddebrief\r\n",
							"    ,d.lmsdebriefed as orv_delivery_lmsdebriefed\r\n",
							"    ,d.uncanceldate as orv_delivery_uncanceldate\r\n",
							"    ,d.podlaterdate as orv_delivery_podlaterdate\r\n",
							"    ,d.podmanualdate as orv_delivery_podmanualdate\r\n",
							"    ,d.manualdebriefreason as orv_delivery_manualdebriefreason\r\n",
							"    ,d.submanualdebriefreason as orv_delivery_submanualdebriefreason\r\n",
							"    ,d.outofgeofencereason as orv_delivery_outofgeofencereason\r\n",
							"    ,d.tsentergeofenceapp as orv_delivery_tsentergeofenceapp\r\n",
							"    ,d.tsexitgeofenceapp as orv_delivery_tsexitgeofenceapp\r\n",
							"    ,d.comebacklater as orv_delivery_comebacklater\r\n",
							"    ,d.uncancelusername as orv_delivery_uncancelusername\r\n",
							"    ,d.cref as orv_delivery_cref\r\n",
							"    ,d.division as orv_delivery_division\r\n",
							"    ,d.descriptionofgoods as orv_delivery_descriptionofgoods\r\n",
							"    ,d.skiplng as orv_delivery_skiplng\r\n",
							"    ,d.skiplat as orv_delivery_skiplat\r\n",
							"    ,d.courierid as orv_delivery_courierid\r\n",
							"    ,d.posreason as orv_delivery_posreason\r\n",
							"    ,d.moddate as orv_delivery_moddate\r\n",
							"    ,d.mallid as orv_delivery_mallid\r\n",
							"    ,d.mallgid as orv_delivery_mallgid\r\n",
							"    ,d.lmsidskipreason as orv_delivery_lmsidskipreason\r\n",
							"    ,d.deleteforimport as orv_delivery_deleteforimport\r\n",
							"    ,d.podoutofgeofence as orv_delivery_podoutofgeofence\r\n",
							"    ,d.originalcustomerid as orv_delivery_originalcustomerid\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"FROM dbowaybill w\r\n",
							"LEFT JOIN sstparcelbywaybill pbw on pbw.lms_parcelbywaybill_waybillid =  w.id\r\n",
							"LEFT JOIN publicdelivery d on d.waybillid =  w.id\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stwaybill = spark.sql(\"SELECT * FROM stwaybill\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stwaybill.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet', mode = \"overwrite\")\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ST_RunOrder')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "04c218fb-8efd-4a86-83c4-e543af7780f0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PRDSparkPool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southafricanorth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TESTSparkPool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southafricanorth"
		}
	]
}