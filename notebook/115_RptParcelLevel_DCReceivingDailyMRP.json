{
	"name": "115_RptParcelLevel_DCReceivingDailyMRP",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Reports/LMS"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DevSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5b8fe1bd-0a1a-4a6f-852e-10d379c63973"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# ' + StorageAccount + '"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #Create DataFrame for the rptparcellevellimitload LMS Table\r\n",
					"# rptparcellevellimitload = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/RPT/rptparcellevellimitload.parquet', format='parquet')\r\n",
					"# rptparcellevellimitload.createOrReplaceTempView(\"rptparcellevellimitload\")\r\n",
					"\r\n",
					"# #create dataframe for the stlocation lms table\r\n",
					"# stlocation = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet', format='parquet')\r\n",
					"# stlocation.createOrReplaceTempView(\"stlocation\")\r\n",
					"\r\n",
					"# #create dataframe for the storder lms table\r\n",
					"# storder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Structured Data/OPS/storder.parquet', format='parquet')\r\n",
					"# storder.createOrReplaceTempView(\"storder\")\r\n",
					"\r\n",
					"# #create dataframe for the stconsignment lms table\r\n",
					"# stconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Structured Data/OPS/stconsignment.parquet', format='parquet')\r\n",
					"# stconsignment.createOrReplaceTempView(\"stconsignment\")\r\n",
					"\r\n",
					"# #create dataframe for the stsroute lms table\r\n",
					"# stsroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Structured Data/OPS/stsroute.parquet', format='parquet')\r\n",
					"# stsroute.createOrReplaceTempView(\"stsroute\")\r\n",
					"\r\n",
					"# #create dataframe for the stdeliverypickupcustomer lms table\r\n",
					"# stdeliverypickupcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet', format='parquet')\r\n",
					"# stdeliverypickupcustomer.createOrReplaceTempView(\"stdeliverypickupcustomer\")\r\n",
					"\r\n",
					"# #create dataframe for the dborouteratetype lms table\r\n",
					"# dborouteratetype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dborouteratetype.parquet', format='parquet')\r\n",
					"# dborouteratetype.createOrReplaceTempView(\"dborouteratetype\")\r\n",
					"\r\n",
					"# #create dataframe for the dbobillzoneroute lms table\r\n",
					"# dbobillzoneroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zoneroute.parquet', format='parquet')\r\n",
					"# dbobillzoneroute.createOrReplaceTempView(\"dbobillzoneroute\")\r\n",
					"\r\n",
					"# #create dataframe for the dbobillparceltype lms table\r\n",
					"# dbobillparceltype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_parceltype.parquet', format='parquet')\r\n",
					"# dbobillparceltype.createOrReplaceTempView(\"dbobillparceltype\")"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"dcreceivingdailyreportmrp\r\n",
					"AS\r\n",
					"SELECT\r\n",
					" o.lms_order_corderno as corderno\r\n",
					",p.lms_parcel_id as parcelid\r\n",
					",p.lms_parcel_barcode as barcode\r\n",
					",p.lms_parcel_orderbillcustid as billingcustomerid\r\n",
					",p.lms_parcel_orderbillcustname as billingcustomername\r\n",
					",p.lms_parcel_orderpickupcustid as pickupcustomerid\r\n",
					",p.lms_parcel_orderpickupcustname as pickupcustomername\r\n",
					",p.lms_parcel_orderdelivercustid as deliverycustomerid\r\n",
					",p.lms_parcel_orderdelivercustname as deliverycustomername\r\n",
					",sr.lms_sroute_id as srouteid\r\n",
					",sr.lms_sroute_description as sroutedesc\r\n",
					",rt.description as routeratetypedesc\r\n",
					",zr.description as zoneroutedesc\r\n",
					",COALESCE(p.lms_parcel_acceptancedate,p.lms_parcel_handoverdate) as date\r\n",
					",p.lms_parcel_acceptancedate as acceptancedate\r\n",
					",p.lms_parcel_handoverdate as handoverdate\r\n",
					",l.lms_location_description as parcelstatus\r\n",
					",p.lms_parcel_waybillid as waybillid\r\n",
					",p.lms_parcel_consignid as consignid\r\n",
					",c.lms_consignment_cref as consignref\r\n",
					",p.lms_parcel_pl as pl\r\n",
					",p.lms_parcel_ph as ph\r\n",
					",p.lms_parcel_pw as pw\r\n",
					",p.lms_parcel_weight as parcelweight\r\n",
					",p.lms_parcel_volweight as parcelvolweight\r\n",
					",p.lms_parcel_chargeweight as parcelchargeweight\r\n",
					",bpt.description as billparceltype\r\n",
					"\r\n",
					"FROM rptparcellevellimitload p\r\n",
					"LEFT JOIN storder o on o.lms_order_id = p.lms_parcel_orderid\r\n",
					"LEFT JOIN stlocation l on l.lms_location_id = p.lms_parcel_locid\r\n",
					"LEFT JOIN stdeliverypickupcustomer dc on dc.lms_customer_id = p.lms_parcel_orderdelivercustid\r\n",
					"LEFT JOIN stsroute sr on sr.lms_sroute_id = dc.lms_customer_srouteid\r\n",
					"LEFT JOIN dborouteratetype rt on rt.id = dc.lms_customer_brouteid\r\n",
					"LEFT JOIN dbobillzoneroute zr on zr.id = dc.lms_customer_bill_zonerouteid\r\n",
					"LEFT JOIN stconsignment c on c.lms_consignment_id = p.lms_parcel_consignid\r\n",
					"LEFT JOIN dbobillparceltype bpt on bpt.ptype = p.lms_parcel_ptype\r\n",
					"\r\n",
					"WHERE p.lms_parcel_orderpickupcustid in (1570419,1570420,1570421,1570422,1570423) \r\n",
					""
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dcreceivingdailyreportmrp = spark.sql(\"SELECT * FROM dcreceivingdailyreportmrp\")"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# dcreceivingdailyreportmrp.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/RPT/dcreceivingdailyreportmrp.parquet', mode = \"overwrite\")"
				],
				"execution_count": 23
			}
		]
	}
}