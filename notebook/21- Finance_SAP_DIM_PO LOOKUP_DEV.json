{
	"name": "21- Finance_SAP_DIM_PO LOOKUP_DEV",
	"properties": {
		"folder": {
			"name": "ARCHIVE/DEV/Archived/Transactions Notebooks DEV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9d2eae57-ca76-4389-b570-4416fc6c0c4d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#F_Goods_Receipt_Notes = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/F_Goods_Receipt_Notes.parquet', format='parquet')\r\n",
					"#F_Goods_Receipt_Notes.createOrReplaceTempView(\"F_Goods_Receipt_Notes\")\r\n",
					"\r\n",
					"#ListDepots = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/CCMasterData/ListDepots.parquet', format='parquet')\r\n",
					"#ListDepots.createOrReplaceTempView(\"ListDepots\")\r\n",
					"\r\n",
					"#F_TRANSACTIONS_FINAL = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/F_TRANSACTIONS_CONTINUED.parquet', format='parquet')\r\n",
					"#F_TRANSACTIONS_FINAL.createOrReplaceTempView(\"F_TRANSACTIONS_FINAL\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DIM_PO_LOOKUP = spark.sql(\"\"\"\r\n",
					"SELECT distinct DocNum||Company as `Goods_Receipt_Number_KEY`,\r\n",
					"     BaseRef as `Purchase_Order_Number`,\r\n",
					"\t DocNum as `Goods_Receipt_Number`,\r\n",
					"\t CAST(DocDate AS DATE) as `Goods_Receipt_Posting_Date`\r\n",
					"FROM F_Goods_Receipt_Notes\r\n",
					"\r\n",
					"UNION ALL \r\n",
					"\r\n",
					"SELECT distinct CONCAT(DocNum,Company) as `Goods_Receipt_Number_KEY`,\r\n",
					"     BaseRef as `Purchase_Order_Number`,\r\n",
					"\t DocNum as `Goods_Receipt_Number`,\r\n",
					"\t CAST(DocDate AS DATE) as `Goods_Receipt_Posting_Date`\r\n",
					"FROM F_Goods_Receipt_Notes\r\n",
					"\"\"\")\r\n",
					"#DIM_PO_LOOKUP.show()\r\n",
					"DIM_PO_LOOKUP.createOrReplaceTempView(\"DIM_PO_LOOKUP\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"DIM_GROUP = spark.sql(\"\"\"\r\n",
					"SELECT --DepotID,\r\n",
					"    DepotName AS DEPOTNAME,\r\n",
					"    DepotCode AS DEPOTCODE,\r\n",
					"    ParentDepotCode AS PARENTDEPOTCODE,\r\n",
					"    Division AS DIVISION,\r\n",
					"    Address,\r\n",
					"    Latitude,\r\n",
					"    Longitude,\r\n",
					"    SAPDepreciationAccountCode,\r\n",
					"    MFRAuthoriser,\r\n",
					"    MFRApplicationFlag,\r\n",
					"    ActiveFlag,\r\n",
					"    OperationsManager,\r\n",
					"    BranchManager,\r\n",
					"    FleetManager\r\n",
					"FROM ListDepots\r\n",
					"\"\"\")\r\n",
					"#DIM_GROUP.show()\r\n",
					"DIM_GROUP.createOrReplaceTempView(\"DIM_GROUP\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"GROUP = spark.sql(\"\"\"\r\n",
					"SELECT `DEPOTCODE` as `Depot_Code`,\r\n",
					"\t   `DEPOTCODE` as `MFRDepotCode`,\r\n",
					" \t   `DEPOTCODE`,\t\r\n",
					"  \t   `DIVISION`\r\n",
					"FROM DIM_GROUP\r\n",
					"\"\"\")\r\n",
					"#GROUP.show()\r\n",
					"GROUP.createOrReplaceTempView(\"GROUP\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start of Customer creation"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"KEY = spark.sql(\"\"\"\r\n",
					"SELECT distinct\r\n",
					"Project as `Fleet_Code`,\r\n",
					"Depot as `Depot_Code`,\r\n",
					"Company,\r\n",
					"`Posting_Date`,\r\n",
					"Lane,\r\n",
					"`Service_Type` as `Service_Type_KEY`,\r\n",
					"if(isnull(`Customer_Code`), 'ZZNONE', `Customer_Code`) as `Customer_Code`,\r\n",
					"if(isnull(`Supplier_Code`), 'ZZNONE', `Supplier_Code`) as `Supplier_Code`,\r\n",
					"MAINKEY2  as `MAINKEY2`,\r\n",
					"CONCAT(MAINKEY2,`Service_Type`) as `MAINKEY ST`\r\n",
					"FROM `F_TRANSACTIONS_FINAL`\r\n",
					"\"\"\")\r\n",
					"#KEY.show()\r\n",
					"KEY.createOrReplaceTempView(\"KEY\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DIM_PO_LOOKUP.write.parquet('/DataLake/Structured/Dimensions/DIM_PO_LOOKUP.parquet', mode='overwrite')\r\n",
					"DIM_PO_LOOKUP.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.DIM_PO_LOOKUP\")\r\n",
					"\r\n",
					"GROUP.write.parquet('/DataLake/Structured/Facts/GROUP.parquet', mode='overwrite')\r\n",
					"GROUP.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.GROUP\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"Scripts have successfully executed\")"
				],
				"execution_count": null
			}
		]
	}
}