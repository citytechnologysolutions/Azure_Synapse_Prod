{
	"name": "IncrementalProdScript",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7049e8e0-80c5-4789-9dc6-abd75dbe1179"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
				"name": "PRDSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"cw_FolderName = \"\"\r\n",
					"ContainerName = \"\"\r\n",
					"DataLakeDF = \"\"\r\n",
					"Items = \"\"\r\n",
					"FullLoad = \"\"\r\n",
					"TempContainerName = \"\"\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#cw_FolderName = \"Unstructured Data/LMS\"\r\n",
					"#ContainerName = \"synapse\"\r\n",
					"#DataLakeDF = \"citylogisticsstorageprod.dfs.core.windows.net/\"\r\n",
					"#Items = ''\r\n",
					"#FullLoad = \"true\"\r\n",
					"#TempContainerName = \"temp\""
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pyspark.sql.functions import broadcast, col, count\r\n",
					"Items = json.loads(Items)\r\n",
					""
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(Items)"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Iterate through the cw_Items parameter\r\n",
					"failflag = 0\r\n",
					"failflaglist = []\r\n",
					"for i in Items :\r\n",
					"    try:\r\n",
					"        cw_FileName = i[\"Destination\"][\"FileName\"] + '.parquet'\r\n",
					"        IncField = i[\"Increment\"][\"IncField\"]\r\n",
					"        IdField = i[\"Increment\"][\"IdField\"]\r\n",
					"        print(cw_FileName, IncField, IdField)\r\n",
					"        copypath = 'abfss://' + TempContainerName + '@' + DataLakeDF + cw_FolderName + '/' + cw_FileName\r\n",
					"        t1path = ''\r\n",
					"        ## Perform parameter logic\r\n",
					"        if FullLoad == \"true\" : \r\n",
					"            print(\"FullLoad\")\r\n",
					"            FinalDF = spark.read.load(copypath, format='parquet') \r\n",
					"            Finalpath = 'abfss://' + ContainerName + '@' + DataLakeDF + cw_FolderName + '/' + cw_FileName\r\n",
					"        elif IncField == IdField :\r\n",
					"            print(\"Incremental ID LOAD\")\r\n",
					"            ##Load the Left File\r\n",
					"            path = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_FolderName + '/' + cw_FileName\r\n",
					"            ProdFile = spark.read.load(path, format='parquet')\r\n",
					"            ##Load the Right File\r\n",
					"            IncrementFile = spark.read.load(copypath, format='parquet')\r\n",
					"            IncrementFileZeroCount = IncrementFile.filter(col(IncField).isNull()).count()\r\n",
					"            if IncrementFileZeroCount > 0 :\r\n",
					"                    raise Exception (\"IncField contains Null values\")\r\n",
					"            unioned = ProdFile.unionByName(IncrementFile, allowMissingColumns=False)\r\n",
					"            t1path = 'abfss://' + TempContainerName + '@' + DataLakeDF + cw_FolderName + '/T1_' + cw_FileName\r\n",
					"            unioned.write.parquet(t1path, mode='overwrite')\r\n",
					"            ##Load the Final File\r\n",
					"            FinalDF = spark.read.load(t1path, format='parquet')\r\n",
					"            Finalpath = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_FolderName + '/' + cw_FileName\r\n",
					"            if unioned.count() < (0.75 * ProdFile.count()):\r\n",
					"                raise Exception (\"Error when Unioning table \" + cw_FileName + \" the Left side had \" + str(ProdFile.count()) + \" rows and the Unioned table has \" + str(unioned.count()))\r\n",
					"            else: \r\n",
					"                print(\"Union completed Succesfully\")\r\n",
					"            ##test = unioned.select(JoinFields)\r\n",
					"            UnionDistinctCount = unioned.select(IdField).distinct().count()\r\n",
					"            UnionCount = unioned.count()\r\n",
					"            if UnionDistinctCount != UnionCount :\r\n",
					"                    raise Exception (\"Duplicates when Unioning table \" + cw_FileName + \" the Unioned table has \" + str(UnionCount) + \" rows and the Distinct Unioned table has \" + str(UnionDistinctCount))\r\n",
					"            else: \r\n",
					"                print(\"Union completed Succesfully\")\r\n",
					"        elif IncField != IdField :\r\n",
					"            print(\"Incremental DATE LOAD\")\r\n",
					"            ##Load the Left File\r\n",
					"            path = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_FolderName + '/' + cw_FileName\r\n",
					"            ProdFile = spark.read.load(path, format='parquet')\r\n",
					"            ##Load the Right File\r\n",
					"            IncrementFile = spark.read.load(copypath, format='parquet')\r\n",
					"            IncrementFileZeroCountIncField = IncrementFile.filter(col(IncField).isNull()).count()\r\n",
					"            IncrementFileZeroCountIdField = IncrementFile.filter(col(IdField).isNull()).count()\r\n",
					"            if (IncrementFileZeroCountIncField > 0) or (IncrementFileZeroCountIdField > 0) :\r\n",
					"                    print(\"IncField or IdField contains Null values\")\r\n",
					"                    raise Exception (\"IncField or IdField contains Null values\")\r\n",
					"            df_with_rows_deleted = ProdFile.join(broadcast(IncrementFile), on = IdField, how = 'left_anti')\r\n",
					"            unioned = df_with_rows_deleted.unionByName(IncrementFile, allowMissingColumns=False)\r\n",
					"            t1path = 'abfss://' + TempContainerName + '@' + DataLakeDF + cw_FolderName + '/T1_' + cw_FileName\r\n",
					"            unioned.write.parquet(t1path, mode='overwrite')\r\n",
					"            ##Load the Final File\r\n",
					"            FinalDF = spark.read.load(t1path, format='parquet')\r\n",
					"            Finalpath = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_FolderName + '/' + cw_FileName\r\n",
					"            if unioned.count() < (0.75 * ProdFile.count()):\r\n",
					"                raise Exception (\"Error when Unioning table \" + cw_FileName + \" the Left side had \" + str(ProdFile.count()) + \" rows and the Unioned table has \" + str(unioned.count()))\r\n",
					"            else: \r\n",
					"                print(\"Union completed Succesfully\")\r\n",
					"            UnionDistinctCount = unioned.select(IdField).distinct().count()\r\n",
					"            UnionCount = unioned.count()\r\n",
					"            if UnionDistinctCount != UnionCount :\r\n",
					"                    raise Exception (\"Duplicates when Unioning table \" + cw_FileName + \" the Unioned table has \" + str(UnionCount) + \" rows and the Distinct Unioned table has \" + str(UnionDistinctCount))\r\n",
					"            else: \r\n",
					"                print(\"Union completed Succesfully\")\r\n",
					"        else:\r\n",
					"            raise ValueError(\"Parameters not correctly specified\")\r\n",
					"        print(Finalpath)\r\n",
					"        FinalDF.write.parquet(Finalpath, mode='overwrite')\r\n",
					"        print(copypath, t1path)\r\n",
					"        ## Remove the temporary tables and directories in the the temp container\r\n",
					"        mssparkutils.fs.rm(copypath, True) \r\n",
					"        if t1path != '' :\r\n",
					"            mssparkutils.fs.rm(t1path, True) \r\n",
					"    except:\r\n",
					"        failflag = 1\r\n",
					"        failflaglist += [i]\r\n",
					"## Fail pipeline if any iteration failed\r\n",
					"if failflag == 1:\r\n",
					"    print(failflaglist)\r\n",
					"    raise ValueError(\"One of the table iterations has failed\") "
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}