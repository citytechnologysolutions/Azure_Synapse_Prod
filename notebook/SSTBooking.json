{
	"name": "SSTBooking",
	"properties": {
		"folder": {
			"name": "TRANSFORM/01 SEMI-STRUCTURED/TMS + ORV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "TESTSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4271734e-f3c6-41de-85e9-33988d9a76fc"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
				"name": "TESTSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#Create DataFrame for the publicnonbooking TMS Table\r\n",
					"publicnonbooking = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publicnonbooking.parquet', format='parquet')\r\n",
					"publicnonbooking.createOrReplaceTempView(\"publicnonbooking\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicbooking TMS Table\r\n",
					"publicbooking = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publicbooking.parquet', format='parquet')\r\n",
					"publicbooking.createOrReplaceTempView(\"publicbooking\")\r\n",
					"\r\n",
					"#Create DataFrame for the publiccustomer TMS Table\r\n",
					"publiccustomer = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publiccustomer.parquet', format='parquet')\r\n",
					"publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicroute TMS Table\r\n",
					"publicroute = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publicroute.parquet', format='parquet')\r\n",
					"publicroute.createOrReplaceTempView(\"publicroute\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicthirdparty TMS Table\r\n",
					"publicthirdparty = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publicthirdparty.parquet', format='parquet')\r\n",
					"publicthirdparty.createOrReplaceTempView(\"publicthirdparty\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicfinancedata TMS Table\r\n",
					"publicfinancedata = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publicfinancedata.parquet', format='parquet')\r\n",
					"publicfinancedata.createOrReplaceTempView(\"publicfinancedata\")\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"sstbooking_tmp = spark.sql(\"\"\"\r\n",
					"SELECT \r\n",
					"    b.id as tms_booking_id\r\n",
					"    ,'booking' as tms_booking_bookingtype\r\n",
					"    ,b.customerid as tms_booking_customerid\r\n",
					"    ,b.trailersize as tms_booking_trailersize\r\n",
					"    ,b.trailertype as tms_booking_trailertype\r\n",
					"    ,b.routeid as tms_booking_routeid\r\n",
					"    ,b.routename as tms_booking_routename\r\n",
					"    ,b.cargoweight as tms_booking_cargoweight\r\n",
					"    ,b.cubicvolume as tms_booking_cubicvolume\r\n",
					"    ,b.directbooking as tms_booking_directbooking\r\n",
					"    ,to_timestamp(b.pickupdate) as tms_booking_pickupdate\r\n",
					"    ,to_timestamp(b.dispatchdate) as tms_booking_dispatchdate\r\n",
					"    ,to_timestamp(b.deliverydate) as tms_booking_deliverydate\r\n",
					"    ,to_timestamp(b.insdate) as tms_booking_insdate\r\n",
					"    ,to_timestamp(b.moddate) as tms_booking_moddate\r\n",
					"    ,b.status as tms_booking_status\r\n",
					"    ,b.tripid as tms_booking_tripid\r\n",
					"    ,b.createdby as tms_booking_createdby\r\n",
					"    ,b.allocatedby as tms_booking_allocatedby\r\n",
					"    ,to_timestamp(b.allocateddate) as tms_booking_allocateddate\r\n",
					"    ,COALESCE(b.opsrouteid,b.routeid) as tms_booking_opsrouteid\r\n",
					"    ,COALESCE(b.opsroutename,b.routename) as tms_booking_opsroutename\r\n",
					"    ,b.childcustomerid as tms_booking_childcustomerid\r\n",
					"    ,b.thirdpartyreason as tms_booking_thirdpartyreason\r\n",
					"    ,b.thirdpartyrate as tms_booking_thirdpartyrate\r\n",
					"    ,b.cref1 as tms_booking_cref1\r\n",
					"    ,b.cref2 as tms_booking_cref2\r\n",
					"    ,b.thirdpartyvehicleflag as tms_booking_thirdpartyvehicleflag\r\n",
					"    ,b.thirdpartytrailerflag as tms_booking_thirdpartytrailerflag\r\n",
					"    ,b.thirdpartydriverflag as tms_booking_thirdpartydriverflag\r\n",
					"    ,b.invoiceid as tms_booking_invoiceid\r\n",
					"    ,b.docstatus as tms_booking_docstatus\r\n",
					"    ,b.billingstatus as tms_booking_billingstatus\r\n",
					"    ,b.thirdpartyagreedrate as tms_booking_thirdpartyagreedrate\r\n",
					"    ,to_timestamp(b.invoiceddate) as tms_booking_invoiceddate\r\n",
					"    ,b.legacyid as tms_booking_legacyid\r\n",
					"    ,b.createdbyname as tms_booking_createdbyname\r\n",
					"    ,b.note as tms_booking_note\r\n",
					"    ,b.manifests as tms_booking_manifests\r\n",
					"    ,b.local as tms_booking_local\r\n",
					"    ,to_timestamp(b.docdate) as tms_booking_docdate\r\n",
					"    ,b.billingmethod as tms_booking_billingmethod\r\n",
					"    ,b.originalpod as tms_booking_originalpod\r\n",
					"    ,b.ponumber as tms_booking_ponumber\r\n",
					"    ,b.customerrate as tms_booking_customerrate\r\n",
					"    ,b.customeragreedrate as tms_booking_customeragreedrate\r\n",
					"    ,to_timestamp(b.assetreleasedate) as tms_booking_assetreleasedate\r\n",
					"    ,b.thirdpartyid as tms_booking_thirdpartyid\r\n",
					"    ,b.transporter as tms_booking_transporter\r\n",
					"    ,b.emailrequester as tms_booking_emailrequester\r\n",
					"    ,b.frombranchid as tms_booking_frombranchid\r\n",
					"    ,b.tobranchid as tms_booking_tobranchid\r\n",
					"    ,b.frombranch as tms_booking_frombranch\r\n",
					"    ,b.tobranch as tms_booking_tobranch\r\n",
					"    ,null as tms_booking_reason\r\n",
					"    ,null as tms_booking_startaddress\r\n",
					"    ,null as tms_booking_startlat\r\n",
					"    ,null as tms_booking_startlng\r\n",
					"    ,null as tms_booking_endaddress\r\n",
					"    ,null as tms_booking_endlat\r\n",
					"    ,null as tms_booking_endlng\r\n",
					"    ,null as tms_booking_convertedbookingid\r\n",
					"    \r\n",
					"FROM publicBooking b\r\n",
					"\"\"\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"sstnonbooking_tmp = spark.sql(\"\"\"\r\n",
					"SELECT\r\n",
					"    n.id as tms_booking_id\r\n",
					"    ,'nonbooking' as tms_booking_bookingtype\r\n",
					"    ,null as tms_booking_customerid\r\n",
					"    ,n.trailersize as tms_booking_trailersize\r\n",
					"    ,null as tms_booking_trailertype\r\n",
					"    ,n.routeid as tms_booking_routeid\r\n",
					"    ,n.routename as tms_booking_routename\r\n",
					"    ,null as tms_booking_cargoweight\r\n",
					"    ,null as tms_booking_cubicvolume\r\n",
					"    ,null as tms_booking_directbooking\r\n",
					"    ,null as tms_booking_pickupdate\r\n",
					"    ,to_timestamp(n.dispatchdate) as tms_booking_dispatchdate\r\n",
					"    ,to_timestamp(n.deliverydate) as tms_booking_deliverydate\r\n",
					"    ,to_timestamp(n.insdate) as tms_booking_insdate\r\n",
					"    ,to_timestamp(n.moddate) as tms_booking_moddate\r\n",
					"    ,n.status as tms_booking_status\r\n",
					"    ,n.tripid as tms_booking_tripid\r\n",
					"    ,null as tms_booking_createdby\r\n",
					"    ,null as tms_booking_allocatedby\r\n",
					"    ,to_timestamp(n.insdate) as tms_booking_allocateddate\r\n",
					"    ,n.routeid as tms_booking_opsrouteid\r\n",
					"    ,n.routename as tms_booking_opsroutename\r\n",
					"    ,null as tms_booking_childcustomerid\r\n",
					"    ,null as tms_booking_thirdpartyreason\r\n",
					"    ,null as tms_booking_thirdpartyrate\r\n",
					"    ,null as tms_booking_cref1\r\n",
					"    ,null as tms_booking_cref2\r\n",
					"    ,null as tms_booking_thirdpartyvehicleflag\r\n",
					"    ,null as tms_booking_thirdpartytrailerflag\r\n",
					"    ,null as tms_booking_thirdpartydriverflag\r\n",
					"    ,null as tms_booking_invoiceid\r\n",
					"    ,null as tms_booking_docstatus\r\n",
					"    ,n.billingstatus as tms_booking_billingstatus\r\n",
					"    ,null as tms_booking_thirdpartyagreedrate\r\n",
					"    ,null as tms_booking_invoiceddate\r\n",
					"    ,n.legacyid as tms_booking_legacyid\r\n",
					"    ,null as tms_booking_createdbyname\r\n",
					"    ,n.note as tms_booking_note\r\n",
					"    ,null as tms_booking_manifests\r\n",
					"    ,n.local as tms_booking_local\r\n",
					"    ,null as tms_booking_docdate\r\n",
					"    ,null as tms_booking_billingmethod\r\n",
					"    ,null as tms_booking_originalpod\r\n",
					"    ,null as tms_booking_ponumber\r\n",
					"    ,null as tms_booking_customerrate\r\n",
					"    ,null as tms_booking_customeragreedrate\r\n",
					"    ,to_timestamp(n.assetreleasedate) as tms_booking_assetreleasedate\r\n",
					"    ,null as tms_booking_thirdpartyid\r\n",
					"    ,null as tms_booking_transporter\r\n",
					"    ,null as tms_booking_emailrequester\r\n",
					"    ,n.frombranchid as tms_booking_frombranchid\r\n",
					"    ,n.tobranchid as tms_booking_tobranchid\r\n",
					"    ,n.frombranch as tms_booking_frombranch\r\n",
					"    ,n.tobranch as tms_booking_tobranch\r\n",
					"    ,n.reason as tms_booking_reason\r\n",
					"    ,n.startaddress as tms_booking_startaddress\r\n",
					"    ,n.startlat as tms_booking_startlat\r\n",
					"    ,n.startlng as tms_booking_startlng\r\n",
					"    ,n.endaddress as tms_booking_endaddress\r\n",
					"    ,n.endlat as tms_booking_endlat\r\n",
					"    ,n.endlng as tms_booking_endlng\r\n",
					"    ,n.convertedbookingid as tms_booking_convertedbookingid\r\n",
					"\r\n",
					"FROM publicNonBooking n\r\n",
					"\"\"\")\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sstbooking_tmp.createOrReplaceTempView(\"sstbooking_tmp\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sstnonbooking_tmp.createOrReplaceTempView(\"sstnonbooking_tmp\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"bookingunionnonbooking = sstbooking_tmp.unionByName(sstnonbooking_tmp, allowMissingColumns = True)\r\n",
					"bookingunionnonbooking.createOrReplaceTempView(\"bookingunionnonbooking\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"sstbooking \r\n",
					"AS \r\n",
					"SELECT\r\n",
					"    x.tms_booking_id\r\n",
					"    ,x.tms_booking_bookingtype\r\n",
					"    ,x.tms_booking_customerid\r\n",
					"    ,x.tms_booking_trailersize\r\n",
					"    ,x.tms_booking_trailertype\r\n",
					"    ,x.tms_booking_routeid\r\n",
					"    ,x.tms_booking_routename\r\n",
					"    ,x.tms_booking_cargoweight\r\n",
					"    ,x.tms_booking_cubicvolume\r\n",
					"    ,x.tms_booking_directbooking\r\n",
					"    ,x.tms_booking_pickupdate\r\n",
					"    ,x.tms_booking_dispatchdate\r\n",
					"    ,x.tms_booking_deliverydate\r\n",
					"    ,x.tms_booking_insdate\r\n",
					"    ,x.tms_booking_moddate\r\n",
					"    ,x.tms_booking_status\r\n",
					"    ,x.tms_booking_tripid\r\n",
					"    ,x.tms_booking_createdby\r\n",
					"    ,x.tms_booking_allocatedby\r\n",
					"    ,x.tms_booking_allocateddate\r\n",
					"    ,x.tms_booking_opsrouteid\r\n",
					"    ,x.tms_booking_opsroutename\r\n",
					"    ,x.tms_booking_childcustomerid\r\n",
					"    ,x.tms_booking_thirdpartyreason\r\n",
					"    ,x.tms_booking_thirdpartyrate\r\n",
					"    ,x.tms_booking_cref1\r\n",
					"    ,x.tms_booking_cref2\r\n",
					"    ,x.tms_booking_thirdpartyvehicleflag\r\n",
					"    ,x.tms_booking_thirdpartytrailerflag\r\n",
					"    ,x.tms_booking_thirdpartydriverflag\r\n",
					"    ,x.tms_booking_invoiceid\r\n",
					"    ,x.tms_booking_docstatus\r\n",
					"    ,x.tms_booking_billingstatus\r\n",
					"    ,x.tms_booking_thirdpartyagreedrate\r\n",
					"    ,x.tms_booking_invoiceddate\r\n",
					"    ,x.tms_booking_createdbyname\r\n",
					"    ,x.tms_booking_note\r\n",
					"    ,x.tms_booking_manifests\r\n",
					"    ,x.tms_booking_local\r\n",
					"    ,x.tms_booking_docdate\r\n",
					"    ,x.tms_booking_billingmethod\r\n",
					"    ,x.tms_booking_originalpod\r\n",
					"    ,x.tms_booking_ponumber\r\n",
					"    ,x.tms_booking_customerrate\r\n",
					"    ,x.tms_booking_customeragreedrate\r\n",
					"    ,x.tms_booking_assetreleasedate\r\n",
					"    ,x.tms_booking_thirdpartyid\r\n",
					"    ,x.tms_booking_transporter\r\n",
					"    ,x.tms_booking_emailrequester\r\n",
					"    ,x.tms_booking_frombranchid\r\n",
					"    ,x.tms_booking_tobranchid\r\n",
					"    ,x.tms_booking_frombranch\r\n",
					"    ,x.tms_booking_tobranch\r\n",
					"    ,x.tms_booking_reason\r\n",
					"    ,x.tms_booking_startaddress\r\n",
					"    ,x.tms_booking_startlat\r\n",
					"    ,x.tms_booking_startlng\r\n",
					"    ,x.tms_booking_endaddress\r\n",
					"    ,x.tms_booking_endlat\r\n",
					"    ,x.tms_booking_endlng\r\n",
					"    ,x.tms_booking_convertedbookingid\r\n",
					"    ,c.id as tms_customer_id\r\n",
					"    ,c.status as tms_customer_status\r\n",
					"    ,c.name as tms_customer_name\r\n",
					"    ,c.parentid as tms_customer_parentid\r\n",
					"    ,c.accountnumber as tms_customer_accountnumber\r\n",
					"    ,c.revenuecode as tms_customer_revenuecode\r\n",
					"    ,c.insdate as tms_customer_insdate\r\n",
					"    ,c.moddate as tms_customer_moddate\r\n",
					"    ,c.insby as tms_customer_insby\r\n",
					"    ,c.opaqueid as tms_customer_opaqueid\r\n",
					"    ,c.email as tms_customer_email\r\n",
					"    ,c.areacode as tms_customer_areacode\r\n",
					"    ,c.mobilenum as tms_customer_mobilenum\r\n",
					"    ,c.billingmethod as tms_customer_billingmethod\r\n",
					"    ,c.adjustmetric as tms_customer_adjustmetric\r\n",
					"    ,c.adjustvalue as tms_customer_adjustvalue\r\n",
					"    ,c.adjustnegativeallowed as tms_customer_adjustnegativeallowed\r\n",
					"    ,c.adjustvalueusingprevmonth as tms_customer_adjustvalueusingprevmonth\r\n",
					"    ,c.excludefromnotinvoicedreport as tms_customer_excludefromnotinvoicedreport\r\n",
					"    ,c.logictype as tms_customer_logictype\r\n",
					"    ,c1.id as tms_customer_childid\r\n",
					"    ,c1.status as tms_customer_childstatus\r\n",
					"    ,c1.name as tms_customer_childname\r\n",
					"    ,c1.parentid as tms_customer_childparentid\r\n",
					"    ,c1.accountnumber as tms_customer_childaccountnumber\r\n",
					"    ,c1.revenuecode as tms_customer_childrevenuecode\r\n",
					"    ,c1.insdate as tms_customer_childinsdate\r\n",
					"    ,c1.moddate as tms_customer_childmoddate\r\n",
					"    ,c1.insby as tms_customer_childinsby\r\n",
					"    ,c1.opaqueid as tms_customer_childopaqueid\r\n",
					"    ,c1.email as tms_customer_childemail\r\n",
					"    ,c1.areacode as tms_customer_childareacode\r\n",
					"    ,c1.mobilenum as tms_customer_childmobilenum\r\n",
					"    ,c1.billingmethod as tms_customer_childbillingmethod\r\n",
					"    ,c1.adjustmetric as tms_customer_childadjustmetric\r\n",
					"    ,c1.adjustvalue as tms_customer_childadjustvalue\r\n",
					"    ,c1.adjustnegativeallowed as tms_customer_childadjustnegativeallowed\r\n",
					"    ,c1.adjustvalueusingprevmonth as tms_customer_childadjustvalueusingprevmonth\r\n",
					"    ,c1.excludefromnotinvoicedreport as tms_customer_childexcludefromnotinvoicedreport\r\n",
					"    ,c1.logictype as tms_customer_childlogictype\r\n",
					"    ,c1.minliability as tms_customer_childminliability\r\n",
					"    ,r.id as tms_route_id\r\n",
					"    ,r.name as tms_route_name\r\n",
					"    ,r.slug as tms_route_slug\r\n",
					"    ,r.parentroute as tms_route_parentroute\r\n",
					"    ,r.insdate as tms_route_insdate\r\n",
					"    ,r.moddate as tms_route_moddate\r\n",
					"    ,r.insby as tms_route_insby\r\n",
					"    ,r.status as tms_route_status\r\n",
					"    ,r.crossborder as tms_route_crossborder\r\n",
					"    ,r.roundtripdays as tms_route_roundtripdays\r\n",
					"    ,r.distance as tms_route_distance\r\n",
					"    ,r.duration as tms_route_duration\r\n",
					"    ,r.numofuse as tms_route_numofuse\r\n",
					"    ,r.local as tms_route_local\r\n",
					"    ,r1.id as tms_route_opsrouteid\r\n",
					"    ,r1.name as tms_route_opsroutename\r\n",
					"    ,r1.slug as tms_route_opsrouteslug\r\n",
					"    ,r1.parentroute as tms_route_opsrouteparentroute\r\n",
					"    ,r1.insdate as tms_route_opsrouteinsdate\r\n",
					"    ,r1.moddate as tms_route_opsroutemoddate\r\n",
					"    ,r1.insby as tms_route_opsrouteinsby\r\n",
					"    ,r1.status as tms_route_opsroutestatus\r\n",
					"    ,r1.crossborder as tms_route_opsroutecrossborder\r\n",
					"    ,r1.roundtripdays as tms_route_opsrouteroundtripdays\r\n",
					"    ,r1.distance as tms_route_opsroutedistance\r\n",
					"    ,r1.duration as tms_route_opsrouteduration\r\n",
					"    ,r1.numofuse as tms_route_opsroutenumofuse\r\n",
					"    ,r1.local as tms_route_opsroutelocal\r\n",
					"    ,t.id as tms_thirdparty_id\r\n",
					"    ,t.name as tms_thirdparty_name\r\n",
					"    ,t.areacode as tms_thirdparty_areacode\r\n",
					"    ,t.telnumber as tms_thirdparty_telnumber\r\n",
					"    ,t.mobareacode as tms_thirdparty_mobareacode\r\n",
					"    ,t.mobnumer as tms_thirdparty_mobnumer\r\n",
					"    ,t.contact as tms_thirdparty_contact\r\n",
					"    ,t.address as tms_thirdparty_address\r\n",
					"    ,t.streetno as tms_thirdparty_streetno\r\n",
					"    ,t.zipcode as tms_thirdparty_zipcode\r\n",
					"    ,t.city as tms_thirdparty_city\r\n",
					"    ,t.province as tms_thirdparty_province\r\n",
					"    ,t.status as tms_thirdparty_status\r\n",
					"    ,t.mdvoid as tms_thirdparty_mdvoid\r\n",
					"    ,t.registration as tms_thirdparty_registration\r\n",
					"    ,t.email as tms_thirdparty_email\r\n",
					"    ,t.accnumber as tms_thirdparty_accnumber\r\n",
					"    ,t.insdate as tms_thirdparty_insdate\r\n",
					"    ,t.moddate as tms_thirdparty_moddate\r\n",
					"    ,t.gitstatus as tms_thirdparty_gitstatus\r\n",
					"    ,t.lat as tms_thirdparty_lat\r\n",
					"    ,t.lng as tms_thirdparty_lng\r\n",
					"    ,t.note as tms_thirdparty_note\r\n",
					"    ,t.revenuecode as tms_thirdparty_revenuecode\r\n",
					"    ,t.country as tms_thirdparty_country\r\n",
					"    ,fd.id as tms_financedata_id\r\n",
					"\t,fd.bookingid as tms_financedata_bookingid\r\n",
					"\t,fd.insdate as tms_financedata_insdate\r\n",
					"\t,fd.peaksurchagrebuy as tms_financedata_peaksurchagrebuy\r\n",
					"\t,fd.peaksurchagresell as tms_financedata_peaksurchagresell\r\n",
					"\t,fd.manualentryroadhaulsell as tms_financedata_manualentryroadhaulsell\r\n",
					"\t,fd.manualentryahocsell as tms_financedata_manualentryahocsell\r\n",
					"\t,fd.systemfuellevy as tms_financedata_systemfuellevy\r\n",
					"\t,fd.systemratefuellevy as tms_financedata_systemratefuellevy\r\n",
					"\t,fd.systemratefuelexlevy as tms_financedata_systemratefuelexlevy\r\n",
					"\t,fd.systemratefuelinclevy as tms_financedata_systemratefuelinclevy\r\n",
					"\t,fd.systemsellrate as tms_financedata_systemsellrate\r\n",
					"\t,fd.totalsellrate as tms_financedata_totalsellrate\r\n",
					"\t,fd.moddate as tms_financedata_moddate\r\n",
					"\t,fd.totalbuyrate as tms_financedata_totalbuyrate\r\n",
					"\t,fd.rateprofileid as tms_financedata_rateprofileid\r\n",
					"  \r\n",
					"\r\n",
					"FROM bookingunionnonbooking x\r\n",
					"\r\n",
					"LEFT JOIN publiccustomer c on c.id = x.tms_booking_customerid\r\n",
					"LEFT JOIN publiccustomer c1 on c1.id = x.tms_booking_childcustomerid\r\n",
					"LEFT JOIN publicroute r on r.id = x.tms_booking_routeid\r\n",
					"LEFT JOIN publicroute r1 on r1.id = x.tms_booking_opsrouteid\r\n",
					"LEFT JOIN publicthirdparty t on t.id = x.tms_booking_thirdpartyid\r\n",
					"LEFT JOIN publicfinancedata fd on fd.bookingid = x.tms_booking_id\r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sstbooking = spark.sql(\"SELECT * FROM sstbooking\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sstbooking.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Semi Structured Data/OPS/sstbooking.parquet', mode = \"overwrite\")"
				],
				"execution_count": 9
			}
		]
	}
}