{
	"name": "12_DIST_ST3MonthRoling",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a980dfe3-d1a8-4d14-b1fb-7ca82c37617e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
				"name": "PRDSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 304
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #create dataframe for the stparcel lms table\r\n",
					"# stparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet/', format='parquet')\r\n",
					"# stparcel.createOrReplaceTempView(\"stparcel\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stlmstrack LMS Table\r\n",
					"# stlmstrack = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet', format='parquet')\r\n",
					"# stlmstrack.createOrReplaceTempView(\"stlmstrack\")\r\n",
					"\r\n",
					"# #create dataframe for the stconsignment lms table\r\n",
					"# stconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stconsignment.parquet/', format='parquet')\r\n",
					"# stconsignment.createOrReplaceTempView(\"stconsignment\")\r\n",
					"\r\n",
					"# #create dataframe for the stwaybill lms table\r\n",
					"# stwaybill = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet/', format='parquet')\r\n",
					"# stwaybill.createOrReplaceTempView(\"stwaybill\")\r\n",
					"\r\n",
					"# #create dataframe for the storder lms table\r\n",
					"# storder = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/storder.parquet/', format='parquet')\r\n",
					"# storder.createOrReplaceTempView(\"storder\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stloadparent LMS Table\r\n",
					"# stloadparent = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet', format='parquet')\r\n",
					"# stloadparent.createOrReplaceTempView(\"stloadparent\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stloadchild LMS Table\r\n",
					"# stloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadchild.parquet', format='parquet')\r\n",
					"# stloadchild.createOrReplaceTempView(\"stloadchild\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stcollection LMS Table\r\n",
					"# stcollection = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stcollection.parquet', format='parquet')\r\n",
					"# stcollection.createOrReplaceTempView(\"stcollection\")"
				],
				"execution_count": 305
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql import Window\r\n",
					"# from pyspark.sql import functions as F\r\n",
					"# my_window = (Window.orderBy('daymonth').rowsBetween(Window.unboundedPreceding, 0))"
				],
				"execution_count": 306
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"PARCEL CURRENT AND PRIOR YEAR 3MONTHS"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcel3myoy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    *\r\n",
					"FROM stparcel\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_parcel_pdate >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_parcel_pdate <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"OR \r\n",
					"(\r\n",
					"    lms_parcel_pdate >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_parcel_pdate <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					""
				],
				"execution_count": 307
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stparcel3myoy = spark.sql(\"SELECT * FROM stparcel3myoy\")"
				],
				"execution_count": 308
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stparcel3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stparcel3myoy.parquet', mode = \"overwrite\")"
				],
				"execution_count": 309
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CONSIGNEMT CURRENT AND PRIOR YEAR 3MONTHS"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stconsignment3myoy_tmp1\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    lms_consignment_id\r\n",
					"FROM stconsignment\r\n",
					"\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_consignment_cdate >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_consignment_cdate <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"OR \r\n",
					"(\r\n",
					"    lms_consignment_cdate >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_consignment_cdate <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					""
				],
				"execution_count": 310
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stconsignment3myoy_tmp2\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    lms_parcel_consignid as lms_consignment_id\r\n",
					"FROM stparcel3myoy\r\n",
					"WHERE lms_parcel_consignid IS NOT NULL\r\n",
					""
				],
				"execution_count": 311
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stconsignment3myoy_tmp3 = spark.sql(\"SELECT * FROM stconsignment3myoy_tmp1 UNION SELECT * FROM stconsignment3myoy_tmp2\")"
				],
				"execution_count": 312
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stconsignment3myoy_tmp3.createOrReplaceTempView(\"stconsignment3myoy_tmp3\")"
				],
				"execution_count": 313
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stconsignment3myoy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    c.*\r\n",
					"FROM stconsignment3myoy_tmp3 t\r\n",
					"LEFT JOIN stconsignment c on c.lms_consignment_id = t.lms_consignment_id\r\n",
					"WHERE c.lms_consignment_id IS NOT NULL"
				],
				"execution_count": 314
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stconsignment3myoy = spark.sql(\"SELECT * FROM stconsignment3myoy\")"
				],
				"execution_count": 315
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stconsignment3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stconsignment3myoy.parquet', mode = \"overwrite\")"
				],
				"execution_count": 316
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"WAYBILL CURRENT AND PRIOR YEAR 3MONTHS"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stwaybill3myoy_tmp1\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    lms_waybill_id\r\n",
					"FROM stwaybill\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_waybill_date >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_waybill_date <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"OR \r\n",
					"(\r\n",
					"    lms_waybill_date >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_waybill_date <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")"
				],
				"execution_count": 317
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stwaybill3myoy_tmp2\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    lms_parcel_waybillid as lms_waybill_id\r\n",
					"FROM stparcel3myoy\r\n",
					""
				],
				"execution_count": 318
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stwaybill3myoy_tmp3 = spark.sql(\"SELECT * FROM stwaybill3myoy_tmp1 UNION SELECT * FROM stwaybill3myoy_tmp2\")"
				],
				"execution_count": 319
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stwaybill3myoy_tmp3.createOrReplaceTempView(\"stwaybill3myoy_tmp3\")"
				],
				"execution_count": 320
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stwaybill3myoy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    w.*\r\n",
					"FROM stwaybill3myoy_tmp3 t\r\n",
					"LEFT JOIN stwaybill w on w.lms_waybill_id = t.lms_waybill_id\r\n",
					"WHERE w.lms_waybill_id IS NOT NULL"
				],
				"execution_count": 321
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stwaybill3myoy = spark.sql(\"SELECT * FROM stwaybill3myoy\")"
				],
				"execution_count": 322
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stwaybill3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybill3myoy.parquet', mode = \"overwrite\")"
				],
				"execution_count": 323
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ORDER CURRENT AND PRIOR YEAR 3MONTHS"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"storder3myoy_tmp1\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    lms_order_id\r\n",
					"FROM storder\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_order_hodate >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_order_hodate <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"OR \r\n",
					"(\r\n",
					"    lms_order_hodate >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_order_hodate <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")"
				],
				"execution_count": 324
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"storder3myoy_tmp2\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    lms_parcel_waybillid as lms_waybill_id\r\n",
					"FROM stparcel3myoy"
				],
				"execution_count": 325
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storder3myoy_tmp3 = spark.sql(\"SELECT * FROM storder3myoy_tmp1 UNION SELECT * FROM storder3myoy_tmp2\")"
				],
				"execution_count": 326
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storder3myoy_tmp3.createOrReplaceTempView(\"storder3myoy_tmp3\")"
				],
				"execution_count": 327
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"storder3myoy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    o.*\r\n",
					"FROM storder3myoy_tmp3 t\r\n",
					"LEFT JOIN storder o on o.lms_order_id = t.lms_order_id\r\n",
					"WHERE o.lms_order_id IS NOT NULL"
				],
				"execution_count": 328
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"storder3myoy = spark.sql(\"SELECT * FROM storder3myoy\")"
				],
				"execution_count": 329
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# storder3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/storder3myoy.parquet', mode = \"overwrite\")"
				],
				"execution_count": 330
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRACK CURRENT AND PRIOR YEAR 3MONTHS"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stlmstrack3myoy_tmp1\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    lms_track_parcelid,\r\n",
					"    lms_track_loadid\r\n",
					"FROM stlmstrack\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_track_opendt >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_track_opendt <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"OR \r\n",
					"(\r\n",
					"    lms_track_opendt >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_track_opendt <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")"
				],
				"execution_count": 331
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stlmstrack3myoy_tmp = spark.sql(\"SELECT * FROM stlmstrack3myoy_tmp1\")"
				],
				"execution_count": 332
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stlmstrack3myoy_tmp.createOrReplaceTempView(\"stlmstrack3myoy_tmp\")"
				],
				"execution_count": 333
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stlmstrack3myoy_tmp2\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    lms_parcel_id as lms_track_parcelid\r\n",
					"FROM stparcel3myoy "
				],
				"execution_count": 334
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stlmstrack3myoy_tmp3 = spark.sql(\"SELECT lms_track_parcelid FROM stlmstrack3myoy_tmp1 UNION SELECT * FROM stlmstrack3myoy_tmp2\")"
				],
				"execution_count": 335
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stlmstrack3myoy_tmp3.createOrReplaceTempView(\"stlmstrack3myoy_tmp3\")"
				],
				"execution_count": 336
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stlmstrack3myoy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    t.*\r\n",
					"FROM stlmstrack3myoy_tmp3 t1\r\n",
					"LEFT JOIN stlmstrack t on t.lms_track_parcelid = t1.lms_track_parcelid\r\n",
					""
				],
				"execution_count": 337
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stlmstrack3myoy = spark.sql(\"SELECT * FROM stlmstrack3myoy\")"
				],
				"execution_count": 338
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stlmstrack3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmstrack3myoy.parquet', mode = \"overwrite\")"
				],
				"execution_count": 339
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"LOAD CHILD CURRENT AND PRIOR YEAR 3MONTHS"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stloadchild3myoy_tmp1\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    lms_loadchild_id,\r\n",
					"    lms_loadchild_parentloadid\r\n",
					"FROM stloadchild\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_loadchild_ldate >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_loadchild_ldate <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"OR \r\n",
					"(\r\n",
					"    lms_loadchild_ldate >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_loadchild_ldate <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					""
				],
				"execution_count": 340
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stloadchild3myoy_tmp = spark.sql(\"SELECT * FROM stloadchild3myoy_tmp1\")"
				],
				"execution_count": 341
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stloadchild3myoy_tmp.createOrReplaceTempView(\"stloadchild3myoy_tmp\")"
				],
				"execution_count": 342
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stloadchild3myoy_tmp2\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    lms_track_loadid as lms_loadchild_id\r\n",
					"FROM stlmstrack3myoy_tmp"
				],
				"execution_count": 343
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stloadchild3myoy_tmp3 = spark.sql(\"SELECT lms_loadchild_id FROM stloadchild3myoy_tmp1 UNION SELECT * FROM stloadchild3myoy_tmp2\")"
				],
				"execution_count": 344
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stloadchild3myoy_tmp3.createOrReplaceTempView(\"stloadchild3myoy_tmp3\")"
				],
				"execution_count": 345
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stloadchild3myoy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    lc.*\r\n",
					"FROM stloadchild3myoy_tmp3 t\r\n",
					"LEFT JOIN stloadchild lc on lc.lms_loadchild_id = t.lms_loadchild_id\r\n",
					"WHERE lc.lms_loadchild_id IS NOT NULL\r\n",
					"AND lc.lms_loadchild_ldate IS NOT NULL"
				],
				"execution_count": 346
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stloadchild3myoy = spark.sql(\"SELECT * FROM stloadchild3myoy\")"
				],
				"execution_count": 347
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stloadchild3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stloadchild3myoy.parquet', mode = \"overwrite\")"
				],
				"execution_count": 348
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"LOAD PARENT CURRENT AND PRIOR YEAR 3MONTHS"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stloadparent3myoy_tmp1\r\n",
					"AS\r\n",
					"SELECT DISTINCT\r\n",
					"    lms_loadchild_parentloadid as lms_loadparent_parentloadid\r\n",
					"FROM stloadchild3myoy_tmp \r\n",
					"WHERE lms_loadchild_parentloadid IS NOT NULL"
				],
				"execution_count": 349
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stloadparent3myoy_tmp2\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    lms_track_loadid as lms_loadparent_parentloadid\r\n",
					"FROM stlmstrack3myoy_tmp\r\n",
					""
				],
				"execution_count": 350
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stloadparent3myoy_tmp3 = spark.sql(\"SELECT * FROM stloadparent3myoy_tmp1 UNION SELECT * FROM stloadparent3myoy_tmp2\")"
				],
				"execution_count": 351
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stloadparent3myoy_tmp3.createOrReplaceTempView(\"stloadparent3myoy_tmp3\")"
				],
				"execution_count": 352
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stloadparent3myoy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    lp.*\r\n",
					"FROM stloadparent3myoy_tmp3 t\r\n",
					"LEFT JOIN stloadparent lp on lp.lms_loadparent_parentloadid = t.lms_loadparent_parentloadid\r\n",
					"WHERE lp.lms_loadparent_parentloadid IS NOT NULL"
				],
				"execution_count": 353
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stloadparent3myoy = spark.sql(\"SELECT * FROM stloadparent3myoy\")"
				],
				"execution_count": 354
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stloadparent3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stloadparent3myoy.parquet', mode = \"overwrite\")"
				],
				"execution_count": 355
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stcollection3myoy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    *\r\n",
					"FROM stcollection\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_collect_date >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_collect_date <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"OR \r\n",
					"(\r\n",
					"    lms_collect_date >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_collect_date <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")"
				],
				"execution_count": 356
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stcollection3myoy = spark.sql(\"SELECT * FROM stcollection3myoy\")"
				],
				"execution_count": 357
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stcollection3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stcollection3myoy.parquet', mode = \"overwrite\")"
				],
				"execution_count": 358
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**<mark>CUMULATIVE TOTALS BY DAY</mark>**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"staggrigateparcelbyordermeasurescy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     date_format(lms_parcel_orderhodate, \"MMdd\") as daymonth\r\n",
					"    ,count(DISTINCT lms_parcel_orderid) as lms_parcel_ho_orders_cy\r\n",
					"    ,count(DISTINCT lms_parcel_consignid) as lms_parcel_ho_consignments_cy\r\n",
					"    ,count(DISTINCT lms_parcel_id) as lms_parcel_ho_parcels_cy\r\n",
					"    ,count(DISTINCT lms_parcel_waybillid) as lms_parcel_ho_waybills_cy\r\n",
					"    ,sum(lms_parcel_weight) as lms_parcel_ho_weight_cy\r\n",
					"    ,sum(lms_parcel_chargeweight) as lms_parcel_ho_chargeweight_cy\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"FROM stparcel3myoy\r\n",
					"\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_parcel_orderhodate >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_parcel_orderhodate <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"\r\n",
					"GROUP BY date_format(lms_parcel_orderhodate, \"MMdd\")\r\n",
					""
				],
				"execution_count": 359
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbyordermeasurescy = spark.sql(\"SELECT * FROM staggrigateparcelbyordermeasurescy\")"
				],
				"execution_count": 360
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbyordermeasurescycum = staggrigateparcelbyordermeasurescy.withColumn('lms_parcel_ho_orders_cy_cum', F.sum('lms_parcel_ho_orders_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_ho_consignments_cy_cum', F.sum('lms_parcel_ho_consignments_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_ho_parcels_cy_cum', F.sum('lms_parcel_ho_parcels_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_ho_waybills_cy_cum', F.sum('lms_parcel_ho_waybills_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_ho_weight_cy_cum', F.sum('lms_parcel_ho_weight_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_ho_chargeweight_cy_cum', F.sum('lms_parcel_ho_chargeweight_cy').over(my_window))\r\n",
					"\r\n",
					""
				],
				"execution_count": 361
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##staggrigateparcelbyordermeasurescycum.createOrReplaceTempView(\"staggrigateparcelbyordermeasurescycum\")"
				],
				"execution_count": 362
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"staggrigateparcelbyordermeasurespy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     date_format(lms_parcel_orderhodate, \"MMdd\") as daymonth\r\n",
					"    ,count(DISTINCT lms_parcel_orderid) as lms_parcel_ho_orders_py\r\n",
					"    ,count(DISTINCT lms_parcel_consignid) as lms_parcel_ho_consignments_py\r\n",
					"    ,count(DISTINCT lms_parcel_id) as lms_parcel_ho_parcels_py\r\n",
					"    ,count(DISTINCT lms_parcel_waybillid) as lms_parcel_ho_waybills_py\r\n",
					"    ,sum(lms_parcel_weight) as lms_parcel_ho_weight_py\r\n",
					"    ,sum(lms_parcel_chargeweight) as lms_parcel_ho_chargeweight_py\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"FROM stparcel3myoy\r\n",
					"\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_parcel_orderhodate >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_parcel_orderhodate <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"\r\n",
					"GROUP BY date_format(lms_parcel_orderhodate, \"MMdd\")\r\n",
					""
				],
				"execution_count": 363
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbyordermeasurespy = spark.sql(\"SELECT * FROM staggrigateparcelbyordermeasurespy\")"
				],
				"execution_count": 364
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbyordermeasurespycum = staggrigateparcelbyordermeasurespy.withColumn('lms_parcel_ho_orders_py_cum', F.sum('lms_parcel_ho_orders_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_ho_consignments_py_cum', F.sum('lms_parcel_ho_consignments_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_ho_parcels_py_cum', F.sum('lms_parcel_ho_parcels_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_ho_waybills_py_cum', F.sum('lms_parcel_ho_waybills_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_ho_weight_py_cum', F.sum('lms_parcel_ho_weight_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_ho_chargeweight_py_cum', F.sum('lms_parcel_ho_chargeweight_py').over(my_window))"
				],
				"execution_count": 365
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##staggrigateparcelbyordermeasurespycum.createOrReplaceTempView(\"staggrigateparcelbyordermeasurespycum\")"
				],
				"execution_count": 366
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"staggrigateparcelbyparcelmeasurescy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     date_format(lms_parcel_pdate, \"MMdd\") as daymonth\r\n",
					"    ,count(DISTINCT lms_parcel_orderid) as lms_parcel_p_orders_cy\r\n",
					"    ,count(DISTINCT lms_parcel_consignid) as lms_parcel_p_consignments_cy\r\n",
					"    ,count(DISTINCT lms_parcel_id) as lms_parcel_p_parcels_cy\r\n",
					"    ,count(DISTINCT lms_parcel_waybillid) as lms_parcel_p_waybills_cy\r\n",
					"    ,sum(lms_parcel_weight) as lms_parcel_p_weight_cy\r\n",
					"    ,sum(lms_parcel_chargeweight) as lms_parcel_p_chargeweight_cy\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"FROM stparcel3myoy\r\n",
					"\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_parcel_pdate >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_parcel_pdate <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"\r\n",
					"GROUP BY date_format(lms_parcel_pdate, \"MMdd\")\r\n",
					""
				],
				"execution_count": 367
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbyparcelmeasurescy = spark.sql(\"SELECT * FROM staggrigateparcelbyparcelmeasurescy\")"
				],
				"execution_count": 368
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbyparcelmeasurescycum = staggrigateparcelbyparcelmeasurescy.withColumn('lms_parcel_p_orders_cy_cum', F.sum('lms_parcel_p_orders_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_p_consignments_cy_cum', F.sum('lms_parcel_p_consignments_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_p_parcels_cy_cum', F.sum('lms_parcel_p_parcels_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_p_waybills_cy_cum', F.sum('lms_parcel_p_waybills_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_p_weight_cy_cum', F.sum('lms_parcel_p_weight_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_p_chargeweight_cy_cum', F.sum('lms_parcel_p_chargeweight_cy').over(my_window))"
				],
				"execution_count": 369
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##staggrigateparcelbyparcelmeasurescycum.createOrReplaceTempView(\"staggrigateparcelbyparcelmeasurescycum\")"
				],
				"execution_count": 370
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"staggrigateparcelbyparcelmeasurespy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     date_format(lms_parcel_pdate, \"MMdd\") as daymonth\r\n",
					"    ,count(DISTINCT lms_parcel_orderid) as lms_parcel_p_orders_py\r\n",
					"    ,count(DISTINCT lms_parcel_consignid) as lms_parcel_p_consignments_py\r\n",
					"    ,count(DISTINCT lms_parcel_id) as lms_parcel_p_parcels_py\r\n",
					"    ,count(DISTINCT lms_parcel_waybillid) as lms_parcel_p_waybills_py\r\n",
					"    ,sum(lms_parcel_weight) as lms_parcel_p_weight_py\r\n",
					"    ,sum(lms_parcel_chargeweight) as lms_parcel_p_chargeweight_py\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"FROM stparcel3myoy\r\n",
					"\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_parcel_pdate >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_parcel_pdate <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"\r\n",
					"GROUP BY date_format(lms_parcel_pdate, \"MMdd\")\r\n",
					""
				],
				"execution_count": 371
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbyparcelmeasurespy = spark.sql(\"SELECT * FROM staggrigateparcelbyparcelmeasurespy\")"
				],
				"execution_count": 372
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbyparcelmeasurespycum = staggrigateparcelbyparcelmeasurespy.withColumn('lms_parcel_p_orders_py_cum', F.sum('lms_parcel_p_orders_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_p_consignments_py_cum', F.sum('lms_parcel_p_consignments_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_p_parcels_py_cum', F.sum('lms_parcel_p_parcels_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_p_waybills_py_cum', F.sum('lms_parcel_p_waybills_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_p_weight_py_cum', F.sum('lms_parcel_p_weight_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_p_chargeweight_py_cum', F.sum('lms_parcel_p_chargeweight_py').over(my_window))"
				],
				"execution_count": 373
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##staggrigateparcelbyparcelmeasurespycum.createOrReplaceTempView(\"staggrigateparcelbyparcelmeasurespycum\")"
				],
				"execution_count": 374
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"staggrigateparcelbyconsignmentmeasurescy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     date_format(lms_parcel_consignmentcdate, \"MMdd\") as daymonth\r\n",
					"    ,count(DISTINCT lms_parcel_orderid) as lms_parcel_c_orders_cy\r\n",
					"    ,count(DISTINCT lms_parcel_consignid) as lms_parcel_c_consignments_cy\r\n",
					"    ,count(DISTINCT lms_parcel_id) as lms_parcel_c_parcels_cy\r\n",
					"    ,count(DISTINCT lms_parcel_waybillid) as lms_parcel_c_waybills_cy\r\n",
					"    ,sum(lms_parcel_weight) as lms_parcel_c_weight_cy\r\n",
					"    ,sum(lms_parcel_chargeweight) as lms_parcel_c_chargeweight_cy\r\n",
					"\r\n",
					"\r\n",
					"FROM stparcel3myoy\r\n",
					"\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_parcel_consignmentcdate >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_parcel_consignmentcdate <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"\r\n",
					"GROUP BY date_format(lms_parcel_consignmentcdate, \"MMdd\")\r\n",
					""
				],
				"execution_count": 375
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbyconsignmentmeasurescy = spark.sql(\"SELECT * FROM staggrigateparcelbyconsignmentmeasurescy\")"
				],
				"execution_count": 376
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbyconsignmentmeasurescycum = staggrigateparcelbyconsignmentmeasurescy.withColumn('lms_parcel_c_orders_cy_cum', F.sum('lms_parcel_c_orders_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_c_consignments_cy_cum', F.sum('lms_parcel_c_consignments_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_c_parcels_cy_cum', F.sum('lms_parcel_c_parcels_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_c_waybills_cy_cum', F.sum('lms_parcel_c_waybills_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_c_weight_cy_cum', F.sum('lms_parcel_c_weight_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_c_chargeweight_cy_cum', F.sum('lms_parcel_c_chargeweight_cy').over(my_window))"
				],
				"execution_count": 377
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##staggrigateparcelbyconsignmentmeasurescycum.createOrReplaceTempView(\"staggrigateparcelbyconsignmentmeasurescycum\")"
				],
				"execution_count": 378
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"staggrigateparcelbyconsignmentmeasurespy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     date_format(lms_parcel_consignmentcdate, \"MMdd\") as daymonth\r\n",
					"    ,count(DISTINCT lms_parcel_orderid) as lms_parcel_c_orders_py\r\n",
					"    ,count(DISTINCT lms_parcel_consignid) as lms_parcel_c_consignments_py\r\n",
					"    ,count(DISTINCT lms_parcel_id) as lms_parcel_c_parcels_py\r\n",
					"    ,count(DISTINCT lms_parcel_waybillid) as lms_parcel_c_waybills_py\r\n",
					"    ,sum(lms_parcel_weight) as lms_parcel_c_weight_py\r\n",
					"    ,sum(lms_parcel_chargeweight) as lms_parcel_c_chargeweight_py\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"FROM stparcel3myoy\r\n",
					"\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_parcel_consignmentcdate >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_parcel_consignmentcdate <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"\r\n",
					"GROUP BY date_format(lms_parcel_consignmentcdate, \"MMdd\")\r\n",
					""
				],
				"execution_count": 379
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbyconsignmentmeasurespy = spark.sql(\"SELECT * FROM staggrigateparcelbyconsignmentmeasurespy\")"
				],
				"execution_count": 380
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbyconsignmentmeasurespycum = staggrigateparcelbyconsignmentmeasurespy.withColumn('lms_parcel_c_orders_py_cum', F.sum('lms_parcel_c_orders_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_c_consignments_py_cum', F.sum('lms_parcel_c_consignments_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_c_parcels_py_cum', F.sum('lms_parcel_c_parcels_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_c_waybills_py_cum', F.sum('lms_parcel_c_waybills_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_c_weight_py_cum', F.sum('lms_parcel_c_weight_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_c_chargeweight_py_cum', F.sum('lms_parcel_c_chargeweight_py').over(my_window))"
				],
				"execution_count": 381
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##staggrigateparcelbyconsignmentmeasurespycum.createOrReplaceTempView(\"staggrigateparcelbyconsignmentmeasurespycum\")"
				],
				"execution_count": 382
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"staggrigateparcelbywaybillmeasurescy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     date_format(lms_parcel_waybilldate, \"MMdd\") as daymonth\r\n",
					"    ,count(DISTINCT lms_parcel_id) as lms_parcel_wb_parcels_cy\r\n",
					"    ,count(DISTINCT lms_parcel_waybillid) as lms_parcel_wb_waybills_cy\r\n",
					"    ,sum(lms_parcel_weight) as lms_parcel_wb_weight_cy\r\n",
					"    ,sum(lms_parcel_chargeweight) as lms_parcel_wb_chargeweight_cy\r\n",
					"\r\n",
					"\r\n",
					"FROM stparcel3myoy\r\n",
					"\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_parcel_waybilldate >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_parcel_waybilldate <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"\r\n",
					"GROUP BY date_format(lms_parcel_waybilldate, \"MMdd\")\r\n",
					""
				],
				"execution_count": 383
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbywaybillmeasurescy = spark.sql(\"SELECT * FROM staggrigateparcelbywaybillmeasurescy\")"
				],
				"execution_count": 384
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbywaybillmeasurescycum = staggrigateparcelbywaybillmeasurescy.withColumn('lms_parcel_wb_parcels_cy_cum', F.sum('lms_parcel_wb_parcels_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_wb_waybills_cy_cum', F.sum('lms_parcel_wb_waybills_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_wb_weight_cy_cum', F.sum('lms_parcel_wb_weight_cy').over(my_window))\\\r\n",
					".withColumn('lms_parcel_wb_chargeweight_cy_cum', F.sum('lms_parcel_wb_chargeweight_cy').over(my_window))"
				],
				"execution_count": 385
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##staggrigateparcelbywaybillmeasurescycum.createOrReplaceTempView(\"staggrigateparcelbywaybillmeasurescycum\")"
				],
				"execution_count": 386
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"staggrigateparcelbywaybillmeasurespy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     date_format(lms_parcel_waybilldate, \"MMdd\") as daymonth\r\n",
					"    ,count(DISTINCT lms_parcel_id) as lms_parcel_wb_parcels_py\r\n",
					"    ,count(DISTINCT lms_parcel_waybillid) as lms_parcel_wb_waybills_py\r\n",
					"    ,sum(lms_parcel_weight) as lms_parcel_wb_weight_py\r\n",
					"    ,sum(lms_parcel_chargeweight) as lms_parcel_wb_chargeweight_py\r\n",
					"\r\n",
					"FROM stparcel3myoy\r\n",
					"\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_parcel_waybilldate >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_parcel_waybilldate <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"\r\n",
					"GROUP BY date_format(lms_parcel_waybilldate, \"MMdd\")\r\n",
					""
				],
				"execution_count": 387
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbywaybillmeasurespy = spark.sql(\"SELECT * FROM staggrigateparcelbywaybillmeasurespy\")"
				],
				"execution_count": 388
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigateparcelbywaybillmeasurespycum = staggrigateparcelbywaybillmeasurespy.withColumn('lms_parcel_wb_parcels_py_cum', F.sum('lms_parcel_wb_parcels_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_wb_waybills_py_cum', F.sum('lms_parcel_wb_waybills_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_wb_weight_py_cum', F.sum('lms_parcel_wb_weight_py').over(my_window))\\\r\n",
					".withColumn('lms_parcel_wb_chargeweight_py_cum', F.sum('lms_parcel_wb_chargeweight_py').over(my_window))"
				],
				"execution_count": 389
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##staggrigateparcelbywaybillmeasurespycum.createOrReplaceTempView(\"staggrigateparcelbywaybillmeasurespycum\")"
				],
				"execution_count": 390
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"staggrigatetrackbylinehaulloadmeasurescy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     date_format(lms_track_opendt, \"MMdd\") as daymonth\r\n",
					"    ,count(DISTINCT lms_track_loadid) as lms_track_t_totallinehaulloads_cy\r\n",
					"    ,count(DISTINCT lms_track_parcelid) as lms_track_t_totallinehaulparcels_cy\r\n",
					"    ,sum(lms_track_parcelweight) as lms_track_t_totallinehaulweight_cy\r\n",
					"    ,sum(lms_track_parcelchargeweight) as lms_track_t_totallinehaulchargeweight_cy\r\n",
					"\r\n",
					"FROM stlmstrack3myoy\r\n",
					"\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_track_opendt >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_track_opendt <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"AND lms_track_tracktypeid = 2\r\n",
					"\r\n",
					"GROUP BY date_format(lms_track_opendt, \"MMdd\")"
				],
				"execution_count": 391
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigatetrackbylinehaulloadmeasurescy = spark.sql(\"SELECT * FROM staggrigatetrackbylinehaulloadmeasurescy\")"
				],
				"execution_count": 392
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigatetrackbylinehaulloadmeasurescycum = staggrigatetrackbylinehaulloadmeasurescy.withColumn('lms_track_t_totallinehaulloads_cy_cum', F.sum('lms_track_t_totallinehaulloads_cy').over(my_window))\\\r\n",
					".withColumn('lms_track_t_totallinehaulparcels_cy_cum', F.sum('lms_track_t_totallinehaulparcels_cy').over(my_window))\\\r\n",
					".withColumn('lms_track_t_totallinehaulweight_cy_cum', F.sum('lms_track_t_totallinehaulweight_cy').over(my_window))\\\r\n",
					".withColumn('lms_track_t_totallinehaulchargeweight_cy_cum', F.sum('lms_track_t_totallinehaulchargeweight_cy').over(my_window))"
				],
				"execution_count": 393
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##staggrigatetrackbylinehaulloadmeasurescycum.createOrReplaceTempView(\"staggrigatetrackbylinehaulloadmeasurescycum\")"
				],
				"execution_count": 394
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"staggrigatetrackbylinehaulloadmeasurespy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     date_format(lms_track_opendt, \"MMdd\") as daymonth\r\n",
					"    ,count(DISTINCT lms_track_loadid) as lms_track_t_totallinehaulloads_py\r\n",
					"    ,count(DISTINCT lms_track_parcelid) as lms_track_t_totallinehaulparcels_py\r\n",
					"    ,sum(lms_track_parcelweight) as lms_track_t_totallinehaulweight_py\r\n",
					"    ,sum(lms_track_parcelchargeweight) as lms_track_t_totallinehaulchargeweight_py\r\n",
					"\r\n",
					"\r\n",
					"FROM stlmstrack3myoy\r\n",
					"\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_track_opendt >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_track_opendt <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"AND lms_track_tracktypeid = 2\r\n",
					"\r\n",
					"GROUP BY date_format(lms_track_opendt, \"MMdd\")"
				],
				"execution_count": 395
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigatetrackbylinehaulloadmeasurespy = spark.sql(\"SELECT * FROM staggrigatetrackbylinehaulloadmeasurespy\")"
				],
				"execution_count": 396
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigatetrackbylinehaulloadmeasurespycum = staggrigatetrackbylinehaulloadmeasurespy.withColumn('lms_track_t_totallinehaulloads_py_cum', F.sum('lms_track_t_totallinehaulloads_py').over(my_window))\\\r\n",
					".withColumn('lms_track_t_totallinehaulparcels_py_cum', F.sum('lms_track_t_totallinehaulparcels_py').over(my_window))\\\r\n",
					".withColumn('lms_track_t_totallinehaulweight_py_cum', F.sum('lms_track_t_totallinehaulweight_py').over(my_window))\\\r\n",
					".withColumn('lms_track_t_totallinehaulchargeweight_py_cum', F.sum('lms_track_t_totallinehaulchargeweight_py').over(my_window))"
				],
				"execution_count": 397
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##staggrigatetrackbylinehaulloadmeasurespycum.createOrReplaceTempView(\"staggrigatetrackbylinehaulloadmeasurespycum\")"
				],
				"execution_count": 398
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"staggrigatetrackbydistributionloadmeasurescy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     date_format(lms_track_opendt, \"MMdd\") as daymonth\r\n",
					"    ,count(DISTINCT lms_track_loadid) as lms_track_t_totaldistributionloads_cy\r\n",
					"    ,count(DISTINCT lms_track_parcelid) as lms_track_t_totaldistributionparcels_cy\r\n",
					"    ,sum(lms_track_parcelweight) as lms_track_t_totaldistributionweight_cy\r\n",
					"    ,sum(lms_track_parcelchargeweight) as lms_track_t_totaldistributionchargeweight_cy\r\n",
					"\r\n",
					"\r\n",
					"FROM stlmstrack3myoy\r\n",
					"\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_track_opendt >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_track_opendt <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"AND lms_track_tracktypeid = 6\r\n",
					"\r\n",
					"GROUP BY date_format(lms_track_opendt, \"MMdd\")"
				],
				"execution_count": 399
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigatetrackbydistributionloadmeasurescy = spark.sql(\"SELECT * FROM staggrigatetrackbydistributionloadmeasurescy\")"
				],
				"execution_count": 400
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigatetrackbydistributionloadmeasurescycum = staggrigatetrackbydistributionloadmeasurescy.withColumn('lms_track_t_totaldistributionloads_cy_cum', F.sum('lms_track_t_totaldistributionloads_cy').over(my_window))\\\r\n",
					".withColumn('lms_track_t_totaldistributionparcels_cy_cum', F.sum('lms_track_t_totaldistributionparcels_cy').over(my_window))\\\r\n",
					".withColumn('lms_track_t_totaldistributionweight_cy_cum', F.sum('lms_track_t_totaldistributionweight_cy').over(my_window))\\\r\n",
					".withColumn('lms_track_t_totaldistributionchargeweight_cy_cum', F.sum('lms_track_t_totaldistributionchargeweight_cy').over(my_window))"
				],
				"execution_count": 401
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##staggrigatetrackbydistributionloadmeasurescycum.createOrReplaceTempView(\"staggrigatetrackbydistributionloadmeasurescycum\")"
				],
				"execution_count": 402
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"staggrigatetrackbydistributionloadmeasurespy\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     date_format(lms_track_opendt, \"MMdd\") as daymonth\r\n",
					"    ,count(DISTINCT lms_track_loadid) as lms_track_t_totaldistributionloads_py\r\n",
					"    ,count(DISTINCT lms_track_parcelid) as lms_track_t_totaldistributionparcels_py\r\n",
					"    ,sum(lms_track_parcelweight) as lms_track_t_totaldistributionweight_py\r\n",
					"    ,sum(lms_track_parcelchargeweight) as lms_track_t_totaldistributionchargeweight_py\r\n",
					"\r\n",
					"\r\n",
					"FROM stlmstrack3myoy\r\n",
					"\r\n",
					"WHERE \r\n",
					"(\r\n",
					"    lms_track_opendt >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
					"AND \r\n",
					"    lms_track_opendt <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
					")\r\n",
					"AND lms_track_tracktypeid = 6\r\n",
					"\r\n",
					"GROUP BY date_format(lms_track_opendt, \"MMdd\")"
				],
				"execution_count": 403
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigatetrackbydistributionloadmeasurespy = spark.sql(\"SELECT * FROM staggrigatetrackbydistributionloadmeasurespy\")"
				],
				"execution_count": 404
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigatetrackbydistributionloadmeasurespycum = staggrigatetrackbydistributionloadmeasurespy.withColumn('lms_track_t_totaldistributionloads_py_cum', F.sum('lms_track_t_totaldistributionloads_py').over(my_window))\\\r\n",
					".withColumn('lms_track_t_totaldistributionparcels_py_cum', F.sum('lms_track_t_totaldistributionparcels_py').over(my_window))\\\r\n",
					".withColumn('lms_track_t_totaldistributionweight_py_cum', F.sum('lms_track_t_totaldistributionweight_py').over(my_window))\\\r\n",
					".withColumn('lms_track_t_totaldistributionchargeweight_py_cum', F.sum('lms_track_t_totaldistributionchargeweight_py').over(my_window))"
				],
				"execution_count": 405
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##staggrigatetrackbydistributionloadmeasurescycum.createOrReplaceTempView(\"staggrigatetrackbydistributionloadmeasurescycum\")"
				],
				"execution_count": 406
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# staggrigateparcelbyordermeasurescycum\r\n",
					"# staggrigateparcelbyordermeasurespycum\r\n",
					"# staggrigateparcelbyparcelmeasurescycum\r\n",
					"# staggrigateparcelbyparcelmeasurespycum\r\n",
					"# staggrigateparcelbyconsignmentmeasurescycum\r\n",
					"# staggrigateparcelbyconsignmentmeasurespycum\r\n",
					"# staggrigateparcelbywaybillmeasurescycum\r\n",
					"# staggrigateparcelbywaybillmeasurespycum\r\n",
					"# staggrigatetrackbylinehaulloadmeasurescycum\r\n",
					"# staggrigatetrackbylinehaulloadmeasurespycum\r\n",
					"# staggrigatetrackbydistributionloadmeasurescycum\r\n",
					"# staggrigatetrackbydistributionloadmeasurespycum\r\n",
					"\r\n",
					"staggrigatemeasures = staggrigateparcelbyordermeasurescycum.join(staggrigateparcelbyordermeasurespycum,staggrigateparcelbyordermeasurespycum.daymonth == staggrigateparcelbyordermeasurescycum.daymonth,\"left\" )\\\r\n",
					".join(staggrigateparcelbyparcelmeasurescycum,staggrigateparcelbyparcelmeasurescycum.daymonth == staggrigateparcelbyordermeasurescycum.daymonth,\"left\" )\\\r\n",
					".join(staggrigateparcelbyparcelmeasurespycum,staggrigateparcelbyparcelmeasurespycum.daymonth == staggrigateparcelbyordermeasurescycum.daymonth,\"left\" )\\\r\n",
					".join(staggrigateparcelbyconsignmentmeasurescycum,staggrigateparcelbyconsignmentmeasurescycum.daymonth == staggrigateparcelbyordermeasurescycum.daymonth,\"left\" )\\\r\n",
					".join(staggrigateparcelbyconsignmentmeasurespycum,staggrigateparcelbyconsignmentmeasurespycum.daymonth == staggrigateparcelbyordermeasurescycum.daymonth,\"left\" )\\\r\n",
					".join(staggrigateparcelbywaybillmeasurescycum,staggrigateparcelbywaybillmeasurescycum.daymonth == staggrigateparcelbyordermeasurescycum.daymonth,\"left\" )\\\r\n",
					".join(staggrigateparcelbywaybillmeasurespycum,staggrigateparcelbywaybillmeasurespycum.daymonth == staggrigateparcelbyordermeasurescycum.daymonth,\"left\" )\\\r\n",
					".join(staggrigatetrackbylinehaulloadmeasurescycum,staggrigatetrackbylinehaulloadmeasurescycum.daymonth == staggrigateparcelbyordermeasurescycum.daymonth,\"left\" )\\\r\n",
					".join(staggrigatetrackbylinehaulloadmeasurespycum,staggrigatetrackbylinehaulloadmeasurespycum.daymonth == staggrigateparcelbyordermeasurescycum.daymonth,\"left\" )\\\r\n",
					".join(staggrigatetrackbydistributionloadmeasurescycum,staggrigatetrackbydistributionloadmeasurescycum.daymonth == staggrigateparcelbyordermeasurescycum.daymonth,\"left\" )\\\r\n",
					".join(staggrigatetrackbydistributionloadmeasurespycum,staggrigatetrackbydistributionloadmeasurespycum.daymonth == staggrigateparcelbyordermeasurescycum.daymonth,\"left\" )\\\r\n",
					".drop(staggrigateparcelbyordermeasurespycum.daymonth)\\\r\n",
					".drop(staggrigateparcelbyparcelmeasurescycum.daymonth)\\\r\n",
					".drop(staggrigateparcelbyparcelmeasurespycum.daymonth)\\\r\n",
					".drop(staggrigateparcelbyconsignmentmeasurescycum.daymonth)\\\r\n",
					".drop(staggrigateparcelbyconsignmentmeasurespycum.daymonth)\\\r\n",
					".drop(staggrigateparcelbywaybillmeasurescycum.daymonth)\\\r\n",
					".drop(staggrigateparcelbywaybillmeasurespycum.daymonth)\\\r\n",
					".drop(staggrigatetrackbylinehaulloadmeasurescycum.daymonth)\\\r\n",
					".drop(staggrigatetrackbylinehaulloadmeasurespycum.daymonth)\\\r\n",
					".drop(staggrigatetrackbydistributionloadmeasurescycum.daymonth)\\\r\n",
					".drop(staggrigatetrackbydistributionloadmeasurespycum.daymonth)\r\n",
					""
				],
				"execution_count": 407
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"staggrigatemeasures.createOrReplaceTempView(\"staggrigatemeasures\")"
				],
				"execution_count": 408
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# staggrigatemeasures.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/staggrigatemeasures.parquet', mode = \"overwrite\")"
				],
				"execution_count": 412
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"SUCCESS\")"
				],
				"execution_count": 410
			}
		]
	}
}