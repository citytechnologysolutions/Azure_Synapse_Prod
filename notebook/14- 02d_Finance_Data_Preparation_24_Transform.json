{
	"name": "14- 02d_Finance_Data_Preparation_24_Transform",
	"properties": {
		"folder": {
			"name": "ARCHIVE/DEV/Archived/Transactions"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 9,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "9",
				"spark.dynamicAllocation.maxExecutors": "9",
				"spark.autotune.trackingId": "f5160b97-14bc-43d9-bdb4-ce2b08127813"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#TRANSACTIONS = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/F_TRANSACTIONS_CONTINUED.parquet', format='parquet')\r\n",
					"#TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")\r\n",
					"\r\n",
					"#TMPACCOUNTS = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_TMPACCOUNTS.parquet', format='parquet')\r\n",
					"#TMPACCOUNTS.createOrReplaceTempView(\"TMPACCOUNTS\")\r\n",
					"\r\n",
					"#ACCOUNT = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_ACCOUNT.parquet', format='parquet')\r\n",
					"#ACCOUNT.createOrReplaceTempView(\"DIM_ACCOUNT\")\r\n",
					"\r\n",
					"#F_Goods_Receipt_Notes = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/F_Goods_Receipt_Notes.parquet', format='parquet')\r\n",
					"#F_Goods_Receipt_Notes.createOrReplaceTempView(\"F_Goods_Receipt_Notes\")\r\n",
					"\r\n",
					"#ListDepots = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/CCMasterData/ListDepots.parquet', format='parquet')\r\n",
					"#ListDepots.createOrReplaceTempView(\"ListDepots\")\r\n",
					"\r\n",
					"#KEY = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/F_KEY.parquet', format='parquet')\r\n",
					"#KEY.createOrReplaceTempView(\"F_KEY\")\r\n",
					"\r\n",
					"#F_MFRHISTORY = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/F_MFRHISTORY.parquet', mode='overwrite')\r\n",
					"#F_MFRHISTORY.createOrReplaceTempView(\"F_MFRHISTORY\")"
				],
				"execution_count": 52
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Budget Data"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"BudgetActivityBudget = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/CCMasterData/BudgetActivityBudget.parquet', format='parquet')\r\n",
					"BudgetActivityBudget.createOrReplaceTempView(\"BudgetActivityBudget\")\r\n",
					"\r\n",
					"BudgetFinancialBudget = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/CCMasterData/BudgetFinancialBudget.parquet', format='parquet')\r\n",
					"BudgetFinancialBudget.createOrReplaceTempView(\"BudgetFinancialBudget\")"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS.columns"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load EXCEL with Exceptions\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Excel_Files/Exceptions.xlsx\"\r\n",
					"var_File_Page = \"Sheet1\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"Exceptions_Categories\")\r\n",
					"\r\n",
					"Exceptions = spark.sql(\"\"\"SELECT `System Account Code KEY`, `Depot Code`, `Posting Date`, `TransId`, `Document Category`, `Transaction Detail`, `Line Total` FROM Exceptions_Categories\"\"\")\r\n",
					"\r\n",
					"Exceptions.createOrReplaceTempView(\"Exceptions\")"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load EXCEL with FinanceReportingMapping\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Excel_Files/FinanceReportingMapping.xlsx\"\r\n",
					"var_File_Page = \"SUB_INT_REC_BUD\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"FinanceReportingMapping\")\r\n",
					"\r\n",
					"FinanceReportingMapping = spark.sql(\"\"\"SELECT `System Account Code KEY`, `Depot Code`, `Document Category`, `Posting Date`, `SubIntRecovery Daily Budget Total` FROM FinanceReportingMapping\"\"\")\r\n",
					"\r\n",
					"FinanceReportingMapping.createOrReplaceTempView(\"FinanceReportingMapping\")"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TRANSACTIONS = spark.sql(\"\"\"\r\n",
					"SELECT DISTINCT t.*\r\n",
					"                --, a.Account_Group as TMP_Account_Grp ##NEED THE EXCEL FILE TO GET THE GROUPINGS\r\n",
					"FROM `TRANSACTIONS` t\r\n",
					"LEFT JOIN DIM_ACCOUNT a\r\n",
					"ON t.System_Account_Code_KEY = a.System_Account_Code_KEY\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS.show()\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DIM_PO_LOOKUP = spark.sql(\"\"\"\r\n",
					"SELECT distinct DocNum||Company as `Goods_Receipt_Number_KEY`,\r\n",
					"     BaseRef as `Purchase_Order_Number`,\r\n",
					"\t DocNum as `Goods_Receipt_Number`,\r\n",
					"\t CAST(DocDate AS DATE) as `Goods_Receipt_Posting_Date`\r\n",
					"FROM F_Goods_Receipt_Notes\r\n",
					"\r\n",
					"/*UNION ALL \r\n",
					"\r\n",
					"SELECT distinct CONCAT(DocNum,Company) as `Goods_Receipt_Number_KEY`,\r\n",
					"     BaseRef as `Purchase_Order_Number`,\r\n",
					"\t DocNum as `Goods_Receipt_Number`,\r\n",
					"\t CAST(DocDate AS DATE) as `Goods_Receipt_Posting_Date`\r\n",
					"FROM F_Goods_Receipt_Notes*/\r\n",
					"\"\"\")\r\n",
					"#DIM_PO_LOOKUP.show()\r\n",
					"DIM_PO_LOOKUP.createOrReplaceTempView(\"DIM_PO_LOOKUP\")"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS_Key = spark.sql(\"\"\"\r\n",
					"SELECT distinct Company,\r\n",
					"                MAINKEY2,\r\n",
					"                MAINKEY2 as `MAINKEY3`\r\n",
					"FROM `TRANSACTIONS`\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS_Key.show()\r\n",
					"TRANSACTIONS_Key.createOrReplaceTempView(\"TRANSACTIONS_Key\")"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"KEY = spark.sql(\"\"\"\r\n",
					"SELECT DISTINCT * --k.*, Company, MAINKEY2, tk.MAINKEY3\r\n",
					"FROM F_KEY k\r\n",
					"FULL OUTER JOIN TRANSACTIONS_Key tk\r\n",
					"USING(Company, MAINKEY2)\r\n",
					"\"\"\")\r\n",
					"#KEY.show()\r\n",
					"KEY.createOrReplaceTempView(\"KEY\")"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"KEY = spark.sql(\"\"\"\r\n",
					"SELECT *,\r\n",
					"     `Depot_Code` as `DEPOTCODE`,\r\n",
					"     if(`Depot_Code`='HDO',1,0) as `ISHEADOFFICE`\r\n",
					"FROM KEY\r\n",
					"\"\"\")\r\n",
					"#KEY.show()\r\n",
					"KEY.createOrReplaceTempView(\"KEY\")"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS.drop(\"Posting_Date\")\r\n",
					"TRANSACTIONS.drop(\"Company\")\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMP = spark.sql(\"SELECT * FROM DIM_ACCOUNT\")\r\n",
					"#TMP.show()\r\n",
					"TMP.createOrReplaceTempView(\"TMP\")"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## NEED THE FOLLOWING FILE /Account Mapping New File.qvd"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"KEYTMP = spark.sql(\"\"\"\r\n",
					"SELECT Distinct\t\r\n",
					"\t`Company`,\r\n",
					"\t`Customer_Code`,\r\n",
					"\t`Customer_Code_KEY`,\r\n",
					"\t--`Depot`, need the warehouse.qv file\t\t\t\t\r\n",
					"\tif(`Depot_Code`='ISA','GOS',`Depot_Code`) as `Depot_Code`,\t\t\t\t\t\t\r\n",
					"\t`DEPOTCODE`,\r\n",
					"\t`Depreciation_KEY`,\r\n",
					"\t`Fleet_Code`,\r\n",
					"\t`Fleet_KEY`,\r\n",
					"\t`ISHEADOFFICE`,\r\n",
					"\t`Lane`,\r\n",
					"\t`MAINKEY2`,\r\n",
					"\t`MAINKEY3`,\r\n",
					"\t`Posting_Date`,\r\n",
					"\t`Supplier_Code`,\r\n",
					"\t`Supplier_Code_KEY`\r\n",
					"FROM KEY\r\n",
					"\"\"\")\r\n",
					"#KEYTMP.show()\r\n",
					"KEYTMP.createOrReplaceTempView(\"KEYTMP\")"
				],
				"execution_count": 64
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT * --t.*, k.Depot_Code, k.Customer_Code_KEY, k.Supplier_Code_KEY\r\n",
					"FROM `TRANSACTIONS` t\r\n",
					"LEFT JOIN KEYTMP k\r\n",
					"USING (Company, Customer_Code, Lane, MAINKEY2, Posting_Date, Supplier_Code)\r\n",
					"WHERE Supplier_Code = 'SSUM02'\r\n",
					"AND MAINKEY2 = '-CLICity Logistics New2017-07-25 00:00:00ZZNONESSUM02'\r\n",
					"LIMIT 1000"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT * \r\n",
					"FROM `TRANSACTIONS` t\r\n",
					"LEFT JOIN KEYTMP k\r\n",
					"USING (MAINKEY2, Posting_Date)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS.show()\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 65
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS = spark.sql(\"\"\"\r\n",
					"SELECT t.*, k.Depot_Code, k.Customer_Code_KEY, k.Supplier_Code_KEY\r\n",
					"FROM `TRANSACTIONS` t\r\n",
					"LEFT JOIN KEYTMP k\r\n",
					"ON t.Company = k.Company\r\n",
					"AND coalesce(t.Customer_Code, \"ZZNONE\") = k.Customer_Code \r\n",
					"AND coalesce(t.Supplier_Code, \"ZZNONE\") = k.Supplier_Code\r\n",
					"AND t.MAINKEY2 = k.MAINKEY2\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS.show()\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TRANSACTIONS = spark.sql(\"\"\"\r\n",
					"SELECT t.*, a.`Level_1_Name`\r\n",
					"FROM `TRANSACTIONS` t\r\n",
					"LEFT JOIN DIM_ACCOUNT a\r\n",
					"ON t.System_Account_Code_KEY = a.System_Account_Code_KEY\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS.show()\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSTMP = spark.sql(\"\"\"\r\n",
					"SELECT *\r\n",
					"FROM `TRANSACTIONS` \r\n",
					"\"\"\")\r\n",
					"#TRANSTMP.show()\r\n",
					"TRANSTMP.createOrReplaceTempView(\"TRANSTMP\")"
				],
				"execution_count": 67
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT Document_Comments, Journal_BP_Ref, Journal_Item_Ref, Line_Description, Line_Detail,\r\n",
					"    CASE WHEN Document_Comments = '' or ISNULL(Document_Comments) = 1 THEN '' ELSE Document_Comments END ||'|'||\r\n",
					"    CASE WHEN Journal_BP_Ref = '' or ISNULL(Journal_BP_Ref) = 1 THEN '' ELSE Journal_BP_Ref END ||'|'||\r\n",
					"    CASE WHEN Journal_Item_Ref = '' or ISNULL(Journal_Item_Ref) = 1 THEN '' ELSE Journal_Item_Ref END ||'|'||\r\n",
					"    CASE WHEN Line_Description = '' or ISNULL(Line_Description) = 1 THEN '' ELSE Line_Description END ||'|'||\r\n",
					"    CASE WHEN Line_Detail = '' or ISNULL(Line_Detail) = 1 THEN '' ELSE Line_Detail END AS Transaction_Detail --,\r\n",
					"\t--`Document_Comments`||'|'||`Journal_BP_Ref`||'|'||`Journal_Item_Ref`||'|'||`Line_Description`||'|'||`Line_Detail` AS `Transaction_Detail`,\r\n",
					"\t/*`TransId`,\r\n",
					"\t`Type`,\r\n",
					"\t`U_IR_NUMBER` as `IR_Number`*/\r\n",
					"\r\n",
					"FROM TRANSTMP\r\n",
					"Where `Posting_Date` BETWEEN '2022-01-01' AND '2022-02-28' -->= '2016-04-01'\r\n",
					"and `Level_1_Name` IN ('COST OF SALES','OPERATING COSTS','TAXATION AND EXTRAORDINARY ITEMS','TURNOVER')\r\n",
					"AND Document_Category = 'Direct Postings' --'Sales Invoice'"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TRANSACTIONS = spark.sql(\"\"\"\r\n",
					"SELECT --`Budget_Name`, --Budgets not included yet\r\n",
					"\tif(isnull(SubDepotCode),'###', if(SubDepotCode = '','###',SubDepotCode)) as SubDepotCode,\r\n",
					"\t`Depot_Code`,\r\n",
					"\t--`Company_Specific_Actuals`,   -- Comes From Archive\r\n",
					"\t`CreatedBy`,\r\n",
					"\t`Customer_Code_KEY`,\r\n",
					"\t`Customer_Reference`,\r\n",
					"\t`Posting_Date`,\r\n",
					"\t--`Daily_Budget_Total`,\t\t--Budgets not included yet\t\t\t\t\t\r\n",
					"\t--`Discount_%`,  --Script 27 Drop Fields\r\n",
					"\t--`Discount`,  \t--Script 27 Drop Fields\r\n",
					"\t--`Doc_Discount_%`, \t--Script 27 Drop Fields\r\n",
					"\t--`Doc_Line_Status`, --Script 27 Drop Fields\r\n",
					"\t--`Doc_Total`, --Script 27 Drop Fields\r\n",
					"\t--`DocDate_(Line)`, --Script 27 Drop Fields\r\n",
					"\t--`DocDisc`, --Script 27 Drop Fields\r\n",
					"\t`DocEntry`, \r\n",
					"\t--`DocTotal`, --Script 27 Drop Fields\r\n",
					"\t`Document_Category`,\r\n",
					"\t`Document_Number`,\r\n",
					"\t`Document_Type`,\r\n",
					"\t`Due_Date`,\r\n",
					"\t`Exclude2`,\r\n",
					"\t--`Expense_Depot_Code`, --Script 27 Drop Fields\r\n",
					"\t--`Expense_Item`, --Script 27 Drop Fields\r\n",
					"\t--`Finance_Full_Actuals`, \r\n",
					"\t--`Fleet_Code`,\r\n",
					"\t`Fleet_Costs`,\r\n",
					"\t--`Fleet_KEY`,\r\n",
					"\t--`Fleet_KMs`, --Script 27 Drop Fields\r\n",
					"\t--`Fuel_Date`, --Script 27 Drop Fields\r\n",
					"\t`Goods_Receipt_Number_KEY`,\r\n",
					"\t--`Gross_Profit`, --Script 27 Drop Fields\r\n",
					"\t`Gross_Value`,\r\n",
					"\t`InvntItem`,\r\n",
					"\t`Item_Code_KEY`,\r\n",
					"\t`Level_1_Name`,\r\n",
					"\t`Line_Number`,\r\n",
					"\t--`Line_Total_Old`, --Script 27 Drop Fields\r\n",
					"\t--`Line_Total_Orig`, --Script 27 Drop Fields\r\n",
					"\t`Line_Total`,\r\n",
					"\t`MAINKEY2_ST`,\r\n",
					"\t`MAINKEY2`,\r\n",
					"\t--`Month_Percent_Budget`, --Script 27 Drop Fields\r\n",
					"\t--`Monthly_Credit_Total`, --Script 27 Drop Fields\r\n",
					"\t--`Monthly_Debit_Total`, --Script 27 Drop Fields\r\n",
					"\t`ObjType_Journal`,\r\n",
					"\t--if(isNull(`ObjType`),0,if(`ObjType`<0,'#',`ObjType`)) as `ObjType`, --Script 27 Drop Fields\r\n",
					"\t--`Open_Qty`, --Script 27 Drop Fields\r\n",
					"\t--`Open_Value`, --Script 27 Drop Fields\r\n",
					"\t--`Price_Before_Discount`,\t--Script 27 Drop Fields\r\n",
					"\t--`Price`, --Script 27 Drop Fields\r\n",
					"\t--`Quantity`,\t--Script 27 Drop Fields\r\n",
					"\t--`Rate`, --Script 27 Drop Fields\r\n",
					"\t--`Revenue/Expense_Category`, --Script 27 Drop Fields\r\n",
					"\t--`Supplier_Code_Assets`, --Script 27 Drop Fields\r\n",
					"\t`Supplier_Code_KEY`,\r\n",
					"\t`Supplier_Reference`,\r\n",
					"\t`System_Account_Code_KEY`,\r\n",
					"\r\n",
					"    --- ### ASA CODE CHANGE TO STILL JOIN ON THE NULL VALUES ### ---\r\n",
					"\tCASE WHEN Document_Comments = '' or ISNULL(Document_Comments) = 1 THEN '' ELSE Document_Comments END ||'|'||\r\n",
					"    CASE WHEN Journal_BP_Ref = '' or ISNULL(Journal_BP_Ref) = 1 THEN '' ELSE Journal_BP_Ref END ||'|'||\r\n",
					"    CASE WHEN Journal_Item_Ref = '' or ISNULL(Journal_Item_Ref) = 1 THEN '' ELSE Journal_Item_Ref END ||'|'||\r\n",
					"    CASE WHEN Line_Description = '' or ISNULL(Line_Description) = 1 THEN '' ELSE Line_Description END ||'|'||\r\n",
					"    CASE WHEN Line_Detail = '' or ISNULL(Line_Detail) = 1 THEN '' ELSE Line_Detail END AS Transaction_Detail,\r\n",
					"\t--`Document_Comments`||'|'||`Journal_BP_Ref`||'|'||`Journal_Item_Ref`||'|'||`Line_Description`||'|'||`Line_Detail` AS `Transaction_Detail`,\r\n",
					"\r\n",
					"\t--`TransCode`,\r\n",
					"\t--`TransExclude`,\r\n",
					"\t`TransId`,\r\n",
					"\t`Type`,\r\n",
					"\t`U_IR_NUMBER` as `IR_Number`--, \r\n",
					"\t--`U_RATE` as `Rate2`,  --Script 27 Drop Fields\r\n",
					"\t--`U_REASON`, --Script 27 Drop Fields\r\n",
					"\t--`User_(2)`, --Script 27 Drop Fields\r\n",
					"\t--`User_Code`, --Script 27 Drop Fields\r\n",
					"\t--`UserSign`, --Script 27 Drop Fields\r\n",
					"\t/*`VAT_%`,\r\n",
					"\t`VAT_Group`,\r\n",
					"\t`VAT_Value`,\r\n",
					"\t`Volume`*/ --Script 27 Drop Fields\r\n",
					"\r\n",
					"FROM TRANSTMP\r\n",
					"Where `Posting_Date` >= '2016-04-01'\r\n",
					"and `Level_1_Name` IN ('COST OF SALES','OPERATING COSTS','TAXATION AND EXTRAORDINARY ITEMS','TURNOVER')\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS.show()\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 68
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT DISTINCT Item_Code_KEY\r\n",
					"FROM `TRANSACTIONS`\r\n",
					"WHERE Document_Category = 'Sales Invoice'\r\n",
					"AND Posting_Date BETWEEN '2022-01-01' AND '2022-02-28'"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"FinanceReportingMapping = spark.sql(\"\"\"\r\n",
					"        SELECT \r\n",
					"            `System Account Code KEY` AS System_Account_Code_KEY,\r\n",
					"            `Depot Code` AS Depot_Code,\r\n",
					"            `Document Category` AS Document_Category,\r\n",
					"            `Posting Date` AS Posting_Date,\r\n",
					"            `SubIntRecovery Daily Budget Total` AS SubIntRecovery_Daily_Budget_Total\r\n",
					"        FROM FinanceReportingMapping\r\n",
					"\"\"\"\r\n",
					")\r\n",
					"FinanceReportingMapping.createOrReplaceTempView(\"FinanceReportingMapping\")"
				],
				"execution_count": 69
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS = spark.sql(\"\"\"\r\n",
					"SELECT t.*, f.`SubIntRecovery Daily Budget Total` as `SubIntRecovery_Daily_Budget_Total`\r\n",
					"FROM `TRANSACTIONS` t\r\n",
					"LEFT JOIN FinanceReportingMapping f \r\n",
					"ON t.System_Account_Code_KEY = f.`System Account Code KEY`\r\n",
					"AND t.Posting_Date = f.`Posting Date`\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS.show()\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS = TRANSACTIONS.unionByName(FinanceReportingMapping, allowMissingColumns=True)\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 70
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT DISTINCT Item_Code_KEY\r\n",
					"FROM `TRANSACTIONS`\r\n",
					"WHERE Document_Category = 'Sales Invoice'"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DIM_GROUP = spark.sql(\"\"\"\r\n",
					"SELECT --DepotID,\r\n",
					"    DepotName AS DEPOTNAME,\r\n",
					"    DepotCode AS DEPOTCODE,\r\n",
					"    ParentDepotCode AS PARENTDEPOTCODE,\r\n",
					"    Division AS DIVISION,\r\n",
					"    Address,\r\n",
					"    Latitude,\r\n",
					"    Longitude,\r\n",
					"    SAPDepreciationAccountCode,\r\n",
					"    MFRAuthoriser,\r\n",
					"    MFRApplicationFlag,\r\n",
					"    ActiveFlag,\r\n",
					"    OperationsManager,\r\n",
					"    BranchManager,\r\n",
					"    FleetManager\r\n",
					"FROM ListDepots\r\n",
					"\"\"\")\r\n",
					"#DIM_GROUP.show()\r\n",
					"DIM_GROUP.createOrReplaceTempView(\"DIM_GROUP\")"
				],
				"execution_count": 71
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"GROUP = spark.sql(\"\"\"\r\n",
					"SELECT `DEPOTCODE` as `Depot_Code`,\r\n",
					"\t   `DEPOTCODE` as `MFRDepotCode`,\r\n",
					" \t   `DEPOTCODE`,\t\r\n",
					"  \t   `DIVISION`\r\n",
					"FROM DIM_GROUP\r\n",
					"\"\"\")\r\n",
					"#GROUP.show()\r\n",
					"GROUP.createOrReplaceTempView(\"GROUP\")"
				],
				"execution_count": 72
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#NEED THIS TO CREATE CUSTOMER \r\n",
					"#Concatenate (CUSTOMER)\r\n",
					"#Load *\r\n",
					"#FROM\r\n",
					"#[lib://QlikSense Path (cityc_clickview)/QVDs/FinanceReporting/Archive/CUSTOMER.qvd]\r\n",
					"#(qvd);\r\n",
					"#//store CUSTOMER into [lib://QlikSense Path (cityc_clickview)/QVDs/FinanceReporting/CUSTOMER.qvd];"
				],
				"execution_count": 73
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Exceptions = spark.sql(\"\"\"\r\n",
					"SELECT `System Account Code KEY` AS `System_Account_Code_KEY`, \r\n",
					"       `Depot Code` AS `Depot_Code`, \r\n",
					"       `Posting Date` AS `Posting_Date`, \r\n",
					"       `TransId`, \r\n",
					"       `Document Category` AS `Document_Category`, \r\n",
					"       `Transaction Detail` AS  `Transaction_Detail`, \r\n",
					"       `Line Total` AS `Line_Total`,\r\n",
					"       'Actual' as `Type`, \r\n",
					"       'Exceptions' as `DataSource`\r\n",
					"FROM Exceptions\r\n",
					"\"\"\")\r\n",
					"#Exceptions.show()\r\n",
					"Exceptions.createOrReplaceTempView(\"Exceptions\")"
				],
				"execution_count": 74
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS = TRANSACTIONS.unionByName(Exceptions, allowMissingColumns=True)"
				],
				"execution_count": 76
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 77
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS.columns"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TRANSACTIONS = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT SubDepotCode,\r\n",
					" Depot_Code,\r\n",
					" --CreatedBy,\r\n",
					" Customer_Code_KEY,\r\n",
					" Customer_Reference,\r\n",
					" CAST(Posting_Date as Date) AS Posting_Date,\r\n",
					" CAST(Posting_Date as timestamp) AS Posting_DateTime,\r\n",
					" DocEntry,\r\n",
					" Document_Category,\r\n",
					" Document_Number,\r\n",
					" Document_Type,\r\n",
					" -- CAST(Due_Date as timestamp) AS Due_Date,\r\n",
					" --Exclude2 as `Exclude`,\r\n",
					" --Fleet_Costs,\r\n",
					" Goods_Receipt_Number_KEY,\r\n",
					" --Gross_Value,\r\n",
					" --InvntItem,\r\n",
					" Item_Code_KEY,\r\n",
					" --Level_1_Name,\r\n",
					" --Line_Number,\r\n",
					" Line_Total,\r\n",
					" --MAINKEY2_ST,\r\n",
					" --MAINKEY2,\r\n",
					" --ObjType_Journal,\r\n",
					" Supplier_Code_KEY,\r\n",
					" Supplier_Reference,\r\n",
					" System_Account_Code_KEY,\r\n",
					" Transaction_Detail,\r\n",
					" TransId,\r\n",
					" Type,\r\n",
					" IR_Number,\r\n",
					" SubIntRecovery_Daily_Budget_Total\r\n",
					" --,DataSource\r\n",
					"FROM TRANSACTIONS\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS.show()\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 78
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"MFRTRANSACTIONS = spark.sql(\"\"\"\r\n",
					"SELECT\r\n",
					"CAST(H_MFRLocationDate as date) as Posting_Date,\r\n",
					"H_MFRDepotCode as Depot_Code,\r\n",
					"'Activity' as Document_Category,\r\n",
					"Left(H_MFRHorse,1) as HorseFlag,\r\n",
					"'VEHICLES '||  H_MFRApplication || '|' || 'ACTIVITY' || '|' || \r\n",
					"if(H_MFRDepotCode='CLE','CONTAINER',\r\n",
					"if(H_MFRDepotCode='CLI','CONTAINER',\r\n",
					"if(H_MFRDepotCode='CLL','CONTAINER',\r\n",
					"if(H_MFRDepotCode='CLR','RETAIL',\r\n",
					"if(H_MFRDepotCode='P&G','RETAIL',\r\n",
					"if(H_MFRDepotCode='SAB','SAB',H_MFRDepotCode)))))) as System_Account_Code_KEY,\r\n",
					"1 as Line_Total,\r\n",
					"'Actual' as Type\r\n",
					"--U_FLEET as Fleet_Code\r\n",
					"FROM F_MFRHISTORY\r\n",
					"Where H_MFRDepotCode IN ('CLE','CLI','CLL','CLR','P&G','SAB')\r\n",
					"and Left(H_MFRHorse,1)='H'\r\n",
					"and H_MFRVehicleStatus<>'R'\r\n",
					"\"\"\")\r\n",
					"MFRTRANSACTIONS.createOrReplaceTempView(\"MFRTRANSACTIONS\")"
				],
				"execution_count": 79
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS = TRANSACTIONS.unionByName(MFRTRANSACTIONS, allowMissingColumns=True)\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 80
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS = TRANSACTIONS.unionByName(BudgetActivityBudget, allowMissingColumns=True)"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM `TRANSACTIONS`\r\n",
					"\r\n",
					"LIMIT 10000"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS.write.parquet('/DataLake/Structured/Facts/F_TRANSACTIONS_Transformed.parquet', mode='overwrite')\r\n",
					"TRANSACTIONS.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.F_TRANSACTIONS_Transformed\")\r\n",
					"\r\n",
					"DIM_PO_LOOKUP.write.parquet('/DataLake/Structured/Dimensions/DIM_PO_LOOKUP.parquet', mode='overwrite')\r\n",
					"DIM_PO_LOOKUP.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.DIM_PO_LOOKUP\")"
				],
				"execution_count": 83
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Access Mappings Import"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load ACCESS\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Finance and Operations Mapping Sources/Access.xlsx\"\r\n",
					"var_File_Page = \"ACCESS\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"ACCESS\")\r\n",
					"\r\n",
					"ACCESS = spark.sql(\"\"\"SELECT `ACCESS`, `USERID`, `USERTYPE`, `RESTRICTDIVISION`, `RESTRICTDEPOT`, `RESTRICTCOST`, `RESTRICTCOSTTYPE` FROM ACCESS\"\"\")\r\n",
					"\r\n",
					"#ACCESS.createOrReplaceTempView(\"ACCESS\")"
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load TYPE\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Finance and Operations Mapping Sources/Access.xlsx\"\r\n",
					"var_File_Page = \"TYPE\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"TYPE\")\r\n",
					"\r\n",
					"TYPE = spark.sql(\"\"\"SELECT `USERTYPE`, `ACCESSTYPE` FROM TYPE\"\"\")\r\n",
					"\r\n",
					"#TYPE.createOrReplaceTempView(\"TYPE\")"
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load DIVISION\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Finance and Operations Mapping Sources/Access.xlsx\"\r\n",
					"var_File_Page = \"DIVISION\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"DIVISION\")\r\n",
					"\r\n",
					"DIVISION = spark.sql(\"\"\"SELECT `RESTRICTDIVISION`, `DIVISION` FROM DIVISION\"\"\")\r\n",
					"\r\n",
					"#DIVISION.createOrReplaceTempView(\"DIVISION\")"
				],
				"execution_count": 86
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load DEPOT\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Finance and Operations Mapping Sources/Access.xlsx\"\r\n",
					"var_File_Page = \"DEPOT\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"DEPOT\")\r\n",
					"\r\n",
					"DEPOT = spark.sql(\"\"\"SELECT `RESTRICTDEPOT`, `DEPOTCODE` FROM DEPOT\"\"\")\r\n",
					"\r\n",
					"#DEPOT.createOrReplaceTempView(\"DEPOT\")"
				],
				"execution_count": 87
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load COST\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Finance and Operations Mapping Sources/Access.xlsx\"\r\n",
					"var_File_Page = \"COST\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"COST\")\r\n",
					"\r\n",
					"COST = spark.sql(\"\"\"SELECT `RESTRICTCOST`, `RESTRICTTYPE` FROM COST\"\"\")\r\n",
					"\r\n",
					"#COST.createOrReplaceTempView(\"COST\")"
				],
				"execution_count": 88
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load COSTTYPE\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Finance and Operations Mapping Sources/Access.xlsx\"\r\n",
					"var_File_Page = \"COSTTYPE\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"COSTTYPE\")\r\n",
					"\r\n",
					"COSTTYPE = spark.sql(\"\"\"SELECT `RESTRICTCOSTTYPE`, `Level 4 Name` AS `Level_4_Name` FROM COSTTYPE\"\"\")\r\n",
					"\r\n",
					"#COSTTYPE.createOrReplaceTempView(\"COSTTYPE\")"
				],
				"execution_count": 89
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ACCESS.write.parquet('/DataLake/Structured/Dimensions/DIM_ACCESS.parquet', mode='overwrite')\r\n",
					"ACCESS.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.DIM_ACCESS\")\r\n",
					"\r\n",
					"TYPE.write.parquet('/DataLake/Structured/Dimensions/DIM_ACCESSTYPE.parquet', mode='overwrite')\r\n",
					"TYPE.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.DIM_TYPE\")\r\n",
					"\r\n",
					"DIVISION.write.parquet('/DataLake/Structured/Dimensions/DIM_DIVISIONRESTRICT.parquet', mode='overwrite')\r\n",
					"DIVISION.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.DIM_DIVISION\")\r\n",
					"\r\n",
					"DEPOT.write.parquet('/DataLake/Structured/Dimensions/DIM_DEPOTRESTRICT.parquet', mode='overwrite')\r\n",
					"DEPOT.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.DIM_DEPOT\")\r\n",
					"\r\n",
					"COST.write.parquet('/DataLake/Structured/Dimensions/DIM_COSTRESTRICT.parquet', mode='overwrite')\r\n",
					"COST.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.DIM_COST\")\r\n",
					"\r\n",
					"COSTTYPE.write.parquet('/DataLake/Structured/Dimensions/DIM_COSTTYPERESTRICT.parquet', mode='overwrite')\r\n",
					"COSTTYPE.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.DIM_COSTTYPE\")"
				],
				"execution_count": 90
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load COSTTYPE\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Finance and Operations Mapping Sources/FinanceReportingMapping.xlsx\"\r\n",
					"var_File_Page = \"ACTIVITY_ACCOUNTS\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"ACTIVITY_ACCOUNTS\")\r\n",
					"\r\n",
					"ACTIVITY_ACCOUNTS = spark.sql(\"\"\"SELECT `System Account Code KEY` AS System_Account_Code_KEY,\r\n",
					"                                        `Level 1 Name` AS Level_1_Name,\r\n",
					"                                        `Level 2 Name` AS Level_2_Name,\r\n",
					"                                        `Level 3 Name` AS Level_3_Name,\r\n",
					"                                        `Level 4 Name` AS Level_4_Name,\r\n",
					"                                        if(`Level 1 Name` = 'TURNOVER','REV','NOREV') AS RESTRICTTYPE\r\n",
					"                                 FROM ACTIVITY_ACCOUNTS\"\"\")\r\n",
					"\r\n",
					"#ACTIVITY_ACCOUNTS.createOrReplaceTempView(\"ACTIVITY_ACCOUNTS\")"
				],
				"execution_count": 91
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ACTIVITY_ACCOUNTS.write.parquet('/DataLake/Structured/Dimensions/Dim_ActivitiesAccount.parquet', mode='overwrite')\r\n",
					"ACTIVITY_ACCOUNTS.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.Dim_ActivitiesAccount\")"
				],
				"execution_count": 92
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"Scripts have successfully executed\")"
				],
				"execution_count": null
			}
		]
	}
}