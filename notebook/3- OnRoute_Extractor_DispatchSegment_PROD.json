{
	"name": "3- OnRoute_Extractor_DispatchSegment_PROD",
	"properties": {
		"folder": {
			"name": "ARCHIVE/PROD/Operations Notebooks PROD"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "77118bce-376b-4f9c-b689-253f48ec2f96"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load Source data from BlolbStorage"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#publicdispatchsegment = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatchsegment.parquet', format='parquet')\r\n",
					"#publicdispatchsegment.createOrReplaceTempView(\"publicdispatchsegment\")\r\n",
					"\r\n",
					"#T_Delivery = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/T_Delivery.parquet', format='parquet')\r\n",
					"#T_Delivery.createOrReplaceTempView(\"T_Delivery\")\r\n",
					"\r\n",
					"#T_dispatch = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/T_dispatch.parquet', format='parquet')\r\n",
					"#T_dispatch.createOrReplaceTempView(\"T_dispatch\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Enviroment variable set not to time out on large datasets in sub-select or join statements\r\n",
					"\r\n",
					"spark.sql(\"set spark.sql.legacy.timeParserPolicy=LEGACY\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start Scripting to provide structure to raw table Dispatchsegment"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dispatchsegment = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT did AS `dispatch.id`,\r\n",
					"       id AS `dispatchsegment.id`, \t\r\n",
					"\t   fromdelid AS `dispatchsegment.fromdelid`,\r\n",
					"       todelid AS `dispatchsegment.todelid`,\r\n",
					"       distance AS `dispatchsegment.distance`,\r\n",
					"       duration AS `dispatchsegment.duration`,\r\n",
					"       encodedpolyline AS `dispatchsegment.encodedpolyline`,\r\n",
					"       tollcost AS `dispatchsegment.tollcost`,\r\n",
					"       fuelcost AS `dispatchsegment.fuelcost`,\r\n",
					"       inscost AS `dispatchsegment.inscost`,\r\n",
					"       labourcost AS `dispatchsegment.labourcost`,\r\n",
					"       maintcost AS `dispatchsegment.maintcost`,\r\n",
					"       cpicost AS `dispatchsegment.cpicost`,\r\n",
					"       vehicleclass AS `dispatchsegment.vehicleclass`,\r\n",
					"       fromlat AS `dispatchsegment.fromlat`,\r\n",
					"       fromlng AS `dispatchsegment.fromlng`,\r\n",
					"       tolat AS `dispatchsegment.tolat`,\r\n",
					"       tolng AS `dispatchsegment.tolng`,\r\n",
					"       departuredate AS `dispatchsegment.departuredate`,\r\n",
					"       departuretime AS `dispatchsegment.departuretime`,\r\n",
					"       arrivaldate AS `dispatchsegment.arrivaldate`,\r\n",
					"       arrivaltime AS `dispatchsegment.arrivaltime`,\r\n",
					"       debriefeddate AS `dispatchsegment.debriefeddate`,\r\n",
					"       debriefedtime AS `dispatchsegment.debriefedtime`,    \r\n",
					"       optimized AS `dispatchsegment.optimized`,\r\n",
					"       segmentorder AS `dispatchsegment.segmentorder`,\r\n",
					"       customized AS `dispatchsegment.customized`,\r\n",
					"       parcelct AS `dispatchsegment.parcelct`\r\n",
					"FROM(\r\n",
					"    SELECT id,\t\r\n",
					"\tfromdelid,\r\n",
					"\ttodelid,\r\n",
					"\tdistance,\r\n",
					"\tduration,\r\n",
					"\tencodedpolyline,\r\n",
					"\tdid,\r\n",
					"\ttollcost,\r\n",
					"\tfuelcost,\r\n",
					"\tinscost,\r\n",
					"\tlabourcost,\r\n",
					"\tmaintcost,\r\n",
					"\tcpicost,\r\n",
					"\tvehicleclass,\r\n",
					"\tfromlat,\r\n",
					"\tfromlng,\r\n",
					"\ttolat,\r\n",
					"\ttolng,\r\n",
					"    date_format(to_utc_timestamp(to_timestamp(departuredate), 'GMT-2'), 'YYYY-mm-dd') AS departuredate,\r\n",
					"\t--Date(timezone('GMT-2'::text, to_timestamp(departuredate::double precision))) AS departuredate,\r\n",
					"    date_format(to_utc_timestamp(to_timestamp(departuredate), 'GMT-2'), 'HH:mm:ss') AS departuretime,\r\n",
					"\t--Cast (timezone('GMT-2'::text, to_timestamp(departuredate::double precision)) as time) AS departuretime,\r\n",
					"\r\n",
					"    date_format(to_utc_timestamp(to_timestamp(arrivaldate), 'GMT-2'), 'YYYY-mm-dd') AS arrivaldate,\r\n",
					"\t--Date(timezone('GMT-2'::text, to_timestamp(arrivaldate::double precision))) AS arrivaldate,\r\n",
					"    date_format(to_utc_timestamp(to_timestamp(arrivaldate), 'GMT-2'), 'HH:mm:ss') AS arrivaltime,\r\n",
					"\t--Cast (timezone('GMT-2'::text, to_timestamp(arrivaldate::double precision)) as time) AS arrivaltime,\r\n",
					"\r\n",
					"    date_format(to_utc_timestamp(to_timestamp(debriefeddate), 'GMT-2'), 'YYYY-mm-dd') AS debriefeddate,\r\n",
					"\t--Date(timezone('GMT-2'::text, to_timestamp(debriefeddate::double precision))) AS debriefeddate,\r\n",
					"    date_format(to_utc_timestamp(to_timestamp(debriefeddate), 'GMT-2'), 'HH:mm:ss') AS debriefedtime,\r\n",
					"\t--Cast (timezone('GMT-2'::text, to_timestamp(debriefeddate::double precision)) as time) AS debriefedtime,\r\n",
					"    optimized,\r\n",
					"\tsegmentorder,\r\n",
					"\tcustomized,\r\n",
					"\tparcelct\r\n",
					"FROM publicdispatchsegment\r\n",
					")a\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#dispatchsegment.show()\r\n",
					"dispatchsegment.createOrReplaceTempView(\"dispatchsegment\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dispatchsegment = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM dispatchsegment\r\n",
					"WHERE (`dispatch.id` IS NOT NULL OR `dispatch.id` <> '')\r\n",
					"  AND (`dispatchsegment.id` IS NOT NULL OR `dispatchsegment.id` <> '')\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#dispatchsegment.show()\r\n",
					"dispatchsegment.createOrReplaceTempView(\"dispatchsegment\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dispatchsegment_temp = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT distinct `dispatch.id`,\r\n",
					"\t   max(`dispatchsegment.segmentorder`) AS `dispatchsegment.segmentorder`\r\n",
					"FROM dispatchsegment\r\n",
					"WHERE `dispatchsegment.optimized` = 0\r\n",
					"GROUP BY `dispatch.id`\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#dispatchsegment_temp.show()\r\n",
					"dispatchsegment_temp.createOrReplaceTempView(\"dispatchsegment_temp\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dispatchsegment_LeftJoin1 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT `dispatch.id`,\r\n",
					"\t   `dispatchsegment.segmentorder`,\r\n",
					"       `dispatchsegment.duration`,\r\n",
					"        Sum(`dispatchsegment.distance`)/1000 AS `dispatchsegment.distance`\r\n",
					"FROM dispatchsegment\r\n",
					"WHERE `dispatchsegment.optimized` = 0\r\n",
					"GROUP BY `dispatch.id`, `dispatchsegment.segmentorder`, `dispatchsegment.duration`\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#dispatchsegment_LeftJoin1.show()\r\n",
					"dispatchsegment_LeftJoin1.createOrReplaceTempView(\"dispatchsegment_LeftJoin1\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"Join_Part1 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM dispatchsegment_temp\r\n",
					"LEFT JOIN dispatchsegment_LeftJoin1\r\n",
					"    USING (`dispatch.id`,`dispatchsegment.segmentorder`)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#Join_Part1.show()\r\n",
					"Join_Part1.createOrReplaceTempView(\"Join_Part1\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dispatchsegment_LeftJoin2 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT `dispatch_id` AS `dispatch.id`,\r\n",
					"       max(`delivery_deliverydatetime`) AS `delivery.deliverydatetime`\r\n",
					"FROM T_Delivery\r\n",
					"GROUP BY `dispatch_id`\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#dispatchsegment_LeftJoin2.show()\r\n",
					"dispatchsegment_LeftJoin2.createOrReplaceTempView(\"dispatchsegment_LeftJoin2\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"Join_Part2 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM Join_Part1\r\n",
					"LEFT JOIN dispatchsegment_LeftJoin2\r\n",
					"    USING (`dispatch.id`)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#Join_Part2.show()\r\n",
					"Join_Part2.createOrReplaceTempView(\"Join_Part2\")"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dispatchsegment_LeftJoin3 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT `dispatch.id`,\r\n",
					"    if(isnull(`dispatch.tsstopdepoenter`) <> 1, `dispatch.tsstopdepoenter`, `dispatch.stopdatetime`) AS `dispatch.tsstopdepoenter`,\r\n",
					"    `dispatch.startdate` AS `dispatch.startdate`,\r\n",
					"    `dispatch.stopdate` AS `dispatch.stopdate`\r\n",
					"FROM T_dispatch\r\n",
					"WHERE (`dispatch.estdepdate`)<=(Now())\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#dispatchsegment_LeftJoin3.show()\r\n",
					"dispatchsegment_LeftJoin3.createOrReplaceTempView(\"dispatchsegment_LeftJoin3\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"Join_Part3 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM Join_Part2\r\n",
					"LEFT JOIN dispatchsegment_LeftJoin3\r\n",
					"    USING (`dispatch.id`)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#Join_Part3.show()\r\n",
					"Join_Part3.createOrReplaceTempView(\"Join_Part3\")"
				],
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Final Structured table for dispatchsegment with Additional (concatenated) columns "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dispatchsegment = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT `dispatch.id`,\r\n",
					"\tdatediff(`delivery.deliverydatetime`, `dispatch.tsstopdepoenter`) AS `dispatch.lastdeliveryduration_aggr`,\r\n",
					"       if(trunc(`dispatch.stopdate`, 'day') <> trunc(`dispatch.startdate`, 'day'), 1,0) AS `dispatch.completedsameday_aggr`,\r\n",
					"       `dispatchsegment.duration` AS `dispatchsegment.duration_aggr`,\r\n",
					"       `dispatchsegment.distance` AS `dispatchsegment.distance_aggr`\r\n",
					"FROM Join_Part3\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#dispatchsegment.show()\r\n",
					"dispatchsegment.createOrReplaceTempView(\"dispatchsegment\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Print success message on the Production script"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"Successful run of the script\")"
				],
				"execution_count": null
			}
		]
	}
}