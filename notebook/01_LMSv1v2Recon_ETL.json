{
	"name": "01_LMSv1v2Recon_ETL",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Ops/LMSv1v2Recon"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DevSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ec054d2e-4e0a-4ee0-b4ad-00af71e28e62"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql import functions as F\r\n",
					"# from pyspark.sql import DataFrame"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #Create DataFrame for the v2customerorder LMSV2 Table\r\n",
					"# v2customerorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMSV2/v2customerorder.parquet', format='parquet')\r\n",
					"# columns=v2customerorder.columns\r\n",
					"# for i in range(len(columns)):v2customerorder=v2customerorder.withColumnRenamed(columns[i],'v2'+ columns[i])\r\n",
					"# v2customerorder.createOrReplaceTempView(\"v2customerorder\")\r\n",
					"\r\n",
					"# #Create DataFrame for the v2deliverynote LMSV2 Table\r\n",
					"# v2deliverynote = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMSV2/v2deliverynote.parquet', format='parquet')\r\n",
					"# columns1=v2deliverynote.columns\r\n",
					"# for i in range(len(columns1)):v2deliverynote=v2deliverynote.withColumnRenamed(columns1[i],'v2'+ columns1[i])\r\n",
					"# v2deliverynote.createOrReplaceTempView(\"v2deliverynote\")\r\n",
					"\r\n",
					"# #Create DataFrame for the v2manifest LMSV2 Table\r\n",
					"# v2manifest = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMSV2/v2manifest.parquet', format='parquet')\r\n",
					"# columns2=v2manifest.columns\r\n",
					"# for i in range(len(columns2)):v2manifest=v2manifest.withColumnRenamed(columns2[i],'v2'+ columns2[i])\r\n",
					"# v2manifest.createOrReplaceTempView(\"v2manifest\")\r\n",
					"\r\n",
					"# #Create DataFrame for the v2consignment LMSV2 Table\r\n",
					"# v2consignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMSV2/v2consignment.parquet', format='parquet')\r\n",
					"# columns3=v2consignment.columns\r\n",
					"# for i in range(len(columns3)):v2consignment=v2consignment.withColumnRenamed(columns3[i],'v2'+ columns3[i])\r\n",
					"# v2consignment.createOrReplaceTempView(\"v2consignment\")\r\n",
					"\r\n",
					"# #Create DataFrame for the v2parcel LMSV2 Table\r\n",
					"# v2parcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMSV2/v2parcel.parquet', format='parquet')\r\n",
					"# columns8=v2parcel.columns\r\n",
					"# for i in range(len(columns8)):v2parcel=v2parcel.withColumnRenamed(columns8[i],'v2'+ columns8[i])\r\n",
					"# v2parcel.createOrReplaceTempView(\"v2parcel\")\r\n",
					"\r\n",
					"# #Create DataFrame for the v2track LMSV2 Table\r\n",
					"# v2track = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMSV2/v2track.parquet', format='parquet')\r\n",
					"# columns9=v2track.columns\r\n",
					"# for i in range(len(columns9)):v2track=v2track.withColumnRenamed(columns9[i],'v2'+ columns9[i])\r\n",
					"# v2track.createOrReplaceTempView(\"v2track\")\r\n",
					"\r\n",
					"# #Create DataFrame for the v2movement LMSV2 Table\r\n",
					"# v2movement = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMSV2/v2movement.parquet', format='parquet')\r\n",
					"# columns10=v2movement.columns\r\n",
					"# for i in range(len(columns10)):v2movement=v2movement.withColumnRenamed(columns10[i],'v2'+ columns10[i])\r\n",
					"# v2movement.createOrReplaceTempView(\"v2movement\")\r\n",
					"\r\n",
					"\r\n",
					"# ######################################################################################################\r\n",
					"\r\n",
					"# #Create DataFrame for the dbowaybill LMS Table\r\n",
					"# dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
					"# columns4=dbowaybill.columns\r\n",
					"# for i in range(len(columns4)):dbowaybill=dbowaybill.withColumnRenamed(columns4[i],'v1'+ columns4[i])\r\n",
					"# dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dboloads LMS Table\r\n",
					"# dboloads = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboloads.parquet', format='parquet')\r\n",
					"# columns5=dboloads.columns\r\n",
					"# for i in range(len(columns5)):dboloads=dboloads.withColumnRenamed(columns5[i],'v1'+ columns5[i])\r\n",
					"# dboloads.createOrReplaceTempView(\"dboloads\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dboconsignment LMS Table\r\n",
					"# dboconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboconsignment.parquet', format='parquet')\r\n",
					"# columns6=dboconsignment.columns\r\n",
					"# for i in range(len(columns6)):dboconsignment=dboconsignment.withColumnRenamed(columns6[i],'v1'+ columns6[i])\r\n",
					"# dboconsignment.createOrReplaceTempView(\"dboconsignment\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dboorder LMS Table\r\n",
					"# dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
					"# columns7=dboorder.columns\r\n",
					"# for i in range(len(columns7)):dboorder=dboorder.withColumnRenamed(columns7[i],'v1'+ columns7[i])\r\n",
					"# dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dboparcel LMS Table\r\n",
					"# dboparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparcel.parquet', format='parquet')\r\n",
					"# columns11=dboparcel.columns\r\n",
					"# for i in range(len(columns11)):dboparcel=dboparcel.withColumnRenamed(columns11[i],'v1'+ columns11[i])\r\n",
					"# dboparcel.createOrReplaceTempView(\"dboparcel\")\r\n",
					"\r\n",
					"#Create DataFrame for the sstparcelunion LMS Table\r\n",
					"# sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
					"# columns11=sstparcelunion.columns\r\n",
					"# for i in range(len(columns11)):sstparcelunion=sstparcelunion.withColumnRenamed(columns11[i],'v1'+ columns11[i])\r\n",
					"# sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbotrack LMS Table\r\n",
					"# dbotrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbotrack.parquet', format='parquet')\r\n",
					"# columns12=dbotrack.columns\r\n",
					"# for i in range(len(columns12)):dbotrack=dbotrack.withColumnRenamed(columns12[i],'v1'+ columns12[i])\r\n",
					"# dbotrack.createOrReplaceTempView(\"dbotrack\")\r\n",
					"\r\n",
					"#Create DataFrame for the ssttrackunion LMS Table\r\n",
					"# ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
					"# columns12=ssttrackunion.columns\r\n",
					"# for i in range(len(columns12)):ssttrackunion=ssttrackunion.withColumnRenamed(columns12[i],'v1'+ columns12[i])\r\n",
					"# ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**BASE PARCEL**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconparcel_base\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     v1id\r\n",
					"    ,v1consignid\r\n",
					"    ,v1waybillid\r\n",
					"    ,v1orderid\r\n",
					"FROM sstparcelunion p\r\n",
					"WHERE  COALESCE(p.v1acceptancedate,p.v1handoverdate)>='2023-01-01'"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconparcel_base = spark.sql(\"SELECT * FROM reconparcel_base\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**WAYBILL**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconwaybill_tmp1\r\n",
					"AS\r\n",
					"SELECT w.v1id\r\n",
					"FROM dbowaybill w\r\n",
					"WHERE  w.v1date>='2023-01-01'\r\n",
					"\r\n",
					"UNION \r\n",
					"\r\n",
					"SELECT DISTINCT p.v1waybillid as v1id\r\n",
					"FROM reconparcel_base p\r\n",
					""
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconwaybill_tmp1 = spark.sql(\"SELECT DISTINCT * FROM reconwaybill_tmp1\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconwaybill\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"\r\n",
					"w.*\r\n",
					",dn.*\r\n",
					",CASE \r\n",
					"    WHEN dn.v2id IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2\r\n",
					"\r\n",
					"FROM reconwaybill_tmp1 t\r\n",
					"LEFT JOIN dbowaybill w on w.v1id = t.v1id\r\n",
					"LEFT JOIN v2deliverynote dn on dn.v2legacyid = w.v1id\r\n",
					"\r\n",
					""
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconwaybill = spark.sql(\"SELECT * FROM reconwaybill\")"
				],
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**ORDER**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconorder_tmp1\r\n",
					"AS\r\n",
					"SELECT o.v1id\r\n",
					"FROM dboorder o\r\n",
					"WHERE  o.v1hodate>='2023-01-01'\r\n",
					"\r\n",
					"UNION \r\n",
					"\r\n",
					"SELECT DISTINCT p.v1orderid as v1id\r\n",
					"FROM reconparcel_base p\r\n",
					""
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconorder_tmp1 = spark.sql(\"SELECT DISTINCT * FROM reconorder_tmp1\")"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconorder\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"\r\n",
					"o.*\r\n",
					",co.*\r\n",
					",CASE \r\n",
					"    WHEN co.v2id IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2\r\n",
					"\r\n",
					"FROM reconorder_tmp1 t\r\n",
					"LEFT JOIN dboorder o on o.v1id = t.v1id\r\n",
					"LEFT JOIN v2customerorder co on co.v2legacyid = o.v1id\r\n",
					"\r\n",
					""
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconorder = spark.sql(\"SELECT * FROM reconorder\")"
				],
				"execution_count": 19
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**CONSIGNMENT**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconconsignment_tmp1\r\n",
					"AS\r\n",
					"SELECT c.v1id\r\n",
					"FROM dboconsignment c\r\n",
					"WHERE  c.v1cdate>='2023-01-01'\r\n",
					"\r\n",
					"UNION \r\n",
					"\r\n",
					"SELECT DISTINCT p.v1consignid as v1id\r\n",
					"FROM reconparcel_base p\r\n",
					""
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconconsignment_tmp1 = spark.sql(\"SELECT DISTINCT * FROM reconconsignment_tmp1\")"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconconsignment\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"\r\n",
					"c.*\r\n",
					",co.*\r\n",
					",CASE \r\n",
					"    WHEN co.v2id IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2\r\n",
					"\r\n",
					"FROM reconconsignment_tmp1 t\r\n",
					"LEFT JOIN dboconsignment c on c.v1id = t. v1id\r\n",
					"LEFT JOIN v2consignment co on co.v2legacyid = c.v1id\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconconsignment = spark.sql(\"SELECT * FROM reconconsignment\")"
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**PARCEL FINAL**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconparcel_tmp1\r\n",
					"AS\r\n",
					"SELECT p.v1id\r\n",
					"FROM reconwaybill w\r\n",
					"LEFT JOIN sstparcelunion p on p.v1waybillid = w.v1id \r\n",
					"\r\n",
					"\r\n",
					"UNION \r\n",
					"\r\n",
					"SELECT p.v1id\r\n",
					"FROM reconconsignment c\r\n",
					"LEFT JOIN sstparcelunion p on p.v1consignid = c.v1id \r\n",
					"\r\n",
					"UNION \r\n",
					"\r\n",
					"SELECT p.v1id\r\n",
					"FROM reconorder o\r\n",
					"LEFT JOIN sstparcelunion p on p.v1orderid = o.v1id "
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconparcel_tmp1 = spark.sql(\"SELECT DISTINCT * FROM reconparcel_tmp1\")"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconparcel\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    p.*\r\n",
					"    ,p2.*\r\n",
					"    ,CASE \r\n",
					"        WHEN p2.v2id IS NULL THEN 1\r\n",
					"        ELSE 0\r\n",
					"    END as notinv2\r\n",
					"FROM reconparcel_tmp1 t\r\n",
					"LEFT JOIN sstparcelunion p on p.v1id = t.v1id\r\n",
					"LEFT JOIN v2parcel p2 on p2.v2legacyid = p.v1id\r\n",
					""
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconparcel = spark.sql(\"SELECT * FROM reconparcel\")"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**TRACK**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"recontrack_tmp1\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     t.v1id\r\n",
					"    ,t.v1loadid\r\n",
					"FROM ssttrackunion t\r\n",
					"WHERE t.v1opendt >='2023-01-01'\r\n",
					"\r\n",
					"UNION \r\n",
					"\r\n",
					"SELECT \r\n",
					"     t.v1id\r\n",
					"    ,t.v1loadid\r\n",
					"FROM reconparcel p\r\n",
					"LEFT JOIN ssttrackunion t on t.v1parcelid = p.v1id"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"recontrack_tmp1 = spark.sql(\"SELECT DISTINCT * FROM recontrack_tmp1\")"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## COME BACK TO TRACK TO ADD MISSING LOADS"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconloads_tmp1\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     l.v1id\r\n",
					"FROM dboloads l\r\n",
					"WHERE l.v1ldate >='2023-01-01'\r\n",
					"\r\n",
					"UNION \r\n",
					"\r\n",
					"SELECT \r\n",
					"    l.v1id\r\n",
					"FROM recontrack_tmp1 t\r\n",
					"LEFT JOIN dboloads l on l.v1id = t.v1loadid"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconloads_tmp1 = spark.sql(\"SELECT DISTINCT * FROM reconloads_tmp1\")"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconloads\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"\r\n",
					"l.*\r\n",
					",m.*\r\n",
					",CASE \r\n",
					"    WHEN m.v2id IS NULL THEN 1\r\n",
					"    ELSE 0\r\n",
					"END as notinv2\r\n",
					"\r\n",
					"FROM reconloads_tmp1 t\r\n",
					"LEFT JOIN dboloads l on l.v1id = t.v1id\r\n",
					"LEFT JOIN v2manifest m on m.v2legacyid = l.v1id"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconloads = spark.sql(\"SELECT * FROM reconloads\")"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"recontrack_tmp2\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    t.v1id\r\n",
					"\r\n",
					"FROM recontrack_tmp1 t\r\n",
					"\r\n",
					"UNION \r\n",
					"\r\n",
					"SELECT \r\n",
					"    t.v1id\r\n",
					"\r\n",
					"FROM reconloads l\r\n",
					"LEFT JOIN ssttrackunion t on t.v1loadid = l.v1id"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"recontrack_tmp2 = spark.sql(\"SELECT DISTINCT * FROM recontrack_tmp2\")"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"recontrack\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    t2.*\r\n",
					"    ,t3.*\r\n",
					"    ,CASE \r\n",
					"        WHEN t3.v2id IS NULL THEN 1\r\n",
					"        ELSE 0\r\n",
					"    END as notinv2\r\n",
					"\r\n",
					"FROM recontrack_tmp2 t1\r\n",
					"LEFT JOIN ssttrackunion t2 on t2.v1id = t1.v1id\r\n",
					"LEFT JOIN v2track t3 on t3.v2legacyid = t1.v1id"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"recontrack = spark.sql(\"SELECT  * FROM recontrack\")"
				],
				"execution_count": 41
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**MOVEMENT**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"reconmovement\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    * \r\n",
					"FROM v2movement"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"reconmovement = spark.sql(\"SELECT  * FROM reconmovement\")"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# reconparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconparcel.parquet', mode = \"overwrite\")\r\n",
					"# reconwaybill.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconwaybill.parquet', mode = \"overwrite\")\r\n",
					"# reconorder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconorder.parquet', mode = \"overwrite\")\r\n",
					"# reconconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconconsignment.parquet', mode = \"overwrite\")\r\n",
					"# reconloads.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconloads.parquet', mode = \"overwrite\")\r\n",
					"# recontrack.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconparcel.parquet', mode = \"overwrite\")\r\n",
					"# reconmovement.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/LMSV2/reconparcel.parquet', mode = \"overwrite\")"
				],
				"execution_count": 45
			}
		]
	}
}