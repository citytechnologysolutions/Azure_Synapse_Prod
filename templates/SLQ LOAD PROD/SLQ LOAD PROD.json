{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "citylogistics-synapseanalytics-workspace-prod"
		},
		"SqlServer_WindowsAuth": {
			"type": "string"
		},
		"AzureSqlDatabase": {
			"type": "string"
		},
		"citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage": {
			"type": "string"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/LMS LOAD PROD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Iterate Data",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.CW_Items",
								"type": "Expression"
							},
							"batchCount": 2,
							"activities": [
								{
									"name": "If ColumnsNamesBlankSpacesOrLimitedLoad",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(pipeline().parameters.ColumnsNamesBlankSpaces,greater(length(pipeline().parameters.LimitedLoadTopX),1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "SelectStatementBuilder",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(' \nDECLARE @s VARCHAR(MAX)\nDECLARE @tablename VARCHAR(MAX) = ''', item().Source.TableName,'''\nSELECT @s = ISNULL(@s + '', '','''') + ''['' + c.name + '']'' + '' as [''+replace(c.name,'' '',''_'')+''] ''\nFROM sys.all_columns c \njoin sys.objects t ON c.object_id = t.object_id \nWHERE t.name =  @tablename \nSELECT ''SELECT ', if(greater(length(pipeline().parameters.LimitedLoadTopX),1),concat('TOP ', pipeline().parameters.LimitedLoadTopX),''), ' '' + @s + '' FROM ['' +  @tablename + '']', if(and(greater(length(item().Increment.IdField),1),greater(length(pipeline().parameters.LimitedLoadTopX),1)),concat(' ORDER BY ', item().Increment.IdField, ' DESC'),''),''' as Query')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "SqlServerDataSet",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@variables('ServerName')",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@variables('DatabaseName')",
																"type": "Expression"
															},
															"UserName": {
																"value": "@variables('UserName')",
																"type": "Expression"
															},
															"CW_SchemaName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"SecretName": {
																"value": "@variables('SecretName')",
																"type": "Expression"
															},
															"CW_TableName": {
																"value": "@item().Source.TableName",
																"type": "Expression"
															}
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If FullLoad",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.Full_Load",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Lookup Last Max Field",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('SELECT MAX(',item().Increment.IncField,')  as Field \n FROM\n    OPENROWSET(\n        BULK ','''',variables('DataLake'),variables('ContainerName'),'/',variables('FolderName'),'/',item().destination.FileName,'.parquet','''',\n        ',FORMAT = ','''PARQUET''','\n    ) AS [result]')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSqlConnection",
														"type": "DatasetReference",
														"parameters": {
															"ASAEndpoint": {
																"value": "@variables('ASAEndpoint')",
																"type": "Expression"
															},
															"ASADataBase": {
																"value": "@variables('ASADataBase')",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "Remove Old Data Incremental Data_SingleFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Lookup Last Max Field",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Remove Old Data Data_Folder",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_SingleFile",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "Remove Old Data Data_SingleFile",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "WaitBecause of Error",
												"type": "Wait",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_Folder",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "If ColumnsNamesBlankSpacesOrLimitedLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(pipeline().parameters.Full_Load,'FullTakeOn'\n   ,if(and(equals(item().Increment.IncField,item().Increment.IdField),lessOrEquals(length(pipeline().parameters.TakeOnPeriod),1)),'IdLoad'\n      ,'DateLoad'\n   )\n)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DateLoad",
												"activities": [
													{
														"name": "Incr Load DF",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy New incremental data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "IncrementalLoadDate DataFlow",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_IdField": {
																		"value": "'@{item().Increment.IdField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"linkedServiceParameters": {
																	"source1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"WritetoDataLake": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"integrationRuntime": {
																"referenceName": "DataFlowIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Partition DF",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded",
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"integrationRuntime": {
																"referenceName": "DataFlowIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_DateLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Incr Load DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Copy New incremental data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(or(pipeline().parameters.ColumnsNamesBlankSpaces, greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n        activity('SelectStatementBuilder').output.firstRow.Query,concat('SELECT * FROM [', item().Source.TableName,']')\n        )\n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,concat('''',activity('Lookup Last Max Field').output.firstRow.Field,'''')\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete The Left File_DateLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_Folder",
																"dependencyConditions": [
																	"Failed",
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "IdLoad",
												"activities": [
													{
														"name": "Copy New incremental data_IDLoad",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(or(pipeline().parameters.ColumnsNamesBlankSpaces,    greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n        activity('SelectStatementBuilder').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,activity('Lookup Last Max Field').output.firstRow.Field\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Data flow Union_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy New incremental data_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "IncrementalLoadID DataFlow",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_IdField": {
																		"value": "'@{item().Increment.IdField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"linkedServiceParameters": {
																	"source1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"WritetoDataLake": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"integrationRuntime": {
																"referenceName": "DataFlowIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Partition DF_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded",
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"integrationRuntime": {
																"referenceName": "DataFlowIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_IDLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Data flow Union_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Left File_IDLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_Folder",
																"dependencyConditions": [
																	"Failed",
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "FullTakeOn",
												"activities": [
													{
														"name": "Copy_Data_Full_Take_On",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@if(or(pipeline().parameters.ColumnsNamesBlankSpaces, greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n    activity('SelectStatementBuilder').output.firstRow.Query,\n    concat('SELECT * FROM [', item().Source.TableName,']')\n    )",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Partition DF_FullLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy_Data_Full_Take_On",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"integrationRuntime": {
																"referenceName": "DataFlowIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete the Temp File_FullLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_FullLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "ERROR",
													"errorCode": "500"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"CW_Items": {
						"type": "Array",
						"defaultValue": []
					},
					"TakeOnPeriod": {
						"type": "string",
						"defaultValue": " "
					},
					"Full_Load": {
						"type": "bool",
						"defaultValue": false
					},
					"ColumnsNamesBlankSpaces": {
						"type": "bool",
						"defaultValue": false
					},
					"LimitedLoadTopX": {
						"type": "string",
						"defaultValue": " "
					}
				},
				"variables": {
					"FolderName": {
						"type": "String",
						"defaultValue": "Unstructured Data/LMS"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net/"
					},
					"ServerName": {
						"type": "String",
						"defaultValue": "CCLMSPROD"
					},
					"DatabaseName": {
						"type": "String",
						"defaultValue": "LogidataCC"
					},
					"UserName": {
						"type": "String",
						"defaultValue": "Synapse@citylogistics.co.za"
					},
					"SecretName": {
						"type": "String",
						"defaultValue": "LMSSecret"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "dbo"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"ASAEndpoint": {
						"type": "String",
						"defaultValue": "citylogistics-synapseanalytics-workspace-prod-ondemand.sql.azuresynapse.net"
					},
					"ASADataBase": {
						"type": "String",
						"defaultValue": "master"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/LMS"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-04T06:38:01Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SqlServerDataSet')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlConnection')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeParquet')]",
				"[concat(variables('workspaceId'), '/dataflows/IncrementalLoadDate DataFlow')]",
				"[concat(variables('workspaceId'), '/dataflows/Partitioning DF')]",
				"[concat(variables('workspaceId'), '/dataflows/IncrementalLoadID DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServerDataSet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('SqlServer_WindowsAuth')]",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"CW_SchemaName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					},
					"CW_TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().CW_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().CW_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlConnection')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureSqlDatabase')]",
					"type": "LinkedServiceReference",
					"parameters": {
						"ASAEndpoint": {
							"value": "@dataset().ASAEndpoint",
							"type": "Expression"
						},
						"ASADataBase": {
							"value": "@dataset().ASADataBase",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ASAEndpoint": {
						"type": "string"
					},
					"ASADataBase": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataLakeParquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]",
					"type": "LinkedServiceReference",
					"parameters": {
						"DataLake": {
							"value": "@dataset().DataLake",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"CW_FolderName": {
						"type": "string"
					},
					"CW_FileName": {
						"type": "string"
					},
					"ContainerName": {
						"type": "string"
					},
					"DataLake": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().CW_FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().CW_FolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IncrementalLoadDate DataFlow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "[parameters('citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "[parameters('citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "[parameters('citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]",
								"type": "LinkedServiceReference"
							},
							"name": "WritetoDataLake"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     cw_FolderName as string,",
						"     cw_FileName as string,",
						"     cw_IncFolderName as string,",
						"     cw_IdField as string,",
						"     ContainerName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: ($cw_FolderName),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source1",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: ($cw_IncFolderName),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source2",
						"source1, source2 exists($cw_IdField == $cw_IdField,",
						"     negate:true,",
						"     broadcast: 'right')~> exists1",
						"exists1, source2 union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: (concat($cw_IncFolderName,'/T1/',$cw_FileName)),",
						"     truncate: true,",
						"     compressionCodec: 'snappy',",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('dynamicRange', 64,",
						"          $cw_IdField",
						"     )) ~> WritetoDataLake"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Partitioning DF')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "[parameters('citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "[parameters('citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     cw_FileName as string,",
						"     cw_FolderName as string,",
						"     cw_IncFolderName as string,",
						"     cw_incField as string,",
						"     ContainerName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: (concat($cw_IncFolderName,'/T1')),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source2",
						"source2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: (concat($cw_FolderName,'/',$cw_FileName)),",
						"     truncate: true,",
						"     compressionCodec: 'snappy',",
						"     umask: 0776,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IncrementalLoadID DataFlow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "[parameters('citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "[parameters('citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "[parameters('citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]",
								"type": "LinkedServiceReference"
							},
							"name": "WritetoDataLake"
						}
					],
					"transformations": [
						{
							"name": "UnionOnID"
						}
					],
					"scriptLines": [
						"parameters{",
						"     cw_FolderName as string,",
						"     cw_FileName as string,",
						"     cw_IncFolderName as string,",
						"     cw_IdField as string,",
						"     ContainerName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: ($cw_FolderName),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source1",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: ($cw_IncFolderName),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source2",
						"source1, source2 union(byName: true)~> UnionOnID",
						"UnionOnID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: (concat($cw_IncFolderName,'/T1/',$cw_FileName)),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('dynamicRange', 64,",
						"          $cw_IdField",
						"     )) ~> WritetoDataLake"
					]
				}
			},
			"dependsOn": []
		}
	]
}