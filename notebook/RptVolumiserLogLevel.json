{
	"name": "RptVolumiserLogLevel",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Reports/LMS"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "88fa170d-6054-4d80-8e70-ccdedff032a8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
				"name": "PRDSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"if 'prod' in Environment:\r\n",
					"    StorageAccount = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"else:\r\n",
					"    StorageAccount = 'citylogisticsstorage'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# ' + StorageAccount + '"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the stparcel LMS Table\r\n",
					"stparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet', format='parquet')\r\n",
					"stparcel.createOrReplaceTempView(\"stparcel\")\r\n",
					"\r\n",
					"#Create DataFrame for the stdeliverypickupcustomer LMS Table\r\n",
					"stdeliverypickupcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet', format='parquet')\r\n",
					"stdeliverypickupcustomer.createOrReplaceTempView(\"stdeliverypickupcustomer\")\r\n",
					"\r\n",
					"#Create DataFrame for the stbillcustomer LMS Table\r\n",
					"stbillcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stbillcustomer.parquet', format='parquet')\r\n",
					"stbillcustomer.createOrReplaceTempView(\"stbillcustomer\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbovolumiserlog  LMS Table\r\n",
					"dbovolumiserlog = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovolumiserlog.parquet', format='parquet')\r\n",
					"dbovolumiserlog.createOrReplaceTempView(\"dbovolumiserlog\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbovolumiserlocation  LMS Table\r\n",
					"dbovolumiserlocation = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovolumiserlocation.parquet', format='parquet')\r\n",
					"dbovolumiserlocation.createOrReplaceTempView(\"dbovolumiserlocation\")"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"rptvolumiserloglevel\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"\r\n",
					"    p.lms_parcel_id\r\n",
					"    ,CAST(coalesce(p.lms_parcel_barcode,dpa.parcelid) as varchar(128)) as lms_parcel_barcode\r\n",
					"    ,p.lms_parcel_consignid\r\n",
					"    ,bc.lms_customer_name as lms_parcel_orderbillcustname\r\n",
					"    ,vl.dateupdated lms_volumiserlog_scandate\r\n",
					"    ,(p.lms_parcel_volumiserlength / 10) as lms_parcel_volumiserlengthcm\r\n",
					"\t,(p.lms_parcel_volumiserwidth / 10) as lms_parcel_volumiserwidthcm\r\n",
					"\t,(p.lms_parcel_volumiserheight / 10)  as lms_parcel_volumiserheightcm\r\n",
					"    ,p.lms_parcel_weight\r\n",
					"    ,(((prevLength)*(prevWidth)*(prevHeight)) / 5000) as lms_volumiserlog_prevcalculatedvolumetricweightkg\r\n",
					"    ,(v.newlength /10) as lms_volumiserlog_newlengthcm\r\n",
					"\t,(v.newwidth /10) as lms_volumiserlog_newwidthcm\r\n",
					"\t,(v.newheight /10) as lms_volumiserlog_newheightcm\r\n",
					"    ,(v.newweight / 1000) as lms_volumiserlog_newweightkg\r\n",
					"    ,((v.newlength /10)*(v.newwidth /10)*(v.newheight /10))/5000 lms_volumiserlog_newcalculatedvolumetricweightkg\r\n",
					"    ,vloc.location as lms_volumiserlog_location\r\n",
					"        \r\n",
					"FROM dbovolumiserlog vl\r\n",
					"LEFT JOIN stparcel p on p.lms_parcel_id = vl.parcelid\r\n",
					"LEFT JOIN stbillcustomer bc on bc.lms_customer_id =  p.lms_parcel_orderbillcustid\r\n",
					"LEFT JOIN dbovolumiserlocation vloc on vloc.volumiserid = vl.volumiserid\r\n",
					"\r\n",
					"WHERE vl.dateupdated >= to_timestamp(year(current_date())-1||'-'||(month(current_date()))||'-'||'01')\r\n",
					"\r\n",
					""
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rptvolumiserloglevel = spark.sql(\"SELECT * FROM rptvolumiserloglevel\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rptvolumiserloglevel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/RPT/rptvolumiserloglevel.parquet', mode = \"overwrite\")"
				],
				"execution_count": null
			}
		]
	}
}