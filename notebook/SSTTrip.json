{
	"name": "SSTTrip",
	"properties": {
		"folder": {
			"name": "TRANSFORM/01 SEMI-STRUCTURED/TMS + ORV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "TESTSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c2f878ca-d341-4a97-8054-598c8c073d8c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
				"name": "TESTSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"##Create DataFrame for the publictrip TMS Table\r\n",
					"#publictrip = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publictrip.parquet', format='parquet')\r\n",
					"#publictrip.createOrReplaceTempView(\"publictrip\")\r\n",
					"#\r\n",
					"##Create DataFrame for the dbovehicle LMS Table\r\n",
					"#dbovehicle = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
					"#dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
					"#\r\n",
					"##Create DataFrame for the publicdispatch ORV Table\r\n",
					"#publicdispatch = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
					"#publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
					"#\r\n",
					"##Create DataFrame for the publicvehicle ORV Table\r\n",
					"#publicvehicle = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/Onroute/publicvehicle.parquet', format='parquet')\r\n",
					"#publicvehicle.createOrReplaceTempView(\"publicvehicle\")\r\n",
					"#\r\n",
					"##Create DataFrame for the publicorvuser ORV Table\r\n",
					"#publicorvuser = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/Onroute/publicorvuser.parquet', format='parquet')\r\n",
					"#publicorvuser.createOrReplaceTempView(\"publicorvuser\")\r\n",
					"#\r\n",
					"##Create DataFrame for the dbovehiclebasic MD Table\r\n",
					"#dbovehiclebasic = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
					"#dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
					"#\r\n",
					"##Create DataFrame for the publicdriverpayitem TMS Table\r\n",
					"#publicdriverpayitem = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpayitem.parquet', format='parquet')\r\n",
					"#publicdriverpayitem.createOrReplaceTempView(\"publicdriverpayitem\")\r\n",
					"#\r\n",
					"##Create DataFrame for the publicfinancedata TMS Table\r\n",
					"#publicfinancedata = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publicfinancedata.parquet', format='parquet')\r\n",
					"#publicfinancedata.createOrReplaceTempView(\"publicfinancedata\")\r\n",
					"#\r\n",
					"##Create DataFrame for the publicbooking TMS Table\r\n",
					"#publicbooking = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/TMS/publicbooking.parquet', format='parquet')\r\n",
					"#publicbooking.createOrReplaceTempView(\"publicbooking\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"ssttpublicfinancedata_tmp = spark.sql(\"\"\"\r\n",
					"SELECT \r\n",
					"b.tripid\r\n",
					",sum(f.peaksurchagrebuy) as peaksurchagrebuy\r\n",
					",sum(f.peaksurchagresell) as peaksurchagresell\r\n",
					",sum(f.manualentryroadhaulsell) as manualentryroadhaulsell\r\n",
					",sum(f.manualentryahocsell) as manualentryahocsell\r\n",
					",sum(f.systemfuellevy) as systemfuellevy\r\n",
					",sum(f.systemratefuellevy) as systemratefuellevy\r\n",
					",sum(f.systemratefuelexlevy) as systemratefuelexlevy\r\n",
					",sum(f.systemratefuelinclevy) as systemratefuelinclevy\r\n",
					",sum(f.systemsellrate) as systemsellrate\r\n",
					",sum(f.totalsellrate) as totalsellrate\r\n",
					",sum(f.totalbuyrate) as totalbuyrate\r\n",
					"\r\n",
					"FROM publicfinancedata f \r\n",
					"LEFT JOIN publicbooking b on b.id = f.bookingid\r\n",
					"GROUP BY b.tripid\r\n",
					"\"\"\")\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ssttpublicfinancedata_tmp.createOrReplaceTempView(\"ssttpublicfinancedata_tmp\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"ssttrip = spark.sql(\"\"\"\r\n",
					"SELECT \r\n",
					"    t.id as tms_trip_id\r\n",
					"    ,t.driverid as tms_trip_driverid\r\n",
					"    ,t.vehicleid as tms_trip_vehicleid\r\n",
					"    ,t.trailerid as tms_trip_trailerid\r\n",
					"    ,t.sectrailerid as tms_trip_sectrailerid\r\n",
					"    ,t.status as tms_trip_status\r\n",
					"    ,t.routeid as tms_trip_routeid\r\n",
					"    ,t.opsrouteid as tms_trip_opsrouteid\r\n",
					"    ,t.startfromaddress as tms_trip_startfromaddress\r\n",
					"    ,t.startfromlat as tms_trip_startfromlat\r\n",
					"    ,t.startfromlng as tms_trip_startfromlng\r\n",
					"    ,to_timestamp(t.dispatchdate) as tms_trip_dispatchdate\r\n",
					"    ,t.stopaddress as tms_trip_stopaddress\r\n",
					"    ,t.stoplat as tms_trip_stoplat\r\n",
					"    ,t.stoplng as tms_trip_stoplng\r\n",
					"    ,to_timestamp(t.insdate) as tms_trip_insdate\r\n",
					"    ,to_timestamp(t.moddate) as tms_trip_moddate\r\n",
					"    ,t.insby as tms_trip_insby\r\n",
					"    ,t.onrouteid as tms_trip_onrouteid\r\n",
					"    ,t.uuid as tms_trip_uuid\r\n",
					"    ,t.insbyuser as tms_trip_insbyuser\r\n",
					"    ,t.thirdpartyid as tms_trip_thirdpartyid\r\n",
					"    ,t.timehash as tms_trip_timehash\r\n",
					"    ,t.onroutestatus as tms_trip_onroutestatus\r\n",
					"    ,to_timestamp(t.lastupdate) as tms_trip_lastupdate\r\n",
					"    ,t.lastlng as tms_trip_lastlng\r\n",
					"    ,t.lastlat as tms_trip_lastlat\r\n",
					"    ,t.controllerid as tms_trip_controllerid\r\n",
					"    ,t.trackstatus as tms_trip_trackstatus\r\n",
					"    ,t.lastrackid as tms_trip_lastrackid\r\n",
					"    ,t.customer as tms_trip_customer\r\n",
					"    ,t.bookings as tms_trip_bookings\r\n",
					"    ,t.controller as tms_trip_controller\r\n",
					"    ,t.transporter as tms_trip_transporter\r\n",
					"    ,t.legacyid as tms_trip_legacyid\r\n",
					"    ,t.originatedfrom as tms_trip_originatedfrom\r\n",
					"    ,t.local as tms_trip_local\r\n",
					"    ,to_timestamp(t.startdate) as tms_trip_startdate\r\n",
					"    ,to_timestamp(t.enddate) as tms_trip_enddate\r\n",
					"    ,to_timestamp(t.actualdeliverydate) as tms_trip_actualdeliverydate\r\n",
					"    ,t.note as tms_trip_note\r\n",
					"    ,to_timestamp(t.deliverydate) as tms_trip_deliverydate\r\n",
					"    ,t.internalexternal as tms_trip_internalexternal\r\n",
					"    ,t.pickupstartaddress as tms_trip_pickupstartaddress\r\n",
					"    ,d.id as orv_dispatch_id\r\n",
					"    ,d.lmsid as orv_dispatch_lmsid\r\n",
					"    ,d.vid as orv_dispatch_vid\r\n",
					"    ,d.did as orv_dispatch_did\r\n",
					"    ,d.status as orv_dispatch_status\r\n",
					"    ,to_timestamp(d.startdate) as orv_dispatch_startdate\r\n",
					"    ,to_timestamp(d.stopdate) as orv_dispatch_stopdate\r\n",
					"    ,d.vehicletype as orv_dispatch_vehicletype\r\n",
					"    ,d.uid as orv_dispatch_uid\r\n",
					"    ,to_timestamp(d.estdepdate) as orv_dispatch_estdepdate\r\n",
					"    ,d.trailer as orv_dispatch_trailer\r\n",
					"    ,d.trailer2 as orv_dispatch_trailer2\r\n",
					"    ,d.fromlocid as orv_dispatch_fromlocid\r\n",
					"    ,d.tolocid as orv_dispatch_tolocid\r\n",
					"    ,d.site as orv_dispatch_site\r\n",
					"    ,to_timestamp(d.lastupdate) as orv_dispatch_lastupdate\r\n",
					"    ,d.etastatus as orv_dispatch_etastatus\r\n",
					"    ,d.startinglat as orv_dispatch_startinglat\r\n",
					"    ,d.startinglng as orv_dispatch_startinglng\r\n",
					"    ,d.endinglat as orv_dispatch_endinglat\r\n",
					"    ,d.endinglng as orv_dispatch_endinglng\r\n",
					"    ,d.startingfrom as orv_dispatch_startingfrom\r\n",
					"    ,d.goingto as orv_dispatch_goingto\r\n",
					"    ,d.importissue as orv_dispatch_importissue\r\n",
					"    ,to_timestamp(d.insdate) as orv_dispatch_insdate\r\n",
					"    ,to_timestamp(d.estarrdate) as orv_dispatch_estarrdate\r\n",
					"    ,d.duration as orv_dispatch_duration\r\n",
					"    ,d.distance as orv_dispatch_distance\r\n",
					"    ,d.cost as orv_dispatch_cost\r\n",
					"    ,d.stoplat as orv_dispatch_stoplat\r\n",
					"    ,d.stoplng as orv_dispatch_stoplng\r\n",
					"    ,d.stopreason as orv_dispatch_stopreason\r\n",
					"    ,d.startodo as orv_dispatch_startodo\r\n",
					"    ,d.stopodo as orv_dispatch_stopodo\r\n",
					"    ,d.expduration as orv_dispatch_expduration\r\n",
					"    ,d.expdistance as orv_dispatch_expdistance\r\n",
					"    ,d.expcost as orv_dispatch_expcost\r\n",
					"    ,d.collectionid as orv_dispatch_collectionid\r\n",
					"    ,d.crew as orv_dispatch_crew\r\n",
					"    ,d.crewnames as orv_dispatch_crewnames\r\n",
					"    ,d.bocloseuid as orv_dispatch_bocloseuid\r\n",
					"    ,d.routing as orv_dispatch_routing\r\n",
					"    ,d.swapct as orv_dispatch_swapct\r\n",
					"    ,d.debriefed as orv_dispatch_debriefed\r\n",
					"    ,d.debriefnotes as orv_dispatch_debriefnotes\r\n",
					"    ,d.bopin as orv_dispatch_bopin\r\n",
					"    ,d.cpicost as orv_dispatch_cpicost\r\n",
					"    ,d.labourcost as orv_dispatch_labourcost\r\n",
					"    ,d.maintcost as orv_dispatch_maintcost\r\n",
					"    ,d.inscost as orv_dispatch_inscost\r\n",
					"    ,d.tollcost as orv_dispatch_tollcost\r\n",
					"    ,d.fuelcost as orv_dispatch_fuelcost\r\n",
					"    ,d.internal as orv_dispatch_internal\r\n",
					"    ,d.childids as orv_dispatch_childids\r\n",
					"    ,d.guid as orv_dispatch_guid\r\n",
					"    ,d.timedefinite as orv_dispatch_timedefinite\r\n",
					"    ,d.orvcode as orv_dispatch_orvcode\r\n",
					"    ,to_timestamp(d.tsstopdepoenter) as orv_dispatch_tsstopdepoenter\r\n",
					"    ,to_timestamp(d.tsstartdepoexit) as orv_dispatch_tsstartdepoexit\r\n",
					"    ,d.reroutect as orv_dispatch_reroutect\r\n",
					"    ,to_timestamp(d.actualarrdate) as orv_dispatch_actualarrdate\r\n",
					"    ,d.physicalstartlat as orv_dispatch_physicalstartlat\r\n",
					"    ,d.physicalstartlng as orv_dispatch_physicalstartlng\r\n",
					"    ,to_timestamp(d.tsstartdepoexitapp) as orv_dispatch_tsstartdepoexitapp\r\n",
					"    ,to_timestamp(d.tsstopdepoenterapp) as orv_dispatch_tsstopdepoenterapp\r\n",
					"    ,to_timestamp(d.uncanceldate) as orv_dispatch_uncanceldate\r\n",
					"    ,d.uncancelusername as orv_dispatch_uncancelusername\r\n",
					"    ,d.lmsdebrifed as orv_dispatch_lmsdebrifed\r\n",
					"    ,d.reviseddebrief as orv_dispatch_reviseddebrief\r\n",
					"    ,d.lhtransporter as orv_dispatch_lhtransporter\r\n",
					"    ,d.triptype as orv_dispatch_triptype\r\n",
					"    ,d.startreason as orv_dispatch_startreason\r\n",
					"    ,d.route as orv_dispatch_route\r\n",
					"    ,d.tmstraileridentify as orv_dispatch_tmstraileridentify\r\n",
					"    ,d.tmstrailer2identify as orv_dispatch_tmstrailer2identify\r\n",
					"    ,d.tmscontroller as orv_dispatch_tmscontroller\r\n",
					"    ,d.routekey as orv_dispatch_routekey\r\n",
					"    ,d.courierid as orv_dispatch_courierid\r\n",
					"    ,to_timestamp(d.originalstartdate) as orv_dispatch_originalstartdate\r\n",
					"    ,to_timestamp(d.originalextarrival) as orv_dispatch_originalextarrival\r\n",
					"    ,d.recomputeoriginals as orv_dispatch_recomputeoriginals\r\n",
					"    ,d.originalextdistance as orv_dispatch_originalextdistance\r\n",
					"    ,d.originalextduration as orv_dispatch_originalextduration\r\n",
					"    ,to_timestamp(d.moddate) as orv_dispatch_moddate\r\n",
					"    ,d.tmsmode as orv_dispatch_tmsmode\r\n",
					"    ,d.driversignature as orv_dispatch_driversignature\r\n",
					"    ,v.id as orv_vehicle_id\r\n",
					"    ,v.fleetcode as orv_vehicle_fleetcode\r\n",
					"    ,v.lmsid as orv_vehicle_lmsid\r\n",
					"    ,v1.id as orv_vehicle_trailer1id\r\n",
					"    ,v1.fleetcode as orv_vehicle_trailer1fleetcode\r\n",
					"    ,v1.lmsid as orv_vehicle_trailer1lmsid\r\n",
					"    ,v2.id as orv_vehicle_trailer2id\r\n",
					"    ,v2.fleetcode as orv_vehicle_trailer2fleetcode\r\n",
					"    ,v2.lmsid as orv_vehicle_trailer2lmsid\r\n",
					"    ,lv.id as lms_vehicle_id\r\n",
					"    ,lv.uid as lms_vehicle_uid\r\n",
					"    ,lv1.id as lms_vehicle_trailer1id\r\n",
					"    ,lv1.uid as lms_vehicle_trailer1uid\r\n",
					"    ,lv2.id as lms_vehicle_trailer2id\r\n",
					"    ,lv2.uid as lms_vehicle_trailer2uid\r\n",
					"    ,u.id as orv_orvuser_id\r\n",
					"    ,u.username as orv_orvuser_username\r\n",
					"    ,u.fname as orv_orvuser_fname\r\n",
					"    ,u.lname as orv_orvuser_lname\r\n",
					"    ,u.empcode as orv_orvuser_empcode\r\n",
					"    ,u.aka as orv_orvuser_aka\r\n",
					"    ,u.gender as orv_orvuser_gender\r\n",
					"    ,u.cellno as orv_orvuser_cellno\r\n",
					"    ,u.rsaid as orv_orvuser_rsaid\r\n",
					"    ,u.passportno as orv_orvuser_passportno\r\n",
					"    ,u.idpassportno as orv_orvuser_idpassportno\r\n",
					"    ,u.nationality as orv_orvuser_nationality\r\n",
					"    ,u.birthcountry as orv_orvuser_birthcountry\r\n",
					"    ,to_timestamp(u.engageddate) as orv_orvuser_engageddate\r\n",
					"    ,to_timestamp(u.joineddate) as orv_orvuser_joineddate\r\n",
					"    ,to_timestamp(u.termindate) as orv_orvuser_termindate\r\n",
					"    ,u.status as orv_orvuser_status\r\n",
					"    ,u.depot as orv_orvuser_depot\r\n",
					"    ,u.jobcategory as orv_orvuser_jobcategory\r\n",
					"    ,u.jobtitle as orv_orvuser_jobtitle\r\n",
					"    ,u.payroll as orv_orvuser_payroll\r\n",
					"    ,u.annualsalary as orv_orvuser_annualsalary\r\n",
					"    ,to_timestamp(u.insdate) as orv_orvuser_insdate\r\n",
					"    ,vb.id as md_vehiclebasic_id\r\n",
					"    ,vb.uid as md_vehiclebasic_uid\r\n",
					"    ,vb.vehicletype as md_vehiclebasic_vehicletype\r\n",
					"    ,vb.internalexternal as md_vehiclebasic_internalexternal\r\n",
					"    ,vb.activeflag as md_vehiclebasic_activeflag\r\n",
					"    ,vb.vehiclestatus as md_vehiclebasic_vehiclestatus\r\n",
					"    ,vb.chassisnumber as md_vehiclebasic_chassisnumber\r\n",
					"    ,vb.depot as md_vehiclebasic_depot\r\n",
					"    ,vb.enginenumber as md_vehiclebasic_enginenumber\r\n",
					"    ,vb.fleetcode as md_vehiclebasic_fleetcode\r\n",
					"    ,vb.fueltype as md_vehiclebasic_fueltype\r\n",
					"    ,vb.registrationnumber as md_vehiclebasic_registrationnumber\r\n",
					"    ,vb.vehicleapplication as md_vehiclebasic_vehicleapplication\r\n",
					"    ,vb.vehiclebodymake as md_vehiclebasic_vehiclebodymake\r\n",
					"    ,vb.vehiclecolour as md_vehiclebasic_vehiclecolour\r\n",
					"    ,vb.vehiclemake as md_vehiclebasic_vehiclemake\r\n",
					"    ,vb.vehiclemodel as md_vehiclebasic_vehiclemodel\r\n",
					"    ,vb.vehicleseries as md_vehiclebasic_vehicleseries\r\n",
					"    ,vb.year as md_vehiclebasic_year\r\n",
					"    ,vb.vehicleownerid as md_vehiclebasic_vehicleownerid\r\n",
					"    ,vb.vehicleowner as md_vehiclebasic_vehicleowner\r\n",
					"    ,vb.staffvehicleflag as md_vehiclebasic_staffvehicleflag\r\n",
					"    ,vb.vehicletrailersize as md_vehiclebasic_vehicletrailersize\r\n",
					"    ,vb.vehicletrailertype as md_vehiclebasic_vehicletrailertype\r\n",
					"    ,vb.vehicleetollclass as md_vehiclebasic_vehicleetollclass\r\n",
					"    ,vb.brn as md_vehiclebasic_brn\r\n",
					"    ,vb.brnnumber as md_vehiclebasic_brnnumber\r\n",
					"    ,vb.vehicleregisterno as md_vehiclebasic_vehicleregisterno\r\n",
					"    ,to_timestamp(vb.insdate) as md_vehiclebasic_insdate\r\n",
					"    ,vb.insby as md_vehiclebasic_insby\r\n",
					"    ,vb.islinehaulvehicle as md_vehiclebasic_islinehaulvehicle\r\n",
					"    ,vb.internalheight as md_vehiclebasic_internalheight\r\n",
					"    ,vb.internallength as md_vehiclebasic_internallength\r\n",
					"    ,vb.internalvolume as md_vehiclebasic_internalvolume\r\n",
					"    ,vb.internalwidth as md_vehiclebasic_internalwidth\r\n",
					"    ,to_timestamp(vb.moddate) as md_vehiclebasic_moddate\r\n",
					"    ,vb.trailerflag as md_vehiclebasic_trailerflag\r\n",
					"    ,vb.workflowstatus as md_vehiclebasic_workflowstatus\r\n",
					"    ,to_timestamp(vb.approveddate) as md_vehiclebasic_approveddate\r\n",
					"    ,vb1.id as md_vehiclebasic_trailer1id\r\n",
					"    ,vb1.uid as md_vehiclebasic_trailer1uid\r\n",
					"    ,vb1.vehicletype as md_vehiclebasic_trailer1vehicletype\r\n",
					"    ,vb1.internalexternal as md_vehiclebasic_trailer1internalexternal\r\n",
					"    ,vb1.activeflag as md_vehiclebasic_trailer1activeflag\r\n",
					"    ,vb1.vehiclestatus as md_vehiclebasic_trailer1vehiclestatus\r\n",
					"    ,vb1.chassisnumber as md_vehiclebasic_trailer1chassisnumber\r\n",
					"    ,vb1.depot as md_vehiclebasic_trailer1depot\r\n",
					"    ,vb1.enginenumber as md_vehiclebasic_trailer1enginenumber\r\n",
					"    ,vb1.fleetcode as md_vehiclebasic_trailer1fleetcode\r\n",
					"    ,vb1.fueltype as md_vehiclebasic_trailer1fueltype\r\n",
					"    ,vb1.registrationnumber as md_vehiclebasic_trailer1registrationnumber\r\n",
					"    ,vb1.vehicleapplication as md_vehiclebasic_trailer1vehicleapplication\r\n",
					"    ,vb1.vehiclebodymake as md_vehiclebasic_trailer1vehiclebodymake\r\n",
					"    ,vb1.vehiclecolour as md_vehiclebasic_trailer1vehiclecolour\r\n",
					"    ,vb1.vehiclemake as md_vehiclebasic_trailer1vehiclemake\r\n",
					"    ,vb1.vehiclemodel as md_vehiclebasic_trailer1vehiclemodel\r\n",
					"    ,vb1.vehicleseries as md_vehiclebasic_trailer1vehicleseries\r\n",
					"    ,vb1.year as md_vehiclebasic_trailer1year\r\n",
					"    ,vb1.vehicleownerid as md_vehiclebasic_trailer1vehicleownerid\r\n",
					"    ,vb1.vehicleowner as md_vehiclebasic_trailer1vehicleowner\r\n",
					"    ,vb1.staffvehicleflag as md_vehiclebasic_trailer1staffvehicleflag\r\n",
					"    ,vb1.vehicletrailersize as md_vehiclebasic_trailer1vehicletrailersize\r\n",
					"    ,vb1.vehicletrailertype as md_vehiclebasic_trailer1vehicletrailertype\r\n",
					"    ,vb1.vehicleetollclass as md_vehiclebasic_trailer1vehicleetollclass\r\n",
					"    ,vb1.brn as md_vehiclebasic_trailer1brn\r\n",
					"    ,vb1.brnnumber as md_vehiclebasic_trailer1brnnumber\r\n",
					"    ,vb1.vehicleregisterno as md_vehiclebasic_trailer1vehicleregisterno\r\n",
					"    ,to_timestamp(vb1.insdate) as md_vehiclebasic_trailer1insdate\r\n",
					"    ,vb1.insby as md_vehiclebasic_trailer1insby\r\n",
					"    ,vb1.islinehaulvehicle as md_vehiclebasic_trailer1islinehaulvehicle\r\n",
					"    ,vb1.internalheight as md_vehiclebasic_trailer1internalheight\r\n",
					"    ,vb1.internallength as md_vehiclebasic_trailer1internallength\r\n",
					"    ,vb1.internalvolume as md_vehiclebasic_trailer1internalvolume\r\n",
					"    ,vb1.internalwidth as md_vehiclebasic_trailer1internalwidth\r\n",
					"    ,to_timestamp(vb1.moddate) as md_vehiclebasic_trailer1moddate\r\n",
					"    ,vb1.trailerflag as md_vehiclebasic_trailer1trailerflag\r\n",
					"    ,vb1.workflowstatus as md_vehiclebasic_trailer1workflowstatus\r\n",
					"    ,to_timestamp(vb1.approveddate) as md_vehiclebasic_trailer1approveddate\r\n",
					"    ,vb2.id as md_vehiclebasic_trailer2id\r\n",
					"    ,vb2.uid as md_vehiclebasic_trailer2uid\r\n",
					"    ,vb2.vehicletype as md_vehiclebasic_trailer2vehicletype\r\n",
					"    ,vb2.internalexternal as md_vehiclebasic_trailer2internalexternal\r\n",
					"    ,vb2.activeflag as md_vehiclebasic_trailer2activeflag\r\n",
					"    ,vb2.vehiclestatus as md_vehiclebasic_trailer2vehiclestatus\r\n",
					"    ,vb2.chassisnumber as md_vehiclebasic_trailer2chassisnumber\r\n",
					"    ,vb2.depot as md_vehiclebasic_trailer2depot\r\n",
					"    ,vb2.enginenumber as md_vehiclebasic_trailer2enginenumber\r\n",
					"    ,vb2.fleetcode as md_vehiclebasic_trailer2fleetcode\r\n",
					"    ,vb2.fueltype as md_vehiclebasic_trailer2fueltype\r\n",
					"    ,vb2.registrationnumber as md_vehiclebasic_trailer2registrationnumber\r\n",
					"    ,vb2.vehicleapplication as md_vehiclebasic_trailer2vehicleapplication\r\n",
					"    ,vb2.vehiclebodymake as md_vehiclebasic_trailer2vehiclebodymake\r\n",
					"    ,vb2.vehiclecolour as md_vehiclebasic_trailer2vehiclecolour\r\n",
					"    ,vb2.vehiclemake as md_vehiclebasic_trailer2vehiclemake\r\n",
					"    ,vb2.vehiclemodel as md_vehiclebasic_trailer2vehiclemodel\r\n",
					"    ,vb2.vehicleseries as md_vehiclebasic_trailer2vehicleseries\r\n",
					"    ,vb2.year as md_vehiclebasic_trailer2year\r\n",
					"    ,vb2.vehicleownerid as md_vehiclebasic_trailer2vehicleownerid\r\n",
					"    ,vb2.vehicleowner as md_vehiclebasic_trailer2vehicleowner\r\n",
					"    ,vb2.staffvehicleflag as md_vehiclebasic_trailer2staffvehicleflag\r\n",
					"    ,vb2.vehicletrailersize as md_vehiclebasic_trailer2vehicletrailersize\r\n",
					"    ,vb2.vehicletrailertype as md_vehiclebasic_trailer2vehicletrailertype\r\n",
					"    ,vb2.vehicleetollclass as md_vehiclebasic_trailer2vehicleetollclass\r\n",
					"    ,vb2.brn as md_vehiclebasic_trailer2brn\r\n",
					"    ,vb2.brnnumber as md_vehiclebasic_trailer2brnnumber\r\n",
					"    ,vb2.vehicleregisterno as md_vehiclebasic_trailer2vehicleregisterno\r\n",
					"    ,to_timestamp(vb2.insdate) as md_vehiclebasic_trailer2insdate\r\n",
					"    ,vb2.insby as md_vehiclebasic_trailer2insby\r\n",
					"    ,vb2.islinehaulvehicle as md_vehiclebasic_trailer2islinehaulvehicle\r\n",
					"    ,vb2.internalheight as md_vehiclebasic_trailer2internalheight\r\n",
					"    ,vb2.internallength as md_vehiclebasic_trailer2internallength\r\n",
					"    ,vb2.internalvolume as md_vehiclebasic_trailer2internalvolume\r\n",
					"    ,vb2.internalwidth as md_vehiclebasic_trailer2internalwidth\r\n",
					"    ,to_timestamp(vb2.moddate) as md_vehiclebasic_trailer2moddate\r\n",
					"    ,vb2.trailerflag as md_vehiclebasic_trailer2trailerflag\r\n",
					"    ,vb2.workflowstatus as md_vehiclebasic_trailer2workflowstatus\r\n",
					"    ,to_timestamp(vb2.approveddate) as md_vehiclebasic_trailer2approveddate\r\n",
					"    ,dpi.id as tms_driverpayitem_id\r\n",
					"    ,dpi.driverid as tms_driverpayitem_driverid\r\n",
					"    ,dpi.tripid as tms_driverpayitem_tripid\r\n",
					"    ,dpi.triprate as tms_driverpayitem_triprate\r\n",
					"    ,dpi.mealrate as tms_driverpayitem_mealrate\r\n",
					"    ,dpi.sleepoverrate as tms_driverpayitem_sleepoverrate\r\n",
					"    ,dpi.airtimerate as tms_driverpayitem_airtimerate\r\n",
					"    ,dpi.linkrate as tms_driverpayitem_linkrate\r\n",
					"    ,dpi.totalrate as tms_driverpayitem_totalrate\r\n",
					"    ,dpi.routeid as tms_driverpayitem_routeid\r\n",
					"    ,dpi.routename as tms_driverpayitem_routename\r\n",
					"    ,to_timestamp(dpi.insdate) as tms_driverpayitem_insdate\r\n",
					"    ,to_timestamp(dpi.moddate) as tms_driverpayitem_moddate\r\n",
					"    ,dpi.horse as tms_driverpayitem_horse\r\n",
					"    ,dpi.trailers as tms_driverpayitem_trailers\r\n",
					"    ,dpi.linkused as tms_driverpayitem_linkused\r\n",
					"    ,dpi.manualadjustment as tms_driverpayitem_manualadjustment\r\n",
					"    ,dpi.editby as tms_driverpayitem_editby\r\n",
					"    ,dpi.drivername as tms_driverpayitem_drivername\r\n",
					"    ,to_timestamp(dpi.dispatchdate) as tms_driverpayitem_dispatchdate\r\n",
					"    ,dpi.bookings as tms_driverpayitem_bookings\r\n",
					"    ,dpi.employeecode as tms_driverpayitem_employeecode\r\n",
					"    ,dpi.originatedfrom as tms_driverpayitem_originatedfrom\r\n",
					"    ,dpi.reportid as tms_driverpayitem_reportid\r\n",
					"    ,f.peaksurchagrebuy as tms_financedata_aggrpeaksurchagrebuy\r\n",
					"    ,f.peaksurchagresell as tms_financedata_aggrpeaksurchagresell\r\n",
					"    ,f.manualentryroadhaulsell as tms_financedata_aggrmanualentryroadhaulsell\r\n",
					"    ,f.manualentryahocsell as tms_financedata_aggrmanualentryahocsell\r\n",
					"    ,f.systemfuellevy as tms_financedata_aggrsystemfuellevy\r\n",
					"    ,f.systemratefuellevy as tms_financedata_aggrsystemratefuellevy\r\n",
					"    ,f.systemratefuelexlevy as tms_financedata_aggrsystemratefuelexlevy\r\n",
					"    ,f.systemratefuelinclevy as tms_financedata_aggrsystemratefuelinclevy\r\n",
					"    ,f.systemsellrate as tms_financedata_aggrsystemsellrate\r\n",
					"    ,f.totalsellrate as tms_financedata_aggrtotalsellrate\r\n",
					"    ,f.totalbuyrate as tms_financedata_aggrtotalbuyrate\r\n",
					"\r\n",
					"FROM publictrip t\r\n",
					"LEFT JOIN publicdispatch d on d.lmsid = t.id and d.vehicletype = 2\r\n",
					"LEFT JOIN publicvehicle v on v.id = d.vid\r\n",
					"LEFT JOIN publicvehicle v1 on v1.id = d.trailer\r\n",
					"LEFT JOIN publicvehicle v2 on v2.id = d.trailer2\r\n",
					"LEFT JOIN dbovehicle lv on lv.id = v.lmsid \r\n",
					"LEFT JOIN dbovehicle lv1 on lv1.id = v1.lmsid \r\n",
					"LEFT JOIN dbovehicle lv2 on lv2.id = v2.lmsid \r\n",
					"LEFT JOIN publicorvuser u on u.id = d.did\r\n",
					"LEFT JOIN dbovehiclebasic vb on vb.uid = lv.uid\r\n",
					"LEFT JOIN dbovehiclebasic vb1 on vb1.uid = lv1.uid\r\n",
					"LEFT JOIN dbovehiclebasic vb2 on vb2.uid = lv2.uid\r\n",
					"LEFT JOIN publicdriverpayitem dpi on dpi.tripid = t.id\r\n",
					"LEFT JOIN ssttpublicfinancedata_tmp f on f.tripid = t.id \r\n",
					"\"\"\")\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ssttrip.createOrReplaceTempView(\"ssttrip\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#ssttrip.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Semi Structured Data/OPS/ssttrip.parquet', mode = \"overwrite\")"
				],
				"execution_count": 6
			}
		]
	}
}