{
	"name": "1_MonthTotals",
	"properties": {
		"folder": {
			"name": "DEV/Cost To Serve Notebooks DEV/CTS Run"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c0727409-5df4-4486-9c2c-2d107bb01ed5"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# WRITE abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/CTS_Results/\r\n",
					"\r\n",
					"from pyspark.sql import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"MonthToRun = '2023-02-28'\r\n",
					"\r\n",
					"#STOPS\r\n",
					"#parcel_track = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet/\", format='parquet')\r\n",
					"parcel = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet/\", format='parquet')\r\n",
					"waybill = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet/\", format='parquet')\r\n",
					"#location = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet/\", format='parquet')\r\n",
					"dispatch_segment = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdispatchsegment.parquet/\", format='parquet')\r\n",
					"del_pickup_cust = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet/\", format='parquet')\r\n",
					"load_parent = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet/\", format='parquet')\r\n",
					"\r\n",
					"#STSAP\r\n",
					"#dim_account = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_Account_Expose.parquet/\", format='parquet')\r\n",
					"#dim_dates = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_DATES.parquet/\", format='parquet')\r\n",
					"#dim_group = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_GROUP_Expose.parquet/\", format='parquet')\r\n",
					"#trans_summary = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/sttransactionssummary.parquet/\", format='parquet')\r\n",
					"\r\n",
					"#CTS Inputs\r\n",
					"dim_skippedreasoninclude = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/Structured/Dimensions/DIM_SkippedReasonIncludeExclude.parquet/\", format='parquet')\r\n",
					"\r\n",
					"\r\n",
					"#STOPS\r\n",
					"#parcel_track.createOrReplaceTempView(\"parcel_track\")\r\n",
					"parcel.createOrReplaceTempView(\"parcel\")\r\n",
					"waybill.createOrReplaceTempView(\"waybill\")\r\n",
					"#location.createOrReplaceTempView(\"location\")\r\n",
					"dispatch_segment.createOrReplaceTempView(\"dispatch_segment\")\r\n",
					"del_pickup_cust.createOrReplaceTempView(\"del_pickup_cust\")\r\n",
					"load_parent.createOrReplaceTempView(\"load_parent\")\r\n",
					"\r\n",
					"#STSAP\r\n",
					"#dim_account.createOrReplaceTempView(\"dim_account\")\r\n",
					"#dim_dates.createOrReplaceTempView(\"dim_dates\")\r\n",
					"#dim_group.createOrReplaceTempView(\"dim_group\")\r\n",
					"#trans_summary.createOrReplaceTempView(\"trans_summary\")\r\n",
					"\r\n",
					"#CTS Inputs\r\n",
					"dim_skippedreasoninclude.createOrReplaceTempView(\"dim_skippedreasoninclude\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"f_drops = spark.sql(\"\"\"\r\n",
					"with drops as (\r\n",
					"SELECT  orv_dispatchsegment_id\r\n",
					"      ,orv_dispatchsegment_fromdelid\r\n",
					"      ,orv_dispatchsegment_todelid\r\n",
					"\t  ,orv_dispatchsegment_distance\r\n",
					"      ,orv_dispatchsegment_duration\r\n",
					"      ,orv_dispatchsegment_did\r\n",
					"      ,orv_dispatchsegment_tollcost\r\n",
					"      ,orv_dispatchsegment_fuelcost\r\n",
					"      ,orv_dispatchsegment_inscost\r\n",
					"      ,orv_dispatchsegment_labourcost\r\n",
					"      ,orv_dispatchsegment_maintcost\r\n",
					"      ,orv_dispatchsegment_cpicost\r\n",
					"      ,orv_dispatchsegment_vehicleclass\r\n",
					"      ,orv_dispatchsegment_fromlat\r\n",
					"      ,orv_dispatchsegment_fromlng\r\n",
					"      ,orv_dispatchsegment_tolat\r\n",
					"      ,orv_dispatchsegment_tolng\r\n",
					"      ,orv_dispatchsegment_departuredate\r\n",
					"      ,orv_dispatchsegment_arrivaldate\r\n",
					"      ,orv_dispatchsegment_debriefeddate\r\n",
					"      ,orv_dispatchsegment_optimized\r\n",
					"      ,orv_dispatchsegment_segmentorder\r\n",
					"      ,orv_dispatchsegment_customized\r\n",
					"      ,orv_dispatchsegment_parcelct\r\n",
					"\t  ,LAG(orv_dispatchsegment_arrivaldate,1) OVER (PARTITION BY orv_dispatchsegment_did ORDER BY orv_dispatchsegment_arrivaldate) AS DROP_START\r\n",
					"\t  ,ROW_NUMBER() OVER (PARTITION BY  orv_dispatchsegment_did ORDER BY orv_dispatchsegment_departuredate) AS seq\r\n",
					"  FROM (SELECT *,ROW_NUMBER() OVER (PARTITION BY orv_dispatchsegment_did,COALESCE(orv_dispatchsegment_fromdelid,'') ORDER BY orv_dispatchsegment_customized desc) AS RN FROM dispatch_segment\r\n",
					"\t\t) dseg\r\n",
					")\r\n",
					"\r\n",
					"select * from drops\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"display(f_drops.limit(10))"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"f_drops = spark.sql(\"\"\"\r\n",
					"\r\n",
					"with drops as (\r\n",
					"SELECT  orv_dispatchsegment_id\r\n",
					"\t  ,LP.lms_loadparent_parentloadid\r\n",
					"\t  ,LP.orv_dispatch_site\r\n",
					"\t  ,LP.orv_dispatch_startinglat\r\n",
					"\t  ,LP.orv_dispatch_startinglng\r\n",
					"\t  ,LP.orv_dispatch_distance\r\n",
					"\t  ,LP.orv_dispatch_duration\r\n",
					"\t  ,LP.orv_dispatch_estdepdate\r\n",
					"\t  ,LP.orv_dispatch_estarrdate\r\n",
					"      ,orv_dispatchsegment_fromdelid\r\n",
					"\t  ,fc.lms_customer_id as lms_from_customer_id\r\n",
					"\t  ,fc.orv_customer_name as orv_from_customer_name\r\n",
					"      ,orv_dispatchsegment_todelid\r\n",
					"\t  ,tc.lms_customer_id as lms_to_customer_id\r\n",
					"      ,tc.orv_customer_name as orv_to_customer_name\r\n",
					"\t  ,CAST(6371 as float) * 2 * ASIN(SQRT(POWER(SIN(RADIANS(LP.orv_dispatch_startinglat - dseg.orv_dispatchsegment_tolat) / 2), 2) + COS(RADIANS(dseg.orv_dispatchsegment_tolat)) * COS(RADIANS(LP.orv_dispatch_startinglat)) * POWER(SIN(RADIANS(LP.orv_dispatch_startinglng - dseg.orv_dispatchsegment_tolng) / 2), 2))) AS StemDistance\r\n",
					"\t  ,tc0.orv_delivery_status as tc_orv_delivery_status\r\n",
					"\t  ,tc0.lms_waybill_id as tc_lms_waybill_id\r\n",
					"\t  ,tc0.orv_delivery_skipreason as tc_orv_delivery_skipreason\r\n",
					"\t  ,orv_dispatchsegment_distance\r\n",
					"      ,orv_dispatchsegment_duration\r\n",
					"      ,orv_dispatchsegment_did\r\n",
					"      ,orv_dispatchsegment_tollcost\r\n",
					"      ,orv_dispatchsegment_fuelcost\r\n",
					"      ,orv_dispatchsegment_inscost\r\n",
					"      ,orv_dispatchsegment_labourcost\r\n",
					"      ,orv_dispatchsegment_maintcost\r\n",
					"      ,orv_dispatchsegment_cpicost\r\n",
					"      ,orv_dispatchsegment_vehicleclass\r\n",
					"      ,orv_dispatchsegment_fromlat\r\n",
					"      ,orv_dispatchsegment_fromlng\r\n",
					"      ,orv_dispatchsegment_tolat\r\n",
					"      ,orv_dispatchsegment_tolng\r\n",
					"      ,orv_dispatchsegment_departuredate\r\n",
					"      ,orv_dispatchsegment_arrivaldate\r\n",
					"      ,orv_dispatchsegment_debriefeddate\r\n",
					"      ,orv_dispatchsegment_optimized\r\n",
					"      ,orv_dispatchsegment_segmentorder\r\n",
					"      ,orv_dispatchsegment_customized\r\n",
					"      ,orv_dispatchsegment_parcelct\r\n",
					"\t  ,LP.orv_dispatch_vehicletype\r\n",
					"\t  ,LP.orv_dispatch_triptype\r\n",
					"\t  ,SRE.IncludeCosting\r\n",
					"      ,SRE.IncludeTheoretical\r\n",
					"\t  ,tc0.NUM_PARCELS\r\n",
					"\t  ,LAG(orv_dispatchsegment_arrivaldate,1) OVER (PARTITION BY orv_dispatchsegment_did ORDER BY orv_dispatchsegment_arrivaldate) AS DROP_START\r\n",
					"\t  ,ROW_NUMBER() OVER (PARTITION BY  orv_dispatchsegment_did ORDER BY orv_dispatchsegment_departuredate) AS seq\r\n",
					"  FROM (SELECT *,ROW_NUMBER() OVER (PARTITION BY orv_dispatchsegment_did,COALESCE(orv_dispatchsegment_fromdelid,'') ORDER BY orv_dispatchsegment_customized desc) AS RN FROM dispatch_segment\r\n",
					"\t\t--WHERE orv_dispatchsegment_did IN (545891,522846) --One normal & one skipped trip\r\n",
					"\t\t--WHERE orv_dispatchsegment_did IN (549595,551082,550607,550205)\r\n",
					"\t\t) dseg --Select the drop where customized = 1 otherwise use other drop value\r\n",
					"\tLEFT JOIN ( --get LMS customer ID from waybill table\r\n",
					"\t\t\tSELECT\r\n",
					"\t\torv_delivery_did\r\n",
					"\t\t,orv_delivery_id\r\n",
					"\t\t,MAX(lms_waybill_delivercustid) AS lms_waybill_delivercustid\r\n",
					"\t\t,MAX(orv_delivery_orderid) AS orv_delivery_orderid\r\n",
					"\t\t,MAX(orv_delivery_status) AS orv_delivery_status\r\n",
					"\t\t,MAX(lms_waybill_id) as lms_waybill_id\r\n",
					"\t\tFROM waybill\r\n",
					"\t\tGROUP BY orv_delivery_did\r\n",
					"\t\t,orv_delivery_id\r\n",
					"\t) fc0 ON dseg.orv_dispatchsegment_did = fc0.orv_delivery_did AND dseg.orv_dispatchsegment_fromdelid = fc0.orv_delivery_id\r\n",
					"\t\tLEFT JOIN ( --get LMS customer ID from waybill table\r\n",
					"\t\t\tSELECT\r\n",
					"\t\torv_delivery_did\r\n",
					"\t\t,orv_delivery_id\r\n",
					"\t\t,MAX(lms_waybill_delivercustid) AS lms_waybill_delivercustid\r\n",
					"\t\t,MAX(orv_delivery_orderid) AS orv_delivery_orderid\r\n",
					"\t\t,MAX(orv_delivery_status) AS orv_delivery_status\r\n",
					"\t\t,MAX(lms_waybill_id) as lms_waybill_id\r\n",
					"\t\t,MAX(orv_delivery_skipreason) as orv_delivery_skipreason\r\n",
					"\t\t,MAX(NUM_PARCELS) AS NUM_PARCELS\r\n",
					"\t\tFROM waybill R\r\n",
					"\t\tLEFT JOIN (\r\n",
					"\t\t\t\tSELECT\r\n",
					"\t\tlms_parcel_waybillid\r\n",
					"\t\t,COUNT(lms_parcel_id) AS NUM_PARCELS\r\n",
					"\t\tFROM parcel\r\n",
					"\t\tGROUP BY lms_parcel_waybillid\r\n",
					"\t\t) PC ON R.lms_waybill_id = PC.lms_parcel_waybillid\r\n",
					"\t\tGROUP BY orv_delivery_did\r\n",
					"\t\t,orv_delivery_id\r\n",
					"\t) tc0 ON dseg.orv_dispatchsegment_did = tc0.orv_delivery_did AND dseg.orv_dispatchsegment_todelid = tc0.orv_delivery_id\r\n",
					"\r\n",
					"  LEFT JOIN del_pickup_cust fc on fc0.lms_waybill_delivercustid = fc.lms_customer_id\r\n",
					"  LEFT JOIN del_pickup_cust tc on tc0.lms_waybill_delivercustid = tc.lms_customer_id\r\n",
					"  LEFT JOIN load_parent LP ON dseg.orv_dispatchsegment_did = LP.orv_dispatch_id\r\n",
					"  LEFT JOIN dim_skippedreasoninclude SRE ON tc0.orv_delivery_status = SRE.DispatchStatus AND COALESCE(tc0.orv_delivery_skipreason,'') = COALESCE(SRE.DeliveryReason,'')\r\n",
					" WHERE RN = 1\r\n",
					" AND last_day(LP.orv_dispatch_estdepdate) >= '\"\"\" + MonthToRun + \"\"\"'\r\n",
					" AND LP.orv_dispatch_startinglat <> 0\r\n",
					" AND LP.orv_dispatch_startinglng <> 0\r\n",
					" )\r\n",
					"\r\n",
					"\r\n",
					"SELECT\r\n",
					"orv_dispatch_estdepdate AS TRIP_START\r\n",
					",orv_dispatch_estarrdate as TRIP_END\r\n",
					",orv_dispatchsegment_id\r\n",
					",lms_loadparent_parentloadid\r\n",
					",orv_dispatchsegment_did\r\n",
					",orv_dispatch_site\r\n",
					",orv_dispatch_duration\r\n",
					"--,orv_dispatchsegment_fromdelid\r\n",
					"--,lms_from_customer_id\r\n",
					"--,orv_from_customer_name\r\n",
					",orv_dispatchsegment_todelid\r\n",
					",lms_to_customer_id\r\n",
					",orv_to_customer_name\r\n",
					",tc_orv_delivery_status\r\n",
					",tc_lms_waybill_id\r\n",
					",tc_orv_delivery_skipreason\r\n",
					",orv_dispatchsegment_vehicleclass\r\n",
					",orv_dispatch_vehicletype\r\n",
					",orv_dispatchsegment_segmentorder\r\n",
					",DROP_START\r\n",
					",orv_dispatchsegment_departuredate AS DROP_END\r\n",
					",StemDistance\r\n",
					",CalcStemPercent\r\n",
					",TripKMs\r\n",
					",TripHrs\r\n",
					",TripKMs * CalcStemPercent AS DROP_KMs\r\n",
					",DROP_TAT\r\n",
					",(TripHrs - SUM(DROP_TAT) OVER (PARTITION BY orv_dispatchsegment_did) )*CalcStemPercent AS DROP_DRIVE_HRS\r\n",
					",NUM_PARCELS\r\n",
					",orv_dispatchsegment_customized\r\n",
					",orv_dispatchsegment_optimized\r\n",
					",IncludeCosting\r\n",
					",IncludeTheoretical\r\n",
					",orv_dispatchsegment_tolat\r\n",
					",orv_dispatchsegment_tolng\r\n",
					"FROM (\r\n",
					"\t SELECT \r\n",
					"\t *\r\n",
					"\t,StemDistance as CalcStemDistance\r\n",
					"\t,CASE WHEN SUM(StemDistance) OVER (PARTITION BY lms_loadparent_parentloadid) = 0 THEN NULL ELSE StemDistance / SUM(StemDistance) OVER (PARTITION BY lms_loadparent_parentloadid) END as CalcStemPercent\r\n",
					"\t,CAST(orv_dispatch_distance as float) / 1000 as TripKMs\r\n",
					"\t,CAST(orv_dispatch_duration as float) /60/60 as TripHrs\r\n",
					"\t,orv_dispatch_estdepdate AS PLAN_TRIP_START --estdepdate\r\n",
					"\t,orv_dispatch_estarrdate AS PLAN_TRIP_END --orv_dispatch_estarrdate \r\n",
					"\t,CAST(unix_timestamp(LAG(orv_dispatchsegment_arrivaldate,1) OVER (PARTITION BY orv_dispatchsegment_did ORDER BY orv_dispatchsegment_arrivaldate)) - unix_timestamp(orv_dispatchsegment_departuredate) as float)/60/60 AS DROP_TAT\r\n",
					"\t,MAX(seq) OVER (PARTITION BY  orv_dispatchsegment_did) AS Max_Seq\r\n",
					"\t FROM drops\r\n",
					"\t WHERE orv_dispatchsegment_todelid <> orv_dispatchsegment_fromdelid\r\n",
					"\t --AND IncludeCosting = 1\r\n",
					"\t\t\r\n",
					") T0\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"display(f_drops.limit(10))"
				],
				"execution_count": 11
			}
		]
	}
}