{
	"name": "03_DIST_STParcel",
	"properties": {
		"description": "1.Need to add a field for \"finalparcelweight\" applying the customer Billing matrix principle",
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "f355fa54-fa3c-446c-a835-24533be02183"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
				"name": "PRDSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# print(Environment)\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# print(StorageAccountWrite)"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# #Create DataFrame for the sstparcelunion LMS Table\r\n",
					"# sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
					"# sstparcelunion.createOrReplaceTempView(\"sstparcelunion_init\")\r\n",
					"# #print(sstparcelunion.count())\r\n",
					"\r\n",
					"# #Create DataFrame for the dboorder LMS Table\r\n",
					"# dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
					"# dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
					"# #print(dboorder.count())\r\n",
					"\r\n",
					"# #Create DataFrame for the sstconsignmentunion LMS Table\r\n",
					"# sstconsignmentunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
					"# sstconsignmentunion.createOrReplaceTempView(\"sstconsignmentunion\")\r\n",
					"# #print(sstconsignmentunion.count())\r\n",
					"\r\n",
					"# #Create DataFrame for the dbowaybill LMS Table\r\n",
					"# dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
					"# dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
					"# #print(dbowaybill.count())\r\n",
					"\r\n",
					"# #Create DataFrame for the dboparceldetail LMS Table\r\n",
					"# dboparceldetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparceldetail.parquet', format='parquet')\r\n",
					"# dboparceldetail.createOrReplaceTempView(\"dboparceldetail\")\r\n",
					"# #print(dboparceldetail.count())\r\n",
					"\r\n",
					"# #Create DataFrame for the publicparcel LMS Table\r\n",
					"# publicparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicparcel.parquet', format='parquet')\r\n",
					"# publicparcel.createOrReplaceTempView(\"publicparcel\")\r\n",
					"# #print(publicparcel.count())\r\n",
					"\r\n",
					"# #Create DataFrame for the publicdelivery ORV Table\r\n",
					"# publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
					"# publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
					"# #print(publicdelivery.count())\r\n",
					"\r\n",
					"# #Create DataFrame for the stvsmparcel LMS Table\r\n",
					"# stvsmparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stvsmparcel.parquet', format='parquet')\r\n",
					"# stvsmparcel.createOrReplaceTempView(\"stvsmparcel\")\r\n",
					"# #print(stvsmparcel.count())\r\n",
					"\r\n",
					"# #Create DataFrame for the dboweekendholiday LMS Table\r\n",
					"# dboweekendholiday = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboweekendholiday.parquet', format='parquet')\r\n",
					"# dboweekendholiday.createOrReplaceTempView(\"dboweekendholiday\")\r\n",
					"# #print(dboweekendholiday.count())\r\n",
					"\r\n",
					"# #Create DataFrame for the dbocustacc LMS Table\r\n",
					"# dbocustacc = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustacc.parquet', format='parquet')\r\n",
					"# dbocustacc.createOrReplaceTempView(\"dbocustacc\")\r\n",
					"# #print(dbocustacc.count())\r\n",
					"\r\n",
					"# #Create DataFrame for the stdeliverypickupcustomer LMS Table\r\n",
					"# stdeliverypickupcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet', format='parquet')\r\n",
					"# stdeliverypickupcustomer.createOrReplaceTempView(\"stdeliverypickupcustomer\")\r\n",
					"# #print(stdeliverypickupcustomer.count())\r\n",
					"\r\n",
					"# #Create DataFrame for the stsroute LMS Table\r\n",
					"# stsroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Structured Data/OPS/stsroute.parquet', format='parquet')\r\n",
					"# stsroute.createOrReplaceTempView(\"stsroute\")\r\n",
					"# #print(stsroute.count())\r\n",
					"\r\n",
					"# #Create DataFrame for the stzone LMS Table\r\n",
					"# stzone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Structured Data/OPS/stzone.parquet', format='parquet')\r\n",
					"# stzone.createOrReplaceTempView(\"stzone\")\r\n",
					"# #print(stzone.count())\r\n",
					"\r\n",
					"# #Create DataFrame for the stlocation LMS Table\r\n",
					"# stlocation = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet', format='parquet')\r\n",
					"# stlocation.createOrReplaceTempView(\"stlocation\")\r\n",
					"# #print(stlocation.count())"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcel_tmp\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"    p.id \r\n",
					"    ,p.lmsid \r\n",
					"    ,p.did \r\n",
					"    ,to_timestamp(p.scandate) as orv_parcel_scandate\r\n",
					"    ,p.scanstatus as orv_parcel_scanstatus\r\n",
					"\t,p.scanmode as orv_parcel_scanmode\r\n",
					"\t,p.claimid as orv_parcel_claimid\r\n",
					"\t,p.courierid as orv_parcel_courierid\r\n",
					"    ,to_timestamp(p.moddate) as orv_parcel_moddate\r\n",
					"    ,d.waybillid\r\n",
					"\r\n",
					"FROM publicparcel p\r\n",
					"LEFT JOIN publicdelivery d ON d.did = p.id\r\n",
					"WHERE d.mode ='deliver' and D.skipreason != 'Fix wrong data manipulation by the company'"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# the where has been taken out of the where beforehand as does not need to be performed while joining\r\n",
					"sstparcelunion = spark.sql(\"select * from sstparcelunion WHERE coalesce(acceptanceDate, handoverdate) IS NOT NULL AND locid NOT IN (163,110,213,27)\").repartition(192)\r\n",
					"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcel_tmp2_init\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"    p.id as lms_parcel_id\r\n",
					"    ,p.OrderID as lms_parcel_orderid\r\n",
					"    ,p.ConsignID as lms_parcel_consignid\r\n",
					"    ,p.WaybillID as lms_parcel_waybillid\r\n",
					"    ,p.LocID as lms_parcel_locid\r\n",
					"    ,p.TotCharge as lms_parcel_totcharge\r\n",
					"    ,p.DIMMS as lms_parcel_dimms\r\n",
					"    ,p.NoOfPcls as lms_parcel_noofpcls\r\n",
					"    ,p.PL as lms_parcel_pl\r\n",
					"    ,p.PW as lms_parcel_pw\r\n",
					"    ,p.PH as lms_parcel_ph\r\n",
					"    ,coalesce(p.acceptanceDate,p.handoverdate) as lms_parcel_pdate\r\n",
					"    ,p.AcceptanceDate as lms_parcel_acceptancedate\r\n",
					"    ,p.AcceptanceDate2 as lms_parcel_acceptancedate2\r\n",
					"    ,p.HandOverDate as lms_parcel_handoverdate\r\n",
					"    ,p.Barcode as lms_parcel_barcode\r\n",
					"    ,p.VolWeight as lms_parcel_volweight\r\n",
					"    ,p.Weight as lms_parcel_weight\r\n",
					"    ,p.ChargeWeight as lms_parcel_chargeweight\r\n",
					"    ,CASE \r\n",
					"        WHEN (p.ChargeWeight = 0 OR p.ChargeWeight is null) THEN GREATEST((p.weight),(p.VolWeight))\r\n",
					"        ELSE p.ChargeWeight \r\n",
					"    END as lms_parcel_pweight\r\n",
					"    ,p.PType as lms_parcel_ptype\r\n",
					"    ,p.FloorStatus as lms_parcel_floorstatus\r\n",
					"    ,p.ClaimID as lms_parcel_claimid\r\n",
					"    ,p.DateVolumised as lms_parcel_datevolumised\r\n",
					"    ,p.VolumiserWeight as lms_parcel_volumiserweight\r\n",
					"    ,p.VolumiserLength as lms_parcel_volumiserlength\r\n",
					"    ,p.VolumiserHeight as lms_parcel_volumiserheight\r\n",
					"    ,p.VolumiserWidth as lms_parcel_volumiserwidth\r\n",
					"    ,p.Volumiserid as lms_parcel_volumiserid\r\n",
					"    ,p.LastUpdate as lms_parcel_lastupdate\r\n",
					"    ,p.Description as lms_parcel_description\r\n",
					"    ,p.OldWBID as lms_parcel_oldwbid\r\n",
					"    ,p.disFlag as lms_parcel_disflag\r\n",
					"    ,p.customerbarcode as lms_parcel_customerbarcode\r\n",
					"    ,p.Cref as lms_parcel_cref\r\n",
					"    ,o.HODate as lms_parcel_orderhodate\r\n",
					"    ,o.PickUpCustID as lms_parcel_orderpickupcustid\r\n",
					"    ,o.DeliverCustID as lms_parcel_orderdelivercustid\r\n",
					"    ,o.BillCustID as lms_parcel_orderbillcustid\r\n",
					"    ,o.specdel as lms_parcel_orderspecdel\r\n",
					"    ,o.custaccid as lms_parcel_ordercustaccid\r\n",
					"    ,o.custref as lms_parcel_ordercustref\r\n",
					"    ,o.corderno as lms_parcel_ordercorderno\r\n",
					"    ,ca.description as lms_parcel_custaccdescription\r\n",
					"\t,ca.Cref as lms_parcel_custacccref\r\n",
					"    ,c.CDate as lms_parcel_consignmentcdate\r\n",
					"    ,c.DeliverBy as lms_parcel_consignmentdeliverby\r\n",
					"    ,c.Cref as lms_parcel_consignmentcref\r\n",
					"    ,w.PODDate  as lms_parcel_waybillpoddate \r\n",
					"    ,w.Date as lms_parcel_waybilldate\r\n",
					"    ,w.cref as lms_parcel_waybillcref\r\n",
					"    ,pd.id as lms_parcel_parceldetailid\r\n",
					"    ,pd.InServiceStart as lms_parcel_parceldetailinservicestart\r\n",
					"    ,pd.DeliverBy as lms_parcel_parceldetaildeliverby\r\n",
					"    ,pd.ServiceDays as lms_parcel_parceldetailservicedays\r\n",
					"    ,pd.ServiceTime as lms_parcel_parceldetailservicetime\r\n",
					"    ,pd.Cutofftime as lms_parcel_parceldetailcutofftime\r\n",
					"    ,pd.Appointment as lms_parcel_parceldetailappointment\r\n",
					"    ,pd.NDDID as lms_parcel_parceldetailnddid\r\n",
					"    ,pd.CustOnholdStart as lms_parcel_parceldetailcustonholdstart\r\n",
					"    ,pd.CustOnholdEnd as lms_parcel_parceldetailcustonholdend\r\n",
					"    ,pd.SplitInitial as lms_parcel_parceldetailsplitinitial\r\n",
					"    ,pd.WeekendHolidays as lms_parcel_parceldetailweekendholidays\r\n",
					"    ,pd.Inbound as lms_parcel_parceldetailinbound\r\n",
					"    ,pd.CourierID as lms_parcel_parceldetailcourierid\r\n",
					"    ,pd.ServiceID as lms_parcel_parceldetailserviceid\r\n",
					"    ,pd.CustAccID as lms_parcel_parceldetailcustaccid\r\n",
					"    ,pd.BrouteMasterID as lms_parcel_parceldetailbroutemasterid\r\n",
					"    ,pd.BrouteMasterFromID as lms_parcel_parceldetailbroutemasterfromid\r\n",
					"    ,pd.BrouteMasterToID as lms_parcel_parceldetailbroutemastertoid\r\n",
					"    ,pd.LeadTimeID as lms_parcel_parceldetailleadtimeid\r\n",
					"    ,CASE \r\n",
					"        WHEN pd.id is null and (coalesce(w.PODDate,CURRENT_TIMESTAMP) > c.DeliverBy) then 0 \r\n",
					"        WHEN coalesce(w.PODDate,CURRENT_TIMESTAMP) > pd.DeliverBy then 0 \r\n",
					"        ELSE 1 \r\n",
					"    END as lms_parcel_inserviceflag\r\n",
					"   ,CASE \r\n",
					"        WHEN pd.id is null then (date(coalesce(c.cdate,coalesce(p.acceptanceDate,p.handoverdate)) + interval '86399 seconds'))\r\n",
					"        ELSE (pd.InServiceStart)\r\n",
					"    END AS lms_parcel_actualleaddaysstartdate\r\n",
					"    ,coalesce(w.PODDate,CURRENT_TIMESTAMP) AS lms_parcel_actualleaddaysenddate\r\n",
					"    ,CASE\r\n",
					"        WHEN pd.id is null then ((to_unix_timestamp(coalesce(w.PODDate,CURRENT_TIMESTAMP))) - (to_unix_timestamp(date(coalesce(c.cdate,coalesce(p.acceptanceDate,p.handoverdate))) + interval '86399 seconds')))/86400 \r\n",
					"        ELSE ((to_unix_timestamp(coalesce(w.PODDate,CURRENT_TIMESTAMP))) - (to_unix_timestamp(pd.InServiceStart)))/86400 \r\n",
					"    END as lms_parcel_actualleaddaysinclwe\r\n",
					"    ,pt.orv_parcel_scandate\r\n",
					"    ,pt.orv_parcel_scanstatus\r\n",
					"\t,pt.orv_parcel_scanmode\r\n",
					"\t,pt.orv_parcel_claimid\r\n",
					"\t,pt.orv_parcel_courierid\r\n",
					"    ,pt.orv_parcel_moddate\r\n",
					"    ,CASE\r\n",
					"        WHEN pd.id is null then to_timestamp((cast(to_date(c.DeliverBy,'yyyy-MM-dd') as string)||' 23:59:59.999'))\r\n",
					"        ELSE to_timestamp((cast(to_date(pd.DeliverBy,'yyyy-MM-dd') as string)||' 23:59:59.999'))\r\n",
					"    END as lms_parcel_parceldetaildeliverbyroundup\r\n",
					"    ,CASE\r\n",
					"        WHEN pd.id is null then (to_unix_timestamp(coalesce(w.PODDate,CURRENT_TIMESTAMP)) - to_unix_timestamp(to_timestamp((cast(to_date(c.DeliverBy,'yyyy-MM-dd') as string)||' 23:59:59.999')))) \r\n",
					"        ELSE (to_unix_timestamp(coalesce(w.PODDate,CURRENT_TIMESTAMP)) - to_unix_timestamp(to_timestamp((cast(to_date(pd.DeliverBy,'yyyy-MM-dd') as string)||' 23:59:59.999')))) \r\n",
					"    END as parcelagedifferenceinseconds\r\n",
					"    ,l.lms_location_id as lms_location_consignmentlocid \r\n",
					"    ,l.lms_location_description as lms_location_consignmentlocdescription\r\n",
					"    \r\n",
					"FROM sstparcelunion as p\r\n",
					"LEFT JOIN stparcel_tmp pt on pt.lmsid = p.id AND pt.waybillid = p.waybillid\r\n",
					"LEFT JOIN dboorder o on p.orderid = o.id\r\n",
					"LEFT JOIN sstconsignmentunion c on p.consignid = c.id\r\n",
					"LEFT JOIN dbowaybill w on p.waybillid = w.ID\r\n",
					"LEFT JOIN dboparceldetail pd on p.id = pd.parcelid\r\n",
					"LEFT JOIN dbocustacc ca on ca.id = o.custaccid\r\n",
					"LEFT JOIN stdeliverypickupcustomer dc on dc.lms_customer_id = o.delivercustid\r\n",
					"LEFT JOIN stsroute s on s.lms_sroute_id = dc.lms_customer_srouteid\r\n",
					"LEFT JOIN stzone z on z.lms_zone_id = s.lms_sroute_zoneid\r\n",
					"LEFT JOIN stlocation l on l.lms_location_id = z.lms_zone_locid \r\n",
					"\r\n",
					"-- WHERE  coalesce(p.acceptanceDate,p.handoverdate) IS NOT NULL\r\n",
					"-- AND p.locid NOT IN (163,110,213,27)"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# put into memory\r\n",
					"stparcel_tmp2 = spark.sql(\"select * from stparcel_tmp2_init\")\r\n",
					"stparcel_tmp2.cache()\r\n",
					"print(stparcel_tmp2.count())\r\n",
					"stparcel_tmp2.createOrReplaceTempView(\"stparcel_tmp2\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcel_tmp3_init\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    p.lms_parcel_id\r\n",
					"    ,sum(holiday)*86400 as holidays\r\n",
					"FROM stparcel_tmp2 p\r\n",
					"INNER JOIN dboweekendholiday h on (date(h.DateHoliday) >=  date(lms_parcel_actualleaddaysstartdate) and date(h.DateHoliday) <= date(lms_parcel_actualleaddaysenddate))\r\n",
					"GROUP BY p.lms_parcel_id"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# put into memory\r\n",
					"stparcel_tmp3 = spark.sql(\"select * from stparcel_tmp3_init\")\r\n",
					"stparcel_tmp3.cache()\r\n",
					"print(stparcel_tmp3.count())\r\n",
					"stparcel_tmp3.createOrReplaceTempView(\"stparcel_tmp3\")"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcel_tmp4\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    p.*\r\n",
					"    ,(to_unix_timestamp(p.lms_parcel_actualleaddaysenddate) - to_unix_timestamp(p.lms_parcel_actualleaddaysstartdate) - coalesce(p1.holidays,0))/86400 as lms_parcel_actualleaddays\r\n",
					"FROM stparcel_tmp2 p\r\n",
					"LEFT JOIN stparcel_tmp3 p1 on p1.lms_parcel_id = p.lms_parcel_id"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcel_tmp5\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    *\r\n",
					"    ,CASE \r\n",
					"        WHEN lms_parcel_parceldetaildeliverby is null THEN 'Not Consigned'\r\n",
					"        WHEN lms_parcel_waybillpoddate is null THEN 'Not Delivered'\r\n",
					"        WHEN (parcelagedifferenceinseconds/3600) < 12 THEN '< 12 hrs'\r\n",
					"        WHEN (parcelagedifferenceinseconds/3600) < 24 THEN '< 24 hrs'\r\n",
					"        WHEN (parcelagedifferenceinseconds/3600) < 48 THEN '< 2 days'\r\n",
					"        WHEN (parcelagedifferenceinseconds/3600) < 72 THEN '< 3 days'\r\n",
					"        WHEN (parcelagedifferenceinseconds/3600) < 96 THEN '< 4 days'\r\n",
					"        WHEN (parcelagedifferenceinseconds/3600) < 120 THEN '< 5 days'\r\n",
					"        WHEN (parcelagedifferenceinseconds/3600) < 144 THEN '< 6 days'\r\n",
					"        WHEN (parcelagedifferenceinseconds/3600) < 168 THEN '< 7 days'\r\n",
					"        WHEN (parcelagedifferenceinseconds/3600) > 168 THEN '> 7 days'\r\n",
					"        ELSE NULL\r\n",
					"    END as lms_parcel_age\r\n",
					"\r\n",
					"FROM stparcel_tmp4"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcel_tmp6_init\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     p.*\r\n",
					"    ,v.lms_track_enddate\r\n",
					"    ,v.lms_track_floortimeend\r\n",
					"    ,v.lms_track_fromlocid\r\n",
					"    ,(to_unix_timestamp(p.lms_parcel_consignmentcdate)-to_unix_timestamp(p.lms_parcel_pdate)) as lms_parcel_pdatetocdate\r\n",
					"    ,(to_unix_timestamp(v.lms_track_enddate)-to_unix_timestamp(p.lms_parcel_consignmentcdate)) as lms_parcel_cdatetoenddate\r\n",
					"    ,(to_unix_timestamp(v.lms_track_enddate)-to_unix_timestamp(p.lms_parcel_pdate)) as lms_parcel_startdatetoenddate\r\n",
					"    ,(to_unix_timestamp(v.lms_track_floortimeend)-to_unix_timestamp(v.lms_track_enddate)) as lms_parcel_floortimeedndtoenddate\r\n",
					"    ,(to_unix_timestamp(p.lms_parcel_waybillpoddate)-to_unix_timestamp(v.lms_track_floortimeend)) as lms_parcel_deliveryduration\r\n",
					"    \r\n",
					"  \r\n",
					"FROM stparcel_tmp5 p\r\n",
					"LEFT JOIN stvsmparcel v ON v.lms_track_parcelid = p.lms_parcel_id"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# put into memory\r\n",
					"stparcel_tmp6 = spark.sql(\"select * from stparcel_tmp6_init\")\r\n",
					"stparcel_tmp6.cache()\r\n",
					"print(stparcel_tmp6.count())\r\n",
					"stparcel_tmp6.createOrReplaceTempView(\"stparcel_tmp6\")"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcelsplitconsign_1_init\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"p.lms_parcel_orderid\r\n",
					",p.lms_parcel_consignid\r\n",
					"FROM\r\n",
					"stparcel_tmp6 p\r\n",
					"\r\n",
					"GROUP BY\r\n",
					"p.lms_parcel_orderid,\r\n",
					"p.lms_parcel_consignid"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# put into memory\r\n",
					"stparcelsplitconsign_1 = spark.sql(\"select * from stparcelsplitconsign_1_init\")\r\n",
					"stparcelsplitconsign_1.cache()\r\n",
					"print(stparcelsplitconsign_1.count())\r\n",
					"stparcelsplitconsign_1.createOrReplaceTempView(\"stparcelsplitconsign_1\")"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcelsplitconsign_2_init\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"p.lms_parcel_orderid\r\n",
					",CASE WHEN COUNT(*) > 1 THEN 1 ELSE 0 END AS lms_parcel_splitconsignmentflag\r\n",
					"FROM\r\n",
					"stparcelsplitconsign_1 p\r\n",
					"\r\n",
					"GROUP BY\r\n",
					"p.lms_parcel_orderid\r\n",
					""
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# put into memory\r\n",
					"stparcelsplitconsign_2 = spark.sql(\"select * from stparcelsplitconsign_2_init\")\r\n",
					"stparcelsplitconsign_2.cache()\r\n",
					"print(stparcelsplitconsign_2.count())\r\n",
					"stparcelsplitconsign_2.createOrReplaceTempView(\"stparcelsplitconsign_2\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcelsplitdeliver_1\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"p.lms_parcel_orderid\r\n",
					",p.lms_parcel_waybillid\r\n",
					"FROM\r\n",
					"stparcel_tmp6 p\r\n",
					"\r\n",
					"GROUP BY\r\n",
					"p.lms_parcel_orderid\r\n",
					",p.lms_parcel_waybillid"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcelsplitdeliver_2_init\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"p.lms_parcel_orderid\r\n",
					",CASE WHEN COUNT(*) > 1 THEN 1 ELSE 0 END AS lms_parcel_splitdeliveredflag\r\n",
					"\r\n",
					"FROM\r\n",
					"stparcelsplitdeliver_1 p\r\n",
					"\r\n",
					"GROUP BY\r\n",
					"p.lms_parcel_orderid"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# put into memory\r\n",
					"stparcelsplitdeliver_2 = spark.sql(\"select * from stparcelsplitdeliver_2_init\")\r\n",
					"stparcelsplitdeliver_2.cache()\r\n",
					"print(stparcelsplitdeliver_2.count())\r\n",
					"stparcelsplitdeliver_2.createOrReplaceTempView(\"stparcelsplitdeliver_2\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcel\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"p.*\r\n",
					",c.lms_parcel_splitconsignmentflag\r\n",
					",d.lms_parcel_splitdeliveredflag\r\n",
					"FROM\r\n",
					"stparcel_tmp6 p\r\n",
					"\r\n",
					"LEFT JOIN stparcelsplitconsign_2 c ON p.lms_parcel_orderid = c.lms_parcel_orderid\r\n",
					"LEFT JOIN stparcelsplitdeliver_2 d ON p.lms_parcel_orderid = d.lms_parcel_orderid"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stparcel = spark.sql(\"SELECT * FROM stparcel\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stparcel_test_for_optimisation.parquet', mode = \"overwrite\")"
				],
				"execution_count": null
			}
		]
	}
}