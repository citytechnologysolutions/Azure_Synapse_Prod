{
	"name": "17- Finance_Data_Preparation_Supplier_PROD",
	"properties": {
		"folder": {
			"name": "ARCHIVE/PROD/Transactions Notebooks PROD"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "01842fb6-06b8-462e-b3a8-05d60cf0cdec"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load Source Data from BlobStorage"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#KEY = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/F_KEY.parquet', format='parquet')\r\n",
					"#KEY.createOrReplaceTempView(\"F_KEY\")\r\n",
					"\r\n",
					"#dboOCRD = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboOCRD.parquet', format='parquet')\r\n",
					"#dboOCRD.createOrReplaceTempView(\"dboOCRD\")\r\n",
					"\r\n",
					"#dboOCTG = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboOCTG.parquet', format='parquet')\r\n",
					"#dboOCTG.createOrReplaceTempView(\"dboOCTG\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start of QView Scripting translated over to MSSQL for table DIM_SUPPLIER"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Key = spark.sql(\"\"\"\r\n",
					"SELECT DISTINCT Supplier_Code_KEY\r\n",
					"FROM F_Key\r\n",
					"\"\"\")\r\n",
					"#Key.show()\r\n",
					"Key.createOrReplaceTempView(\"Key\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Business_Partner = spark.sql(\"\"\"\r\n",
					"SELECT CardCode || \"City Logistics New\" AS `Supplier_Code_KEY`,\r\n",
					"\t   CardCode AS `Supplier_Code1`, \r\n",
					"       UPPER(CardName) AS Supplier1, \r\n",
					"       CardType AS `Supplier_Type_Code1`, \r\n",
					"       GroupCode AS `Supplier_Group_Code1`,\r\n",
					"       U_BEE AS `Supplier_BEE_Score1`, \r\n",
					"       GroupNum AS `Supplier_Terms_Code`,\r\n",
					"       \"City Logistics New\" as Company\r\n",
					"FROM dboOCRD\r\n",
					"\"\"\")\r\n",
					"#Business_Partner.show()\r\n",
					"Business_Partner.createOrReplaceTempView(\"Business_Partner\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"SUPPLIER = spark.sql(\"\"\"\r\n",
					"SELECT k.Supplier_Code_KEY,\r\n",
					"       bp.Supplier_Code1,\r\n",
					"       bp.Supplier1,\r\n",
					"       bp.Supplier_Type_Code1,\r\n",
					"       bp.Supplier_Group_Code1,\r\n",
					"       bp.Supplier_BEE_Score1,\r\n",
					"       bp.Supplier_Terms_Code,\r\n",
					"       bp.Company\r\n",
					"FROM Key k\r\n",
					"LEFT JOIN Business_Partner bp\r\n",
					"ON k.Supplier_Code_KEY = bp.Supplier_Code_KEY\r\n",
					"\"\"\")\r\n",
					"#SUPPLIER.show()\r\n",
					"SUPPLIER.createOrReplaceTempView(\"SUPPLIER\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Payment_Terms = spark.sql(\"\"\"\r\n",
					"SELECT GroupNum as `Supplier_Terms_Code`, \r\n",
					"       PymntGroup as `Supplier_Terms1`, \r\n",
					"       \"City Logistics New\" as Company\r\n",
					"FROM dboOCTG\r\n",
					"\"\"\")\r\n",
					"#Payment_Terms.show\r\n",
					"Payment_Terms.createOrReplaceTempView(\"Payment_Terms\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"SUPPLIER = spark.sql(\"\"\"\r\n",
					"SELECT s.*, pt.Supplier_Terms1\r\n",
					"FROM SUPPLIER s\r\n",
					"LEFT JOIN Payment_Terms pt\r\n",
					"       ON s.Supplier_Terms_Code = pt.Supplier_Terms_Code\r\n",
					"\"\"\")\r\n",
					"#SUPPLIER.show()\r\n",
					"SUPPLIER.createOrReplaceTempView(\"SUPPLIER\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"SUPPLIER = spark.sql(\"\"\"\r\n",
					"SELECT *, \r\n",
					"       if(isnull(Supplier1), 'ZZNONE', Supplier1) as Supplier,\r\n",
					"       if(isnull(`Supplier_Type_Code1`), 'ZZNONE', `Supplier_Type_Code1`) as `Supplier_Type_Code`,\r\n",
					"       if(isnull(`Supplier_Group_Code1`), 'ZZNONE', `Supplier_Group_Code1`) as `Supplier_Group_Code`,\r\n",
					"       if(isnull(`Supplier_BEE_Score1`), 'ZZNONE', `Supplier_BEE_Score1`) as `Supplier_BEE_Score`,\r\n",
					"       if(isnull(`Supplier_Terms1`), 'ZZNONE', `Supplier_Terms1`) as `Supplier_Terms`\r\n",
					"FROM SUPPLIER\r\n",
					"\"\"\")\r\n",
					"#SUPPLIER.show()\r\n",
					"SUPPLIER.createOrReplaceTempView(\"SUPPLIER\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"SUPPLIER_Expose = spark.sql(\"\"\"\r\n",
					"SELECT Supplier_Code_KEY,\r\n",
					"       Supplier1 as Supplier,\r\n",
					"       Supplier_Type_Code1 as Supplier_Type_Code,\r\n",
					"       Supplier_Group_Code1 as Supplier_Group_Code,\r\n",
					"       Supplier_BEE_Score1 as Supplier_BEE_Score,\r\n",
					"       Supplier_Terms_Code,\r\n",
					"       Supplier_Terms\r\n",
					"FROM SUPPLIER\r\n",
					"\"\"\")\r\n",
					"#SUPPLIER_Expose.show()\r\n",
					"SUPPLIER_Expose.createOrReplaceTempView(\"SUPPLIER_Expose\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Write success message for production script"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"Scripts have successfully executed\")"
				],
				"execution_count": null
			}
		]
	}
}