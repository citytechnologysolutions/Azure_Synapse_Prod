{
	"name": "Disapatchsegment_Incremental",
	"properties": {
		"folder": {
			"name": "ARCHIVE/PROD/Data Take-On_Expose"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d2886b1d-c3b2-4448-8aab-eb833c80292d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Incremental Notebook for dispatchsegmant && lhdispatchsegment"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#publictablechanges = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publictablechanges.parquet', format='parquet')\r\n",
					"#publictablechanges.createOrReplaceTempView(\"publictablechanges\")\r\n",
					"\r\n",
					"publicdispatchsegment = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatchsegment.parquet', format='parquet')\r\n",
					"publicdispatchsegment.createOrReplaceTempView(\"publicdispatchsegment\")\r\n",
					"\r\n",
					"publiclhdispatchsegment = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publiclhdispatchsegment.parquet', format='parquet')\r\n",
					"publiclhdispatchsegment.createOrReplaceTempView(\"publiclhdispatchsegment\")\r\n",
					"\r\n",
					"publicdispatchsegment1 = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatchsegment1.parquet', format='parquet')\r\n",
					"publicdispatchsegment1.createOrReplaceTempView(\"publicdispatchsegment1\")\r\n",
					"\r\n",
					"publiclhdispatchsegment1 = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publiclhdispatchsegment1.parquet', format='parquet')\r\n",
					"publiclhdispatchsegment1.createOrReplaceTempView(\"publiclhdispatchsegment1\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT DISTINCT action\r\n",
					"FROM publicdispatchsegment1"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT DISTINCT *\r\n",
					"FROM(\r\n",
					"SELECT id,\r\n",
					" did,\r\n",
					" encodedpolyline,\r\n",
					" fromdelid,\r\n",
					" todelid,\r\n",
					" fromlat,\r\n",
					" fromlng,\r\n",
					" tolat,\r\n",
					" tolng,\r\n",
					" customized,\r\n",
					" segmentorder,\r\n",
					" duration,\r\n",
					" type,\r\n",
					" distance,\r\n",
					" tollcost,\r\n",
					" fuelcost,\r\n",
					" inscost,\r\n",
					" labourcost,\r\n",
					" maintcost,\r\n",
					" cpicost,\r\n",
					" vehicleclass,\r\n",
					" departuredate,\r\n",
					" arrivaldate,\r\n",
					" debriefeddate,\r\n",
					" sleeptime,\r\n",
					" entitytype,\r\n",
					" CASE WHEN debriefeddate IS NULL THEN 'delete' ELSE action END AS Action,\r\n",
					" entityid\r\n",
					"FROM publiclhdispatchsegment1)a\r\n",
					"ORDER BY entityid\r\n",
					"LIMIT 100"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## First Remove Deleted data OR Any Altered/New Data FROM lhdispatchsegment"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"Old_Source_Data_Retain = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM publiclhdispatchsegment\r\n",
					"WHERE id NOT IN (SELECT DISTINCT entityid\r\n",
					"                 FROM(SELECT entityid,\r\n",
					"                             CASE WHEN debriefeddate IS NULL THEN 'delete' ELSE action END AS Action\r\n",
					"                      FROM publiclhdispatchsegment1)a\r\n",
					"                 --WHERE Action in ('delete', 'update')\r\n",
					"                )\r\n",
					"ORDER BY id\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#Old_Source_Data_Retain.show()\r\n",
					"Old_Source_Data_Retain.createOrReplaceTempView(\"Old_Source_Data_Retain\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Select al New and Altered Data from the Incremental Table \"publiclhdispatchsegment1\""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publiclhdispatchsegment.columns"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"UNION_New_Data = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT DISTINCT *\r\n",
					"FROM(\r\n",
					"SELECT id,\r\n",
					"       did,\r\n",
					"       encodedpolyline,\r\n",
					"       fromdelid,\r\n",
					"       todelid,\r\n",
					"       fromlat,\r\n",
					"       fromlng,\r\n",
					"       tolat,\r\n",
					"       tolng,\r\n",
					"       customized,\r\n",
					"       segmentorder,\r\n",
					"       duration,\r\n",
					"       `type`,\r\n",
					"       distance,\r\n",
					"       tollcost,\r\n",
					"       fuelcost,\r\n",
					"       inscost,\r\n",
					"       labourcost,\r\n",
					"       maintcost,\r\n",
					"       cpicost,\r\n",
					"       vehicleclass,\r\n",
					"       departuredate,\r\n",
					"       arrivaldate,\r\n",
					"       debriefeddate,\r\n",
					"       sleeptime\r\n",
					"       --,entitytype,\r\n",
					"       --CASE WHEN debriefeddate IS NULL THEN 'delete' ELSE action END AS `action`\r\n",
					"       --,entityid\r\n",
					"FROM publiclhdispatchsegment1\r\n",
					"WHERE `action` in ('insert', 'update'))a\r\n",
					"--AND id = 2496  --TEST ID THIS SHOULD NOT RETURN ANY RESULTS\r\n",
					"ORDER BY id\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#UNION_New_Data.show()\r\n",
					"UNION_New_Data.createOrReplaceTempView(\"UNION_New_Data\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Union old and new data to create final publiclhdispatchsegment Table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publiclhdispatchsegment_New = Old_Source_Data_Retain.unionByName(UNION_New_Data, allowMissingColumns=True)\r\n",
					"\r\n",
					"#KMS.show()\r\n",
					"publiclhdispatchsegment_New.createOrReplaceTempView(\"publiclhdispatchsegment_New\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## First Remove Deleted data OR Any Altered/New Data FROM dispatchsegment"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Old_Source_Data_Retain_2 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM publicdispatchsegment\r\n",
					"WHERE id NOT IN (SELECT DISTINCT entityid\r\n",
					"                 FROM(SELECT entityid,\r\n",
					"                             CASE WHEN debriefeddate IS NULL THEN 'delete' ELSE action END AS Action\r\n",
					"                      FROM publicdispatchsegment1)a\r\n",
					"                 --WHERE Action in ('delete', 'update')\r\n",
					"                )\r\n",
					"ORDER BY id\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#Old_Source_Data_Retain_2.show()\r\n",
					"Old_Source_Data_Retain_2.createOrReplaceTempView(\"Old_Source_Data_Retain_2\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Select al New and Altered Data from the Incremental Table \"publicdispatchsegment1\""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicdispatchsegment.columns"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"UNION_New_Data_2 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT DISTINCT *\r\n",
					"FROM(\r\n",
					"SELECT id,\r\n",
					"       fromdelid,\r\n",
					"       todelid,\r\n",
					"       distance,\r\n",
					"       duration,\r\n",
					"       encodedpolyline,\r\n",
					"       did,\r\n",
					"       tollcost,\r\n",
					"       fuelcost,\r\n",
					"       inscost,\r\n",
					"       labourcost,\r\n",
					"       maintcost,\r\n",
					"       cpicost,\r\n",
					"       vehicleclass,\r\n",
					"       fromlat,\r\n",
					"       fromlng,\r\n",
					"       tolat,\r\n",
					"       tolng,\r\n",
					"       departuredate,\r\n",
					"       arrivaldate,\r\n",
					"       debriefeddate,\r\n",
					"       optimized,\r\n",
					"       segmentorder,\r\n",
					"       customized,\r\n",
					"       parcelct\r\n",
					"       --,entitytype,\r\n",
					"       --CASE WHEN debriefeddate IS NULL THEN 'delete' ELSE action END AS `action`\r\n",
					"       --,entityid\r\n",
					"FROM publicdispatchsegment1\r\n",
					"WHERE `action` in ('insert', 'update'))a\r\n",
					"--AND id = 2496  --TEST ID THIS SHOULD NOT RETURN ANY RESULTS\r\n",
					"ORDER BY id\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#UNION_New_Data_2.show()\r\n",
					"UNION_New_Data_2.createOrReplaceTempView(\"UNION_New_Data_2\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Union old and new data to create final publicdispatchsegment Table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicdispatchsegment_New = Old_Source_Data_Retain_2.unionByName(UNION_New_Data_2, allowMissingColumns=True)\r\n",
					"\r\n",
					"#KMS.show()\r\n",
					"publicdispatchsegment_New.createOrReplaceTempView(\"publicdispatchsegment_New\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT COUNT(*) as dispatchsegment_Count\r\n",
					"FROM publicdispatchsegment_New"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT COUNT(*) lhdispatchsegment_Count\r\n",
					"FROM publiclhdispatchsegment_New"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicdispatchsegment_New.write.parquet('/Unstructured Data/Onroute/publicdispatchsegment_New.parquet', mode='overwrite')"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publiclhdispatchsegment_New.write.parquet('/Unstructured Data/Onroute/publiclhdispatchsegment_New.parquet', mode='overwrite')"
				],
				"execution_count": 9
			}
		]
	}
}