{
	"name": "01_STChartOfAccounts",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Finance"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DevSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ca8d9458-e370-4142-a465-fdea3b7bd7bc"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"if 'prod' in Environment:\r\n",
					"    StorageAccount = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"else:\r\n",
					"    StorageAccount = 'citylogisticsstorage'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# ' + StorageAccount + '"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# #Create DataFrame for the dboOACT SAP Table\r\n",
					"# dboOACT = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboOACT.parquet', format='parquet')\r\n",
					"# dboOACT.createOrReplaceTempView(\"dboOACT\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col\r\n",
					"import pyspark.sql.functions as F\r\n",
					"x = dboOACT.withColumn('trimacctnames', F.trim('acctname'))\r\n",
					"y = x.withColumn('acctnamesplitlength', F.length('trimacctnames') - F.length(F.substring_index('trimacctnames', \"(\", -1)))\r\n",
					"z = y.withColumn('accttype', F.col('trimacctnames').substr(F.lit(0), col('acctnamesplitlength') - F.lit(2)))\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"z.createOrReplaceTempView(\"dboOACT\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stchartofaccounts_step1\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"\r\n",
					"    oact.acctcode as sap_account_acctcode \r\n",
					"    ,oact.acctname as sap_account_acctname \r\n",
					"    ,oact.accttype as sap_account_accttype \r\n",
					"    ,oact.segment_0  as sap_account_segment_0 \r\n",
					"    ,oact.segment_1  as sap_account_segment_1 \r\n",
					"    ,oact.segment_2  as sap_account_segment_2 \r\n",
					"    ,oact.groupmask as sap_account_groupmask\r\n",
					"    ,oact.fathernum as sap_account_fathernum\r\n",
					"    ,oact.frozenfor as sap_account_frozenfor\r\n",
					"    ,oact.postable as sap_account_postable\r\n",
					"\r\n",
					"FROM dboOACT oact\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stchartofaccounts\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     s1.*\r\n",
					"    ,Upper(s2.acctname) as sap_account_level5name \r\n",
					"\r\n",
					"    ,Upper(s3.acctname) as sap_account_level4name \r\n",
					"    ,s3.fathernum as sap_account_fathernum2\r\n",
					"    \r\n",
					"    ,Upper(s4.acctname) as sap_account_level3name \r\n",
					"    ,s4.fathernum as sap_account_fathernum3\r\n",
					"\r\n",
					"    ,Upper(s5.acctname) as sap_account_level2name \r\n",
					"    ,s5.fathernum as sap_account_fathernum4\r\n",
					"\r\n",
					"    ,Upper(s6.acctname) as sap_account_level1name \r\n",
					"    ,s6.fathernum as sap_account_fathernum5\r\n",
					"   \r\n",
					"\r\n",
					"FROM stchartofaccounts_step1 s1\r\n",
					"LEFT JOIN dboOACT s2 on s2.acctcode = s1.sap_account_acctcode and s2.fathernum = s1.sap_account_fathernum and s2.levels = 5\r\n",
					"LEFT JOIN dboOACT s3 on s3.acctcode = s2.fathernum and s3.levels = 4\r\n",
					"LEFT JOIN dboOACT s4 on s4.acctcode = s3.fathernum and s4.levels = 3\r\n",
					"LEFT JOIN dboOACT s5 on s5.acctcode = s4.fathernum and s5.levels = 2\r\n",
					"LEFT JOIN dboOACT s6 on s6.acctcode = s5.fathernum and s6.levels = 1\r\n",
					"\r\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stchartofaccounts = spark.sql(\"SELECT * FROM stchartofaccounts\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stchartofaccounts.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/stchartofaccounts.parquet', mode = \"overwrite\")\r\n",
					"print(\"SUCCESS\")"
				],
				"execution_count": 7
			}
		]
	}
}