{
	"name": "SSTParcel",
	"properties": {
		"folder": {
			"name": "TRANSFORM/ARCHIVE/01 SEMI STRUCTURED/03_LMS + ORV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5160bca0-e357-4cf3-8fe5-5c480929a285"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
				"name": "PRDSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #Create DataFrame for the dboparcel LMS Table\r\n",
					"# dboparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
					"# dboparcel.createOrReplaceTempView(\"dboparcel\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbowaybill LMS Table\r\n",
					"# dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
					"# dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dboorder LMS Table\r\n",
					"# dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
					"# dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dboconsignment LMS Table\r\n",
					"# dboconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
					"# dboconsignment.createOrReplaceTempView(\"dboconsignment\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dboparceldetail LMS Table\r\n",
					"# dboparceldetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparceldetail.parquet', format='parquet')\r\n",
					"# dboparceldetail.createOrReplaceTempView(\"dboparceldetail\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbocustomer LMS Table\r\n",
					"# dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
					"# dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbousers LMS Table\r\n",
					"# dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
					"# dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbobill_parceltype LMS Table\r\n",
					"# dbobill_parceltype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_parceltype.parquet', format='parquet')\r\n",
					"# dbobill_parceltype.createOrReplaceTempView(\"dbobill_parceltype\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbolocation LMS Table\r\n",
					"# dbolocation= spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
					"# dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbodstatus LMS Table\r\n",
					"# dbodstatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodstatus.parquet', format='parquet')\r\n",
					"# dbodstatus.createOrReplaceTempView(\"dbodstatus\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbovolumiser LMS Table\r\n",
					"# dbovolumiser = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovolumiser.parquet', format='parquet')\r\n",
					"# dbovolumiser.createOrReplaceTempView(\"dbovolumiser\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbobill_parceltype LMS Table\r\n",
					"# dbobill_parceltype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_parceltype.parquet', format='parquet')\r\n",
					"# dbobill_parceltype.createOrReplaceTempView(\"dbobill_parceltype\")\r\n",
					"\r\n",
					"# #Create DataFrame for the publicparcel ORV Table\r\n",
					"# publicparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicparcel.parquet', format='parquet')\r\n",
					"# publicparcel.createOrReplaceTempView(\"publicparcel\")\r\n",
					"\r\n",
					"# #Create DataFrame for the publicdelivery ORV Table\r\n",
					"# publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
					"# publicdelivery.createOrReplaceTempView(\"publicdelivery\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"sstparcel_tmp = spark.sql(\"\"\"\r\n",
					"SELECT\r\n",
					"    ORVP.id \r\n",
					"    ,ORVP.lmsid \r\n",
					"    ,ORVP.did \r\n",
					"    ,to_timestamp(ORVP.scandate) as scandate\r\n",
					"    ,ORVP.scanstatus \r\n",
					"    ,ORVP.scanmode \r\n",
					"    ,ORVP.claimid \r\n",
					"    ,ORVP.courierid\r\n",
					"    ,to_timestamp(ORVP.moddate) as moddate\r\n",
					"    ,D.waybillid\r\n",
					"FROM publicparcel ORVP \r\n",
					"LEFT JOIN publicdelivery D ON ORVP.did = D.id\r\n",
					"WHERE D.mode ='deliver' and D.skipreason != 'Fix wrong data manipulation by the company'\r\n",
					"\"\"\")\r\n",
					""
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sstparcel_tmp.createOrReplaceTempView(\"sstparcel_tmp\")"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"sstparcel \r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     P.id as lms_parcel_id\r\n",
					"    ,P.weight as lms_parcel_weight\r\n",
					"    ,P.waybillid as lms_parcel_waybillid\r\n",
					"    ,P.orderid as lms_parcel_orderid\r\n",
					"    ,P.acceptancedate as lms_parcel_acceptancedate\r\n",
					"    ,P.userid as lms_parcel_userid\r\n",
					"    ,P.barcode as lms_parcel_barcode\r\n",
					"    ,P.endorsement as lms_parcel_endorsement\r\n",
					"    ,P.volweight as lms_parcel_volweight\r\n",
					"    ,P.chargeweight as lms_parcel_chargeweight\r\n",
					"    ,P.ptype as lms_parcel_ptype\r\n",
					"    ,P.description as lms_parcel_description\r\n",
					"    ,P.locid as lms_parcel_locid\r\n",
					"    ,P.handoverdate as lms_parcel_handoverdate\r\n",
					"    ,P.seqno as lms_parcel_seqno\r\n",
					"    ,P.floorstatus as lms_parcel_floorstatus\r\n",
					"    ,P.consignid as lms_parcel_consignid\r\n",
					"    ,P.cref as lms_parcel_cref\r\n",
					"    ,P.claimid as lms_parcel_claimid\r\n",
					"    ,P.duedate as lms_parcel_duedate\r\n",
					"    ,P.coddate as lms_parcel_coddate\r\n",
					"    ,P.disflag as lms_parcel_disflag\r\n",
					"    ,P.astoreid as lms_parcel_astoreid\r\n",
					"    ,P.mrpflag as lms_parcel_mrpflag\r\n",
					"    ,P.nmrflag as lms_parcel_nmrflag\r\n",
					"    ,P.consignflag as lms_parcel_consignflag\r\n",
					"    ,P.cmanifest as lms_parcel_cmanifest\r\n",
					"    ,P.cbranchid as lms_parcel_cbranchid\r\n",
					"    ,P.claimref as lms_parcel_claimref\r\n",
					"    ,P.cost as lms_parcel_cost\r\n",
					"    ,P.creason as lms_parcel_creason\r\n",
					"    ,P.customerbarcode as lms_parcel_customerbarcode\r\n",
					"    ,P.dbshorts as lms_parcel_dbshorts\r\n",
					"    ,P.holddate as lms_parcel_holddate\r\n",
					"    ,P.aflag as lms_parcel_aflag\r\n",
					"    ,P.stationid as lms_parcel_stationid\r\n",
					"    ,P.dbshortsdesc as lms_parcel_dbshortsdesc\r\n",
					"    ,P.dstatusid as lms_parcel_dstatusid\r\n",
					"    ,P.dflag as lms_parcel_dflag\r\n",
					"    ,P.callprogid as lms_parcel_callprogid\r\n",
					"    ,P.callprogupddate as lms_parcel_callprogupddate\r\n",
					"    ,P.duplflag as lms_parcel_duplflag\r\n",
					"    ,P.lastupdate as lms_parcel_lastupdate\r\n",
					"    ,P.datevolumised as lms_parcel_datevolumised\r\n",
					"    ,P.volumiserweight as lms_parcel_volumiserweight\r\n",
					"    ,P.volumiserlength as lms_parcel_volumiserlength\r\n",
					"    ,P.volumiserheight as lms_parcel_volumiserheight\r\n",
					"    ,P.volumiserwidth as lms_parcel_volumiserwidth\r\n",
					"    ,P.volumiserid as lms_parcel_volumiserid\r\n",
					"    ,P.pl as lms_parcel_pl\r\n",
					"    ,P.ph as lms_parcel_ph\r\n",
					"    ,P.pw as lms_parcel_pw\r\n",
					"    ,P.totcharge as lms_parcel_totcharge\r\n",
					"    ,P.dontrecalc as lms_parcel_dontrecalc\r\n",
					"    ,P.containerid as lms_parcel_containerid\r\n",
					"    ,P.avgvolweight as lms_parcel_avgvolweight\r\n",
					"    ,WB.id as lms_waybill_id\r\n",
					"    ,WB.poddate as lms_waybill_poddate\r\n",
					"    ,WB.date as lms_waybill_date\r\n",
					"    ,O.id as lms_order_id\r\n",
					"    ,O.hodate as lms_order_hodate\r\n",
					"    ,O.corderno as lms_order_corderno\r\n",
					"    ,O.billcustid as lms_order_billcustid\r\n",
					"    ,O.pickupcustid as lms_order_pickupcustid\r\n",
					"    ,O.delivercustid as lms_order_delivercustid\r\n",
					"    ,O.specdel as lms_order_specdel\r\n",
					"    ,C.id as lms_consignment_id\r\n",
					"    ,C.cdate as lms_consignment_cdate\r\n",
					"    ,C.deliverby as lms_consignment_deliverby\r\n",
					"    ,PD.parcelid as lms_parceldetail_parcelid\r\n",
					"    ,PD.inservicestart as lms_parceldetail_inservicestart\r\n",
					"    ,PD.deliverby as lms_parceldetail_deliverby\r\n",
					"    ,PD.servicedays as lms_parceldetail_servicedays\r\n",
					"    ,PD.servicetime as lms_parceldetail_servicetime\r\n",
					"    ,PD.cutofftime as lms_parceldetail_cutofftime\r\n",
					"    ,PD.appointment as lms_parceldetail_appointment\r\n",
					"    ,PD.nddid as lms_parceldetail_nddid\r\n",
					"    ,PD.custonholdstart as lms_parceldetail_custonholdstart\r\n",
					"    ,PD.custonholdend as lms_parceldetail_custonholdend\r\n",
					"    ,PD.splitinitial as lms_parceldetail_splitinitial\r\n",
					"    ,PD.weekendholidays as lms_parceldetail_weekendholidays\r\n",
					"    ,PD.inbound as lms_parceldetail_inbound\r\n",
					"    ,PD.courierid as lms_parceldetail_courierid\r\n",
					"    ,PD.serviceid as lms_parceldetail_serviceid\r\n",
					"    ,PD.custaccid as lms_parceldetail_custaccid\r\n",
					"    ,PD.broutemasterid as lms_parceldetail_broutemasterid\r\n",
					"    ,PD.broutemasterfromid as lms_parceldetail_broutemasterfromid\r\n",
					"    ,PD.broutemastertoid as lms_parceldetail_broutemastertoid\r\n",
					"    ,PD.leadtimeid as lms_parceldetail_leadtimeid\r\n",
					"    ,BC.id as lms_bcustomer_id\t\r\n",
					"    ,BC.name as lms_bcustomer_name\r\n",
					"    ,PC.id as lms_pcustomer_id\t\r\n",
					"    ,PC.name as lms_pcustomer_name\r\n",
					"    ,DC.id as lms_dcustomer_id\t\r\n",
					"    ,DC.name as lms_dcustomer_name\r\n",
					"    ,U.id as lms_users_id\r\n",
					"    ,U.fullname as lms_users_fullname\r\n",
					"    ,U.site as lms_users_site\r\n",
					"    ,PT.id as lms_bill_parceltype_id\r\n",
					"    ,PT.description as lms_bill_parceltype_description\r\n",
					"    ,PT.ptype as lms_bill_parceltype_ptype\r\n",
					"    ,L.id as lms_clocation_id\r\n",
					"    ,L.description as lms_clocation_description\r\n",
					"    ,DS.id as lms_dstatus_id\r\n",
					"    ,DS.description as lms_dstatus_description\r\n",
					"    ,V.id as lms_volumiser_id\r\n",
					"    ,V.locid as lms_volumiser_locid\r\n",
					"    ,V.volumisercode as lms_volumiser_volumisercode\r\n",
					"    ,V.volumiserdescription as lms_volumiser_volumiserdescription\r\n",
					"    ,V.userid as lms_volumiser_userid\r\n",
					"    ,V.inlinescale as lms_volumiser_inlinescale\r\n",
					"    ,ORVP.id as orv_parcel_id\r\n",
					"    ,ORVP.lmsid as orv_parcel_lmsid\r\n",
					"    ,ORVP.did as orv_parcel_did\r\n",
					"    ,ORVP.scandate as orv_parcel_scandate\r\n",
					"    ,ORVP.scanstatus as orv_parcel_scanstatus\r\n",
					"    ,ORVP.scanmode as orv_parcel_scanmode\r\n",
					"    ,ORVP.claimid as orv_parcel_claimid\r\n",
					"    ,ORVP.courierid as orv_parcel_courierid\r\n",
					"    ,ORVP.moddate as orv_parcel_moddate\r\n",
					"FROM dboParcel P\r\n",
					"LEFT JOIN dbowaybill WB ON WB.id = P.waybillid\r\n",
					"LEFT JOIN dboorder O ON O.id = P.orderid\r\n",
					"LEFT JOIN dboconsignment C ON C.id = P.consignid\r\n",
					"LEFT JOIN dboparceldetail PD ON PD.parcelid = P.id\r\n",
					"LEFT JOIN dbocustomer BC ON BC.id = O.billcustid  --Bill Customer Detail \r\n",
					"LEFT JOIN dbocustomer PC ON PC.id = O.pickupcustid --Pickup Customer Detail \r\n",
					"LEFT JOIN dbocustomer DC ON DC.id = O.delivercustid --Deliver Customer Detail\r\n",
					"LEFT JOIN dbousers U ON U.id = P.userid\r\n",
					"LEFT JOIN dbobill_parceltype PT ON PT.id = P.ptype\r\n",
					"LEFT JOIN dbolocation L ON L.id = P.locid\r\n",
					"LEFT JOIN dbodstatus DS ON DS.id = P.dstatusid\r\n",
					"LEFT JOIN dbovolumiser V ON V.id = P.volumiserid\r\n",
					"LEFT JOIN sstparcel_tmp ORVP ON ORVP.lmsid = P.id AND ORVP.waybillid = P.waybillid"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sstparcel = spark.sql(\"SELECT * FROM sstparcel\")"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# sstparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcel.parquet', mode = \"overwrite\")"
				],
				"execution_count": 37
			}
		]
	}
}