{
	"name": "SSTInstruction",
	"properties": {
		"folder": {
			"name": "TRANSFORM/01 SEMI-STRUCTURED/TMS + ORV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DevSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "82ad3daa-27e4-4b75-8dd0-05145bf3c499"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"if 'prod' in Environment:\r\n",
					"    StorageAccount = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"else:\r\n",
					"    StorageAccount = 'citylogisticsstorage'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# ' + StorageAccount + '"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# #Create DataFrame for the publicinstruction TMS Table\r\n",
					"# publicinstruction = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/TMS/publicinstruction.parquet', format='parquet')\r\n",
					"# publicinstruction.createOrReplaceTempView(\"publicinstruction\")\r\n",
					"\r\n",
					"# #Create DataFrame for the publicaddress TMS Table\r\n",
					"# publicaddress = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/TMS/publicaddress.parquet', format='parquet')\r\n",
					"# publicaddress.createOrReplaceTempView(\"publicaddress\")\r\n",
					"\r\n",
					"# #Create DataFrame for the publiccustomer TMS Table\r\n",
					"# publiccustomer = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/TMS/publiccustomer.parquet', format='parquet')\r\n",
					"# publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
					"\r\n",
					"# #Create DataFrame for the publiclhdelivery ORV Table\r\n",
					"# publiclhdelivery = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publiclhdelivery.parquet', format='parquet')\r\n",
					"# publiclhdelivery.createOrReplaceTempView(\"publiclhdelivery\")\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"sstinstruction = spark.sql(\"\"\"\r\n",
					"SELECT \r\n",
					"    i.id as tms_instruction_id\r\n",
					"    ,i.bookingid as tms_instruction_bookingid\r\n",
					"    ,i.addressid as tms_instruction_addressid\r\n",
					"    ,to_timestamp(i.insdate) as tms_instruction_insdate\r\n",
					"    ,to_timestamp(i.moddate) as tms_instruction_moddate\r\n",
					"    ,i.insby as tms_instruction_insby\r\n",
					"    ,i.onroute as tms_instruction_onroute\r\n",
					"    ,i.instrtype as tms_instruction_instrtype\r\n",
					"    ,i.onrouteid as tms_instruction_onrouteid\r\n",
					"    ,i.sort as tms_instruction_sort\r\n",
					"    ,i.note as tms_instruction_note\r\n",
					"    ,i.onroutestatus as tms_instruction_onroutestatus\r\n",
					"    ,i.legacyid as tms_instruction_legacyid\r\n",
					"    ,i.legacyaddress as tms_instruction_legacyaddress\r\n",
					"    ,i.citybranchid as tms_instruction_citybranchid\r\n",
					"    ,i.citybranchname as tms_instruction_citybranchname\r\n",
					"    ,a.id as tms_address_id\r\n",
					"    ,a.customerid as tms_address_customerid\r\n",
					"    ,a.address as tms_address_address\r\n",
					"    ,a.streetno as tms_address_streetno\r\n",
					"    ,a.city as tms_address_city\r\n",
					"    ,a.province as tms_address_province\r\n",
					"    ,a.country as tms_address_country\r\n",
					"    ,a.addresstype as tms_address_addresstype\r\n",
					"    ,a.lat as tms_address_lat\r\n",
					"    ,a.lng as tms_address_lng\r\n",
					"    ,to_timestamp(a.insdate) as tms_address_insdate\r\n",
					"    ,to_timestamp(a.moddate) as tms_address_moddate\r\n",
					"    ,to_timestamp(a.lastuseddate) as tms_address_lastuseddate\r\n",
					"    ,a.searchfield as tms_address_searchfield\r\n",
					"    ,a.zipcode as tms_address_zipcode\r\n",
					"    ,a.slug as tms_address_slug\r\n",
					"    ,c.status as tms_customer_status\r\n",
					"    ,c.name as tms_customer_name\r\n",
					"    ,c.parentid as tms_customer_parentid\r\n",
					"    ,c.accountnumber as tms_customer_accountnumber\r\n",
					"    ,c.revenuecode as tms_customer_revenuecode\r\n",
					"    ,to_timestamp(c.insdate) as tms_customer_insdate\r\n",
					"    ,to_timestamp(c.moddate) as tms_customer_moddate\r\n",
					"    ,c.insby as tms_customer_insby\r\n",
					"    ,c.opaqueid as tms_customer_opaqueid\r\n",
					"    ,c.email as tms_customer_email\r\n",
					"    ,c.areacode as tms_customer_areacode\r\n",
					"    ,c.mobilenum as tms_customer_mobilenum\r\n",
					"    ,c.legacyid as tms_customer_legacyid\r\n",
					"    ,c.billingmethod as tms_customer_billingmethod\r\n",
					"    ,c.adjustmetric as tms_customer_adjustmetric\r\n",
					"    ,c.adjustvalue as tms_customer_adjustvalue\r\n",
					"    ,c.adjustnegativeallowed as tms_customer_adjustnegativeallowed\r\n",
					"    ,c.adjustvalueusingprevmonth as tms_customer_adjustvalueusingprevmonth\r\n",
					"    ,c.excludefromnotinvoicedreport as tms_customer_excludefromnotinvoicedreport\r\n",
					"    ,c.logictype as tms_customer_logictype\r\n",
					"    ,c.minliability as tms_customer_minliability\r\n",
					"    ,lhd.id as orv_lhdelivery_id\r\n",
					"    ,lhd.did as orv_lhdelivery_did\r\n",
					"    ,lhd.address as orv_lhdelivery_address\r\n",
					"    ,lhd.lat as orv_lhdelivery_lat\r\n",
					"    ,lhd.lng as orv_lhdelivery_lng\r\n",
					"    ,to_timestamp(lhd.actualeta) as orv_lhdelivery_actualeta\r\n",
					"    ,to_timestamp(lhd.eta) as orv_lhdelivery_eta\r\n",
					"    ,to_timestamp(lhd.tsgeofenceenter) as orv_lhdelivery_tsgeofenceenter\r\n",
					"    ,to_timestamp(lhd.tsdocuments) as orv_lhdelivery_tsdocuments\r\n",
					"    ,lhd.customerref1 as orv_lhdelivery_customerref1\r\n",
					"    ,lhd.customerref2 as orv_lhdelivery_customerref2\r\n",
					"    ,lhd.trailersize as orv_lhdelivery_trailersize\r\n",
					"    ,lhd.cargoweight as orv_lhdelivery_cargoweight\r\n",
					"    ,lhd.cubicvolume as orv_lhdelivery_cubicvolume\r\n",
					"    ,lhd.geocodingstatus as orv_lhdelivery_geocodingstatus\r\n",
					"    ,lhd.status as orv_lhdelivery_status\r\n",
					"    ,lhd.optimizedorder as orv_lhdelivery_optimizedorder\r\n",
					"    ,lhd.triporder as orv_lhdelivery_triporder\r\n",
					"    ,lhd.sequence as orv_lhdelivery_sequence\r\n",
					"    ,lhd.bookingid as orv_lhdelivery_bookingid\r\n",
					"    ,lhd.grv as orv_lhdelivery_grv\r\n",
					"    ,lhd.chepslip as orv_lhdelivery_chepslip\r\n",
					"    ,lhd.type as orv_lhdelivery_type\r\n",
					"    ,to_timestamp(lhd.insdate) as orv_lhdelivery_insdate\r\n",
					"    ,lhd.isdirect as orv_lhdelivery_isdirect\r\n",
					"    ,lhd.notes as orv_lhdelivery_notes\r\n",
					"    ,lhd.contactperson as orv_lhdelivery_contactperson\r\n",
					"    ,lhd.contactnumber as orv_lhdelivery_contactnumber\r\n",
					"    ,lhd.trailerfleetcode as orv_lhdelivery_trailerfleetcode\r\n",
					"    ,lhd.primarycustomerid as orv_lhdelivery_primarycustomerid\r\n",
					"    ,lhd.pcustomername as orv_lhdelivery_pcustomername\r\n",
					"    ,lhd.pcustomeraccountnumber as orv_lhdelivery_pcustomeraccountnumber\r\n",
					"    ,lhd.pcustomerrevenuecode as orv_lhdelivery_pcustomerrevenuecode\r\n",
					"    ,lhd.secondarycustomerid as orv_lhdelivery_secondarycustomerid\r\n",
					"    ,lhd.scustomername as orv_lhdelivery_scustomername\r\n",
					"    ,lhd.scustomeraccountnumber as orv_lhdelivery_scustomeraccountnumber\r\n",
					"    ,lhd.scustomerrevenuecode as orv_lhdelivery_scustomerrevenuecode\r\n",
					"    ,to_timestamp(lhd.actiondate) as orv_lhdelivery_actiondate\r\n",
					"    ,to_timestamp(lhd.tsgeofenceexit) as orv_lhdelivery_tsgeofenceexit\r\n",
					"    ,lhd.pctmsid as orv_lhdelivery_pctmsid\r\n",
					"    ,lhd.sctmsid as orv_lhdelivery_sctmsid\r\n",
					"    ,lhd.customorder as orv_lhdelivery_customorder\r\n",
					"    ,to_timestamp(lhd.skipdate) as orv_lhdelivery_skipdate\r\n",
					"    ,lhd.skipreason as orv_lhdelivery_skipreason\r\n",
					"    ,lhd.outofgeofencereason as orv_lhdelivery_outofgeofencereason\r\n",
					"    ,to_timestamp(lhd.tsarrivedcustomer) as orv_lhdelivery_tsarrivedcustomer\r\n",
					"    ,to_timestamp(lhd.tsdroppedoff) as orv_lhdelivery_tsdroppedoff\r\n",
					"    ,to_timestamp(lhd.tsstartoffloading) as orv_lhdelivery_tsstartoffloading\r\n",
					"    ,to_timestamp(lhd.tsstartloading) as orv_lhdelivery_tsstartloading\r\n",
					"    ,to_timestamp(lhd.tsloaded) as orv_lhdelivery_tsloaded\r\n",
					"    ,to_timestamp(lhd.tsfinishedoffloading) as orv_lhdelivery_tsfinishedoffloading\r\n",
					"    ,to_timestamp(lhd.tsdocumnetshanddovedriver) as orv_lhdelivery_tsdocumnetshanddovedriver\r\n",
					"    ,to_timestamp(lhd.tsleavingcustomer) as orv_lhdelivery_tsleavingcustomer\r\n",
					"    ,lhd.actionsubtype as orv_lhdelivery_actionsubtype\r\n",
					"    ,to_timestamp(lhd.tsstart) as orv_lhdelivery_tsstart\r\n",
					"    ,lhd.signame as orv_lhdelivery_signame\r\n",
					"    ,lhd.signcomment as orv_lhdelivery_signcomment\r\n",
					"    ,to_timestamp(lhd.signdate) as orv_lhdelivery_signdate\r\n",
					"    ,to_timestamp(lhd.tsendtate) as orv_lhdelivery_tsendtate\r\n",
					"    ,to_timestamp(lhd.tsentergeofenceapp) as orv_lhdelivery_tsentergeofenceapp\r\n",
					"    ,to_timestamp(lhd.tsexitgeofenceapp) as orv_lhdelivery_tsexitgeofenceapp\r\n",
					"    ,lhd.tmsid as orv_lhdelivery_tmsid\r\n",
					"    ,lhd.subtype as orv_lhdelivery_subtype\r\n",
					"    ,lhd.needbotrailerver as orv_lhdelivery_needbotrailerver\r\n",
					"    ,lhd.secondtrailerfleetcode as orv_lhdelivery_secondtrailerfleetcode\r\n",
					"    ,lhd.trailerverlat as orv_lhdelivery_trailerverlat\r\n",
					"    ,lhd.trailerverlng as orv_lhdelivery_trailerverlng\r\n",
					"    ,to_timestamp(lhd.tstrailerver) as orv_lhdelivery_tstrailerver\r\n",
					"    ,lhd.podlat as orv_lhdelivery_podlat\r\n",
					"    ,lhd.podlng as orv_lhdelivery_podlng\r\n",
					"    ,lhd.skiplat as orv_lhdelivery_skiplat\r\n",
					"    ,lhd.skiplng as orv_lhdelivery_skiplng\r\n",
					"    ,to_timestamp(lhd.uncanceldate) as orv_lhdelivery_uncanceldate\r\n",
					"\r\n",
					"\r\n",
					"    FROM publicinstruction i\r\n",
					"    LEFT JOIN publicaddress a on a.id = i.addressid\r\n",
					"    LEFT JOIN publiccustomer c on c.id = a.customerid\r\n",
					"    LEFT JOIN publiclhdelivery lhd on lhd.tmsid = i.id\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sstinstruction.createOrReplaceTempView(\"sstinstruction\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# sstinstruction.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Semi Structured Data/OPS/sstinstruction.parquet', mode = \"overwrite\")"
				],
				"execution_count": 7
			}
		]
	}
}