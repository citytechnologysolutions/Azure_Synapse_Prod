{
	"name": "01A_101_RptParcelLevel_CenturionSorterReport",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Reports/LMS"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "TESTSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6eeb9e1e-8e0e-4505-96f0-68f265640c46"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
				"name": "TESTSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #Create DataFrame for the rptparcellevel LMS Table\r\n",
					"# rptparcellevel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/RPT/rptparcellevel.parquet', format='parquet')\r\n",
					"# rptparcellevel.createOrReplaceTempView(\"rptparcellevel\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dboplclpnroutinghistorycenturion LMS Table\r\n",
					"# dboplclpnroutinghistorycenturion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboplc_lpnrouting_history_centurion.parquet', format='parquet')\r\n",
					"# dboplclpnroutinghistorycenturion.createOrReplaceTempView(\"dboplclpnroutinghistorycenturion\")\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"centurionsorterreport\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"\r\n",
					" c.id\r\n",
					",c.autosystemid\r\n",
					",c.lpn\r\n",
					",c.status\r\n",
					",c.datereceived as date\r\n",
					",c.dateupdated\r\n",
					",c.plcdivertid\r\n",
					",cldivertid\r\n",
					",c.divertdescription\r\n",
					",p.lms_parcel_orderbillcustid as billingcustomerid\r\n",
					",p.lms_parcel_orderbillcustname as billingcustomer\r\n",
					",p.lms_parcel_orderdelivercustid as deliverycustomerid\r\n",
					",p.lms_parcel_orderdelivercustname as deliverycustomer\r\n",
					",p.lms_parcel_orderdelivercustcref as deliverycustcref\r\n",
					",p.lms_parcel_orderdelivercustsrouteid as deliverycustsrouteid\r\n",
					",p.lms_parcel_sroutedescriptiondelivercust as deliverycustsroutedescription\r\n",
					",p.lms_parcel_sroutecodedelivercust as deliverycustsroutecode\r\n",
					"\r\n",
					"\r\n",
					"FROM dboplclpnroutinghistorycenturion c\r\n",
					"LEFT JOIN rptparcellevel p on p.lms_parcel_barcode  = c.lpn\r\n",
					"WHERE c.datereceived >= to_timestamp(year(current_date())-1||'-'||(month(current_date()))||'-'||'01')\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"centurionsorterreport = spark.sql(\"SELECT * FROM centurionsorterreport\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# centurionsorterreport.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/RPT/centurionsorterreport.parquet', mode = \"overwrite\")"
				],
				"execution_count": 6
			}
		]
	}
}