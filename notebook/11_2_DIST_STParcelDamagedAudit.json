{
	"name": "11_2_DIST_STParcelDamagedAudit",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d0d8b6c3-0bad-4200-95ad-b33c5a9b2508"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
				"name": "PRDSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"if 'prod' in Environment:\r\n",
					"    StorageAccount = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"else:\r\n",
					"    StorageAccount = 'citylogisticsstorage'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# ' + StorageAccount + '"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the dbodamagedparcelaudit LMS Table\r\n",
					"dbodamagedparcelaudit = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodamaged_parcel_audit.parquet', format='parquet')\r\n",
					"dbodamagedparcelaudit.createOrReplaceTempView(\"dbodamagedparcelaudit\")\r\n",
					"\r\n",
					"#Create DataFrame for the stdamagedparcelauditfluteprofiles LMS Table\r\n",
					"stdamagedparcelauditfluteprofiles = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/dbodamaged_parcel_audit_flute_profiles.parquet', format='parquet')\r\n",
					"stdamagedparcelauditfluteprofiles.createOrReplaceTempView(\"stdamagedparcelauditfluteprofiles\")\r\n",
					"\r\n",
					"#Create DataFrame for the stdamagedparcelaudittapetype LMS Table\r\n",
					"stdamagedparcelaudittapetype = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/dbodamaged_parcel_audit_tapetype.parquet', format='parquet')\r\n",
					"stdamagedparcelaudittapetype.createOrReplaceTempView(\"stdamagedparcelaudittapetype\")\r\n",
					"\r\n",
					"#Create DataFrame for the stdamagedparcelaudittype LMS Table\r\n",
					"stdamagedparcelaudittype = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/dbodamaged_parcel_audit_type.parquet', format='parquet')\r\n",
					"stdamagedparcelaudittype.createOrReplaceTempView(\"stdamagedparcelaudittype\")\r\n",
					"\r\n",
					"#Create DataFrame for the stlocation LMS Table\r\n",
					"stlocation = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet', format='parquet')\r\n",
					"stlocation.createOrReplaceTempView(\"stlocation\")\r\n",
					"\r\n",
					"#Create DataFrame for the stparcel LMS Table\r\n",
					"stparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet', format='parquet')\r\n",
					"stparcel.createOrReplaceTempView(\"stparcel\")\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stdamagedparcelaudit\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"d.id as lms_damagedparcelaudit_id\r\n",
					",d.parcelid as lms_damagedparcelaudit_parcelid\r\n",
					",d.userid as lms_damagedparcelaudit_userid\r\n",
					",d.auditdatetime as lms_damagedparcelaudit_auditdatetime\r\n",
					",d.locid as lms_damagedparcelaudit_locid\r\n",
					",d.loadid as lms_damagedparcelaudit_loadid\r\n",
					",d.quantity as lms_damagedparcelaudit_quantity\r\n",
					",d.flutemeasure as lms_damagedparcelaudit_flutemeasure\r\n",
					",d.weight as lms_damagedparcelaudit_weight\r\n",
					",d.length as lms_damagedparcelaudit_length\r\n",
					",d.width as lms_damagedparcelaudit_width\r\n",
					",d.height as lms_damagedparcelaudit_height\r\n",
					",d.shrinkwrap as lms_damagedparcelaudit_shrinkwrap\r\n",
					",d.tapeusedid as lms_damagedparcelaudit_tapeusedid\r\n",
					",d.missing as lms_damagedparcelaudit_missing\r\n",
					",d.damaged as lms_damagedparcelaudit_damaged\r\n",
					",d.parcelutilization as lms_damagedparcelaudit_parcelutilization\r\n",
					",d.damagetypeid as lms_damagedparcelaudit_damagetypeid\r\n",
					",d.typeid as lms_damagedparcelaudit_typeid\r\n",
					",p.lms_parcel_orderdelivercustid\r\n",
					",p.lms_parcel_orderbillcustid\r\n",
					",l.lms_location_description\r\n",
					",t.lms_damagedparcelaudittype_description\r\n",
					",tt.lms_damagedparcelaudittapetype_description\r\n",
					"\r\n",
					"FROM \r\n",
					"dbodamagedparcelaudit d\r\n",
					"LEFT JOIN stparcel p on d.parcelid = p.lms_parcel_id\r\n",
					"LEFT JOIN stlocation l on d.locid = l.lms_location_id\r\n",
					"LEFT JOIN stdamagedparcelaudittype t on d.damagetypeid = t.lms_damagedparcelaudittype_id\r\n",
					"LEFT JOIN stdamagedparcelaudittapetype tt on d.tapeusedid = tt.lms_damagedparcelaudittapetype_id\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stdamagedparcelaudit = spark.sql(\"SELECT * FROM stdamagedparcelaudit\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stdamagedparcelaudit.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdamagedparcelaudit.parquet', mode = \"overwrite\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"SUCCESS\")"
				],
				"execution_count": 16
			}
		]
	}
}