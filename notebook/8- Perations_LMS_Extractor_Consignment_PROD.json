{
	"name": "8- Perations_LMS_Extractor_Consignment_PROD",
	"properties": {
		"folder": {
			"name": "ARCHIVE/PROD/Operations Notebooks PROD"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "487150c9-0574-4a39-8cd7-e5a249a3790a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load Source Data from the Datalake"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#dboconsignment = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboconsignment.parquet', format='parquet')\r\n",
					"#dboconsignment.createOrReplaceTempView(\"dboconsignment\")\r\n",
					"\r\n",
					"#dbodb_InServiceReason = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbodb_InServiceReason.parquet', format='parquet')\r\n",
					"#dbodb_InServiceReason.createOrReplaceTempView(\"dbodb_InServiceReason\")\r\n",
					"\r\n",
					"#dboLoads = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboLoads.parquet', format='parquet')\r\n",
					"#dboLoads.createOrReplaceTempView(\"dboLoads\")\r\n",
					"\r\n",
					"#dboLocation = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboLocation.parquet', format='parquet')\r\n",
					"#dboLocation.createOrReplaceTempView(\"dboLocation\")\r\n",
					"\r\n",
					"#BILLING = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/BILLING.parquet', format='parquet')\r\n",
					"#BILLING.createOrReplaceTempView(\"BILLING\")\r\n",
					"\r\n",
					"#T_dispatch = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/T_dispatch.parquet', format='parquet')\r\n",
					"#T_dispatch.createOrReplaceTempView(\"T_dispatch\")\r\n",
					"\r\n",
					"#T_LOAD = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/T_LOAD.parquet', format='parquet')\r\n",
					"#T_LOAD.createOrReplaceTempView(\"T_LOAD\")\r\n",
					"\r\n",
					"##dboorder = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
					"##dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
					"\r\n",
					"#dbotrack = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbotrack.parquet', format='parquet')\r\n",
					"#dbotrack.createOrReplaceTempView(\"dbotrack\")\r\n",
					"\r\n",
					"#dboWaybill = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboWaybill.parquet', format='parquet')\r\n",
					"#dboWaybill.createOrReplaceTempView(\"dboWaybill\")\r\n",
					"\r\n",
					"#dboWaybillsPerParcel = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboWaybillsPerParcel.parquet', format='parquet')\r\n",
					"#dboWaybillsPerParcel.createOrReplaceTempView(\"dboWaybillsPerParcel\")\r\n",
					"\r\n",
					"#dboparcel = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboparcel.parquet', format='parquet')\r\n",
					"#dboparcel.createOrReplaceTempView(\"dboparcel\")\r\n",
					"\r\n",
					"#dboparcel_archive = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboParcel_Archive.parquet', format='parquet')\r\n",
					"#dboparcel_archive.createOrReplaceTempView(\"dboparcel_archive\")\r\n",
					"\r\n",
					"#dboTrack_Archive = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboTrack_Archive.parquet', format='parquet')\r\n",
					"#dboTrack_Archive.createOrReplaceTempView(\"dboTrack_Archive\")\r\n",
					"\r\n",
					"#T_Parcel = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/T_Parcel.parquet', format='parquet')\r\n",
					"#T_Parcel.createOrReplaceTempView(\"T_Parcel\")\r\n",
					"\r\n",
					"#dboconsignment_Archive = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboconsignment_Archive.parquet', format='parquet')\r\n",
					"#dboconsignment_Archive.createOrReplaceTempView(\"dboconsignment_Archive\")\r\n",
					"\r\n",
					"#Remain uncommented\r\n",
					"##dboWaybill = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboWaybill.parquet', format='parquet')\r\n",
					"##dboWaybill.createOrReplaceTempView(\"dboWaybill\")"
				],
				"execution_count": 29
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start Converting the Qview Scripting MSSQL for table CONSIGNMENT"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"CONSIGNMENT = spark.sql(\"\"\"\r\n",
					"SELECT id AS `CN_ID`,\r\n",
					"       LoadID AS `LD_ID`,\r\n",
					"       CRef AS `CN_CRef`,\r\n",
					"       to_timestamp(`CDate`) AS `CN_CDateTime`,\r\n",
					"       to_date(`CDate`) AS `CN_CDate`,\r\n",
					"       to_timestamp(`DeliverBy`) AS `CN_DeliverByTime`,\r\n",
					"       to_date(`DeliverBy`) AS `CN_DeliverBy`,\r\n",
					"       UserID AS `CN_UserID`,\r\n",
					"       Appointment AS `CN_Appointment`,\r\n",
					"       DConfirmed AS `CN_DConfirmed`,\r\n",
					"       DComment AS `CN_DComment`,\r\n",
					"       DRefNo AS `CN_DRefNo`,\r\n",
					"       DUserID AS `CN_DUserID`,\r\n",
					"       DeliverCustID AS `CN_DeliverCustID`,\r\n",
					"       mrpCFlag AS `CN_mrpCFlag`,\r\n",
					"       mrpFlag AS `CN_mrpFlag`,\r\n",
					"       ChargeWeight AS `CN_ChargeWeight`,\r\n",
					"       VolumetricWeight AS `CN_VolumetricWeight`,\r\n",
					"       NoOfParcels AS `CN_NoOfParcels`,\r\n",
					"       Weight AS `CN_Weight`,\r\n",
					"       CustAccID AS `CN_CustAccID`,\r\n",
					"       MinKg AS `CN_MinKg`,\r\n",
					"       MinRate AS `CN_MinRate`,\r\n",
					"       AddRate AS `CN_AddRate`,\r\n",
					"       DocFees AS `CN_DocFees`,\r\n",
					"       Charge AS `CN_Charge`,\r\n",
					"       FuelLevy AS `CN_FuelLevy`,\r\n",
					"       TotFuelLevy AS `CN_TotFuelLevy`,\r\n",
					"       BillCust AS `CN_BillCust`,\r\n",
					"       TotalCharge AS `CN_TotalCharge`,\r\n",
					"       Units AS `CN_Units`,\r\n",
					"       xFromCustID AS `CN_xFromCustID`,\r\n",
					"       Scanned AS `CN_Scanned`,\r\n",
					"       ConsConsignID AS `CN_ConsConsignID`,\r\n",
					"       ApptCode AS `CN_ApptCode`,\r\n",
					"       FinalInservice AS `CN_FinalInservice`,\r\n",
					"       DeliverByOriginal AS `CN_DeliverByOriginal`,\r\n",
					"       Bill_ServiceType AS `CN_Bill_ServiceType`,\r\n",
					"       ConsignmentValue AS `CN_ConsignmentValue`,\r\n",
					"       TripDistance AS `CN_TripDistance`,\r\n",
					"       Endorsement AS `CN_Endorsement`,\r\n",
					"       InServiceReasonID AS `CN_InServiceReasonID`,\r\n",
					"       InServiceComment AS `CN_InServiceComment`,\r\n",
					"       ReturnFlag AS `CN_ReturnFlag`,\r\n",
					"       CallProgID AS `CN_CallProgID`,\r\n",
					"       CallProgUpdDate AS `CN_CallProgUpdDate`,\r\n",
					"       CServiceID AS `CN_CServiceID`,\r\n",
					"       LastUpdate AS `CN_LastUpdate`,\r\n",
					"       BillFlag AS `CN_BillFlag`,\r\n",
					"       MissingFlag AS `CN_MissingFlag`,\r\n",
					"       RouteRateID AS `CN_RouteRateID`,\r\n",
					"       OverBorderFlag AS `CN_OverBorderFlag`,\r\n",
					"       CollectID AS `CN_CollectID`,\r\n",
					"       BillUserID AS `CN_BillUserID`,\r\n",
					"       SpecDel AS `CN_SpecDel`,\r\n",
					"       QuoteFlag AS `CN_QuoteFlag`,\r\n",
					"       VehicleTypeID AS `CN_VehicleTypeID`,\r\n",
					"       DeliverTypeID AS `CN_DeliverTypeID`,\r\n",
					"       IF(ISNULL(`CDate`) or CDate = '#',0,1)  AS `CN_HasCDate`,\r\n",
					"       IF(ISNULL(`DeliverBy`) or DeliverBy = '#',0,1) AS `CN_HasDeliverBy`,\r\n",
					"       FromLocID AS `CF_FromLocID`,\r\n",
					"       Description AS `CF_Description`\r\n",
					"FROM( SELECT c.*\r\n",
					"            ,l.FromLocID\r\n",
					"            ,loc.Description\r\n",
					"      FROM dboconsignment c\r\n",
					"      LEFT JOIN dbodb_InServiceReason sr ON sr.id = c.inservicereasonid\r\n",
					"      LEFT JOIN dboLoads l ON l.id = c.LoadID\r\n",
					"      LEFT JOIN dboLocation loc ON loc.id = l.FromLocID\r\n",
					")a\r\n",
					"\"\"\")\r\n",
					"#CONSIGNMENT.show()\r\n",
					"CONSIGNMENT.createOrReplaceTempView(\"CONSIGNMENT\")"
				],
				"execution_count": 30
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Semi Final Structure and transformations"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"T_CONSIGNMENT = spark.sql(\"\"\"\r\n",
					"SELECT c.CN_ID,\r\n",
					"    b.CN_ID AS SL_CN_ID,\r\n",
					"    LD_ID AS CN_LoadID,\r\n",
					"\tCF_FromLocID,\r\n",
					"\tCF_Description,\r\n",
					"    CN_Bill_ServiceType,\r\n",
					"    CN_BillFlag,\r\n",
					"    CN_CDate,\r\n",
					"    CN_CDateTime,\r\n",
					"    CN_CollectID,\r\n",
					"    CN_DeliverBy,\r\n",
					"    CN_DeliverByTime,\r\n",
					"    CN_InServiceReasonID,\r\n",
					"    BL_BillCustomerName,\r\n",
					"    BL_BillCustomerPickUpRoute,\r\n",
					"    BL_DeliverCustomerName,\r\n",
					"    BL_DeliverRoute,\r\n",
					"    BL_DeliverRouteLocalFlag,\r\n",
					"    IF(BL_DeliverRouteLocalFlag = 0,'Outlying',\r\n",
					"    IF(BL_DeliverRouteLocalFlag = 1,'Local',\r\n",
					"    IF(BL_DeliverRouteLocalFlag = 2,'Export','#'))) AS BL_DeliverRouteGroup,\r\n",
					"    BL_SAPCode,\r\n",
					"\tBL_ProductCategory,\r\n",
					"\tBL_CustomerGroup,\r\n",
					"    BL_AWeight,\r\n",
					"    BL_VWeight,\r\n",
					"    BL_CWeight,\r\n",
					"    `BL_#Pcls`,\r\n",
					"    BL_MinRate,\r\n",
					"    BL_MinWeight,\r\n",
					"    BL_AddKGRate,\r\n",
					"    BL_KGRateCharge,\r\n",
					"    BL_Charge,\r\n",
					"    BL_FuelLevy,\r\n",
					"    BL_DocFees,\r\n",
					"    BL_OtherFees\r\n",
					"FROM CONSIGNMENT c \r\n",
					"LEFT JOIN BILLING b \r\n",
					"ON c.CN_ID = b.CN_ID\r\n",
					"\"\"\")\r\n",
					"#T_CONSIGNMENT.show()\r\n",
					"T_CONSIGNMENT.createOrReplaceTempView(\"T_CONSIGNMENT\")"
				],
				"execution_count": 31
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Construct the Archive Data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"CONSIGNMENT_Archive = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT id AS `CN_ID`,\r\n",
					"       LoadID AS `LD_ID`,\r\n",
					"       CRef AS `CN_CRef`,\r\n",
					"       to_timestamp(`CDate`) AS `CN_CDateTime`,\r\n",
					"       to_date(`CDate`) AS `CN_CDate`,\r\n",
					"       to_timestamp(`DeliverBy`) AS `CN_DeliverByTime`,\r\n",
					"       to_date(`DeliverBy`) AS `CN_DeliverBy`,\r\n",
					"       UserID AS `CN_UserID`,\r\n",
					"       Appointment AS `CN_Appointment`,\r\n",
					"       DConfirmed AS `CN_DConfirmed`,\r\n",
					"       DComment AS `CN_DComment`,\r\n",
					"       DRefNo AS `CN_DRefNo`,\r\n",
					"       DUserID AS `CN_DUserID`,\r\n",
					"       DeliverCustID AS `CN_DeliverCustID`,\r\n",
					"       mrpCFlag AS `CN_mrpCFlag`,\r\n",
					"       mrpFlag AS `CN_mrpFlag`,\r\n",
					"       ChargeWeight AS `CN_ChargeWeight`,\r\n",
					"       VolumetricWeight AS `CN_VolumetricWeight`,\r\n",
					"       NoOfParcels AS `CN_NoOfParcels`,\r\n",
					"       Weight AS `CN_Weight`,\r\n",
					"       CustAccID AS `CN_CustAccID`,\r\n",
					"       MinKg AS `CN_MinKg`,\r\n",
					"       MinRate AS `CN_MinRate`,\r\n",
					"       AddRate AS `CN_AddRate`,\r\n",
					"       DocFees AS `CN_DocFees`,\r\n",
					"       Charge AS `CN_Charge`,\r\n",
					"       FuelLevy AS `CN_FuelLevy`,\r\n",
					"       TotFuelLevy AS `CN_TotFuelLevy`,\r\n",
					"       BillCust AS `CN_BillCust`,\r\n",
					"       TotalCharge AS `CN_TotalCharge`,\r\n",
					"       Units AS `CN_Units`,\r\n",
					"       xFromCustID AS `CN_xFromCustID`,\r\n",
					"       Scanned AS `CN_Scanned`,\r\n",
					"       ConsConsignID AS `CN_ConsConsignID`,\r\n",
					"       ApptCode AS `CN_ApptCode`,\r\n",
					"       FinalInservice AS `CN_FinalInservice`,\r\n",
					"       DeliverByOriginal AS `CN_DeliverByOriginal`,\r\n",
					"       Bill_ServiceType AS `CN_Bill_ServiceType`,\r\n",
					"       ConsignmentValue AS `CN_ConsignmentValue`,\r\n",
					"       TripDistance AS `CN_TripDistance`,\r\n",
					"       Endorsement AS `CN_Endorsement`,\r\n",
					"       InServiceReasonID AS `CN_InServiceReasonID`,\r\n",
					"       InServiceComment AS `CN_InServiceComment`,\r\n",
					"       ReturnFlag AS `CN_ReturnFlag`,\r\n",
					"       CallProgID AS `CN_CallProgID`,\r\n",
					"       CallProgUpdDate AS `CN_CallProgUpdDate`,\r\n",
					"       CServiceID AS `CN_CServiceID`,\r\n",
					"       LastUpdate AS `CN_LastUpdate`,\r\n",
					"       BillFlag AS `CN_BillFlag`,\r\n",
					"       MissingFlag AS `CN_MissingFlag`,\r\n",
					"       RouteRateID AS `CN_RouteRateID`,\r\n",
					"       OverBorderFlag AS `CN_OverBorderFlag`,\r\n",
					"       CollectID AS `CN_CollectID`,\r\n",
					"       BillUserID AS `CN_BillUserID`,\r\n",
					"       SpecDel AS `CN_SpecDel`,\r\n",
					"       QuoteFlag AS `CN_QuoteFlag`,\r\n",
					"       VehicleTypeID AS `CN_VehicleTypeID`,\r\n",
					"       DeliverTypeID AS `CN_DeliverTypeID`,\r\n",
					"       IF(ISNULL(`CDate`) or CDate = '#',0,1)  AS `CN_HasCDate`,\r\n",
					"       IF(ISNULL(`DeliverBy`) or DeliverBy = '#',0,1) AS `CN_HasDeliverBy`,\r\n",
					"       FromLocID AS `CF_FromLocID`,\r\n",
					"       Description AS `CF_Description`\r\n",
					"FROM( SELECT c.*\r\n",
					"            ,l.FromLocID\r\n",
					"            ,loc.Description\r\n",
					"      FROM dboconsignment_Archive c\r\n",
					"      LEFT JOIN dbodb_InServiceReason sr ON sr.id = c.inservicereasonid\r\n",
					"      LEFT JOIN dboLoads l ON l.id = c.LoadID\r\n",
					"      LEFT JOIN dboLocation loc ON loc.id = l.FromLocID\r\n",
					")a\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#CONSIGNMENT_Archive.show()\r\n",
					"CONSIGNMENT_Archive.createOrReplaceTempView(\"CONSIGNMENT_Archive\")"
				],
				"execution_count": 32
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Final structure for T_CONSIGNMENT_Archive"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"T_CONSIGNMENT_Archive = spark.sql(\"\"\"\r\n",
					"SELECT c.CN_ID,\r\n",
					"    b.CN_ID AS SL_CN_ID,\r\n",
					"    LD_ID AS CN_LoadID,\r\n",
					"\tCF_FromLocID,\r\n",
					"\tCF_Description,\r\n",
					"    CN_Bill_ServiceType,\r\n",
					"    CN_BillFlag,\r\n",
					"    CN_CDate,\r\n",
					"    CN_CDateTime,\r\n",
					"    CN_CollectID,\r\n",
					"    CN_DeliverBy,\r\n",
					"    CN_DeliverByTime,\r\n",
					"    CN_InServiceReasonID,\r\n",
					"    BL_BillCustomerName,\r\n",
					"    BL_BillCustomerPickUpRoute,\r\n",
					"    BL_DeliverCustomerName,\r\n",
					"    BL_DeliverRoute,\r\n",
					"    BL_DeliverRouteLocalFlag,\r\n",
					"    IF(BL_DeliverRouteLocalFlag = 0,'Outlying',\r\n",
					"    IF(BL_DeliverRouteLocalFlag = 1,'Local',\r\n",
					"    IF(BL_DeliverRouteLocalFlag = 2,'Export','#'))) AS BL_DeliverRouteGroup,\r\n",
					"    BL_SAPCode,\r\n",
					"\tBL_ProductCategory,\r\n",
					"\tBL_CustomerGroup,\r\n",
					"    BL_AWeight,\r\n",
					"    BL_VWeight,\r\n",
					"    BL_CWeight,\r\n",
					"    `BL_#Pcls`,\r\n",
					"    BL_MinRate,\r\n",
					"    BL_MinWeight,\r\n",
					"    BL_AddKGRate,\r\n",
					"    BL_KGRateCharge,\r\n",
					"    BL_Charge,\r\n",
					"    BL_FuelLevy,\r\n",
					"    BL_DocFees,\r\n",
					"    BL_OtherFees\r\n",
					"FROM CONSIGNMENT_Archive c \r\n",
					"LEFT JOIN BILLING b \r\n",
					"ON c.CN_ID = b.CN_ID\r\n",
					"\"\"\")\r\n",
					"#T_CONSIGNMENT_Archive.show()\r\n",
					"T_CONSIGNMENT_Archive.createOrReplaceTempView(\"T_CONSIGNMENT_Archive\")"
				],
				"execution_count": 33
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Union in Python to avoid Duplicate creation"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"T_CONSIGNMENT = T_CONSIGNMENT.unionByName(T_CONSIGNMENT_Archive, allowMissingColumns=True)"
				],
				"execution_count": 34
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Print success message on the Production Script"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"Successful run of the script\")"
				],
				"execution_count": null
			}
		]
	}
}