{
	"name": "STOPS_RunOrderLinehaul",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DevSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ac691824-4402-4da1-9b1a-54740a6307b8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"if 'prod' in Environment:\r\n",
					"    StorageAccount = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"else:\r\n",
					"    StorageAccount = 'citylogisticsstorage'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# ' + StorageAccount + '"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.window import Window\r\n",
					"from pyspark.sql.types import IntegralType"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the publicbooking TMS Table\r\n",
					"publicbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicbooking.parquet', format='parquet')\r\n",
					"publicbooking.createOrReplaceTempView(\"publicbooking\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicnonbooking TMS Table\r\n",
					"publicnonbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicnonbooking.parquet', format='parquet')\r\n",
					"publicnonbooking.createOrReplaceTempView(\"publicnonbooking\")\r\n",
					"\r\n",
					"#Create DataFrame for the publictrip TMS Table\r\n",
					"publictrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrip.parquet', format='parquet')\r\n",
					"publictrip.createOrReplaceTempView(\"publictrip\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbolhbooking TMS Table\r\n",
					"dboLHBooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_booking.parquet', format='parquet')\r\n",
					"dboLHBooking.createOrReplaceTempView(\"dboLHBooking\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbolhroutes TMS Table\r\n",
					"dbolhroutes = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_routes.parquet', format='parquet')\r\n",
					"dbolhroutes.createOrReplaceTempView(\"dbolhroutes\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbolhbookingspertrip TMS Table\r\n",
					"dbolhbookingspertrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_bookingspertrip.parquet', format='parquet')\r\n",
					"dbolhbookingspertrip.createOrReplaceTempView(\"dbolhbookingspertrip\")\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/01_LH_STBooking"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stbooking.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stbooking.parquet', mode = \"overwrite\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the publicdriverpayitem TMS Table\r\n",
					"publicdriverpayitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpayitem.parquet', format='parquet')\r\n",
					"publicdriverpayitem.createOrReplaceTempView(\"publicdriverpayitem\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/02_LH_STDriverPayItem"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stdriverpayitem.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdriverpayitem.parquet', mode = \"overwrite\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the publicfinancedata TMS Table\r\n",
					"publicfinancedata = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfinancedata.parquet', format='parquet')\r\n",
					"publicfinancedata.createOrReplaceTempView(\"publicfinancedata\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/03_LH_STFinanceData"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stfinancedata.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfinancedata.parquet', mode = \"overwrite\")"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the publicInstruction TMS Table\r\n",
					"publicInstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinstruction.parquet', format='parquet')\r\n",
					"publicInstruction.createOrReplaceTempView(\"publicInstruction\")\r\n",
					"\r\n",
					"#Create DataFrame for the dboLHInstruction LMS Table\r\n",
					"dboLHInstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_instruction.parquet', format='parquet')\r\n",
					"dboLHInstruction.createOrReplaceTempView(\"dboLHInstruction\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicLHInstruction LMS Table\r\n",
					"publicLHInstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiclhdelivery.parquet', format='parquet')\r\n",
					"publicLHInstruction.createOrReplaceTempView(\"publicLHInstruction\")\r\n",
					"\r\n",
					"#Create DataFrame for the stbooking TMSLMS combine Table\r\n",
					"stbooking = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stbooking.parquet', format='parquet')\r\n",
					"stbooking.createOrReplaceTempView(\"stbooking\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/04_LH_STInstruction"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stinstruction.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stinstruction.parquet', mode = \"overwrite\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the publicinvoice TMS Table\r\n",
					"publicinvoice = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinvoice.parquet', format='parquet')\r\n",
					"publicinvoice.createOrReplaceTempView(\"publicinvoice\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicinvoiceitem TMS Table\r\n",
					"publicinvoiceitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinvoiceitem.parquet', format='parquet')\r\n",
					"publicinvoiceitem.createOrReplaceTempView(\"publicinvoiceitem\")"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/05_LH_STInvoice"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stinvoice.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stinvoice.parquet', mode = \"overwrite\")"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the publiccustomer TMS Table\r\n",
					"publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiccustomer.parquet', format='parquet')\r\n",
					"publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicthirdparty TMS Table\r\n",
					"publicthirdparty = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicthirdparty.parquet', format='parquet')\r\n",
					"publicthirdparty.createOrReplaceTempView(\"publicthirdparty\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicroute TMS Table\r\n",
					"publicroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicroute.parquet', format='parquet')\r\n",
					"publicroute.createOrReplaceTempView(\"publicroute\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbolh_routes TMS Table\r\n",
					"dbolh_routes = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_routes.parquet', format='parquet')\r\n",
					"dbolh_routes.createOrReplaceTempView(\"dbolh_routes\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicaddress TMS Table\r\n",
					"publicaddress = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicaddress.parquet', format='parquet')\r\n",
					"publicaddress.createOrReplaceTempView(\"publicaddress\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicfuelcard TMS Table\r\n",
					"publicfuelcard = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfuelcard.parquet', format='parquet')\r\n",
					"publicfuelcard.createOrReplaceTempView(\"publicfuelcard\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicfuelzone TMS Table\r\n",
					"publicfuelzone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfuelzone.parquet', format='parquet')\r\n",
					"publicfuelzone.createOrReplaceTempView(\"publicfuelzone\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicfuelzonehistory TMS Table\r\n",
					"publicfuelzonehistory = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfuelzonehistory.parquet', format='parquet')\r\n",
					"publicfuelzonehistory.createOrReplaceTempView(\"publicfuelzonehistory\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicratecomponent TMS Table\r\n",
					"publicratecomponent = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicratecomponent.parquet', format='parquet')\r\n",
					"publicratecomponent.createOrReplaceTempView(\"publicratecomponent\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicrateprofile TMS Table\r\n",
					"publicrateprofile = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicrateprofile.parquet', format='parquet')\r\n",
					"publicrateprofile.createOrReplaceTempView(\"publicrateprofile\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicselist TMS Table\r\n",
					"publicselist = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicselist.parquet', format='parquet')\r\n",
					"publicselist.createOrReplaceTempView(\"publicselist\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicselistitem TMS Table\r\n",
					"publicselistitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicselistitem.parquet', format='parquet')\r\n",
					"publicselistitem.createOrReplaceTempView(\"publicselistitem\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicdriverpay TMS Table\r\n",
					"publicdriverpay = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpay.parquet', format='parquet')\r\n",
					"publicdriverpay.createOrReplaceTempView(\"publicdriverpay\")\r\n",
					"\r\n",
					"#Create DataFrame for the ssttrackunion LMS Table\r\n",
					"ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
					"ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
					"\r\n",
					"#Create DataFrame for the dboloads LMS Table\r\n",
					"dboloads = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboloads.parquet', format='parquet')\r\n",
					"dboloads.createOrReplaceTempView(\"dboloads\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicdispatchactionlog LMS Table\r\n",
					"publicdispatchactionlog = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatchactionlog.parquet', format='parquet')\r\n",
					"publicdispatchactionlog.createOrReplaceTempView(\"publicdispatchactionlog\")\r\n",
					"\r\n",
					"#Create DataFrame for the publiclmsdata LMS Table\r\n",
					"publiclmsdata = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiclmsdata.parquet', format='parquet')\r\n",
					"publiclmsdata.createOrReplaceTempView(\"publiclmsdata\")\r\n",
					"\r\n",
					"#create dataframe for the dbocustomer lms table\r\n",
					"dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
					"dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
					"\r\n",
					"#create dataframe for the publicbooking lms table\r\n",
					"publicbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicbooking.parquet', format='parquet')\r\n",
					"publicbooking.createOrReplaceTempView(\"publicbooking\")\r\n",
					""
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.window import Window\r\n",
					"import os\r\n",
					"import pyspark.sql\r\n",
					"from pyspark.sql.types import StructType, StructField, DoubleType, StringType, DecimalType, IntegerType, DateType"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"stlinehaulretailcalendar = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Finance and Operations Mapping Sources/Linehaul_Retail_Calendar.csv', format='csv'\r\n",
					", header=True\r\n",
					")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/06_LH_STLinehaulDimensions"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stlmstrackscantime.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmstrackscantime.parquet', mode = \"overwrite\")\r\n",
					"stdriverpay.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdriverpay.parquet', mode = \"overwrite\")\r\n",
					"stfuelcard.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfuelcard.parquet', mode = \"overwrite\")\r\n",
					"stfuelzone.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfuelzone.parquet', mode = \"overwrite\")\r\n",
					"stfuelzonehistory.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfuelzonehistory.parquet', mode = \"overwrite\")\r\n",
					"stratecomponent.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stratecomponent.parquet', mode = \"overwrite\")\r\n",
					"strateprofile.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/strateprofile.parquet', mode = \"overwrite\")\r\n",
					"sttmslist.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/sttmslist.parquet', mode = \"overwrite\")\r\n",
					"stprimarycustomer.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stprimarycustomer.parquet', mode = \"overwrite\")\r\n",
					"stsecondarycustomer.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stsecondarycustomer.parquet', mode = \"overwrite\")\r\n",
					"stthirdparty.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stthirdparty.parquet', mode = \"overwrite\")\r\n",
					"stparentroute.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stparentroute.parquet', mode = \"overwrite\")\r\n",
					"stopsroute.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stopsroute.parquet', mode = \"overwrite\")\r\n",
					"stdispatchactionlog.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdispatchactionlog.parquet', mode = \"overwrite\")\r\n",
					"stlmsparcelweights.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmsparcelweights.parquet', mode = \"overwrite\")\r\n",
					"stlmsbookingweights.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmsbookingweights.parquet', mode = \"overwrite\")\r\n",
					"stlinehaulretailcalendar.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlinehaulretailcalendar.parquet', mode = \"overwrite\")"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the publictrack TMS Table\r\n",
					"publictrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrack.parquet', format='parquet')\r\n",
					"publictrack.createOrReplaceTempView(\"publictrack\")"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/07_LH_STTMSTrack"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sttmstrack.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/sttmstrack.parquet', mode = \"overwrite\")"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the publictrip TMS Table\r\n",
					"publictrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrip.parquet', format='parquet')\r\n",
					"publictrip.createOrReplaceTempView(\"publictrip\")\r\n",
					"\r\n",
					"#Create DataFrame for the publicdispatch ORV Table\r\n",
					"publicdispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
					"publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbolhtrip LMS Table\r\n",
					"dbolhtrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_trip.parquet', format='parquet')\r\n",
					"dbolhtrip.createOrReplaceTempView(\"dbolhtrip\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbolhtrackstatus LMS Table\r\n",
					"dbolhtrackstatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_trackstatus.parquet', format='parquet')\r\n",
					"dbolhtrackstatus.createOrReplaceTempView(\"dbolhtrackstatus\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbolhbookingspertrip TMS Table\r\n",
					"dbolhbookingspertrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_bookingspertrip.parquet', format='parquet')\r\n",
					"dbolhbookingspertrip.createOrReplaceTempView(\"dbolhbookingspertrip\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbolhbooking TMS Table\r\n",
					"dbolhbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_booking.parquet', format='parquet')\r\n",
					"dbolhbooking.createOrReplaceTempView(\"dbolhbooking\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbolhtrailersize TMS Table\r\n",
					"dbolhtrailersize = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_trailersize.parquet', format='parquet')\r\n",
					"dbolhtrailersize.createOrReplaceTempView(\"dbolhtrailersize\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbolh_3pl TMS Table\r\n",
					"dbolh_3pl = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_3pl.parquet', format='parquet')\r\n",
					"dbolh_3pl.createOrReplaceTempView(\"dbolh_3pl\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbovehicle TMS Table\r\n",
					"dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
					"dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbodriver TMS Table\r\n",
					"dbodriver = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodriver.parquet', format='parquet')\r\n",
					"dbodriver.createOrReplaceTempView(\"dbodriver\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbovehiclebasic MD Table\r\n",
					"dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
					"dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbopeoplebasic MD Table\r\n",
					"dbopeoplebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeoplebasic.parquet', format='parquet')\r\n",
					"dbopeoplebasic.createOrReplaceTempView(\"dbopeoplebasic\")\r\n",
					"\r\n",
					"#Create DataFrame for the stbooking TMS Table\r\n",
					"stbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Structured Data/OPS/stbooking.parquet', format='parquet')\r\n",
					"stbooking.createOrReplaceTempView(\"stbooking\")\r\n",
					"\r\n",
					"#Create DataFrame for the publictrack TMS Table\r\n",
					"publictrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrack.parquet', format='parquet')\r\n",
					"publictrack.createOrReplaceTempView(\"publictrack\")"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/08_LH_STTrip"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sttrip.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/sttrip.parquet', mode = \"overwrite\")"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the publictriptrackinghistory TMS Table\r\n",
					"publictriptrackinghistory = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictriptrackinghistory.parquet', format='parquet')\r\n",
					"publictriptrackinghistory.createOrReplaceTempView(\"publictriptrackinghistory\")"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/09_LH_STTripTrackingHistory"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sttriptrackinghistory.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/sttriptrackinghistory.parquet', mode = \"overwrite\")"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the sttrip TMS Table\r\n",
					"sttrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Structured Data/OPS/sttrip.parquet', format='parquet')\r\n",
					"sttrip.createOrReplaceTempView(\"sttrip\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/10_LH_T_STTripVehicleTurns"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sttripvehicleturns.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/sttripvehicleturns.parquet', mode = \"overwrite\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the stbooking TMS Table\r\n",
					"stbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Structured Data/OPS/stbooking.parquet.parquet', format='parquet')\r\n",
					"stbooking.createOrReplaceTempView(\"stbooking\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/11_LH_T_STFWLesa_CoLoaded"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stfwlesacoloaded.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfwlesacoloaded.parquet', mode = \"overwrite\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"SUCCESS\")"
				],
				"execution_count": 30
			}
		]
	}
}