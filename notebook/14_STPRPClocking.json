{
	"name": "14_STPRPClocking",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Finance"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DevSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a687b889-146a-4a04-ac4c-3fa2e3f3c0bf"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 73
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #Create DataFrame for the prpclockinghoursdetail CLMasterData Table\r\n",
					"# prpclockinghoursdetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/prpclockinghoursdetail.parquet', format='parquet')\r\n",
					"# prpclockinghoursdetail.createOrReplaceTempView(\"prpclockinghoursdetail\")"
				],
				"execution_count": 74
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stprpclockinghoursdetail\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    id as prp_clockinghoursdetail_id\r\n",
					"    ,division as prp_clockinghoursdetail_division\r\n",
					"    ,costcentredescription as prp_clockinghoursdetail_costcentredescription\r\n",
					"    ,costcentrecode as prp_clockinghoursdetail_costcentrecode\r\n",
					"    ,teamname as prp_clockinghoursdetail_teamname\r\n",
					"    ,payroll as prp_clockinghoursdetail_payroll\r\n",
					"    ,employee as prp_clockinghoursdetail_employee\r\n",
					"    ,assignment as prp_clockinghoursdetail_assignment\r\n",
					"    ,idpassportno as prp_clockinghoursdetail_idpassportno\r\n",
					"    ,employeenumber as prp_clockinghoursdetail_employeenumber\r\n",
					"    ,vendorempnumber as prp_clockinghoursdetail_vendorempnumber\r\n",
					"    ,vendor as prp_clockinghoursdetail_vendor\r\n",
					"    ,jobcategory as prp_clockinghoursdetail_jobcategory\r\n",
					"    ,rate as prp_clockinghoursdetail_rate\r\n",
					"    ,to_date(date, 'dd MMM yyyy')  as prp_clockinghoursdetail_date\r\n",
					"    ,weekofyear(to_date(date, 'dd MMM yyyy'))-12  as prp_clockinghoursdetail_week\r\n",
					"    ,shift as prp_clockinghoursdetail_shift\r\n",
					"    ,shifttime as prp_clockinghoursdetail_shifttime\r\n",
					"    ,calctime as prp_clockinghoursdetail_calctime\r\n",
					"    ,clockin as prp_clockinghoursdetail_clockin\r\n",
					"    ,clockout as prp_clockinghoursdetail_clockout\r\n",
					"    ,approvalstatus as prp_clockinghoursdetail_approvalstatus\r\n",
					"    ,totinvval as prp_clockinghoursdetail_totinvval\r\n",
					"    ,finalflag as prp_clockinghoursdetail_finalflag\r\n",
					"FROM prpclockinghoursdetail\r\n",
					""
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stprpclockinghoursdetail = spark.sql(\"SELECT * FROM stprpclockinghoursdetail\")"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stprpclockinghoursdetail.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stprpclockinghoursdetail.parquet', mode = \"overwrite\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stprpclockingheadcountdaily_tmp1\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"to_date(date, 'dd MMM yyyy') as prp_clockingheadcountdaily_date\r\n",
					",division as prp_clockingheadcountdaily_division\r\n",
					",costcentredescription as prp_clockingheadcountdaily_costcentredescription\r\n",
					",costcentrecode as prp_clockingheadcountdaily_costcentrecode\r\n",
					",teamname as prp_clockingheadcountdaily_teamname\r\n",
					",payroll as prp_clockingheadcountdaily_payroll\r\n",
					",jobcategory as prp_clockingheadcountdaily_jobcategory\r\n",
					",employee as prp_clockingheadcountdaily_employee\r\n",
					",row_number() \r\n",
					"    OVER \r\n",
					"    (PARTITION BY \r\n",
					"        division\r\n",
					"        ,costcentredescription\r\n",
					"        ,costcentrecode\r\n",
					"        ,teamname\r\n",
					"        ,payroll\r\n",
					"        ,employee\r\n",
					"        ,jobcategory\r\n",
					"        ,to_date(date, 'dd MMM yyyy')\r\n",
					"    \r\n",
					"    ORDER BY employee desc) AS prp_clockingheadcountdaily_clockingcount\r\n",
					"\r\n",
					"from prpclockinghoursdetail\r\n",
					""
				],
				"execution_count": 110
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stprpclockingheadcountdaily_tmp1 = spark.sql(\"SELECT * FROM stprpclockingheadcountdaily_tmp1\")"
				],
				"execution_count": 111
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stprpclockingheadcountdaily\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"prp_clockingheadcountdaily_date\r\n",
					",prp_clockingheadcountdaily_division\r\n",
					",prp_clockingheadcountdaily_costcentredescription\r\n",
					",prp_clockingheadcountdaily_costcentrecode\r\n",
					",prp_clockingheadcountdaily_teamname\r\n",
					",prp_clockingheadcountdaily_payroll\r\n",
					",prp_clockingheadcountdaily_jobcategory\r\n",
					",SUM(prp_clockingheadcountdaily_clockingcount) AS prp_clockingheadcountdaily_clockingcount\r\n",
					"FROM\r\n",
					"stprpclockingheadcountdaily_tmp1\r\n",
					"WHERE prp_clockingheadcountdaily_clockingcount = 1\r\n",
					"GROUP BY\r\n",
					"prp_clockingheadcountdaily_date\r\n",
					",prp_clockingheadcountdaily_division\r\n",
					",prp_clockingheadcountdaily_costcentredescription\r\n",
					",prp_clockingheadcountdaily_costcentrecode\r\n",
					",prp_clockingheadcountdaily_teamname\r\n",
					",prp_clockingheadcountdaily_jobcategory\r\n",
					",prp_clockingheadcountdaily_payroll"
				],
				"execution_count": 112
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stprpclockingheadcountdaily = spark.sql(\"SELECT * FROM stprpclockingheadcountdaily\")"
				],
				"execution_count": 113
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stprpclockingheadcountdaily.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stprpclockingheadcountdaily.parquet', mode = \"overwrite\")"
				],
				"execution_count": 114
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stprpclockinghoursdaily\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"     division as prp_clockinghoursdaily_division\r\n",
					"    ,costcentredescription as prp_clockinghoursdaily_costcentredescription\r\n",
					"    ,costcentrecode as prp_clockinghoursdaily_costcentrecode\r\n",
					"    ,teamname as prp_clockinghoursdaily_teamname\r\n",
					"    ,payroll as prp_clockinghoursdaily_payroll\r\n",
					"    ,vendor as prp_clockinghoursdaily_vendor\r\n",
					"    ,jobcategory as prp_clockinghoursdaily_jobcategory\r\n",
					"    ,to_date(date, 'dd MMM yyyy')  as prp_clockinghoursdaily_date\r\n",
					"    ,weekofyear(to_date(date, 'dd MMM yyyy'))-12  as prp_clockinghoursdaily_week\r\n",
					"    ,approvalstatus as prp_clockinghoursdaily_approvalstatus\r\n",
					"    ,sum(totinvval) as prp_clockinghoursdaily_totinvval\r\n",
					"    ,finalflag as prp_clockinghoursdaily_finalflag\r\n",
					"FROM prpclockinghoursdetail\r\n",
					"GROUP BY\r\n",
					"     division\r\n",
					"    ,costcentredescription\r\n",
					"    ,costcentrecode\r\n",
					"    ,teamname\r\n",
					"    ,payroll\r\n",
					"    ,vendor\r\n",
					"    ,jobcategory\r\n",
					"    ,to_date(date, 'dd MMM yyyy')\r\n",
					"    ,weekofyear(to_date(date, 'dd MMM yyyy'))-12\r\n",
					"    ,approvalstatus\r\n",
					"    ,finalflag\r\n",
					""
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stprpclockinghoursdaily = spark.sql(\"SELECT * FROM stprpclockinghoursdaily\")"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stprpclockinghoursdaily.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stprpclockinghoursdaily.parquet', mode = \"overwrite\")"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"SUCCESS\")"
				],
				"execution_count": 12
			}
		]
	}
}