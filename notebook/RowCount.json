{
	"name": "RowCount",
	"properties": {
		"folder": {
			"name": "DEV/DataAutomationChecks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "TESTSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "981a96ff-909d-40c1-81a1-e1360ee30446"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
				"name": "TESTSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import col, lit, current_timestamp\r\n",
					"from pyspark.sql import functions as F\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType\r\n",
					"from datetime import datetime"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define schema for the logging DataFrame\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"TableName\", StringType(), True),\r\n",
					"    StructField(\"DateTime\", StringType(), True),\r\n",
					"    StructField(\"RowCount\", IntegerType(), True),\r\n",
					"    StructField(\"Diff\", StringType(), True)\r\n",
					"])\r\n",
					"\r\n",
					"log_df = spark.createDataFrame([], schema)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create some test tables with mock data\r\n",
					"table1 = spark.createDataFrame([(1, 'foo'), (2, 'bar'), (3, 'baz'),(3, 'baz'),(3, 'baz')], ['id', 'value'])\r\n",
					"table2 = spark.createDataFrame([(4, 'apple'), (5, 'banana')], ['id', 'fruit'])\r\n",
					"table3 = spark.createDataFrame([(6, 'car'), (7, 'bus'), (8, 'bike'), (9, 'plane')], ['id', 'vehicle'])\r\n",
					"\r\n",
					"# Register the DataFrames as tables to mimic actual tables in a data lake\r\n",
					"table1.createOrReplaceTempView('table1')\r\n",
					"table2.createOrReplaceTempView('table2')\r\n",
					"table3.createOrReplaceTempView('table3')"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# List of table names you want to monitor\r\n",
					"tables_to_monitor = [\"table1\", \"table2\", \"table3\"]\r\n",
					"\r\n",
					"for table_name in tables_to_monitor:\r\n",
					"    try:\r\n",
					"        # Read the table from the data lake into a DataFrame\r\n",
					"        df = spark.table(table_name)\r\n",
					"\r\n",
					"        # Count the number of rows\r\n",
					"        current_count = df.count()\r\n",
					"\r\n",
					"        # Get the DateTime\r\n",
					"        current_datetime = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n",
					"\r\n",
					"        # Fetch the most recent row count for this table from log_df\r\n",
					"        latest_row = log_df.filter(F.col(\"TableName\") == table_name).orderBy(F.col(\"DateTime\").desc()).limit(1).collect()\r\n",
					"\r\n",
					"        if len(latest_row) == 0:\r\n",
					"            # This is the first entry for this table\r\n",
					"            diff = \"NA\"\r\n",
					"        else:\r\n",
					"            previous_count = latest_row[0][\"RowCount\"]\r\n",
					"            diff = current_count - previous_count\r\n",
					"            \r\n",
					"            # Alert if the row count stays the same\r\n",
					"            if diff == 0:\r\n",
					"                print(f\"Alert: Row count for {table_name} has not changed. Still {current_count}.\")\r\n",
					"\r\n",
					"        # Append the new data to log_df\r\n",
					"        new_row = spark.createDataFrame([(table_name, current_datetime, current_count, str(diff))], schema)\r\n",
					"        log_df = log_df.union(new_row)\r\n",
					"\r\n",
					"    except Exception as e:\r\n",
					"        print(f\"Error processing table {table_name}: {str(e)}\", file=sys.stderr)\r\n",
					"\r\n",
					""
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(log_df)"
				],
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Last Refresh Check"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.window import Window"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def update_log_and_check_error(log_df, table_df):\r\n",
					"    # Step 1: Read the last modified date from the log dataframe\r\n",
					"    latest_log_entry = log_df \\\r\n",
					"        .withColumn(\"LastModifiedDate\", F.to_timestamp(\"LastModifiedDate\")) \\\r\n",
					"        .groupBy(\"TableName\") \\\r\n",
					"        .agg(F.max(\"LastModifiedDate\").alias(\"LatestModifiedDate\"))\r\n",
					"\r\n",
					"    # Step 2: Read \"the_table\" dataframe\r\n",
					"    table_df = table_df.withColumn(\"LastModifiedDate\", F.to_timestamp(\"LastModifiedDate\"))\r\n",
					"\r\n",
					"    # Step 3: Compare last modified dates and log an error if they are the same\r\n",
					"    check_df = table_df \\\r\n",
					"        .join(latest_log_entry, \"TableName\") \\\r\n",
					"        .filter(\"LastModifiedDate = LatestModifiedDate\")\r\n",
					"\r\n",
					"    if check_df.count() > 0:\r\n",
					"        # Log an error or perform other actions as needed\r\n",
					"        print(\"Error: Last modified date in log is the same as the current table.\")\r\n",
					"        # You might want to log this error or raise an exception depending on your requirement\r\n",
					"\r\n",
					"    # Update the log dataframe with the latest modified date\r\n",
					"    new_log_entry = table_df \\\r\n",
					"        .groupBy(\"TableName\") \\\r\n",
					"        .agg(F.max(\"LastModifiedDate\").alias(\"LatestModifiedDate\"))\r\n",
					"\r\n",
					"    log_df = log_df.union(new_log_entry)\r\n",
					"\r\n",
					"    return log_df"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"log_data = [(\"table1\", \"2023-09-29 10:00:00\"),(\"table2\", \"2023-09-29 11:30:00\")]\r\n",
					"\r\n",
					"# Sample data for the test dataframe\r\n",
					"test_data = [(\"table1\", \"2023-09-29 12:00:00\"),\r\n",
					"                (\"table2\", \"2023-09-29 11:30:00\")]\r\n",
					"\r\n",
					"# Create log dataframe\r\n",
					"log_schema = [\"TableName\", \"LastModifiedDate\"]\r\n",
					"log_df = spark.createDataFrame(log_data, schema=log_schema)\r\n",
					"\r\n",
					"# Create test dataframe\r\n",
					"test_schema = [\"TableName\", \"LastModifiedDate\"]\r\n",
					"test_df = spark.createDataFrame(test_data, schema=test_schema)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Update log and check for errors\r\n",
					"updated_log_df = update_log_and_check_error(log_df, test_df)\r\n",
					"\r\n",
					"# Show the updated log dataframe\r\n",
					"updated_log_df.show()"
				],
				"execution_count": 17
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Duplicates Sources Check"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_folder_list(spark, base_path):\r\n",
					"    folder_list = []\r\n",
					"\r\n",
					"    try:\r\n",
					"        URI = spark._jvm.java.net.URI\r\n",
					"        Path = spark._jvm.org.apache.hadoop.fs.Path\r\n",
					"        FileSystem = spark._jvm.org.apache.hadoop.fs.FileSystem\r\n",
					"\r\n",
					"        fs = FileSystem.get(URI(base_path), spark._jsc.hadoopConfiguration())\r\n",
					"        status = fs.listStatus(Path(base_path))\r\n",
					"\r\n",
					"        for file_status in status:\r\n",
					"            file_path = file_status.getPath().toString()\r\n",
					"\r\n",
					"            # Check if it's a directory\r\n",
					"            if fs.isDirectory(file_status.getPath()):\r\n",
					"                folder_list.append(file_path)\r\n",
					"\r\n",
					"        return folder_list\r\n",
					"\r\n",
					"    except Py4JJavaError as e:\r\n",
					"        print(\"Error occurred while listing folders: \", e)\r\n",
					"        return None"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def has_duplicates(input_list):\r\n",
					"    seen = set()\r\n",
					"    for item in input_list:\r\n",
					"        if item in seen:\r\n",
					"            return True  # Found a duplicate\r\n",
					"        seen.add(item)\r\n",
					"    return False"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## ALERTS"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.identity import DefaultAzureCredential\r\n",
					"from azure.monitor.query import LogsQueryClient\r\n",
					"\r\n",
					"credential = DefaultAzureCredential()\r\n",
					"query_client = LogsQueryClient(credential)"
				],
				"execution_count": null
			}
		]
	}
}