{
	"name": "STDCTranfer",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3caf4911-816f-4dcb-a7b3-de8419475980"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# #Create DataFrame for the dbodc_transfer LMS Table\r\n",
					"# dbodc_transfer = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbodc_transfer.parquet', format='parquet')\r\n",
					"# dbodc_transfer.createOrReplaceTempView(\"dbodc_transfer\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stdctransfer\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"\r\n",
					"    dct.id as lms_dctransfer_id\r\n",
					"    ,dct.destinationstoreid as lms_dctransfer_destinationstoreid\r\n",
					"    ,dct.transfercode as lms_dctransfer_transfercode\r\n",
					"    ,dct.audittype as lms_dctransfer_audittype\r\n",
					"    ,dct.qty as lms_dctransfer_qty\r\n",
					"    ,dct.dc_prepackid as lms_dctransfer_dc_prepackid\r\n",
					"    ,dct.acceptancedate as lms_dctransfer_acceptancedate\r\n",
					"    ,dct.auditflag as lms_dctransfer_auditflag\r\n",
					"    ,dct.audituserid as lms_dctransfer_audituserid\r\n",
					"    ,dct.auditlocid as lms_dctransfer_auditlocid\r\n",
					"    ,dct.counted as lms_dctransfer_counted\r\n",
					"    ,dct.damagecount as lms_dctransfer_damagecount\r\n",
					"    ,dct.uploaded as lms_dctransfer_uploaded\r\n",
					"    ,dct.dc_torderid as lms_dctransfer_dc_torderid\r\n",
					"    ,dct.duedate as lms_dctransfer_duedate\r\n",
					"    ,dct.destinationlocationcode as lms_dctransfer_destinationlocationcode\r\n",
					"    ,dct.destinationlocationtypecode as lms_dctransfer_destinationlocationtypecode\r\n",
					"    ,dct.processfamilycode as lms_dctransfer_processfamilycode\r\n",
					"    ,dct.grnversion as lms_dctransfer_grnversion\r\n",
					"\r\n",
					"FROM dbodc_transfer dct\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stdctransfer = spark.sql(\"SELECT * FROM stdctransfer\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stdctransfer.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stdctransfer.parquet', mode = \"overwrite\")\r\n",
					"print(\"SUCCESS\")"
				],
				"execution_count": null
			}
		]
	}
}