{
	"name": "RptLoadParentLevel",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Reports/LMS"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "55835e13-432b-40e0-85f2-37d2c9513238"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
				"name": "PRDSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"if 'prod' in Environment:\r\n",
					"    StorageAccount = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"else:\r\n",
					"    StorageAccount = 'citylogisticsstorage'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# ' + StorageAccount + '"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create DataFrame for the stloadchild LMS Table\r\n",
					"stloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadchild.parquet', format='parquet')\r\n",
					"stloadchild.createOrReplaceTempView(\"stloadchild\")\r\n",
					"\r\n",
					"#Create DataFrame for the stloadparent LMS Table\r\n",
					"stloadparent = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet', format='parquet')\r\n",
					"stloadparent.createOrReplaceTempView(\"stloadparent\")\r\n",
					"\r\n",
					"#Create DataFrame for the stwaybill LMS Table\r\n",
					"stwaybill = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet', format='parquet')\r\n",
					"stwaybill.createOrReplaceTempView(\"stwaybill\")\r\n",
					"\r\n",
					"#Create DataFrame for the stdeliverypickupcustomer LMS Table\r\n",
					"stdeliverypickupcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet', format='parquet')\r\n",
					"stdeliverypickupcustomer.createOrReplaceTempView(\"stdeliverypickupcustomer\")\r\n",
					"\r\n",
					"#Create DataFrame for the stbillcustomer LMS Table\r\n",
					"stbillcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stbillcustomer.parquet', format='parquet')\r\n",
					"stbillcustomer.createOrReplaceTempView(\"stbillcustomer\")\r\n",
					"\r\n",
					"#Create DataFrame for the stmdvehicle MD Table\r\n",
					"stmdvehicle = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/MD/stmdvehicle.parquet', format='parquet')\r\n",
					"stmdvehicle.createOrReplaceTempView(\"stmdvehicle\")\r\n",
					"\r\n",
					"#Create DataFrame for the dbolocation LMS Table\r\n",
					"dbolocation = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
					"dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
					"\r\n",
					"#create dataframe for the stsroute lms table\r\n",
					"stsroute = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stsroute.parquet', format='parquet')\r\n",
					"stsroute.createOrReplaceTempView(\"stsroute\")\r\n",
					"\r\n",
					"#create dataframe for the storder lms table\r\n",
					"storder = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/storder.parquet', format='parquet')\r\n",
					"storder.createOrReplaceTempView(\"storder\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stloadparent.dtypes"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stloadchild.dtypes"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stmdvehicle.dtypes"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					" CREATE OR REPLACE TEMP VIEW\r\n",
					" rptloadparenetlevel\r\n",
					" AS\r\n",
					"SELECT\r\n",
					"    lp.lms_loadparent_parentloadid\r\n",
					"    ,fl.description as lms_loadparent_locationfromdescription\r\n",
					"    ,v.md_vehicle_fleetcode as lms_loadparent_vehcilefleetcode\r\n",
					"    ,v.md_vehicle_registrationnumber as lms_loadparent_vehicleregistrationnumber\r\n",
					"    ,v.md_vehicle_internalvolume as lms_loadparent_vehicleinternalvolume\r\n",
					"    ,orv_dispatch_startodo as lms_loadparent_startodo\r\n",
					"    ,orv_dispatch_stopodo as lms_loadparent_stopodo\r\n",
					"    ,(orv_dispatch_stopodo - orv_dispatch_startodo) as lms_loadparent_dispatchodokms\r\n",
					"    ,lms_loadparent_aggrnoparcels\r\n",
					"    ,lms_loadparent_aggrweight\r\n",
					"    ,lms_loadparent_aggrchargeweight\r\n",
					"    ,collect_list(lc.lms_loadchild_id) as lms_loadparent_childloadids\r\n",
					"    ,count(w.lms_waybill_id) as lms_loadparent_aggrnowaybills\r\n",
					"    ,count(lc.lms_loadchild_id) as lms_loadparent_aggrnochildloads\r\n",
					"    ,v.md_vehicle_internalvolume||' *200 * 100% ' as lms_loadparent_100pctutilization\r\n",
					"    ,lms_loadparent_aggrweight/(v.md_vehicle_internalvolume*200*100) as lms_loadparent_weightutilization\r\n",
					"    ,lms_loadparent_aggrchargeweight/(v.md_vehicle_internalvolume*200*100) as lms_loadparent_chargeweightutilization\r\n",
					"\r\n",
					"FROM stloadparent lp\r\n",
					"LEFT JOIN stloadchild lc on lc.lms_loadchild_parentloadid = lp.lms_loadparent_parentloadid\r\n",
					"LEFT JOIN dbolocation fl on fl.id = lms_loadchild_fromlocid and lc.lms_loadchild_parentloadid = lp.lms_loadparent_parentloadid\r\n",
					"LEFT JOIN stmdvehicle v on v.md_vehicle_orvid = orv_dispatch_vid\r\n",
					"LEFT JOIN stwaybill w on w.lms_waybill_loadid = lc.lms_loadchild_id\r\n",
					"\r\n",
					"WHERE orv_dispatch_estdepdate >= (to_timestamp(year(current_date())-1||'-'||(month(current_date()))||'-'||'01'))\r\n",
					"\r\n",
					"GROUP BY \r\n",
					"    lp.lms_loadparent_parentloadid\r\n",
					"    ,fl.description\r\n",
					"    ,v.md_vehicle_fleetcode\r\n",
					"    ,v.md_vehicle_registrationnumber\r\n",
					"    ,v.md_vehicle_internalvolume\r\n",
					"    ,orv_dispatch_startodo\r\n",
					"    ,orv_dispatch_stopodo\r\n",
					"    ,lms_loadparent_aggrnoparcels\r\n",
					"    ,lms_loadparent_aggrweight\r\n",
					"    ,lms_loadparent_aggrchargeweight\r\n",
					"   -- ,(orv_dispatch_stopodo - orv_dispatch_startodo) as lms_loadparent_dispatchodokms\r\n",
					"\r\n",
					"order by lms_loadparent_parentloadid desc\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rptloadparenetlevel = spark.sql(\"SELECT * FROM rptloadparenetlevel\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rptloadparenetlevel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/RPT/rptloadparenetlevel.parquet', mode = \"overwrite\")"
				],
				"execution_count": 10
			}
		]
	}
}