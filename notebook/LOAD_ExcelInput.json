{
	"name": "LOAD_ExcelInput",
	"properties": {
		"folder": {
			"name": "ARCHIVE/DEV/Cost To Serve Notebooks DEV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "42dbda62-676c-404c-8821-dc95291a9258"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"CTS_Inputs = [  'DIM_CTS_I_GLMapDefault'\r\n",
					"                ,'DIM_CTS_I_PARAM_Ranges'\r\n",
					"                ,'DIM_CTS_I_GLDEPOT_MAP'\r\n",
					"                ,'DIM_CTS_I_GLDEPOT_MAP_LH_BRANCH'\r\n",
					"            ] "
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"from pyspark.sql import functions as F"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for (counter,i) in enumerate(CTS_Inputs,0):\r\n",
					"    df = pd.read_excel('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/Excel_Input/CTS_Mapping9.xlsx', sheet_name= i)\r\n",
					"    if len(df) == 0:\r\n",
					"         raise ValueError('The ingested Excel sheet was empty: ' + i)\r\n",
					"    for colName in df.columns:\r\n",
					"            if len(set(df[colName])) == 0:\r\n",
					"                raise ValueError('The Excel sheet ' + i + ' contains an empty field: ' + colName)\r\n",
					"    df = spark.createDataFrame(df)\r\n",
					"    df = df.select([F.col(colName).alias(colName.replace(' ', '_')) for colName in df.columns if 'Unnamed:' not in colName])\r\n",
					"    df.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/Structured/Dimensions/' + i + '.parquet/', mode='overwrite')\r\n",
					"    df = spark.read.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/Structured/Dimensions/' + i + '.parquet/')\r\n",
					"    #df.createOrReplaceTempView(i)"
				],
				"execution_count": 3
			}
		]
	}
}