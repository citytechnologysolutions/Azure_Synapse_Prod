{
	"name": "05_STStockRevaluations",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Finance"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DevSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5f451d21-9edb-4dca-82ce-9ef05c514844"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"if 'prod' in Environment:\r\n",
					"    StorageAccount = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"else:\r\n",
					"    StorageAccount = 'citylogisticsstorage'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# ' + StorageAccount + '"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"# #Create DataFrame for the dboOMRV SAP Table\r\n",
					"# dboOMRV = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboOMRV.parquet', format='parquet')\r\n",
					"# dboOMRV.createOrReplaceTempView(\"dboOMRV\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dboMRV1 SAP Table\r\n",
					"# dboMRV1 = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboMRV1.parquet', format='parquet')\r\n",
					"# dboMRV1.createOrReplaceTempView(\"dboMRV1\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dboMRV2 SAP Table\r\n",
					"# dboMRV2 = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboMRV2.parquet', format='parquet')\r\n",
					"# dboMRV2.createOrReplaceTempView(\"dboMRV2\")\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"ststockrevaluations\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"     omrv.docentry as sap_stockrevaluationsheader_docentry\r\n",
					"     ,omrv.transid as sap_stockrevaluationsheader_transid\r\n",
					"     ,omrv.docnum as sap_stockrevaluationsheader_docnum\r\n",
					"     ,omrv.docdate as sap_stockrevaluationsheader_postingdate\r\n",
					"     ,omrv.comments as sap_stockrevaluationsheader_comments\r\n",
					"     ,omrv.objtype as sap_stockrevaluationsheader_objtype\r\n",
					"     -- ,omrv.usersign as sap_stockrevaluationsheader_usersign\r\n",
					"     ,mrv1.linenum as sap_stockrevaluationsline_linenum\r\n",
					"     ,mrv1.dscription as sap_stockrevaluationsline_dscription\r\n",
					"     -- ,mrv1.objtype as sap_stockrevaluationsline_objtype\r\n",
					"     ,mrv1.itemcode as sap_stockrevaluationsline_itemcode\r\n",
					"     ,Right(Left(mrv1.itemcode,5),3) as sap_stockrevaluationsline_subdepotcode\r\n",
					"     ,mrv1.rtostock as sap_stockrevaluationsline_linetotal\r\n",
					"     ,mrv1.rincmacct as sap_stockrevaluationsline_acctcode\r\n",
					"     --,mrv2.baseline as sap_stockrevaluationsline_baseline\r\n",
					"     ,'stockrevaluation' as sap_stockrevaluationsline_doccat\r\n",
					"\r\n",
					"FROM dboOMRV omrv\r\n",
					"LEFT JOIN dboMRV1 mrv1 on mrv1.docentry = omrv.docentry\r\n",
					"LEFT JOIN dboMRV2 mrv2 on mrv2.docentry = omrv.docentry and mrv2.rtostock = mrv1.rtostock\r\n",
					"\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ststockrevaluations = spark.sql(\"SELECT * FROM ststockrevaluations\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ststockrevaluations.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/ststockrevaluations.parquet', mode = \"overwrite\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"SUCCESS\")"
				],
				"execution_count": null
			}
		]
	}
}