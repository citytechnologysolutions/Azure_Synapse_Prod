{
	"name": "14_DIST_STReadMRPFiles",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8944b4da-2eae-440f-9bb4-d6f0c49eb1a8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
				"name": "PRDSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #create dataframe for the stparcel lms table\r\n",
					"# stparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet/', format='parquet')\r\n",
					"# stparcel.createOrReplaceTempView(\"stparcel\")"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# import os\r\n",
					"# import pyspark.sql\r\n",
					"# from pyspark.sql.types import StructType, StructField, DoubleType, StringType, DecimalType, IntegerType, DateType\r\n",
					"# from pyspark.sql.functions import *"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # Variables\r\n",
					"\r\n",
					"# var_File_Path = \"abfss://synapse@\"+ StorageAccountRead2 +\".dfs.core.windows.net/Unstructured Data/MRP\"\r\n",
					"# # Processing\r\n",
					"\r\n",
					"# mrp_csv_files = spark.read.option(\"header\", True).csv(var_File_Path)\r\n",
					"\r\n",
					""
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mrp_csv_files = mrp_csv_files.withColumn('BillingExtractId', col(\"BillingExtractId\").cast('int'))\\\r\n",
					".withColumn('RetailYear', col('RetailYear').cast('int'))\\\r\n",
					".withColumn('RetailWeek', col('RetailWeek').cast('int'))\\\r\n",
					".withColumn('Quantity', col('Quantity').cast('int'))\\\r\n",
					".withColumn('VolumetricWeight', col('VolumetricWeight').cast(DecimalType(36,6)))\\\r\n",
					".withColumn('WeigtMeasureTypeId', col('WeigtMeasureTypeId').cast('int'))\\\r\n",
					".withColumn('FromStoreId', col('FromStoreId').cast('int'))\\\r\n",
					".withColumn('DestinationStoreId', col('DestinationStoreId').cast('int'))\\\r\n",
					".withColumn('ZoneId', col('ZoneId').cast('int'))\\\r\n",
					".withColumn('VolumetricRateExDC', col('VolumetricRateExDC').cast(DecimalType(36,6)))\\\r\n",
					".withColumn('VolumetricRateExDepot', col('VolumetricRateExDepot').cast(DecimalType(36,6)))\\\r\n",
					".withColumn('VolumetricRateExDC (Carriage Cost)', col('VolumetricRateExDC (Carriage Cost)').cast(DecimalType(36,6)))\\\r\n",
					".withColumn('VolumetricRateExDepot (Carriage Cost)', col('VolumetricRateExDepot (Carriage Cost)').cast(DecimalType(36,6)))\\\r\n",
					".withColumn('LH Carriage Cost', col('LH Carriage Cost').cast(DecimalType(36,6)))"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mrp_csv_files = mrp_csv_files.withColumnRenamed(\"VolumetricRateExDC (Carriage Cost)\",\"VolumetricRateExDCCarriageCost\")\\\r\n",
					".withColumnRenamed(\"VolumetricRateExDepot (Carriage Cost)\",\"VolumetricRateExDepotCarriageCost\")\\\r\n",
					".withColumnRenamed(\"LH Carriage Cost\",\"LHCarriageCost\")"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mrp_csv_files = mrp_csv_files.fillna(\"NULL\")"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mrp_csv_files.createOrReplaceTempView(\"mrp_csv_files\")"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stmrpcsvfiles\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"BillingExtractId as billingextractid,\r\n",
					"RetailYear as retailyear,\r\n",
					"RetailWeek as retailweek,\r\n",
					"ConsignmentNumber as consignmentnumber,\r\n",
					"TransferNumber as transfernumber,\r\n",
					"to_timestamp(REPLACE(TransferOutDate,' AM',''), 'd/M/yyyy HH:mm:ss') as transferoutdate,\r\n",
					"Quantity as quantity,\r\n",
					"VolumetricWeight  as volumetricweight ,\r\n",
					"WeigtMeasureTypeId as weigtmeasuretypeid,\r\n",
					"IsLineHaul as islinehaul,\r\n",
					"IsDistribution as isdistribution,\r\n",
					"FromStoreId as fromstoreid,\r\n",
					"DestinationStoreId as destinationstoreid,\r\n",
					"RouteCode as routecode,\r\n",
					"RouteDesc as routedesc,\r\n",
					"SubRouteCode as subroutecode,\r\n",
					"SubRouteDesc as subroutedesc,\r\n",
					"ZoneId as zoneid,\r\n",
					"ZRSNumber as zrsnumber,\r\n",
					"VolumetricRateExDC as volumetricrateexdc,\r\n",
					"VolumetricRateExDepot as volumetricrateexdepot,\r\n",
					"VolumetricRateExDCCarriageCost as volumetricrateexdccarriagecost,\r\n",
					"VolumetricRateExDepotCarriageCost as volumetricrateexdepotcarriagecost,\r\n",
					"LHCarriageCost as lhcarriagecost\r\n",
					"\r\n",
					"FROM mrp_csv_files"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stmrpcsvfiles = spark.sql(\"SELECT * FROM stmrpcsvfiles\")"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# stmrpcsvfiles.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stmrpcsvfiles.parquet', mode = \"overwrite\")"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcelmrprecon\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    * \r\n",
					"FROM stparcel\r\n",
					"WHERE lms_parcel_pdate >= '2023-04-01 00:00:00'\r\n",
					"AND lms_parcel_orderbillcustid IN (15,16,17,18,20,293941,293942,293943,293944,293945)"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stparcelmrprecon = spark.sql(\"SELECT * FROM stparcelmrprecon\")"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stparcelmrprecon.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stparcelmrprecon.parquet', mode = \"overwrite\")"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"sttransfers_tmp1\r\n",
					"AS\r\n",
					"SELECT DISTINCT\r\n",
					"    lms_parcel_barcode as combinetransfers\r\n",
					"    \r\n",
					"FROM stparcelmrprecon\r\n",
					"\r\n",
					"UNION\r\n",
					"\r\n",
					"SELECT DISTINCT\r\n",
					"    transfernumber as combinetransfers\r\n",
					"    \r\n",
					"FROM stmrpcsvfiles\r\n",
					"\r\n",
					""
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sttransfers_tmp1 = spark.sql(\"SELECT * FROM sttransfers_tmp1\")"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"sttransfers\r\n",
					"AS\r\n",
					"SELECT DISTINCT\r\n",
					"     t.combinetransfers\r\n",
					"    ,LEFT(t.combinetransfers,5) as prefix\r\n",
					"    ,to_date(p.lms_parcel_pdate) as lms_parcel_pdate\r\n",
					"    ,to_date(m.transferoutdate) as transferoutdate\r\n",
					"    ,to_date(COALESCE(p.lms_parcel_pdate,m.transferoutdate)) as date\r\n",
					"    ,CASE \r\n",
					"        WHEN p.lms_parcel_id is null THEN 1\r\n",
					"        ELSE 0\r\n",
					"    END as existsinmrponly\r\n",
					"    ,CASE \r\n",
					"        WHEN m.transfernumber is null THEN 1\r\n",
					"        ELSE 0\r\n",
					"    END as existsinlmsonly\r\n",
					"    ,CASE \r\n",
					"        WHEN p.lms_parcel_id is not null AND (m.transfernumber) is not null THEN 1\r\n",
					"        ELSE 0\r\n",
					"    END as counter\r\n",
					"    \r\n",
					"\r\n",
					"    \r\n",
					"FROM sttransfers_tmp1 t\r\n",
					"LEFT JOIN stparcelmrprecon p on p.lms_parcel_barcode = t.combinetransfers\r\n",
					"LEFT JOIN stmrpcsvfiles m on m.transfernumber = t.combinetransfers\r\n",
					"WHERE t.combinetransfers is not NULL\r\n",
					""
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sttransfers = spark.sql(\"SELECT * FROM sttransfers\")"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# sttransfers.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/sttransfers.parquet', mode = \"overwrite\")"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"SUCCESS\")"
				],
				"execution_count": null
			}
		]
	}
}