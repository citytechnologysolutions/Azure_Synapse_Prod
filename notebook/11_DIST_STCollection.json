{
	"name": "11_DIST_STCollection",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7dfcc490-ed10-4a33-8498-a098b377d2a3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"# #Create DataFrame for the dbocollect LMS Table\r\n",
					"# dbocollect = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocollect.parquet', format='parquet')\r\n",
					"# dbocollect.createOrReplaceTempView(\"dbocollect\")\r\n",
					"\r\n",
					"# #Create DataFrame for the publicdraftcollection ORV Table\r\n",
					"# publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
					"# publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
					"\r\n",
					"# #Create DataFrame for the publicdraftcollection ORV Table\r\n",
					"# publicdraftcollection = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdraftcollection.parquet', format='parquet')\r\n",
					"# publicdraftcollection.createOrReplaceTempView(\"publicdraftcollection\")\r\n",
					"\r\n",
					"# #Create DataFrame for the publicdispatch ORV Table\r\n",
					"# publicdispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
					"# publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
					"\r\n",
					"# #create dataframe for the publicpod orv table\r\n",
					"# publicpod = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicpod.parquet', format='parquet')\r\n",
					"# publicpod.createOrReplaceTempView(\"publicpod\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql.functions import *\r\n",
					"# from pyspark.sql.window import Window\r\n",
					"# from pyspark.sql.types import IntegralType"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"partitionfirst=Window.partitionBy(\"did\").orderBy(col(\"did\").asc())"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pod_tmp = publicpod.withColumn(\"row_num\",row_number().over(partitionfirst))"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pod_tmp.createOrReplaceTempView(\"pod_tmp\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"partitionfirst=Window.partitionBy(\"collectionwaybillid\").orderBy(col(\"collectionwaybillid\").asc()).orderBy(col(\"id\").asc())"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"draftcollection_tmp = publicdraftcollection.withColumn(\"row_num\",row_number().over(partitionfirst))"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"draftcollection_tmp.createOrReplaceTempView(\"draftcollection_tmp\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stcollection\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"     c.id as lms_collect_id\r\n",
					"    ,c.date as lms_collect_date\r\n",
					"    ,c.cservice as lms_collect_cservice\r\n",
					"    ,c.billcust as lms_collect_billcust\r\n",
					"    ,c.pickupcustid as lms_collect_pickupcustid\r\n",
					"    ,c.delivercustid as lms_collect_delivercustid\r\n",
					"    ,c.locationid as lms_collect_locationid\r\n",
					"    ,c.noofparcels as lms_collect_noofparcels\r\n",
					"    ,c.weight as lms_collect_weight\r\n",
					"    ,c.timeready as lms_collect_timeready\r\n",
					"    -- ,c.vehiclecapacity as lms_collect_vehiclecapacity\r\n",
					"    ,c.collectrefno as lms_collect_collectrefno\r\n",
					"    ,c.timeclosed as lms_collect_timeclosed\r\n",
					"    -- ,c.securitycollect as lms_collect_securitycollect\r\n",
					"    -- ,c.confirmedby as lms_collect_confirmedby\r\n",
					"    ,c.courierid as lms_collect_courierid\r\n",
					"    ,c.confirmeddate as lms_collect_confirmeddate\r\n",
					"    -- ,c.transferreddate as lms_collect_transferreddate\r\n",
					"    ,c.senddate as lms_collect_senddate\r\n",
					"    ,c.orderid as lms_collect_orderid\r\n",
					"    -- ,c.orderdate as lms_collect_orderdate\r\n",
					"    -- ,c.userid as lms_collect_userid\r\n",
					"    ,c.reason as lms_collect_reason\r\n",
					"    ,c.cubes as lms_collect_cubes\r\n",
					"    ,c.custref as lms_collect_custref\r\n",
					"    ,c.custref3 as lms_collect_custref3\r\n",
					"    ,c.custaccid as lms_collect_custaccid\r\n",
					"    ,c.collectparentid as lms_collect_collectparentid\r\n",
					"    ,c.duedate as lms_collect_duedate\r\n",
					"    -- ,c.specdel as lms_collect_specdel\r\n",
					"    -- ,c.flunits as lms_collect_flunits\r\n",
					"    -- ,c.flkgs as lms_collect_flkgs\r\n",
					"    -- ,c.quote as lms_collect_quote\r\n",
					"    -- ,c.bill_vehicletype as lms_collect_bill_vehicletype\r\n",
					"    ,c.collectstatusid as lms_collect_collectstatusid\r\n",
					"    ,CASE \r\n",
					"        WHEN c.collectstatusid = 0 THEN 'Created' \r\n",
					"        WHEN c.collectstatusid = 1 THEN 'On Collection' \r\n",
					"        WHEN c.collectstatusid = 2 THEN 'Collected' \r\n",
					"        WHEN c.collectstatusid = 3 THEN 'Complete' \r\n",
					"        WHEN c.collectstatusid = 4 THEN 'Cancelled' \r\n",
					"        WHEN c.collectstatusid = 5 THEN 'Failed' \r\n",
					"        ELSE c.collectstatusid\r\n",
					"    END as lms_collect_collectstatus\r\n",
					"    ,c.bill_collectstatusid as lms_collect_bill_collectstatusid\r\n",
					"    ,c.cancelreason as lms_collect_cancelreason\r\n",
					"    ,c.cancelcomments as lms_collect_cancelcomments\r\n",
					"    ,c.loadid as lms_collect_loadid\r\n",
					"    ,c.custref2 as lms_collect_custref2\r\n",
					"    ,c.created as lms_collect_created\r\n",
					"    ,c.oncollection as lms_collect_oncollection\r\n",
					"    ,c.collected as lms_collect_collected\r\n",
					"    ,c.complete as lms_collect_complete\r\n",
					"    ,c.cancelled as lms_collect_cancelled\r\n",
					"    ,c.failed as lms_collect_failed\r\n",
					"    ,c.ctype as lms_collect_ctype\r\n",
					"    ,c.quoteid as lms_collect_quoteid\r\n",
					"    ,c.lastupdate as lms_collect_lastupdate\r\n",
					"    ,c.notes as lms_collect_notes\r\n",
					"    ,c.docurl as lms_collect_docurl\r\n",
					"    ,c.docdate as lms_collect_docdate\r\n",
					"    -- ,c.orvstatus as lms_collect_orvstatus\r\n",
					"    -- ,c.orvcode as lms_collect_orvcode\r\n",
					"    ,c.oldloadid as lms_collect_oldloadid\r\n",
					"\r\n",
					"    ,dc.id as orv_draftcollection_id\r\n",
					"    ,dc.tolocid as orv_draftcollection_tolocid\r\n",
					"    ,dc.fromlocid as orv_draftcollection_fromlocid\r\n",
					"    ,dc.loadid as orv_draftcollection_loadid\r\n",
					"    ,dc.status as orv_draftcollection_status\r\n",
					"    ,to_timestamp(dc.importedate) as orv_draftcollection_importedate\r\n",
					"    ,dc.fromstr as orv_draftcollection_fromstr\r\n",
					"    ,dc.tostr as orv_draftcollection_tostr\r\n",
					"    ,dc.did as orv_draftcollection_did\r\n",
					"    ,dc.mergedlmsid as orv_draftcollection_mergedlmsid\r\n",
					"    ,to_timestamp(dc.rejectdate) as orv_draftcollection_rejectdate\r\n",
					"    ,to_timestamp(dc.confirmdate) as orv_draftcollection_confirmdate\r\n",
					"    ,dc.nocollection as orv_draftcollection_nocollection\r\n",
					"    ,dc.customerref as orv_draftcollection_customerref\r\n",
					"    ,dc.collectionwaybillid as orv_draftcollection_collectionwaybillid\r\n",
					"    ,to_timestamp(dc.collectbydate) as orv_draftcollection_collectbydate\r\n",
					"    ,dc.rejectreason as orv_draftcollection_rejectreason\r\n",
					"    ,dc.cancelctr as orv_draftcollection_cancelctr\r\n",
					"    ,dc.courierid as orv_draftcollection_courierid\r\n",
					"    ,dc.collectstatusid as orv_draftcollection_collectstatusid\r\n",
					"    ,d.id as orv_delivery_id\r\n",
					"    ,d.did as orv_delivery_did\r\n",
					"    ,d.waybillid as orv_delivery_waybillid\r\n",
					"    ,d.address as orv_delivery_address\r\n",
					"    ,d.town as orv_delivery_town\r\n",
					"    ,d.province as orv_delivery_province\r\n",
					"    ,d.country as orv_delivery_country\r\n",
					"    ,d.lat as orv_delivery_lat\r\n",
					"    ,d.lng as orv_delivery_lng\r\n",
					"    ,d.placeid as orv_delivery_placeid\r\n",
					"    ,d.what3words as orv_delivery_what3words\r\n",
					"    ,d.zipcode as orv_delivery_zipcode\r\n",
					"    ,to_timestamp(d.eta) as orv_delivery_eta\r\n",
					"    ,to_timestamp(d.actualeta) as orv_delivery_actualeta\r\n",
					"    ,to_timestamp(d.deliverydate) as orv_delivery_deliverydate\r\n",
					"    ,to_timestamp(d.deliverby) as orv_delivery_deliverby\r\n",
					"    ,d.deliveryorder as orv_delivery_deliveryorder\r\n",
					"    ,to_timestamp(d.tsgeofenceenter) as orv_delivery_tsgeofenceenter\r\n",
					"    ,to_timestamp(d.tsscanningstart) as orv_delivery_tsscanningstart\r\n",
					"    ,to_timestamp(d.tsscanningstop) as orv_delivery_tsscanningstop\r\n",
					"    ,to_timestamp(d.tspodsignature) as orv_delivery_tspodsignature\r\n",
					"    ,d.aid as orv_delivery_aid\r\n",
					"    ,d.numprcls as orv_delivery_numprcls\r\n",
					"    ,d.geocodingstatus as orv_delivery_geocodingstatus\r\n",
					"    ,to_timestamp(d.skipdate) as orv_delivery_skipdate\r\n",
					"    ,d.skipreason as orv_delivery_skipreason\r\n",
					"    ,d.status as orv_delivery_status\r\n",
					"    ,d.partialmatch as orv_delivery_partialmatch\r\n",
					"    ,d.approximated as orv_delivery_approximated\r\n",
					"    ,d.lmsorder as orv_delivery_lmsorder\r\n",
					"    ,d.optimizedorder as orv_delivery_optimizedorder\r\n",
					"    ,d.seal as orv_delivery_seal\r\n",
					"    ,d.customerinvoice as orv_delivery_customerinvoice\r\n",
					"    ,d.customerdn as orv_delivery_customerdn\r\n",
					"    ,d.grv as orv_delivery_grv\r\n",
					"    ,d.chepslip as orv_delivery_chepslip\r\n",
					"    ,d.cleandelivery as orv_delivery_cleandelivery\r\n",
					"    ,d.trackingcode as orv_delivery_trackingcode\r\n",
					"    ,d.mode as orv_delivery_mode\r\n",
					"    ,d.customorder as orv_delivery_customorder\r\n",
					"    ,d.verified as orv_delivery_verified\r\n",
					"    ,d.altered as orv_delivery_altered\r\n",
					"    ,d.orderid as orv_delivery_orderid\r\n",
					"    ,d.mergeid as orv_delivery_mergeid\r\n",
					"    ,d.orderref as orv_delivery_orderref\r\n",
					"    ,d.drivernote as orv_delivery_drivernote\r\n",
					"    ,d.guid as orv_delivery_guid\r\n",
					"    ,d.timedefinite as orv_delivery_timedefinite\r\n",
					"    ,d.orvcode as orv_delivery_orvcode\r\n",
					"    ,d.vaid as orv_delivery_vaid\r\n",
					"    ,to_timestamp(d.delegatedate) as orv_delivery_delegatedate\r\n",
					"    ,d.delegatemode as orv_delivery_delegatemode\r\n",
					"    ,d.debriefmode as orv_delivery_debriefmode\r\n",
					"    ,d.debriefed as orv_delivery_debriefed\r\n",
					"    ,to_timestamp(d.insdate) as orv_delivery_insdate\r\n",
					"    ,d.reviseddebrief as orv_delivery_reviseddebrief\r\n",
					"    ,d.lmsdebriefed as orv_delivery_lmsdebriefed\r\n",
					"    ,to_timestamp(d.uncanceldate) as orv_delivery_uncanceldate\r\n",
					"    ,to_timestamp(d.podlaterdate) as orv_delivery_podlaterdate\r\n",
					"    ,to_timestamp(d.podmanualdate) as orv_delivery_podmanualdate\r\n",
					"    ,d.manualdebriefreason as orv_delivery_manualdebriefreason\r\n",
					"    ,d.submanualdebriefreason as orv_delivery_submanualdebriefreason\r\n",
					"    ,d.outofgeofencereason as orv_delivery_outofgeofencereason\r\n",
					"    ,to_timestamp(d.tsentergeofenceapp) as orv_delivery_tsentergeofenceapp\r\n",
					"    ,to_timestamp(d.tsexitgeofenceapp) as orv_delivery_tsexitgeofenceapp\r\n",
					"    ,d.comebacklater as orv_delivery_comebacklater\r\n",
					"    ,d.uncancelusername as orv_delivery_uncancelusername\r\n",
					"    ,d.cref as orv_delivery_cref\r\n",
					"    ,d.division as orv_delivery_division\r\n",
					"    ,d.descriptionofgoods as orv_delivery_descriptionofgoods\r\n",
					"    ,d.skiplng as orv_delivery_skiplng\r\n",
					"    ,d.skiplat as orv_delivery_skiplat\r\n",
					"    ,d.courierid as orv_delivery_courierid\r\n",
					"    ,d.posreason as orv_delivery_posreason\r\n",
					"    ,to_timestamp(d.moddate) as orv_delivery_moddate\r\n",
					"    ,d.mallid as orv_delivery_mallid\r\n",
					"    ,d.mallgid as orv_delivery_mallgid\r\n",
					"    ,d.lmsidskipreason as orv_delivery_lmsidskipreason\r\n",
					"    ,d.deleteforimport as orv_delivery_deleteforimport\r\n",
					"    ,d.podoutofgeofence as orv_delivery_podoutofgeofence\r\n",
					"    ,d.originalcustomerid as orv_delivery_originalcustomerid\r\n",
					"    ,p.id as orv_pod_id\r\n",
					"    ,p.name as orv_pod_name\r\n",
					"    ,to_timestamp(p.poddate) as orv_pod_poddate\r\n",
					"    ,p.lat as orv_pod_lat\r\n",
					"    ,p.lng as orv_pod_lng\r\n",
					"    ,p.customerrating as orv_pod_customerrating\r\n",
					"    ,p.customerfeedback as orv_pod_customerfeedback\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"FROM dbocollect c\r\n",
					"LEFT JOIN draftcollection_tmp dc on dc.collectionwaybillid = c.id and dc.row_num = 1\r\n",
					"LEFT JOIN publicdelivery d on d.waybillid =  dc.collectionwaybillid and d.mode = 'collect'\r\n",
					"LEFT JOIN pod_tmp p on p.did = d.id and p.row_num = 1\r\n",
					"\r\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stcollection = spark.sql(\"SELECT * FROM stcollection\")"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stcollection.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stcollection.parquet', mode = \"overwrite\")"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"SUCCESS\")"
				],
				"execution_count": 13
			}
		]
	}
}