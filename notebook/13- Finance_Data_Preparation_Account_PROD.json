{
	"name": "13- Finance_Data_Preparation_Account_PROD",
	"properties": {
		"folder": {
			"name": "ARCHIVE/PROD/Transactions Notebooks PROD"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9b6e2999-9258-4570-a120-8ee1bdcb19b9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load Source Data from BlobStorage"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#dboOACT = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboOACT.parquet', format='parquet')\r\n",
					"#dboOACT.createOrReplaceTempView(\"dboOACT\")\r\n",
					"\r\n",
					"#TMPACCOUNTS = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_TMPACCOUNTS.parquet', format='parquet')\r\n",
					"#TMPACCOUNTS.createOrReplaceTempView(\"TMPACCOUNTS\")\r\n",
					"\r\n",
					"#dboOASC = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboOASC.parquet', format='parquet')\r\n",
					"#dboOASC.createOrReplaceTempView(\"dboOASC\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start of QView scripting translated over to MSSQL for table DIM_Account"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"ACCOUNT = spark.sql(\"\"\"\r\n",
					"SELECT DISTINCT ta.System_Account_CodeA as System_Account_Code, \r\n",
					"                ta.Account_Type, \r\n",
					"                ta.Account_CodeA as Account_Code, \r\n",
					"                ta.Service_TypeA as Service_Type_Code,\r\n",
					"                ta.Depot,\r\n",
					"                ta.GroupMaskA as GroupMask,\r\n",
					"                ta.Company,\r\n",
					"                ta.Acct_Project,\r\n",
					"                ta.Account_Name,\r\n",
					"                ta.System_Account_Code_KEY,\r\n",
					"                ta.`Level_5_Name`,\r\n",
					"                ta.`Level_4_Name`,\r\n",
					"                ta.`Level_3_Name`,\r\n",
					"                ta.`Level_2_Name`,\r\n",
					"                ta.`Level_1_Name`,\r\n",
					"                \r\n",
					"                --Upper(`Account Group`) as `Account_Group` DON't have the excel file Account Groups.xlsx\r\n",
					"\r\n",
					"                --oasc.Name as `Service_Type`,\r\n",
					"                --\"City Logistics New\" as Company,\r\n",
					"\r\n",
					"                oact1.AcctCode,\r\n",
					"                oact1.FatherNum,\r\n",
					"\r\n",
					"                oact2.FatherNum as FatherNum2,\r\n",
					"\r\n",
					"                oact3.FatherNum as FatherNum3,\r\n",
					"\r\n",
					"                oact4.FatherNum as FatherNum4,\r\n",
					"\r\n",
					"                oact5.FatherNum as FatherNum5\r\n",
					"\r\n",
					"FROM TMPACCOUNTS ta\r\n",
					"--Service Type Join\r\n",
					"LEFT JOIN dboOASC oasc\r\n",
					"       ON ta.Service_TypeA = oasc.Code\r\n",
					"--Chart Of Account Join\r\n",
					"LEFT JOIN dboOACT oact1\r\n",
					"       ON ta.`Level_5_Name` = UPPER(oact1.AcctName)\r\n",
					"      AND oact1.Levels = 5\r\n",
					"      AND System_Account_CodeA = oact1.AcctCode\r\n",
					"LEFT JOIN dboOACT oact2\r\n",
					"       ON ta.`Level_4_Name` = UPPER(oact2.AcctName)\r\n",
					"      AND oact2.Levels = 4\r\n",
					"      AND System_Account_CodeA = oact2.AcctCode\r\n",
					"LEFT JOIN dboOACT oact3\r\n",
					"       ON ta.`Level_3_Name` = UPPER(oact3.AcctName)\r\n",
					"      AND oact3.Levels = 3\r\n",
					"      AND System_Account_CodeA = oact3.AcctCode\r\n",
					"LEFT JOIN dboOACT oact4\r\n",
					"       ON ta.`Level_2_Name` = UPPER(oact4.AcctName)\r\n",
					"      AND oact4.Levels = 2\r\n",
					"      AND System_Account_CodeA = oact4.AcctCode\r\n",
					"LEFT JOIN dboOACT oact5\r\n",
					"       ON ta.`Level_1_Name` = UPPER(oact5.AcctName)\r\n",
					"      AND oact5.Levels = 1\r\n",
					"      AND System_Account_CodeA = oact5.AcctCode\r\n",
					"\"\"\")\r\n",
					"#ACCOUNT.show()\r\n",
					"ACCOUNT.createOrReplaceTempView(\"ACCOUNT\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Write success message for production script"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"Scripts have successfully executed\")"
				],
				"execution_count": null
			}
		]
	}
}