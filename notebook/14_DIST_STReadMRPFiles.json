{
	"name": "14_DIST_STReadMRPFiles",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d28c6ce3-22ff-4686-86f1-b8f382f14703"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 130
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# import os\r\n",
					"# import pyspark.sql\r\n",
					"# from pyspark.sql.types import StructType, StructField, DoubleType, StringType, DecimalType, IntegerType, DateType\r\n",
					"# from pyspark.sql.functions import *"
				],
				"execution_count": 131
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # Variables\r\n",
					"\r\n",
					"# var_File_Path = \"abfss://synapse@\"+ StorageAccountRead2 +\".dfs.core.windows.net/Unstructured Data/MRP\"\r\n",
					"# # Processing\r\n",
					"\r\n",
					"# mrp_csv_files = spark.read.option(\"header\", True).csv(var_File_Path)\r\n",
					"\r\n",
					""
				],
				"execution_count": 132
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mrp_csv_files = mrp_csv_files.withColumn('BillingExtractId', col(\"BillingExtractId\").cast('int'))\\\r\n",
					".withColumn('RetailYear', col('RetailYear').cast('int'))\\\r\n",
					".withColumn('RetailWeek', col('RetailWeek').cast('int'))\\\r\n",
					".withColumn('Quantity', col('Quantity').cast('int'))\\\r\n",
					".withColumn('VolumetricWeight', col('VolumetricWeight').cast(DecimalType(36,6)))\\\r\n",
					".withColumn('WeigtMeasureTypeId', col('WeigtMeasureTypeId').cast('int'))\\\r\n",
					".withColumn('FromStoreId', col('FromStoreId').cast('int'))\\\r\n",
					".withColumn('DestinationStoreId', col('DestinationStoreId').cast('int'))\\\r\n",
					".withColumn('ZoneId', col('ZoneId').cast('int'))\\\r\n",
					".withColumn('VolumetricRateExDC', col('VolumetricRateExDC').cast(DecimalType(36,6)))\\\r\n",
					".withColumn('VolumetricRateExDepot', col('VolumetricRateExDepot').cast(DecimalType(36,6)))\\\r\n",
					".withColumn('VolumetricRateExDC (Carriage Cost)', col('VolumetricRateExDC (Carriage Cost)').cast(DecimalType(36,6)))\\\r\n",
					".withColumn('VolumetricRateExDepot (Carriage Cost)', col('VolumetricRateExDepot (Carriage Cost)').cast(DecimalType(36,6)))\\\r\n",
					".withColumn('LH Carriage Cost', col('LH Carriage Cost').cast(DecimalType(36,6)))"
				],
				"execution_count": 133
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mrp_csv_files = mrp_csv_files.withColumnRenamed(\"VolumetricRateExDC (Carriage Cost)\",\"VolumetricRateExDCCarriageCost\")\\\r\n",
					".withColumnRenamed(\"VolumetricRateExDepot (Carriage Cost)\",\"VolumetricRateExDepotCarriageCost\")\\\r\n",
					".withColumnRenamed(\"LH Carriage Cost\",\"LHCarriageCost\")"
				],
				"execution_count": 134
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mrp_csv_files = mrp_csv_files.fillna(\"NULL\")"
				],
				"execution_count": 135
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mrp_csv_files.createOrReplaceTempView(\"mrp_csv_files\")"
				],
				"execution_count": 136
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stmrpcsvfiles\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"BillingExtractId as billingextractid,\r\n",
					"RetailYear as retailyear,\r\n",
					"RetailWeek as retailweek,\r\n",
					"ConsignmentNumber as consignmentnumber,\r\n",
					"TransferNumber as transfernumber,\r\n",
					"to_timestamp(REPLACE(TransferOutDate,' AM',''), 'd/M/yyyy HH:mm:ss') as transferoutdate,\r\n",
					"Quantity as quantity,\r\n",
					"VolumetricWeight  as volumetricweight ,\r\n",
					"WeigtMeasureTypeId as weigtmeasuretypeid,\r\n",
					"IsLineHaul as islinehaul,\r\n",
					"IsDistribution as isdistribution,\r\n",
					"FromStoreId as fromstoreid,\r\n",
					"DestinationStoreId as destinationstoreid,\r\n",
					"RouteCode as routecode,\r\n",
					"RouteDesc as routedesc,\r\n",
					"SubRouteCode as subroutecode,\r\n",
					"SubRouteDesc as subroutedesc,\r\n",
					"ZoneId as zoneid,\r\n",
					"ZRSNumber as zrsnumber,\r\n",
					"VolumetricRateExDC as volumetricrateexdc,\r\n",
					"VolumetricRateExDepot as volumetricrateexdepot,\r\n",
					"VolumetricRateExDCCarriageCost as volumetricrateexdccarriagecost,\r\n",
					"VolumetricRateExDepotCarriageCost as volumetricrateexdepotcarriagecost,\r\n",
					"LHCarriageCost as lhcarriagecost\r\n",
					"\r\n",
					"FROM mrp_csv_files"
				],
				"execution_count": 137
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stmrpcsvfiles = spark.sql(\"SELECT * FROM stmrpcsvfiles\")"
				],
				"execution_count": 138
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# stmrpcsvfiles.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stmrpcsvfiles.parquet', mode = \"overwrite\")"
				],
				"execution_count": 139
			}
		]
	}
}