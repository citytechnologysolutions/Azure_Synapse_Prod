{
	"name": "04_108_RptBillConsignmentLevel_RevenueVerticalReport",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Reports/LMS"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "b23284d5-3c0c-4f48-b3b9-aff2c8e32e70"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #Create DataFrame for the rptbillconsignmentlevel LMS Table\r\n",
					"# rptbillconsignmentlevel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/RPT/rptbillconsignmentlevel.parquet', format='parquet')\r\n",
					"# rptbillconsignmentlevel.createOrReplaceTempView(\"rptbillconsignmentlevel\")\r\n",
					"\r\n",
					"# #Create DataFrame for the rptbillconsignmentexceptionlevel LMS Table\r\n",
					"# rptbillconsignmentexceptionlevel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/RPT/rptbillconsignmentexceptionlevel.parquet', format='parquet')\r\n",
					"# rptbillconsignmentexceptionlevel.createOrReplaceTempView(\"rptbillconsignmentexceptionlevel\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbobillzoneroute LMS Table\r\n",
					"# dbobillzoneroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zoneroute.parquet', format='parquet')\r\n",
					"# dbobillzoneroute.createOrReplaceTempView(\"dbobillzoneroute\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stbillcustomer LMS Table\r\n",
					"# stbillcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stbillcustomer.parquet', format='parquet')\r\n",
					"# stbillcustomer.createOrReplaceTempView(\"stbillcustomer\")"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"revenueverticalreport_tmp1\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"    bc.deliverrouteid as zonerouteid\r\n",
					"    ,bc.zonedescription as zonedescription\r\n",
					"    ,bc.billcust as billingcustomerid\r\n",
					"    ,bc.billingcustomername as billingcustomername\r\n",
					"    ,to_date(bc.cdate1) as date\r\n",
					"    ,SUM(coalesce(bc.noofparcels, 0)) as noofparcels\r\n",
					"    ,SUM(coalesce(bc.chargeweight, 0)) as kgsconsigned\r\n",
					"    ,SUM(coalesce(bc.Routecharge, 0)) as revenue\r\n",
					"    ,SUM(coalesce(bc.TotFuelSurcharge, 0)) as fuelsurcharge\r\n",
					"    ,SUM(coalesce(bc.TotDocSurcharge, 0)) as docsurcharge\r\n",
					"    ,SUM(coalesce(bc.TotOtherSurcharge, 0)) as othersurcharge\r\n",
					"    ,SUM(coalesce(bc.TotCovidSurcharge, 0)) as covidsurcharge\r\n",
					"    ,0.00 as exception\r\n",
					"FROM rptbillconsignmentlevel bc \r\n",
					"WHERE bc.chargeweight > 0\r\n",
					"AND coalesce(bc.RouteMissingInd,0) = 0\r\n",
					"GROUP BY\r\n",
					"     bc.deliverrouteid\r\n",
					"    ,bc.zonedescription\r\n",
					"    ,bc.billcust\r\n",
					"    ,bc.billingcustomername\r\n",
					"    ,to_date(bc.cdate1)"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"revenueverticalreport_tmp1 = spark.sql(\"SELECT * FROM revenueverticalreport_tmp1\")"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"revenueverticalreport_tmp2\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"     bc.deliverrouteid as zonerouteid\r\n",
					"    ,bc.zonedescription as zonedescription\r\n",
					"    ,bc.billcust as billingcustomerid\r\n",
					"    ,bc.billingcustomername as billingcustomername\r\n",
					"    ,to_date(bc.cdate1) date\r\n",
					"    ,SUM(coalesce(bc.noofparcels, 0)) noofparcels\r\n",
					"    ,SUM(coalesce(bc.chargeweight, 0)) kgsconsigned\r\n",
					"    ,SUM(coalesce(bc.Routecharge, 0)) revenue\r\n",
					"    ,SUM(coalesce(bc.TotFuelSurcharge, 0)) fuelsurcharge\r\n",
					"    ,SUM(coalesce(bc.TotDocSurcharge, 0)) docsurcharge\r\n",
					"    ,SUM(coalesce(bc.TotOtherSurcharge, 0)) othersurcharge\r\n",
					"    ,SUM(coalesce(bc.TotCovidSurcharge, 0)) covidsurcharge\r\n",
					"    ,SUM(coalesce(bc.Routecharge, 0.00)) exception\r\n",
					"FROM rptbillconsignmentexceptionlevel bc \r\n",
					"WHERE bc.chargeweight != 0\r\n",
					"AND coalesce(bc.RouteMissingInd,0) = 0\r\n",
					"GROUP BY\r\n",
					"     bc.deliverrouteid\r\n",
					"    ,bc.zonedescription\r\n",
					"    ,bc.billcust\r\n",
					"    ,bc.billingcustomername\r\n",
					"    ,to_date(bc.cdate1)"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"revenueverticalreport_tmp2 = spark.sql(\"SELECT * FROM revenueverticalreport_tmp2\")"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"revenueverticalreport\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"t1.billingcustomerid,\r\n",
					"t1.billingcustomername,\r\n",
					"t1.zonerouteid,\r\n",
					"t1.zonedescription,\r\n",
					"t1.date,\r\n",
					"coalesce(t1.noofparcels,0) + coalesce(t2.noofparcels,0) as noofparcels,\r\n",
					"coalesce(t1.kgsconsigned,0) + coalesce(t2.kgsconsigned,0) as kgsconsigned,\r\n",
					"coalesce(t1.revenue,0) + coalesce(t2.revenue,0) as revenue,\r\n",
					"coalesce(t1.fuelsurcharge,0) + coalesce(t2.fuelsurcharge,0)as fuelsurcharge,\r\n",
					"coalesce(t1.docsurcharge,0) + coalesce(t2.docsurcharge,0) as docsurcharge, \r\n",
					"coalesce(t1.othersurcharge,0) + coalesce(t2.othersurcharge,0) as othersurcharge,\r\n",
					"coalesce(t1.covidsurcharge,0) + coalesce(t2.covidsurcharge,0) as covidsurcharge,\r\n",
					"coalesce(t2.exception,0) as exception,\r\n",
					"coalesce(t1.revenue,0) + coalesce(t2.revenue,0) +\r\n",
					"coalesce(t1.fuelsurcharge,0) + coalesce(t2.fuelsurcharge,0) +\r\n",
					"coalesce(t1.docsurcharge,0) + coalesce(t2.docsurcharge,0) +\r\n",
					"coalesce(t1.othersurcharge,0) + coalesce(t2.othersurcharge,0)+ \r\n",
					"coalesce(t1.covidsurcharge,0) + coalesce(t2.covidsurcharge,0) + coalesce(t2.exception,0) as total\r\n",
					"\r\n",
					"FROM revenueverticalreport_tmp1 t1 \r\n",
					"LEFT JOIN revenueverticalreport_tmp2 t2 on t2.billingcustomerid = t1.billingcustomerid AND t2.zonerouteid = t1.zonerouteid and t1.date = t2.date"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"revenueverticalreport = spark.sql(\"SELECT * FROM revenueverticalreport\")"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# revenueverticalreport.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/RPT/revenueverticalreport.parquet', mode = \"overwrite\")"
				],
				"execution_count": 47
			}
		]
	}
}