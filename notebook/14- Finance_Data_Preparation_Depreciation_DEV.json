{
	"name": "14- Finance_Data_Preparation_Depreciation_DEV",
	"properties": {
		"folder": {
			"name": "ARCHIVE/DEV/Archived/Transactions Notebooks DEV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "53427fda-ec02-49cc-85dc-eba00e4017b3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#F_FIXED_ASSETS_CURRENT_VALUE = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/F_FIXED_ASSETS_CURRENT_VALUE.parquet', format='parquet')\r\n",
					"#F_FIXED_ASSETS_CURRENT_VALUE.createOrReplaceTempView(\"F_FIXED_ASSETS_CURRENT_VALUE\")\r\n",
					"\r\n",
					"#F_FIXED_ASSETS_DEPRECIATION = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/F_FIXED_ASSETS_DEPRECIATION.parquet', format='parquet')\r\n",
					"#F_FIXED_ASSETS_DEPRECIATION.createOrReplaceTempView(\"F_FIXED_ASSETS_DEPRECIATION\")\r\n",
					"\r\n",
					"#TRANSACTIONS = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/F_TRANSACTIONS_CONTINUED.parquet', format='parquet')\r\n",
					"#TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM `TRANSACTIONS`\r\n",
					"WHERE TRIM(`Acct_Project`) LIKE '%B506%'"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DEPRECIATION = spark.sql(\"\"\"\r\n",
					"SELECT TRIM(PrjCode) as `Fleet_Code`,\r\n",
					"\t Asset_Number,\r\n",
					"\t Company\r\n",
					"FROM F_FIXED_ASSETS_CURRENT_VALUE\r\n",
					"where length(PrjCode) > 1\r\n",
					"\"\"\")\r\n",
					"#DEPRECIATION.show()\r\n",
					"DEPRECIATION.createOrReplaceTempView(\"DEPRECIATION\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"DEPRECIATION = spark.sql(\"\"\"\r\n",
					"SELECT d.*, \r\n",
					"       --Asset_Number, \r\n",
					"       CAST(Depr_Date as DATE) as `Posting_Date`, \r\n",
					"       Depr_Type, \r\n",
					"       Depr_Days, \r\n",
					"       GROSS_AV, \r\n",
					"       NAV_Bef_Depr, \r\n",
					"       Depr_Value, \r\n",
					"       NAV_Aft_Depr\r\n",
					"       --Asset_Grp, \r\n",
					"       --Company\r\n",
					"FROM DEPRECIATION d\r\n",
					"LEFT JOIN F_FIXED_ASSETS_DEPRECIATION fad\r\n",
					"       ON TRIM(d.Asset_Number) = TRIM(fad.Asset_Number)\r\n",
					"\"\"\")\r\n",
					"#DEPRECIATION.show()\r\n",
					"DEPRECIATION.createOrReplaceTempView(\"DEPRECIATION\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DEPRECIATION_J = spark.sql(\"\"\"\r\n",
					"SELECT distinct\r\n",
					"\t Asset_Number,\r\n",
					"\t Company,\r\n",
					"\t TRIM(`Fleet_Code`) as `Fleet_Code`,\r\n",
					"\t `Posting_Date`,\r\n",
					"     CONCAT(TRIM(`Fleet_Code`),Company,CAST(`Posting_Date` as DATE)) as `Depreciation_KEY`\r\n",
					"FROM DEPRECIATION\r\n",
					"\"\"\")\r\n",
					"#DEPRECIATION_J.show()\r\n",
					"DEPRECIATION_J.createOrReplaceTempView(\"DEPRECIATION_J\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"DEPRECIATION = spark.sql(\"\"\"\r\n",
					"SELECT d.*,\r\n",
					"       --Asset_Number,\r\n",
					"       --Company,\r\n",
					"       --Fleet_Code,\r\n",
					"       --Posting_Date,\r\n",
					"       Depreciation_KEY\r\n",
					"FROM DEPRECIATION d\r\n",
					"LEFT JOIN DEPRECIATION_J dj\r\n",
					"       ON TRIM(d.Asset_Number) = TRIM(dj.Asset_Number)\r\n",
					"       AND d.Posting_Date = dj.Posting_Date\r\n",
					"       AND TRIM(d.Fleet_Code) = TRIM(dj.Fleet_Code)\r\n",
					"\"\"\")\r\n",
					"#DEPRECIATION.show()\r\n",
					"DEPRECIATION.createOrReplaceTempView(\"DEPRECIATION\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TRANSACTIONS = spark.sql(\"\"\"\r\n",
					"SELECT Company, \r\n",
					"\t   TRIM(`Acct_Project`) as `Fleet_Code`,\r\n",
					"\t   `Posting_Date`,\r\n",
					"\t   sum(`Line_Total`) * -1 as `Liability_Ex_Fin_Charge`,\r\n",
					"\t   CONCAT(TRIM(`Acct_Project`),Company,CAST(`Posting_Date` AS DATE)) as `Depreciation_KEY`\r\n",
					"FROM TRANSACTIONS\r\n",
					"WHERE Document_Category = 'Journal'\r\n",
					"AND `Level_2_Name` = 'NON CURRENT LIABILITIES'\r\n",
					"GROUP BY Company, `Acct_Project`, `Posting_Date`, Level_2_Name\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS.show()\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DEPRECIATION = spark.sql(\"\"\"\r\n",
					"SELECT d.*, t.Liability_Ex_Fin_Charge\r\n",
					"FROM DEPRECIATION d\r\n",
					"FULL OUTER JOIN `TRANSACTIONS` t\r\n",
					"ON d.Fleet_Code = t.Fleet_Code\r\n",
					"AND d.Posting_Date = t.Posting_Date\r\n",
					"\"\"\")\r\n",
					"#DEPRECIATION.show()\r\n",
					"DEPRECIATION.createOrReplaceTempView(\"DEPRECIATION\")"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DEPRECIATION = spark.sql(\"\"\"\r\n",
					"SELECT *\r\n",
					"FROM DEPRECIATION d\r\n",
					"FULL OUTER JOIN `TRANSACTIONS` t\r\n",
					"USING( Fleet_Code\r\n",
					"       ,Posting_Date \r\n",
					"       ,Company\r\n",
					"       ,depreciation_key)\r\n",
					"\"\"\")\r\n",
					"#DEPRECIATION.show()\r\n",
					"DEPRECIATION.createOrReplaceTempView(\"DEPRECIATION\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM DEPRECIATION d\r\n",
					"FULL OUTER JOIN `TRANSACTIONS` t\r\n",
					"USING( Fleet_Code\r\n",
					"       ,Posting_Date \r\n",
					"       ,Company)\r\n",
					"\r\n",
					"WHERE Posting_Date IS NULL\r\n",
					"\r\n",
					"LIMIT 1000"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"DEPRECIATION.write.parquet('/DataLake/Structured/Facts/F_DEPRECIATION.parquet', mode='overwrite')\r\n",
					"DEPRECIATION.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.F_DEPRECIATION\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"Scripts have successfully executed\")"
				],
				"execution_count": null
			}
		]
	}
}