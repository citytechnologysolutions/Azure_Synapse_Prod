{
	"name": "COST_Parcels_Fixed",
	"properties": {
		"folder": {
			"name": "DEV/Cost To Serve Notebooks DEV/CTS Run"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e8071e82-b993-4bab-9414-1aa9fc55b3cf"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# This Notebook is intended to apply the Variable Facilities cost to a parquet file on LMS_Track level"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Steps:\r\n",
					"1. Summarize #LMS Tracks by\r\n",
					"    * Depot\r\n",
					"    * Month\r\n",
					"2. Summarise Cost on the same level\r\n",
					"3. Calculate R/ParcelTrack\r\n",
					"4. Apply calculated R/ParcelTrack on parcel level\r\n",
					"5. Apply cost per parcel back to Parcel Track table split by #tracks"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"MonthToRun = '2023-02-28'\r\n",
					"uom = 'Parcels'\r\n",
					"fix_var_type = 'Fixed'\r\n",
					"\r\n",
					"#STOPS\r\n",
					"parcel_track = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet/\", format='parquet')\r\n",
					"parcel = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet/\", format='parquet')\r\n",
					"waybill = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet/\", format='parquet')\r\n",
					"location = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet/\", format='parquet')\r\n",
					"dispatch_segment = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdispatchsegment.parquet/\", format='parquet')\r\n",
					"del_pickup_cust = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet/\", format='parquet')\r\n",
					"load_parent = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet/\", format='parquet')\r\n",
					"\r\n",
					"#STSAP\r\n",
					"dim_account = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_Account_Expose.parquet/\", format='parquet')\r\n",
					"dim_dates = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_DATES.parquet/\", format='parquet')\r\n",
					"dim_group = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_GROUP_Expose.parquet/\", format='parquet')\r\n",
					"trans_summary = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/sttransactionssummary.parquet/\", format='parquet')\r\n",
					"\r\n",
					"#STOPS\r\n",
					"parcel_track.createOrReplaceTempView(\"parcel_track\")\r\n",
					"parcel.createOrReplaceTempView(\"parcel\")\r\n",
					"waybill.createOrReplaceTempView(\"waybill\")\r\n",
					"location.createOrReplaceTempView(\"location\")\r\n",
					"dispatch_segment.createOrReplaceTempView(\"dispatch_segment\")\r\n",
					"del_pickup_cust.createOrReplaceTempView(\"del_pickup_cust\")\r\n",
					"load_parent.createOrReplaceTempView(\"load_parent\")\r\n",
					"\r\n",
					"#STSAP\r\n",
					"dim_account.createOrReplaceTempView(\"dim_account\")\r\n",
					"dim_dates.createOrReplaceTempView(\"dim_dates\")\r\n",
					"dim_group.createOrReplaceTempView(\"dim_group\")\r\n",
					"trans_summary.createOrReplaceTempView(\"trans_summary\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"spark.conf.set(\"spark.sql.sources.partitionOverwriteMode\",\"dynamic\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"costs_monthly = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/CTS/Calculated_Tables/vw_CTS_Costs_2_TransactionsSummary_MapMonthTotals.parquet/\")\r\n",
					"tracks_monthly = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/CTS/Calculated_Tables/vw_CTS_Activity_ParcelTrack_Monthly.parquet/\")\r\n",
					"costs_monthly.createOrReplaceTempView(\"costs_monthly\")\r\n",
					"tracks_monthly.createOrReplaceTempView(\"tracks_monthly\")\r\n",
					"\r\n",
					"\r\n",
					"costs_monthly_use = spark.sql(\"\"\"\r\n",
					"SELECT *\r\n",
					"FROM costs_monthly\r\n",
					"WHERE UOM = '\"\"\" + uom + \"\"\"'\r\n",
					"AND FixVarType = '\"\"\" + fix_var_type + \"\"\"'\r\n",
					"AND EO_PostingMonth = '\"\"\" + MonthToRun + \"\"\"'\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"tracks_monthly_use = spark.sql(\"\"\"\r\n",
					"SELECT *\r\n",
					"FROM tracks_monthly\r\n",
					"WHERE PARCELTRACK_MONTH = '\"\"\" + MonthToRun + \"\"\"'\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"costs_monthly_use.createOrReplaceTempView(\"costs_monthly_use\")\r\n",
					"tracks_monthly_use.createOrReplaceTempView(\"tracks_monthly_use\")\r\n",
					"\r\n",
					"display(costs_monthly_use.limit(3))\r\n",
					"display(tracks_monthly_use.limit(3))"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#costs_monthly_use.createOrReplaceTempView(\"costs_monthly_use\")\r\n",
					"\r\n",
					"#costs_monthly_edit = spark.sql(\"\"\"\r\n",
					"#SELECT COUNT(*) OVER (PARTITION BY EO_PostingMonth, sap_transactionsline_subdepotcode) AS CN\r\n",
					"#,*\r\n",
					"#FROM costs_monthly_use\r\n",
					"#ORDER BY CN desc\r\n",
					"#\"\"\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"cost_per_activity = spark.sql(\"\"\"\r\n",
					"with activity as (\r\n",
					"    SELECT\r\n",
					"PARCELTRACK_MONTH\r\n",
					",lms_track_fromlocid\r\n",
					",FROM_LOC_CODE\r\n",
					",SUM(NUM_TRACKS) AS NUM_TRACKS\r\n",
					"FROM tracks_monthly_use\r\n",
					"GROUP BY PARCELTRACK_MONTH\r\n",
					",lms_track_fromlocid\r\n",
					",FROM_LOC_CODE\r\n",
					"),\r\n",
					"costs as (\r\n",
					"    SELECT\r\n",
					"EO_PostingMonth\r\n",
					",sap_transactionsline_subdepotcode\r\n",
					",SUM(COST_Other) AS COST_Other\r\n",
					",SUM(COST_Equipment) AS COST_Equipment\r\n",
					",SUM(COST_Fuel) AS COST_Fuel\r\n",
					",SUM(COST_Facilities) AS COST_Facilities\r\n",
					",SUM(COST_NonUnionisedLabour) AS COST_NonUnionisedLabour\r\n",
					",SUM(COST_UnionisedLabour) AS COST_UnionisedLabour\r\n",
					",SUM(COST_ServiceProvider) AS COST_ServiceProvider\r\n",
					",SUM(COST_Linehaul) AS COST_Linehaul\r\n",
					",SUM(\r\n",
					"COALESCE(COST_Other,0) \r\n",
					"+ COALESCE(COST_Equipment,0)\r\n",
					"+ COALESCE(COST_Fuel,0)\r\n",
					"+ COALESCE(COST_Facilities,0)\r\n",
					"+ COALESCE(COST_NonUnionisedLabour,0)\r\n",
					"+ COALESCE(COST_UnionisedLabour,0)\r\n",
					"+ COALESCE(COST_ServiceProvider,0)\r\n",
					"+ COALESCE(COST_Linehaul,0)\r\n",
					") AS Cost\r\n",
					"\r\n",
					"FROM costs_monthly_use\r\n",
					"GROUP BY EO_PostingMonth\r\n",
					",sap_transactionsline_subdepotcode\r\n",
					")\r\n",
					"\r\n",
					"SELECT \r\n",
					"COALESCE(a.PARCELTRACK_MONTH,c.EO_PostingMonth) as MonthVal\r\n",
					",COALESCE(a.FROM_LOC_CODE, c.sap_transactionsline_subdepotcode) as DepotCode\r\n",
					",a.NUM_TRACKS\r\n",
					",c.Cost\r\n",
					",CASE WHEN a.NUM_TRACKS = 0 THEN NULL ELSE c.COST_Other / a.NUM_TRACKS END AS COST_OTHER_PerParcelTrack\r\n",
					",CASE WHEN a.NUM_TRACKS = 0 THEN NULL ELSE c.COST_Equipment / a.NUM_TRACKS END AS COST_Equipment_PerParcelTrack\r\n",
					",CASE WHEN a.NUM_TRACKS = 0 THEN NULL ELSE c.COST_Fuel / a.NUM_TRACKS END AS COST_Fuel_PerParcelTrack\r\n",
					",CASE WHEN a.NUM_TRACKS = 0 THEN NULL ELSE c.COST_Facilities / a.NUM_TRACKS END AS COST_Facilities_PerParcelTrack\r\n",
					",CASE WHEN a.NUM_TRACKS = 0 THEN NULL ELSE c.COST_NonUnionisedLabour / a.NUM_TRACKS END AS COST_NonUnionisedLabour_PerParcelTrack\r\n",
					",CASE WHEN a.NUM_TRACKS = 0 THEN NULL ELSE c.COST_UnionisedLabour / a.NUM_TRACKS END AS COST_UnionisedLabour_PerParcelTrack\r\n",
					",CASE WHEN a.NUM_TRACKS = 0 THEN NULL ELSE c.COST_ServiceProvider / a.NUM_TRACKS END AS COST_ServiceProvider_PerParcelTrack\r\n",
					",CASE WHEN a.NUM_TRACKS = 0 THEN NULL ELSE c.COST_Linehaul / a.NUM_TRACKS END AS COST_Linehaul_PerParcelTrack\r\n",
					",CASE WHEN a.NUM_TRACKS = 0 THEN NULL ELSE c.Cost / a.NUM_TRACKS END AS COST_ALL_PerParcelTrack\r\n",
					"\r\n",
					",COALESCE(a.PARCELTRACK_MONTH,c.EO_PostingMonth) as MONTH_PARTITION\r\n",
					"FROM activity a\r\n",
					"FULL OUTER JOIN costs c \r\n",
					"    ON a.PARCELTRACK_MONTH = c.EO_PostingMonth AND\r\n",
					"    a.FROM_LOC_CODE = c.sap_transactionsline_subdepotcode\r\n",
					"\r\n",
					"ORDER BY COST_ALL_PerParcelTrack desc\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"cost_per_activity.createOrReplaceTempView(\"cost_per_activity\")\r\n",
					"\r\n",
					"display(cost_per_activity)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Writing cost_per_activity results\r\n",
					"\r\n",
					"cost_per_activity.write.mode('overwrite').partitionBy('MONTH_PARTITION').parquet(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/CTS/Calculated_Tables/CostPerActivity/CostPerParcelTrack.parquet/\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cost_per_track = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/CTS/Calculated_Tables/CostPerActivity/CostPerParcelTrack.parquet/\")\r\n",
					"cost_per_track.createOrReplaceTempView(\"cost_per_track\")\r\n",
					"\r\n",
					"cost_applied = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT\r\n",
					"P.lms_track_id\r\n",
					",last_day(lms_track_opendt) AS lms_track_open_month\r\n",
					",C.COST_OTHER_PerParcelTrack                    AS COST_OTHER\r\n",
					",C.COST_Equipment_PerParcelTrack                AS COST_Equipment\r\n",
					",C.COST_Fuel_PerParcelTrack                     AS COST_Fuel\r\n",
					",C.COST_Facilities_PerParcelTrack               AS COST_Facilities\r\n",
					",C.COST_NonUnionisedLabour_PerParcelTrack       AS COST_NonUnionisedLabour\r\n",
					",C.COST_UnionisedLabour_PerParcelTrack          AS COST_UnionisedLabour\r\n",
					",C.COST_ServiceProvider_PerParcelTrack          AS COST_ServiceProvider\r\n",
					",last_day(lms_track_opendt) AS MONTH_PARTITION\r\n",
					"FROM parcel_track P\r\n",
					"LEFT JOIN location L ON P.lms_track_fromlocid = L.lms_location_id\r\n",
					"LEFT JOIN cost_per_track C ON L.lms_location_code = C.DepotCode AND last_day(lms_track_opendt) = C.MonthVal\r\n",
					"WHERE last_day(lms_track_opendt) = '\"\"\" + MonthToRun + \"\"\"'\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"cost_applied.write.mode('overwrite').partitionBy('MONTH_PARTITION').parquet(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/CTS/Allocation/ParcelTrack/PARCEL_FIXED.parquet/\")\r\n",
					"\r\n",
					"display(cost_applied.limit(20))"
				],
				"execution_count": 7
			}
		]
	}
}