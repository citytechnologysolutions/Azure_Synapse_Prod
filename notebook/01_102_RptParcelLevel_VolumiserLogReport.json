{
	"name": "01_102_RptParcelLevel_VolumiserLogReport",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Reports/LMS"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "2bcd0234-410a-4d22-a6de-b86ce996ca00"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #Create DataFrame for the rptparcellevel LMS Table\r\n",
					"# rptparcellevel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/RPT/rptparcellevel.parquet', format='parquet')\r\n",
					"# rptparcellevel.createOrReplaceTempView(\"rptparcellevel\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbovolumiserlog  LMS Table\r\n",
					"# dbovolumiserlog = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovolumiserlog.parquet', format='parquet')\r\n",
					"# dbovolumiserlog.createOrReplaceTempView(\"dbovolumiserlog\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbovolumiserlocation  LMS Table\r\n",
					"# dbovolumiserlocation = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovolumiserlocation.parquet', format='parquet')\r\n",
					"# dbovolumiserlocation.createOrReplaceTempView(\"dbovolumiserlocation\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"volumiserlogreport\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"\r\n",
					"    p.lms_parcel_id id\r\n",
					"    ,CAST(coalesce(p.lms_parcel_barcode,p.lms_parcel_id) as varchar(128)) as parcelbarcode\r\n",
					"    ,p.lms_parcel_consignid as consignid\r\n",
					"    ,p.lms_parcel_orderbillcustid as billingcustomerid\r\n",
					"    ,p.lms_parcel_orderbillcustname as billingcustomer\r\n",
					"    ,vl.dateupdated date\r\n",
					"    ,(p.lms_parcel_volumiserlength * 10) as lmsvolumiserlengthmm\r\n",
					"\t,(p.lms_parcel_volumiserwidth * 10) as lmsvolumiserwidthmm\r\n",
					"\t,(p.lms_parcel_volumiserheight * 10)  as lmsvolumiserheightmm\r\n",
					"    ,p.lms_parcel_weight as lmsweightkg\r\n",
					"    ,(((prevLength)*(prevWidth)*(prevHeight)) / 5000) as lmscalculatedvolumetricweightkg\r\n",
					"    ,case\r\n",
					"        when ((p.lms_parcel_pl*lms_parcel_pw*lms_parcel_ph)/ 5000) > p.lms_parcel_weight then 'LMSVolumetricWeight'\r\n",
					"        else 'LMSActualWeight'\r\n",
					"    end lmsgreaterweight\r\n",
					"    ,(vl.newlength) as sickvolumiserlengthmm\r\n",
					"\t,(vl.newwidth) as sickvolumiserwidthmm\r\n",
					"\t,(vl.newheight) as sickvolumiserheightmm\r\n",
					"    ,(vl.newweight / 1000) as sickvolumiserweightkg\r\n",
					"    ,((vl.newlength /10)*(vl.newwidth /10)*(vl.newheight /10))/5000 sickcalculatedvolumetricweightkg\r\n",
					"    ,case\r\n",
					"        when ((p.lms_parcel_volumiserlength*p.lms_parcel_volumiserwidth*p.lms_parcel_volumiserheight)/5000)/1000 > p.lms_parcel_volumiserweight/1000 then 'SickVolumetricWeight'\r\n",
					"        else 'SickActualWeight'\r\n",
					"    end sickgreaterweight\r\n",
					"    ,vloc.id as scanlocationid\r\n",
					"    ,vloc.location as scanlocation\r\n",
					"        \r\n",
					"FROM dbovolumiserlog vl\r\n",
					"LEFT JOIN rptparcellevel p on p.lms_parcel_id = vl.parcelid\r\n",
					"LEFT JOIN dbovolumiserlocation vloc on vloc.volumiserid = vl.volumiserid\r\n",
					"\r\n",
					"WHERE vl.dateupdated >= to_timestamp(year(current_date())-1||'-'||(month(current_date()))||'-'||'01')\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"volumiserlogreport = spark.sql(\"SELECT * FROM volumiserlogreport\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# volumiserlogreport.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/RPT/volumiserlogreport.parquet', mode = \"overwrite\")"
				],
				"execution_count": 10
			}
		]
	}
}