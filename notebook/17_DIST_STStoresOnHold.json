{
	"name": "17_DIST_STStoresOnHold",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ddd4b841-fc30-4b9a-91dd-300f28fc21f4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
				"name": "PRDSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #Create DataFrame for the dbostoresonhold LMS Table\r\n",
					"# dbostoresonhold = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbostoresonhold.parquet', format='parquet')\r\n",
					"# dbostoresonhold.createOrReplaceTempView(\"dbostoresonhold\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stholdstatus LMS Table\r\n",
					"# stholdstatus = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stholdstatus.parquet', format='parquet')\r\n",
					"# stholdstatus.createOrReplaceTempView(\"stholdstatus\")\r\n",
					"\r\n",
					"# #Create DataFrame for the ststorehold LMS Table\r\n",
					"# ststorehold = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/ststorehold.parquet', format='parquet')\r\n",
					"# ststorehold.createOrReplaceTempView(\"ststorehold\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stparcel LMS Table\r\n",
					"# stparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet', format='parquet')\r\n",
					"# stparcel.createOrReplaceTempView(\"stparcel\")\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"ststoresonhold_1\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"billcustid as lms_storesonhold_billcustid\r\n",
					",storeid as lms_storesonhold_storeid\r\n",
					",onholdfrom as lms_storesonhold_onholdfrom\r\n",
					",onholdto as lms_storesonhold_onholdto\r\n",
					",delaytypeid as lms_storesonhold_delaytypeid\r\n",
					",hs.lms_holdstatus_description\r\n",
					",reasonid as lms_storesonhold_reasonid\r\n",
					",sh.lms_storehold_description\r\n",
					",sh.lms_storehold_keepfreight\r\n",
					"\r\n",
					"FROM\r\n",
					"dbostoresonhold soh\r\n",
					"\r\n",
					"LEFT JOIN ststorehold sh on soh.reasonid = sh.lms_storehold_id\r\n",
					"LEFT JOIN stholdstatus hs on soh.delaytypeid = hs.lms_holdstatus_id\r\n",
					""
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ststoresonhold_1 = spark.sql(\"SELECT * FROM ststoresonhold_1\")"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"ststoresonhold_2\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"lms_storesonhold_billcustid\r\n",
					",lms_storesonhold_storeid\r\n",
					",lms_storesonhold_onholdfrom\r\n",
					",MAX(lms_storesonhold_onholdto) as lms_storesonhold_onholdto\r\n",
					",lms_storesonhold_delaytypeid\r\n",
					",lms_holdstatus_description\r\n",
					",lms_storesonhold_reasonid\r\n",
					",lms_storehold_description\r\n",
					",lms_storehold_keepfreight\r\n",
					"from ststoresonhold_1\r\n",
					"\r\n",
					"group BY\r\n",
					"lms_storesonhold_billcustid\r\n",
					",lms_storesonhold_storeid\r\n",
					",lms_storesonhold_onholdfrom\r\n",
					",lms_storesonhold_delaytypeid\r\n",
					",lms_holdstatus_description\r\n",
					",lms_storesonhold_reasonid\r\n",
					",lms_storehold_description\r\n",
					",lms_storehold_keepfreight"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ststoresonhold_2 = spark.sql(\"SELECT * FROM ststoresonhold_2\")"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stparcelsoh\r\n",
					"AS\r\n",
					"select  \r\n",
					"COUNT(*) as lms_parcel_count,\r\n",
					"lms_parcel_orderdelivercustid,\r\n",
					"lms_parcel_orderbillcustid,\r\n",
					"lms_parcel_parceldetailcustonholdstart,\r\n",
					"lms_parcel_parceldetailcustonholdend\r\n",
					"from stparcel \r\n",
					"where \r\n",
					"lms_parcel_parceldetailcustonholdstart IS NOT NULL\r\n",
					"GROUP BY\r\n",
					"lms_parcel_orderdelivercustid,\r\n",
					"lms_parcel_orderbillcustid,\r\n",
					"lms_parcel_parceldetailcustonholdstart,\r\n",
					"lms_parcel_parceldetailcustonholdend"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stparcelsoh = spark.sql(\"SELECT * FROM stparcelsoh\")"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stonhold\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"soh.lms_storesonhold_storeid,\r\n",
					"soh.lms_storesonhold_onholdfrom,\r\n",
					"MAX(soh.lms_storesonhold_onholdto) as lms_storesonhold_onholdto\r\n",
					"FROM ststoresonhold_2 soh\r\n",
					"GROUP BY\r\n",
					"soh.lms_storesonhold_storeid,\r\n",
					"soh.lms_storesonhold_onholdfrom"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stonhold = spark.sql(\"SELECT * FROM stonhold\")"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"ststoresonhold_3\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"SUM(t.lms_parcel_count) as lms_storesonhold_parcelsonhold,\r\n",
					"t2.lms_storesonhold_storeid,\r\n",
					"t2.lms_storesonhold_onholdfrom,\r\n",
					"t2.lms_storesonhold_onholdto,\r\n",
					"t.lms_parcel_parceldetailcustonholdstart\r\n",
					"\r\n",
					"FROM stonhold t2\r\n",
					"LEFT JOIN stparcelsoh t on t2.lms_storesonhold_storeid = t.lms_parcel_orderdelivercustid\r\n",
					"WHERE t2.lms_storesonhold_onholdfrom = lms_parcel_parceldetailcustonholdstart\r\n",
					"GROUP BY\r\n",
					"t2.lms_storesonhold_storeid,\r\n",
					"t2.lms_storesonhold_onholdfrom,\r\n",
					"t2.lms_storesonhold_onholdto,\r\n",
					"t.lms_parcel_parceldetailcustonholdstart\r\n",
					"\r\n",
					"ORDER BY COUNT(*) DESC "
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ststoresonhold_3 = spark.sql(\"SELECT * FROM ststoresonhold_3\")"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"ststoresonhold_4\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"soh2.*,\r\n",
					"CASE WHEN soh2.lms_storesonhold_storeid = soh3.lms_storesonhold_storeid and soh2.lms_storesonhold_onholdfrom = soh3.lms_storesonhold_onholdfrom THEN soh3.lms_storesonhold_parcelsonhold\r\n",
					"END AS lms_storesonhold_parcelsonhold\r\n",
					"FROM ststoresonhold_1 soh2\r\n",
					"INNER JOIN ststoresonhold_3 soh3 on soh2.lms_storesonhold_storeid = soh3.lms_storesonhold_storeid\r\n",
					"\r\n",
					"GROUP BY\r\n",
					"soh2.lms_storesonhold_billcustid,\r\n",
					"soh2.lms_storesonhold_storeid,\r\n",
					"soh2.lms_storesonhold_onholdfrom,\r\n",
					"soh2.lms_storesonhold_onholdto,\r\n",
					"soh2.lms_storesonhold_delaytypeid,\r\n",
					"soh2.lms_holdstatus_description,\r\n",
					"soh2.lms_storesonhold_reasonid,\r\n",
					"soh2.lms_storehold_description,\r\n",
					"soh2.lms_storehold_keepfreight,\r\n",
					"soh3.lms_storesonhold_storeid,\r\n",
					"soh3.lms_storesonhold_onholdfrom\r\n",
					"\r\n",
					""
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ststoresonhold_4 = spark.sql(\"SELECT * FROM ststoresonhold_4\")"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"ststoresonhold_5\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"row_number() OVER(PARTITION BY CONCAT(lms_storesonhold_storeid,lms_storesonhold_onholdfrom,lms_storesonhold_parcelsonhold) ORDER BY lms_storesonhold_storeid, lms_storesonhold_onholdfrom,lms_storesonhold_parcelsonhold ASC) AS RN,\r\n",
					"*\r\n",
					"FROM\r\n",
					"ststoresonhold_4\r\n",
					""
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ststoresonhold_5 = spark.sql(\"SELECT * FROM ststoresonhold_5\")"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"ststoresonhold\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"lms_storesonhold_billcustid,\r\n",
					"lms_storesonhold_storeid,\r\n",
					"lms_storesonhold_onholdfrom,\r\n",
					"lms_storesonhold_onholdto,\r\n",
					"lms_storesonhold_delaytypeid,\r\n",
					"lms_holdstatus_description,\r\n",
					"lms_storesonhold_reasonid,\r\n",
					"lms_storehold_description,\r\n",
					"lms_storehold_keepfreight,\r\n",
					"lms_storesonhold_parcelsonhold,\r\n",
					"to_unix_timestamp(lms_storesonhold_onholdto) - to_unix_timestamp(lms_storesonhold_onholdfrom) as lms_storesonhold_onholdduration\r\n",
					"FROM\r\n",
					"ststoresonhold_5\r\n",
					"WHERE RN = 1\r\n",
					""
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ststoresonhold = spark.sql(\"SELECT * FROM ststoresonhold\")"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ststoresonhold.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/ststoresonhold.parquet', mode = \"overwrite\")"
				],
				"execution_count": 56
			}
		]
	}
}