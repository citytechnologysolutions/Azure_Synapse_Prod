{
	"name": "02_STItems",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Finance"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fa7bf3ed-2f23-48ef-a3ae-3566843fa256"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
				"name": "PRDSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"if 'prod' in Environment:\r\n",
					"    StorageAccount = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"else:\r\n",
					"    StorageAccount = 'citylogisticsstorage'\r\n",
					"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# ' + StorageAccount + '"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# #Create DataFrame for the dboOITM SAP Table ITEM\r\n",
					"# dboOITM = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboOITM.parquet', format='parquet')\r\n",
					"# dboOITM.createOrReplaceTempView(\"dboOITM\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dboOITB SAP Table ITEM GROUP\r\n",
					"# dboOITB = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboOITB.parquet', format='parquet')\r\n",
					"# dboOITB.createOrReplaceTempView(\"dboOITB\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stitems\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"    oitb.itmsgrpcod as sap_itemgroup_itmsgrpcod\r\n",
					"    ,oitb.itmsgrpnam as sap_itemgroup_itmsgrpnam\r\n",
					"    ,oitm.itemcode as sap_item_itemcode\r\n",
					"    ,oitm.itemname as sap_item_itemname\r\n",
					"    ,oitm.cstgrpcode as sap_item_cstgrpcode\r\n",
					"    ,oitm.vatgourpsa as sap_item_vatgourpsa\r\n",
					"    ,oitm.codebars as sap_item_codebars\r\n",
					"    ,oitm.prchseitem as sap_item_prchseitem\r\n",
					"    ,oitm.sellitem as sap_item_sellitem\r\n",
					"    ,oitm.cardcode as sap_item_cardcode\r\n",
					"    ,oitm.suppcatnum as sap_item_suppcatnum\r\n",
					"    ,oitm.invntitem as sap_item_invntitem\r\n",
					"    ,oitm.u_boy_tb_0 as sap_item_u_boy_tb_0\r\n",
					"    ,oitm.u_svctype as sap_item_u_svctype\r\n",
					"    ,oitm.u_depot as sap_item_u_depot\r\n",
					"\r\n",
					"FROM dboOITM oitm\r\n",
					"LEFT JOIN dboOITB oitb on oitb.itmsgrpcod = oitm.itmsgrpcod\r\n",
					"\r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stitems = spark.sql(\"SELECT * FROM stitems\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stitems.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/stitems.parquet', mode = \"overwrite\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"SUCCESS\")"
				],
				"execution_count": null
			}
		]
	}
}