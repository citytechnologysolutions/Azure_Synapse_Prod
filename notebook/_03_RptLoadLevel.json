{
	"name": "_03_RptLoadLevel",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Reports/LMS"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "20a8c0ae-91c5-442d-b8b1-9e6e5d404ac6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
				"name": "PRDSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 110
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #Create DataFrame for the stloadchild LMS Table\r\n",
					"# stloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadchild.parquet', format='parquet')\r\n",
					"# stloadchild.createOrReplaceTempView(\"stloadchild\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stloadparent LMS Table\r\n",
					"# stloadparent = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet', format='parquet')\r\n",
					"# stloadparent.createOrReplaceTempView(\"stloadparent\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbolocation LMS Table\r\n",
					"# dbolocation = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
					"# dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stmdvehicle LMS Table\r\n",
					"# stmdvehicle = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/MD/stmdvehicle.parquet', format='parquet')\r\n",
					"# stmdvehicle.createOrReplaceTempView(\"stmdvehicle\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stwaybill LMS Table\r\n",
					"# stwaybill = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet', format='parquet')\r\n",
					"# stwaybill.createOrReplaceTempView(\"stwaybill\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stsroute LMS Table\r\n",
					"# stsroute = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stsroute.parquet', format='parquet')\r\n",
					"# stsroute.createOrReplaceTempView(\"stsroute\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stbillcustomer LMS Table\r\n",
					"# stbillcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stbillcustomer.parquet', format='parquet')\r\n",
					"# stbillcustomer.createOrReplaceTempView(\"stbillcustomer\")\r\n",
					"\r\n",
					"# #Create DataFrame for the stdeliverypickupcustomer LMS Table\r\n",
					"# stdeliverypickupcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet', format='parquet')\r\n",
					"# stdeliverypickupcustomer.createOrReplaceTempView(\"stdeliverypickupcustomer\")\r\n",
					""
				],
				"execution_count": 111
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Removing as Sroute is not set on Load will get a list from deliverry customer\r\n",
					"# -- %%sql\r\n",
					"# -- CREATE OR REPLACE TEMP VIEW\r\n",
					"# -- stloadchild_tmp\r\n",
					"# -- AS\r\n",
					"# -- SELECT DISTINCT\r\n",
					"# --      lc.lms_loadchild_parentloadid\r\n",
					"# --     ,max(lc.lms_loadchild_srouteid) lms_loadparent_srouteid\r\n",
					"# -- FROM stloadchild lc\r\n",
					"# -- GROUP BY lms_loadchild_parentloadid\r\n",
					""
				],
				"execution_count": 112
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stwaybill_tmp\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"    lms_waybill_loadid\r\n",
					"    ,count(distinct w.lms_waybill_delivercustid) as lms_loadparent_nodeliverycustomers\r\n",
					"    ,sum(CASE \r\n",
					"        WHEN bc.lms_customer_billcustgrouptypedescription = 'Express' Then 1\r\n",
					"        ELSE 0\r\n",
					"    END) as lms_loadparent_expressdelivercustomers\r\n",
					"    ,sum(CASE \r\n",
					"        WHEN bc.lms_customer_billcustgrouptypedescription <> 'Express' Then 1\r\n",
					"        ELSE 0\r\n",
					"    END) as lms_loadparent_retailelivercustomers\r\n",
					"    ,bc.lms_customer_name||'('||lms_parcelbywaybill_aggrnoparcels||')' as lms_loadparent_billcustparcels\r\n",
					"    ,sr.lms_sroute_description as lms_loadparent_sroutedescriptions\r\n",
					"\r\n",
					"FROM stwaybill w\r\n",
					"LEFT JOIN stbillcustomer bc on bc.lms_customer_id =w.lms_waybill_billcust\r\n",
					"LEFT JOIN stdeliverypickupcustomer dc on dc.lms_customer_id = w.lms_waybill_delivercustid\r\n",
					"LEFT JOIN stsroute sr on sr.lms_sroute_id = dc.lms_customer_srouteid\r\n",
					"GROUP BY lms_waybill_loadid, bc.lms_customer_name,sr.lms_sroute_description, lms_parcelbywaybill_aggrnoparcels\r\n",
					""
				],
				"execution_count": 113
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"rptloadparentlevel\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"    lp.lms_loadparent_parentloadid\r\n",
					"    ,lp.lms_loadparent_ldate\r\n",
					"    ,lp.orv_dispatch_estdepdate as lms_loadparent_estdepdate\r\n",
					"    ,lp.orv_dispatch_originalstartdate as lms_loadparent_originalstartdate\r\n",
					"    ,concat_ws(\",\",collect_set(lc.lms_loadchild_id)) as lms_loadparent_childloadids\r\n",
					"    ,concat_ws(\",\",collect_list(w.lms_loadparent_billcustparcels)) as lms_loadparent_billcustparcels\r\n",
					"    ,fl.id as lms_loadparent_locationfromid\r\n",
					"    ,fl.description as lms_loadparent_locationfromdescription\r\n",
					"    ,tl.id as lms_loadparent_locationtoid\r\n",
					"    ,tl.description as lms_loadparent_locationtodescription\r\n",
					"    ,v.md_vehicle_id as lms_loadparent_vehcileid\r\n",
					"    ,v.md_vehicle_uid as lms_loadparent_vehcileuid\r\n",
					"    ,v.md_vehicle_fleetcode as lms_loadparent_vehcilefleetcode\r\n",
					"    ,v.md_vehicle_registrationnumber as lms_loadparent_vehicleregistrationnumber\r\n",
					"    ,v.md_vehicle_internalvolume as lms_loadparent_vehicleinternalvolume\r\n",
					"    ,lp.lms_loadparent_vehodo as lms_loadparent_lmsvehodo\r\n",
					"    ,lp.lms_loadparent_vehodo2 as lms_loadparent_lmsvehodo2\r\n",
					"    ,(lp.lms_loadparent_vehodo2 - lp.lms_loadparent_vehodo) as lms_loadparent_lmsodokms\r\n",
					"    ,lp.orv_dispatch_startodo as lms_loadparent_orvstartodo\r\n",
					"    ,lp.orv_dispatch_stopodo as lms_loadparent_orvstopodo\r\n",
					"    ,(lp.orv_dispatch_stopodo - lp.orv_dispatch_startodo) as lms_loadparent_orvodokms\r\n",
					"    ,lp.orv_dispatch_distance as lms_loadparent_orvdistance\r\n",
					"    ,lp.orv_dispatch_duration  as lms_loadparent_orvduration\r\n",
					"    ,sum(w.lms_loadparent_nodeliverycustomers) as lms_loadparent_nodeliverycustomers\r\n",
					"    ,sum(w.lms_loadparent_expressdelivercustomers) as lms_loadparent_expressdelivercustomers\r\n",
					"    ,sum(w.lms_loadparent_retailelivercustomers) as lms_loadparent_retailelivercustomers\r\n",
					"    ,sum(lms_loadparent_aggrnoparcels) as lms_loadparent_noparcels\r\n",
					"    ,sum(lms_loadparent_aggrweight )as lms_loadparent_weight\r\n",
					"    ,sum(lms_loadparent_aggrchargeweight) as lms_loadparent_chargeweight\r\n",
					"    ,count(lc.lms_loadchild_id) as lms_loadparent_nochildloads\r\n",
					"    ,concat_ws(\",\",collect_set(w.lms_loadparent_sroutedescriptions)) as lms_loadparent_sroutedescriptions\r\n",
					"    ,CASE \r\n",
					"        WHEN concat_ws(\",\",collect_set(w.lms_loadparent_sroutedescriptions)) like 'outlaying' THEN  'Outlaying'\r\n",
					"        ELSE 'Local'\r\n",
					"    END as lms_loadparent_routetype\r\n",
					"\r\n",
					"\r\n",
					"FROM stloadparent lp\r\n",
					"LEFT JOIN stloadchild lc on lc.lms_loadchild_parentloadid = lp.lms_loadparent_parentloadid\r\n",
					"LEFT JOIN dbolocation fl on fl.id = lms_loadchild_fromlocid and lc.lms_loadchild_parentloadid = lp.lms_loadparent_parentloadid\r\n",
					"LEFT JOIN dbolocation tl on tl.id = lms_loadchild_tolocid and lc.lms_loadchild_parentloadid = lp.lms_loadparent_parentloadid\r\n",
					"LEFT JOIN stmdvehicle v on v.md_vehicle_orvid = orv_dispatch_vid\r\n",
					"LEFT JOIN stwaybill_tmp w on w.lms_waybill_loadid = lc.lms_loadchild_id\r\n",
					"\r\n",
					"WHERE lms_loadparent_ldate >= (to_timestamp(year(current_date())-1||'-'||(month(current_date()))||'-'||'01'))\r\n",
					"\r\n",
					"GROUP BY \r\n",
					"    lp.lms_loadparent_parentloadid\r\n",
					"    ,lp.lms_loadparent_ldate\r\n",
					"    ,lp.orv_dispatch_estdepdate\r\n",
					"    ,lp.orv_dispatch_originalstartdate \r\n",
					"    ,fl.id\r\n",
					"    ,fl.description\r\n",
					"    ,tl.id\r\n",
					"    ,tl.description\r\n",
					"    ,v.md_vehicle_id\r\n",
					"    ,v.md_vehicle_uid\r\n",
					"    ,v.md_vehicle_fleetcode\r\n",
					"    ,v.md_vehicle_registrationnumber\r\n",
					"    ,v.md_vehicle_internalvolume\r\n",
					"    ,lp.lms_loadparent_vehodo\r\n",
					"    ,lp.lms_loadparent_vehodo2\r\n",
					"    ,lp.orv_dispatch_startodo\r\n",
					"    ,lp.orv_dispatch_stopodo\r\n",
					"    ,lp.orv_dispatch_distance\r\n",
					"    ,lp.orv_dispatch_duration\r\n",
					"    \r\n",
					"\r\n",
					""
				],
				"execution_count": 114
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rptloadparentlevel = spark.sql(\"SELECT * FROM rptloadparentlevel\")"
				],
				"execution_count": 115
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# rptloadparentlevel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/RPT/rptloadparentlevel.parquet', mode = \"overwrite\")"
				],
				"execution_count": 116
			}
		]
	}
}