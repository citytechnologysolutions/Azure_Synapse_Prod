{
	"name": "9- Perations_LMS_Extractor_Load_DEV",
	"properties": {
		"folder": {
			"name": "ARCHIVE/DEV/Archived/Operations Notebooks DEV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f2bd4d8c-1125-489a-8f61-db7b3e3dbf83"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#dbotrack = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbotrack.parquet', format='parquet')\r\n",
					"#dbotrack.createOrReplaceTempView(\"dbotrack\")\r\n",
					"\r\n",
					"#dboTrack_Archive = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboTrack_Archive.parquet', format='parquet')\r\n",
					"#dboTrack_Archive.createOrReplaceTempView(\"dboTrack_Archive\")\r\n",
					"\r\n",
					"#dboVehicle = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboVehicle.parquet', format='parquet')\r\n",
					"#dboVehicle.createOrReplaceTempView(\"dboVehicle\")\r\n",
					"\r\n",
					"#dboLoads = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboLoads.parquet', format='parquet')\r\n",
					"#dboLoads.createOrReplaceTempView(\"dboLoads\")\r\n",
					"\r\n",
					"#dboDriver = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboDriver.parquet', format='parquet')\r\n",
					"#dboDriver.createOrReplaceTempView(\"dboDriver\")\r\n",
					"\r\n",
					"#T_dispatch = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/T_dispatch.parquet', format='parquet')\r\n",
					"#T_dispatch.createOrReplaceTempView(\"T_dispatch\")\r\n",
					"\r\n",
					"#dbodb_MobileFeedbackReason = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbodb_MobileFeedbackReason.parquet', format='parquet')\r\n",
					"#dbodb_MobileFeedbackReason.createOrReplaceTempView(\"dbodb_MobileFeedbackReason\")"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"from pyspark.sql.types import *"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load EXCEL with FinanceReportingMapping\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Excel_Files/Debriefing Non-Dispatch Reasons Exclude vs Include Mapping.xlsx\"\r\n",
					"var_File_Page = \"Sheet1\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"schema = StructType([StructField(\"loads.feedback\", StringType(), True),StructField(\"loads.feedbackinclude\", StringType(), True)])\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page,schema=schema)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"Debriefing_Non\")\r\n",
					"\r\n",
					"Debriefing_Non = spark.sql(\"\"\"SELECT `loads.feedback`, `loads.feedbackinclude` FROM Debriefing_Non\"\"\")\r\n",
					"\r\n",
					"Debriefing_Non.createOrReplaceTempView(\"Debriefing_Non\")"
				],
				"execution_count": 30
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load EXCEL with FinanceReportingMapping\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Excel_Files/Debriefing Non-Dispatch Reasons Exclude vs Include Mapping.xlsx\"\r\n",
					"var_File_Page = \"Sheet1\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"Debriefing_Non\")\r\n",
					"\r\n",
					"Debriefing_Non = spark.sql(\"\"\"SELECT `loads.feedback`, `loads.feedbackinclude` FROM Debriefing_Non\"\"\")\r\n",
					"\r\n",
					"Debriefing_Non.createOrReplaceTempView(\"Debriefing_Non\")"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"CTE = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT loadid\r\n",
					"      ,OpenDt \r\n",
					"      ,CloseDt\r\n",
					"FROM dbotrack\r\n",
					"\r\n",
					"UNION ALL\r\n",
					"\r\n",
					"SELECT loadid\r\n",
					"      ,OpenDt \r\n",
					"      ,CloseDt\r\n",
					"FROM dboTrack_Archive\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#CTE.show()\r\n",
					"CTE.createOrReplaceTempView(\"CTE\")"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"CTE2 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT loadid\r\n",
					"      ,MIN(OpenDt) as FirstScanOnDate \r\n",
					"      ,MAX(OpenDt) as LastScanOnDate\r\n",
					"      ,MIN(CloseDt) as FirstScanOffDate \r\n",
					"      ,MAX(CloseDt) as LastScanOffDate\r\n",
					"FROM CTE \r\n",
					"GROUP BY LoadID\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#CTE2.show()\r\n",
					"CTE2.createOrReplaceTempView(\"CTE2\")"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"LOAD = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT \r\n",
					"l.*,\r\n",
					"t.*,\r\n",
					"v.FleetNo as FleetNo,\r\n",
					"t1.FleetNo as Trailer1FleetNo,\r\n",
					"t2.FleetNo as Trailer2FleetNo,\r\n",
					"d.IdPassportNo as DriverIdPassportNo\r\n",
					"FROM dboLoads l\r\n",
					"LEFT JOIN dboVehicle v on v.ID = l.VehicleID\r\n",
					"LEFT JOIN dboVehicle t1 on t1.ID = l.Trailer1\r\n",
					"LEFT JOIN dboVehicle t2 on t2.ID = l.Trailer2\r\n",
					"LEFT JOIN dboDriver d on d.ID = l.DriverID\r\n",
					"LEFT JOIN CTE2 t on t.LoadID = l.ID\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#LOAD.show()\r\n",
					"LOAD.createOrReplaceTempView(\"LOAD\")"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"Load = spark.sql(\"\"\"\r\n",
					"SELECT \r\n",
					"ID        \t\t\t\t\tAS `LD_ID`,\r\n",
					"FromLocID      \t\t\t\tAS `LF_ID`,\r\n",
					"ToLocID      \t\t\t\tAS `LT_ID`,\r\n",
					"FromID       \t\t\t\tAS `LD_FromID`,\r\n",
					"ToID       \t\t\t\t\tAS `LD_ToID`,\r\n",
					"RouteID      \t\t\t\tAS `LD_RouteID`,\r\n",
					"DriverID      \t\t\t\tAS `LD_DriverID`,\r\n",
					"SealNo       \t\t\t\tAS `LD_SealNo`,\r\n",
					"VehicleID      \t\t\t\tAS `LD_VehicleID`,\r\n",
					"TTypeID      \t\t\t\tAS `LD_TTypeID`,\r\n",
					"UserID       \t\t\t\tAS `LD_UserID`,\r\n",
					"to_timestamp(`LDate`) AS `LD_LDateTime`,\r\n",
					"to_date(`LDate`) AS `LD_LDate`,\r\n",
					"CourierID      \t\t\t\tAS `LD_CourierID`,\r\n",
					"ServiceID      \t\t\t\tAS `LD_ServiceID`,\r\n",
					"Site       \t\t\t\t\tAS `LD_Site`,\r\n",
					"Spanner      \t\t\t\tAS `LD_Spanner`,\r\n",
					"SpareWheel      \t\t\tAS `LD_SpareWheel`,\r\n",
					"Tyres       \t\t\t\tAS `LD_Tyres`,\r\n",
					"CDate       \t\t\t\tAS `LD_CDate`,\r\n",
					"UserID2      \t\t\t\tAS `LD_UserID2`,\r\n",
					"Trailer1      \t\t\t\tAS `LD_Trailer1`,\r\n",
					"Trailer2      \t\t\t\tAS `LD_Trailer2`,\r\n",
					"CRef       \t\t\t\t\tAS `LD_CRef`,\r\n",
					"Debriefed      \t\t\t\tAS `LD_Debriefed`,\r\n",
					"mrpFlag       \t\t\t\tAS `LD_mrpFlag`,\r\n",
					"OldLoadID      \t\t\t\tAS `LD_OldLoadID`,\r\n",
					"VehicleRegNo     \t\t\tAS `LD_VehicleRegNo`,\r\n",
					"DriverName      \t\t\tAS `LD_DriverName`,\r\n",
					"mrpCFlag      \t\t\t\tAS `LD_mrpCFlag`,\r\n",
					"finalFlag      \t\t\t\tAS `LD_finalFlag`,\r\n",
					"AlidaFlag      \t\t\t\tAS `LD_AlidaFlag`,\r\n",
					"vehodo       \t\t\t\tAS `LD_vehodo`,\r\n",
					"vehodo2      \t\t\t\tAS `LD_vehodo2`,\r\n",
					"PUIBTs       \t\t\t\tAS `LD_PUIBTs`,\r\n",
					"PUCOLs       \t\t\t\tAS `LD_PUCOLs`,\r\n",
					"DBUserID      \t\t\t\tAS `LD_DBUserID`,\r\n",
					"Crew       \t\t\t\t\tAS `LD_Crew`,\r\n",
					"PlanningRef     \t\t\tAS `LD_PlanningRef`,\r\n",
					"InterfaceDate     \t\t\tAS `LD_InterfaceDate`,\r\n",
					"NoSealsRet      \t\t\tAS `LD_NoSealsRet`,\r\n",
					"ExcludeOpsi     \t\t\tAS `LD_ExcludeOpsi`,\r\n",
					"DCCRef       \t\t\t\tAS `LD_DCCRef`,\r\n",
					"SRouteID      \t\t\t\tAS `LD_SRouteID`,\r\n",
					"FuelLitres      \t\t\tAS `LD_FuelLitres`,\r\n",
					"outsourcedCrew     \t\t\tAS `LD_outsourcedCrew`,\r\n",
					"MasterLoadID   \t\t\t\tAS `LD_MasterLoadID`,\r\n",
					"SecurityGateDespatched   \tAS `LD_SecurityGateDespatched`,\r\n",
					"SecurityGateUserID   \t\tAS `LD_SecurityGateUserID`,\r\n",
					"SecurityGateArrived   \t\tAS `LD_SecurityGateArrived`,\r\n",
					"SecurityGateArrivedUserID   AS `LD_SecurityGateArrivedUserID`,\r\n",
					"LastUpdate   \t\t\t\tAS `LD_LastUpdate`,\r\n",
					"BayNo   \t\t\t\t\tAS `LD_BayNo`,\r\n",
					"Costs   \t\t\t\t\tAS `LD_Costs`,\r\n",
					"ESTDepartureDateTime   \t\tAS `LD_ESTDepartureDateTime`,\r\n",
					"TotalWeight   \t\t\t\tAS `LD_TotalWeight`,\r\n",
					"SupUserID   \t\t\t\tAS `LD_SupUserID`,\r\n",
					"ovrIgnore   \t\t\t\tAS `LD_ovrIgnore`,\r\n",
					"orvcleandispatch   \t\t\tAS `LD_orvcleandispatch`,\r\n",
					"orvskippeddeliveries   \t\tAS `LD_orvskippeddeliveries`,\r\n",
					"orvendorsments   \t\t\tAS `LD_orvendorsments`,\r\n",
					"orvreturns   \t\t\t\tAS `LD_orvreturns`,\r\n",
					"orvduration   \t\t\t\tAS `LD_orvduration`,\r\n",
					"orvincident   \t\t\t\tAS `LD_orvincident`,\r\n",
					"ChildLoadID   \t\t\t\tAS `LD_ChildLoadID`,\r\n",
					"ParentLoadID   \t\t\t\tAS `LD_ParentLoadID`,\r\n",
					"ORVCode   \t\t\t\t\tAS `LD_ORVCode`,\r\n",
					"CompanyID   \t\t\t\tAS `LD_CompanyID`,\r\n",
					"EditLoadDate   \t\t\t\tAS `LD_EditLoadDate`,\r\n",
					"ReOpenedDate   \t\t\t\tAS `LD_ReOpenedDate`,\r\n",
					"ReOpenedUserID   \t\t\tAS `LD_ReOpenedUserID`,\r\n",
					"ORVID   \t\t\t\t\tAS `LD_ORVID`,\r\n",
					"NoVehicle   \t\t\t\tAS `LD_NoVehicle`,\r\n",
					"MobileFeedbackReasonID   \tAS `LD_MobileFeedbackReasonID`,\r\n",
					"Direct   \t\t\t\t\tAS `LD_Direct`,\r\n",
					"ORV_Status   \t\t\t\tAS `LD_ORV_Status`,\r\n",
					"ORVStatus   \t\t\t\tAS `LD_ORVStatus`,\r\n",
					"FirstScanOnDate\t\t\t\tAS `LD_FirstScanOnDate`,\r\n",
					"LastScanOnDate \t\t\t\tAS `LD_LastScanOnDate`,\r\n",
					"FirstScanOffDate \t\t\tAS `LD_FirstScanOffDate`,\r\n",
					"LastScanOffDate \t\t\tAS `LD_LastScanOffDate`,\r\n",
					"FleetNo\t\t\t\t\t\tAS `LD_FleetNo`,\r\n",
					"Trailer1FleetNo\t\t\t\tAS `LD_Trailer1FleetNo`,\r\n",
					"Trailer2FleetNo\t\t\t\tAS `LD_Trailer2FleetNo`,\r\n",
					"DriverIdPassportNo\t\t\tAS `LD_DriverIdPassportNo`,\r\n",
					"EffectiveLoadDurationMinutes AS `LD_EffectiveLoadDurationMinutes`,\r\n",
					"EffectiveOffLoadDurationMinutes AS `LD_EffectiveOffLoadDurationMinutes`\r\n",
					"FROM `LOAD`\r\n",
					"\"\"\")\r\n",
					"#Load.show()\r\n",
					"Load.createOrReplaceTempView(\"Load\")"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"Load = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT LD_ParentLoadID AS `dispatch.lmsid`,\r\n",
					"    LD_ID,\r\n",
					"    LD_ID AS WL_LoadID,\r\n",
					"    LD_DriverID,\r\n",
					"    LD_DriverName,\r\n",
					"    LD_VehicleID,     \r\n",
					"    LD_ParentLoadID,\r\n",
					"    LD_ChildLoadID,\r\n",
					"    LD_Debriefed,\r\n",
					"    LD_finalFlag,\r\n",
					"    LD_LDate,\r\n",
					"    LD_ORVID,\r\n",
					"    LD_ORVStatus,\r\n",
					"    LD_ORV_Status,\r\n",
					"    LD_ovrIgnore,\r\n",
					"\tLD_ORVCode,\r\n",
					"    to_date(LD_ESTDepartureDateTime) AS LD_ESTDepartureDate,\r\n",
					"    LD_Site,\r\n",
					"    LD_FirstScanOnDate,\r\n",
					"\tLD_LastScanOnDate,\r\n",
					"\tLD_FirstScanOffDate,\r\n",
					"\tLD_LastScanOffDate,\r\n",
					"    LD_FleetNo,\r\n",
					"    LD_Trailer1FleetNo,\r\n",
					"    LD_Trailer2FleetNo,\r\n",
					"    LD_DriverIdPassportNo,\r\n",
					"    LD_MobileFeedbackReasonID,\r\n",
					"    LD_EffectiveLoadDurationMinutes,\r\n",
					"    LD_EffectiveOffLoadDurationMinutes,\r\n",
					"    LD_TTypeID\r\n",
					"    \r\n",
					" \r\n",
					"--UNCOMMENT IF YOU REQUIRE THESE FIELDS  \r\n",
					"\r\n",
					"--     LF_ID,\r\n",
					"--     LT_ID,\r\n",
					"\r\n",
					"--     LD_InterfaceDate,\r\n",
					"--     LD_LastUpdate,\r\n",
					"--     LD_MasterLoadID,\r\n",
					"--     LD_mrpCFlag,\r\n",
					"--     LD_mrpFlag,\r\n",
					"--     LD_NoSealsRet,\r\n",
					"--     LD_NoVehicle,\r\n",
					"--     LD_orvcleandispatch,\r\n",
					"--     LD_orvduration,\r\n",
					"--     LD_orvendorsments,\r\n",
					"--     LD_orvincident,\r\n",
					"--     LD_orvreturns,\r\n",
					"--     LD_orvskippeddeliveries,\r\n",
					"--     LD_outsourcedCrew,\r\n",
					"--     LD_PlanningRef,\r\n",
					"--     LD_PUCOLs,\r\n",
					"--     LD_PUIBTs,\r\n",
					"--     LD_ReOpenedDate,\r\n",
					"--     LD_ReOpenedUserID,\r\n",
					"--     LD_RouteID,\r\n",
					"--     LD_SealNo,\r\n",
					"--     LD_SecurityGateArrived,\r\n",
					"--     LD_SecurityGateArrivedUserID,\r\n",
					"--     LD_SecurityGateDespatched,\r\n",
					"--     LD_SecurityGateUserID,\r\n",
					"--     LD_ServiceID,\r\n",
					"--     LD_Spanner,\r\n",
					"--     LD_SpareWheel,\r\n",
					"--     LD_SRouteID,\r\n",
					"--     LD_SupUserID,\r\n",
					"--     LD_ToID,\r\n",
					"--     LD_TotalWeight,\r\n",
					"--     LD_Trailer1,\r\n",
					"--     LD_Trailer2,\r\n",
					"--     LD_Tyres,\r\n",
					"--     LD_UserID,\r\n",
					"--     LD_UserID2,\r\n",
					"--     LD_VehicleRegNo,\r\n",
					"--     LD_vehodo,\r\n",
					"--     LD_vehodo2,\r\n",
					"--     LD_AlidaFlag,\r\n",
					"--     LD_BayNo,\r\n",
					"--     LD_CDate,\r\n",
					"--     LD_CompanyID,\r\n",
					"--     LD_Costs,\r\n",
					"--     LD_CourierID,\r\n",
					"--     LD_CRef,\r\n",
					"--     LD_Crew,\r\n",
					"--     LD_DBUserID,\r\n",
					"--     LD_DCCRef,\r\n",
					"--     LD_Direct,\r\n",
					"--     LD_EditLoadDate,\r\n",
					"--     LD_ExcludeOpsi,\r\n",
					"--     LD_FromID,\r\n",
					"--     LD_FuelLitres,\r\n",
					"--     LD_OldLoadID\r\n",
					"\r\n",
					"FROM `Load`\r\n",
					"\"\"\")\r\n",
					"#Load.show()\r\n",
					"Load.createOrReplaceTempView(\"Load\")"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Load.write.parquet('/DataLake/Structured/Facts/load.parquet', mode='overwrite')"
				],
				"execution_count": 36
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## 03e_Operations_LMS_OnRouteDet_3MRolling_27_AddbackExpectionLoads"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA1 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT DISTINCT `dispatch.lmsid`\r\n",
					"FROM T_dispatch\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA1.show()\r\n",
					"TMPMISSINGDATA1.createOrReplaceTempView(\"TMPMISSINGDATA1\")"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA1 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT l.`dispatch.lmsid`,\r\n",
					"    1 AS Flag\r\n",
					"FROM `LOAD` l  \r\n",
					"LEFT JOIN TMPMISSINGDATA1 t\r\n",
					"ON l.`dispatch.lmsid` = t.`dispatch.lmsid`\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA1.show()\r\n",
					"TMPMISSINGDATA1.createOrReplaceTempView(\"TMPMISSINGDATA1\")"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM TMPMISSINGDATA1\r\n",
					"WHERE Flag <> 1"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT `dispatch.lmsid`\r\n",
					"FROM TMPMISSINGDATA1\r\n",
					"WHERE Flag <> 1"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### NOTE looks like the exceptions have been addressed in the source data as the source is returing no results that should be excluded\r\n",
					"#### The exclude part is also marked as RED in the excel documentation"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## 03e_Operations_LMS_OnRouteDet_3MRolling_57_MobileFeedbackReason"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dbodb_MobileFeedbackReason.head"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"LOAD = spark.sql(\"\"\"\r\n",
					"SELECT l.*,\r\n",
					"       mfr.Description as LD_MobileFeedbackReason\r\n",
					"FROM `Load` l\r\n",
					"LEFT JOIN dbodb_MobileFeedbackReason mfr\r\n",
					"       ON l.LD_MobileFeedbackReasonID = mfr.ID\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#LOAD.show()\r\n",
					"LOAD.createOrReplaceTempView(\"LOAD\")"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"LOAD = spark.sql(\"\"\"\r\n",
					"SELECT l.*,\r\n",
					"       dn.`loads.feedbackinclude` as LD_feedbackinclude\r\n",
					"FROM `Load` l\r\n",
					"LEFT JOIN  Debriefing_Non dn\r\n",
					"ON l.LD_MobileFeedbackReason = dn.`loads.feedback`\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#LOAD.show()\r\n",
					"LOAD.createOrReplaceTempView(\"LOAD\")"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"LOAD = spark.sql(\"\"\"\r\n",
					"SELECT l.*,\r\n",
					"       d.`dispatch.status.original`,\r\n",
					"       d.`dispatch.status.revised`\r\n",
					"FROM `LOAD` l\r\n",
					"LEFT JOIN T_dispatch d \r\n",
					"       ON l.`dispatch.lmsid` = d.`dispatch.lmsid`\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#LOAD.show()\r\n",
					"LOAD.createOrReplaceTempView(\"LOAD\")"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"LOAD = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *,\r\n",
					"       If(isnull(trim(LD_MobileFeedbackReason)),'Include',`LD_feedbackinclude.original`) as `LD_feedbackinclude.revised`\r\n",
					"FROM (SELECT *,\r\n",
					"             If(`dispatch.status.revised`='Completed','Include',LD_feedbackinclude) as `LD_feedbackinclude.original`\r\n",
					"FROM `LOAD`)a\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#LOAD.show()\r\n",
					"LOAD.createOrReplaceTempView(\"LOAD\")"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"T_LOAD = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT `dispatch.lmsid`,\r\n",
					"LD_ID,\r\n",
					"WL_LoadID\r\n",
					"LD_DriverID,\r\n",
					"LD_DriverName,\r\n",
					"LD_VehicleID,     \r\n",
					"LD_ParentLoadID,\r\n",
					"LD_ChildLoadID,\r\n",
					"LD_Debriefed,\r\n",
					"LD_finalFlag,\r\n",
					"LD_LDate,\r\n",
					"LD_ORVID,\r\n",
					"LD_ORVStatus,\r\n",
					"LD_ORV_Status,\r\n",
					"LD_ovrIgnore,\r\n",
					"LD_ORVCode,\r\n",
					"LD_ESTDepartureDate,\r\n",
					"LD_Site,\r\n",
					"LD_FirstScanOnDate,\r\n",
					"LD_LastScanOnDate,\r\n",
					"LD_FirstScanOffDate,\r\n",
					"LD_LastScanOffDate,\r\n",
					"LD_FleetNo,\r\n",
					"LD_Trailer1FleetNo,\r\n",
					"LD_Trailer2FleetNo,\r\n",
					"LD_DriverIdPassportNo,\r\n",
					"LD_MobileFeedbackReasonID,\r\n",
					"LD_EffectiveLoadDurationMinutes,\r\n",
					"LD_EffectiveOffLoadDurationMinutes,\r\n",
					"LD_TTypeID,\r\n",
					"--LD_Exception,\r\n",
					"LD_MobileFeedbackReason,\r\n",
					"LD_feedbackinclude,\r\n",
					"`LD_feedbackinclude.revised`,\r\n",
					"`LD_feedbackinclude.original`\r\n",
					"\r\n",
					"FROM `LOAD`\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#T_LOAD.show()\r\n",
					"T_LOAD.createOrReplaceTempView(\"T_LOAD\")"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"T_LOAD.write.parquet('/DataLake/Structured/Facts/T_LOAD.parquet', mode='overwrite')"
				],
				"execution_count": 43
			}
		]
	}
}