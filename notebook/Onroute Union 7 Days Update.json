{
	"name": "Onroute Union 7 Days Update",
	"properties": {
		"folder": {
			"name": "ARCHIVE/DEV/Archived/Onroute Interval Refreshes"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3aeaa9cc-aa3b-486b-9f36-e8188adcc31c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## This Notebook is used to update the Onroute Data in 7 Days Intervals incrementaly"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load Orginal and New Temp \"Incremental Data\"from Blob-storage"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"#publicdelivery\r\n",
					"dbopublicdelivery_temp = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute_Incremental_Data/publicdelivery_7_Days.parquet', format='parquet')\r\n",
					"dbopublicdelivery_temp.createOrReplaceTempView(\"dbopublicdelivery_temp\")\r\n",
					"\r\n",
					"publicdelivery = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
					"publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
					"\r\n",
					"#publicdispatch\r\n",
					"publicdispatch_temp = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute_Incremental_Data/publicdispatch_7_Days.parquet', format='parquet')\r\n",
					"publicdispatch_temp.createOrReplaceTempView(\"publicdispatch_temp\")\r\n",
					"\r\n",
					"publicdispatch = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
					"publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
					"\r\n",
					"#publicdispatchsegment\r\n",
					"#publicdispatchsegment_temp = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute_Incremental_Data/publicdispatchsegment_7_Days.parquet', format='parquet')\r\n",
					"#publicdispatchsegment_temp.createOrReplaceTempView(\"dboorder_temp\")\r\n",
					"\r\n",
					"publicdispatchsegment = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatchsegment.parquet', format='parquet')\r\n",
					"publicdispatchsegment.createOrReplaceTempView(\"publicdispatchsegment\")\r\n",
					"\r\n",
					"#publicparcel\r\n",
					"publicparcel_temp = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute_Incremental_Data/publicparcel_7_Days.parquet', format='parquet')\r\n",
					"publicparcel_temp.createOrReplaceTempView(\"publicparcel_temp\")\r\n",
					"\r\n",
					"publicparcel = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicparcel.parquet', format='parquet')\r\n",
					"publicparcel.createOrReplaceTempView(\"publicparcel\")"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Drop 3 Months of the current data"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dbopublicdelivery_drop = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM publicdelivery\r\n",
					"WHERE FROM_UNIXTIME(insdate) <= (SELECT date_add(FROM_UNIXTIME(MAX(insdate)), -7)  FROM publicdelivery)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"dbopublicdelivery_drop.createOrReplaceTempView(\"dbopublicdelivery_drop\")"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dbopublicdispatch_drop = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM publicdispatch\r\n",
					"WHERE FROM_UNIXTIME(insdate) <= (SELECT date_add(FROM_UNIXTIME(MAX(insdate)), -7)  FROM publicdispatch)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"dbopublicdispatch_drop.createOrReplaceTempView(\"dbopublicdispatch_drop\")"
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#dbopublicdispatchsegment_drop = spark.sql(\"\"\"\r\n",
					"\r\n",
					"#SELECT *\r\n",
					"#FROM publicdispatchsegment\r\n",
					"#WHERE departuredate <= (SELECT date_add(MAX(departuredate), -7) departuredate FROM publicdispatchsegment)\r\n",
					"\r\n",
					"#\"\"\")\r\n",
					"\r\n",
					"#dbopublicdispatchsegment_drop.createOrReplaceTempView(\"dbopublicdispatchsegment_drop\")"
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dbopublicparcel_drop = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM publicparcel\r\n",
					"WHERE FROM_UNIXTIME(acceptancedate) <= (SELECT date_add(FROM_UNIXTIME(MAX(acceptancedate)), -7)  FROM publicparcel)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"dbopublicparcel_drop.createOrReplaceTempView(\"dbopublicparcel_drop\")"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Union Old data with the New Data"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicdelivery = spark.sql(\"\"\"\r\n",
					"\r\n",
					"(SELECT *\r\n",
					"FROM dbopublicdelivery_drop\r\n",
					"EXCEPT\r\n",
					"SELECT * FROM dbopublicdelivery_temp)\r\n",
					"UNION ALL\r\n",
					"(SELECT * FROM dbopublicdelivery_temp\r\n",
					"EXCEPT \r\n",
					"SELECT * FROM dbopublicdelivery_drop)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"publicdelivery.createOrReplaceTempView(\"publicdelivery\")"
				],
				"attachments": null,
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicdispatch = spark.sql(\"\"\"\r\n",
					"\r\n",
					"(SELECT *\r\n",
					"FROM dbopublicdispatch_drop\r\n",
					"EXCEPT\r\n",
					"SELECT * FROM publicdispatch_temp)\r\n",
					"UNION ALL\r\n",
					"(SELECT * FROM publicdispatch_temp\r\n",
					"EXCEPT \r\n",
					"SELECT * FROM dbopublicdispatch_drop)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"publicdispatch.createOrReplaceTempView(\"publicdispatch\")"
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicparcel = spark.sql(\"\"\"\r\n",
					"\r\n",
					"(SELECT *\r\n",
					"FROM dbopublicparcel_drop\r\n",
					"EXCEPT\r\n",
					"SELECT * FROM publicparcel_temp)\r\n",
					"UNION ALL\r\n",
					"(SELECT * FROM publicparcel_temp\r\n",
					"EXCEPT \r\n",
					"SELECT * FROM dbopublicparcel_drop)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"publicparcel.createOrReplaceTempView(\"publicparcel\")"
				],
				"attachments": null,
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicdelivery = dbopublicdelivery_drop.union(dbopublicdelivery_temp)\r\n",
					"publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
					"\r\n",
					"publicdispatch = dbopublicdispatch_drop.union(publicdispatch_temp)\r\n",
					"publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
					"\r\n",
					"#publicdispatchsegment = dbopublicdispatchsegment_drop.union(publicdispatchsegment_temp)\r\n",
					"#publicdispatchsegment.createOrReplaceTempView(\"publicdispatchsegment\")\r\n",
					"\r\n",
					"publicparcel = dbopublicparcel_drop.union(publicparcel_temp)\r\n",
					"publicparcel.createOrReplaceTempView(\"publicparcel\")"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Write new Union File Back to Blobstorage"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicdelivery.write.parquet('/Unstructured Data/Onroute_test/publicdelivery_7_Days.parquet/', mode='overwrite')\r\n",
					"\r\n",
					"publicdispatch.write.parquet('/Unstructured Data/Onroute_test/publicdispatch_7_Days.parquet/', mode='overwrite')\r\n",
					"\r\n",
					"#publicdispatchsegment.write.parquet('/Unstructured Data/Onroute_test/publicdispatchsegment_7_Days.parquet/', mode='overwrite')\r\n",
					"\r\n",
					"publicparcel.write.parquet('/Unstructured Data/Onroute_test/publicparcel_7_Days.parquet/', mode='overwrite')"
				],
				"attachments": null,
				"execution_count": 9
			}
		]
	}
}