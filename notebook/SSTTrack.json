{
	"name": "SSTTrack",
	"properties": {
		"folder": {
			"name": "TRANSFORM/01 SEMI-STRUCTURED/03_LMS + ORV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ApacheSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "6c7338e5-cdc6-49e4-bc3f-46c68fa95837"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# #Create DataFrame for the ssttrackunion LMS Table\r\n",
					"# ssttrackunion = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
					"# ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbolocation LMS Table\r\n",
					"# dbolocation= spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
					"# dbolocation.createOrReplaceTempView(\"dbolocation\")"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"ssttrack \r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    t.id as lms_track_id\r\n",
					"    ,t.opendt as lms_track_opendt\r\n",
					"    ,t.closedt as lms_track_closedt\r\n",
					"    ,t.loadid as lms_track_loadid\r\n",
					"    ,t.userid as lms_track_userid\r\n",
					"    ,t.parcelid as lms_track_parcelid\r\n",
					"    ,t.tolocid as lms_track_tolocid\r\n",
					"    ,t.touserid as lms_track_touserid\r\n",
					"    ,t.fromlocid as lms_track_fromlocid\r\n",
					"    ,t.tracktypeid2 as lms_track_tracktypeid2\r\n",
					"    ,t.tracktypeid as lms_track_tracktypeid\r\n",
					"    ,t.lastupdate as lms_track_lastupdate\r\n",
					"    ,t.toloadid as lms_track_toloadid\r\n",
					"    ,t.openstationid as lms_track_openstationid\r\n",
					"    ,t.closestationid as lms_track_closestationid\r\n",
					"    ,t.weight as lms_parcel_weight\r\n",
					"    ,t.chargeweight as lms_parcel_chargeweight\r\n",
					"    ,t.volweight as lms_parcel_volweight\r\n",
					"    ,t.volumiserweight as lms_parcel_volumiserweight\r\n",
					"    ,t.specdel as lms_order_specdel\r\n",
					"    ,fl.id as lms_flocation_id\r\n",
					"    ,fl.description as lms_flocation_description\r\n",
					"    ,tl.id as lms_tlocation_id\r\n",
					"    ,tl.description as lms_tlocation_description\r\n",
					"\r\n",
					"\r\n",
					"FROM ssttrackunion t\r\n",
					"LEFT JOIN dbolocation tl on tl.id = t.tolocid\r\n",
					"LEFT JOIN dbolocation fl on fl.id = t.tolocid\r\n",
					""
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ssttrack = spark.sql(\"SELECT * FROM ssttrack\")"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ssttrack.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Semi Structured Data/OPS/ssttrack.parquet', mode = \"overwrite\")"
				],
				"execution_count": 16
			}
		]
	}
}