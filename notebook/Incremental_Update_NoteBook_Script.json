{
	"name": "Incremental_Update_NoteBook_Script",
	"properties": {
		"folder": {
			"name": "ARCHIVE/PROD/Data Take-On_Expose"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "23341bc4-da1a-4f5f-b637-78911f303785"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"Blobstorage = \"\" #\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/\"\r\n",
					"foldersource = \"\" #\"LMS/\"\r\n",
					"folderincremental = \"\" #\"LMS_Incremental_Data/\"\r\n",
					"filenames =  \"\"#\"dboconsignment;dboLoads;dboorder;dboparcel;dbotrack;dboWaybill\"\r\n",
					"WriteBlobstorage = \"\" #\"/Unstructured Data/LMS_test1/\"\r\n",
					"filenamesincremental = \"\" #\"\" #None #\"_3_Months\"\r\n",
					"updatefields = \"\" #\"\""
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Convert Filenames LIST to ARRAY"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"filenames = filenames.split(';')\r\n",
					"updatefields = updatefields.split(';')"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Connect to ASA Bolbstorage for required files"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import functions as F\r\n",
					"from pyspark.sql.functions import min, max, from_unixtime"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for (counter, filename) in enumerate (filenames, 0):\r\n",
					"\r\n",
					"    ## For Source Data\r\n",
					"    source = Blobstorage + foldersource + filename\r\n",
					"    #print(source)\r\n",
					"\r\n",
					"    ## For Incremental Data\r\n",
					"    realname = filename + \"_temp\"\r\n",
					"    if filenamesincremental is not None:\r\n",
					"        path = Blobstorage + folderincremental + filename + filenamesincremental\r\n",
					"    else:\r\n",
					"        path = Blobstorage + folderincremental + filename\r\n",
					"        \r\n",
					"    #print(path)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"    ##Create Connection to ASA Blobstorage for the source files\r\n",
					"    ## Normal Union on All data\r\n",
					"    if filenamesincremental is None:\r\n",
					"        filename1 = spark.read.load(source, format='parquet')\r\n",
					"    \r\n",
					"    ## 3 Months Union Logic\r\n",
					"    elif filenamesincremental == '_3_Months':\r\n",
					"        filename1 = spark.read.load(source, format='parquet')\r\n",
					"        if foldersource != \"Onroute/\":\r\n",
					"            maxdate = filename1.select(F.add_months(max(F.col(updatefields[counter])), -3)).first()\r\n",
					"            filename1 = filename1.filter(F.col(updatefields[counter]) <= maxdate[0])\r\n",
					"        else:\r\n",
					"            maxdate = filename1.select(F.add_months(from_unixtime(max(F.col(updatefields[counter])),'yyyy-MM-dd'), -3)).first()\r\n",
					"            filename1 = filename1.filter(F.from_unixtime(F.col(updatefields[counter])) <= maxdate[0])\r\n",
					"    \r\n",
					"    ## 7 Days Union Logic\r\n",
					"    else:\r\n",
					"        filename1 = spark.read.load(source, format='parquet')\r\n",
					"        if foldersource != \"Onroute/\":\r\n",
					"            maxdate = filename1.select(F.date_add(max(F.col(updatefields[counter])), -7)).first()\r\n",
					"            filename1 = filename1.filter(F.col(updatefields[counter]) <= maxdate[0])\r\n",
					"        else:\r\n",
					"            maxdate = filename1.select(F.date_add(from_unixtime(max(F.col(updatefields[counter])),'yyyy-MM-dd'), -7)).first()\r\n",
					"            filename1 = filename1.filter(F.from_unixtime(F.col(updatefields[counter])) <= maxdate[0])\r\n",
					"\r\n",
					"    ##Create Connection to ASA Blobstorage for the incremental files\r\n",
					"    realname1 = spark.read.load(path, format='parquet')\r\n",
					"    \r\n",
					"\r\n",
					"    ## Create Union between the two Dataframes\r\n",
					"    total = filename1.unionByName(realname1, allowMissingColumns=True)\r\n",
					"\r\n",
					"    if filenamesincremental is not None:\r\n",
					"        writename = WriteBlobstorage + filename + filenamesincremental\r\n",
					"    else:\r\n",
					"        writename = WriteBlobstorage + filename\r\n",
					"\r\n",
					"    TempPath = WriteBlobstorage + \"T1.parquet\"\r\n",
					"\r\n",
					"    total.write.parquet(TempPath, mode='overwrite')\r\n",
					"\r\n",
					"    total = spark.read.load(TempPath, format='parquet')\r\n",
					"\r\n",
					"    total.write.parquet(source, mode='overwrite')"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#mssparkutils.fs.ls(\"/\")\r\n",
					"TempPath = WriteBlobstorage + \"T1.parquet\"\r\n",
					"test1 = mssparkutils.fs.rm(TempPath, True)\r\n",
					"test1"
				],
				"execution_count": 11
			}
		]
	}
}