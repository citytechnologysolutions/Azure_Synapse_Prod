{
	"name": "Onroute Union 2 Hour Interval",
	"properties": {
		"folder": {
			"name": "ARCHIVE/DEV/Archived/Onroute Interval Refreshes"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d1efed24-41e7-4bbd-ac67-f5640bf9c6a1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## This Notebook is used to update the Onroute Data in 2 Hour Intervals incrementaly"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load Orginal and New Temp \"Incremental Data\"from Blob-storage"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"#publicdelivery\r\n",
					"dbopublicdelivery_temp = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute_Incremental_Data/publicdelivery.parquet', format='parquet')\r\n",
					"dbopublicdelivery_temp.createOrReplaceTempView(\"dbopublicdelivery_temp\")\r\n",
					"\r\n",
					"publicdelivery = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
					"publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
					"\r\n",
					"#publicdispatch\r\n",
					"publicdispatch_temp = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute_Incremental_Data/publicdispatch.parquet', format='parquet')\r\n",
					"publicdispatch_temp.createOrReplaceTempView(\"publicdispatch_temp\")\r\n",
					"\r\n",
					"publicdispatch = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
					"publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
					"\r\n",
					"#publicdispatchsegment\r\n",
					"publicdispatchsegment_temp = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute_Incremental_Data/publicdispatchsegment.parquet', format='parquet')\r\n",
					"publicdispatchsegment_temp.createOrReplaceTempView(\"publicdispatchsegment_temp\")\r\n",
					"\r\n",
					"publicdispatchsegment = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatchsegment.parquet', format='parquet')\r\n",
					"publicdispatchsegment.createOrReplaceTempView(\"publicdispatchsegment\")\r\n",
					"\r\n",
					"#publicparcel\r\n",
					"publicparcel_temp = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute_Incremental_Data/publicparcel.parquet', format='parquet')\r\n",
					"publicparcel_temp.createOrReplaceTempView(\"publicparcel_temp\")\r\n",
					"\r\n",
					"publicparcel = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicparcel.parquet', format='parquet')\r\n",
					"publicparcel.createOrReplaceTempView(\"publicparcel\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicdelivery.columns"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicdispatch.columns"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicparcel.columns"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Union Old data with the New Data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicdelivery = spark.sql(\"\"\"\r\n",
					"\r\n",
					"(SELECT *\r\n",
					"FROM publicdelivery\r\n",
					"EXCEPT\r\n",
					"SELECT * FROM dbopublicdelivery_temp)\r\n",
					"UNION ALL\r\n",
					"(SELECT * FROM dbopublicdelivery_temp\r\n",
					"EXCEPT \r\n",
					"SELECT * FROM publicdelivery)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"publicdelivery.createOrReplaceTempView(\"publicdelivery\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicdispatch = spark.sql(\"\"\"\r\n",
					"\r\n",
					"(SELECT *\r\n",
					"FROM publicdispatch\r\n",
					"EXCEPT\r\n",
					"SELECT * FROM publicdispatch_temp)\r\n",
					"UNION ALL\r\n",
					"(SELECT * FROM publicdispatch_temp\r\n",
					"EXCEPT \r\n",
					"SELECT * FROM publicdispatch)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"publicdispatch.createOrReplaceTempView(\"publicdispatch\")"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dispatchsegment = spark.sql(\"\"\"\r\n",
					"\r\n",
					"(SELECT *\r\n",
					"FROM publicdispatchsegment\r\n",
					"EXCEPT\r\n",
					"SELECT * FROM publicdispatchsegment_temp)\r\n",
					"UNION ALL\r\n",
					"(SELECT * FROM publicdispatchsegment_temp\r\n",
					"EXCEPT \r\n",
					"SELECT * FROM publicdispatchsegment)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"dispatchsegment.createOrReplaceTempView(\"dispatchsegment\")"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicparcel = spark.sql(\"\"\"\r\n",
					"\r\n",
					"(SELECT *\r\n",
					"FROM publicparcel\r\n",
					"EXCEPT\r\n",
					"SELECT * FROM publicparcel_temp)\r\n",
					"UNION ALL\r\n",
					"(SELECT * FROM publicparcel_temp\r\n",
					"EXCEPT \r\n",
					"SELECT * FROM publicparcel)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"publicparcel.createOrReplaceTempView(\"publicparcel\")"
				],
				"execution_count": 17
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"delivery = publicdelivery.union(dbopublicdelivery_temp)\r\n",
					"delivery.createOrReplaceTempView(\"delivery\")\r\n",
					"\r\n",
					"dispatch = publicdispatch.union(publicdispatch_temp)\r\n",
					"dispatch.createOrReplaceTempView(\"dispatch\")\r\n",
					"\r\n",
					"dispatchsegment = publicdispatchsegment.union(publicdispatchsegment_temp)\r\n",
					"dispatchsegment.createOrReplaceTempView(\"dispatchsegment\")\r\n",
					"\r\n",
					"parcel = publicparcel.union(publicparcel_temp)\r\n",
					"parcel.createOrReplaceTempView(\"parcel\")"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Write new Union File Back to Blobstorage"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"publicdelivery.write.parquet('/Unstructured Data/Onroute_test/publicdelivery.parquet/', mode='overwrite')\r\n",
					"\r\n",
					"publicdispatch.write.parquet('/Unstructured Data/Onroute_test/publicdispatch.parquet/', mode='overwrite')\r\n",
					"\r\n",
					"dispatchsegment.write.parquet('/Unstructured Data/Onroute_test/publicdispatchsegment.parquet/', mode='overwrite')\r\n",
					"\r\n",
					"publicparcel.write.parquet('/Unstructured Data/Onroute_test/publicparcel.parquet/', mode='overwrite')"
				],
				"execution_count": 18
			}
		]
	}
}