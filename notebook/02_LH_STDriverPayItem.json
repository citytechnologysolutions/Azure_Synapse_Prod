{
	"name": "02_LH_STDriverPayItem",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9601be94-3d52-4ff5-b558-0230e304bee0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"source": [
					"# #Create DataFrame for the publicdriverpayitem TMS Table\r\n",
					"# publicdriverpayitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpayitem.parquet', format='parquet')\r\n",
					"# publicdriverpayitem.createOrReplaceTempView(\"publicdriverpayitem\")"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stdriverpayitem\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"\r\n",
					"    d.id as tms_driverpayitem_id\r\n",
					"    ,d.driverid as tms_driverpayitem_driverid\r\n",
					"    ,d.tripid as tms_driverpayitem_tripid\r\n",
					"    ,d.triprate as tms_driverpayitem_triprate\r\n",
					"    ,d.mealrate as tms_driverpayitem_mealrate\r\n",
					"    ,d.sleepoverrate as tms_driverpayitem_sleepoverrate\r\n",
					"    ,d.airtimerate as tms_driverpayitem_airtimerate\r\n",
					"    ,d.linkrate as tms_driverpayitem_linkrate\r\n",
					"    ,d.totalrate as tms_driverpayitem_totalrate\r\n",
					"    ,d.routeid as tms_driverpayitem_routeid\r\n",
					"    ,d.routename as tms_driverpayitem_routename\r\n",
					"    ,to_timestamp(7200+d.insdate) as tms_driverpayitem_insdate\r\n",
					"    ,to_timestamp(7200+d.moddate) as tms_driverpayitem_moddate\r\n",
					"    ,d.horse as tms_driverpayitem_horse\r\n",
					"    ,d.trailers as tms_driverpayitem_trailers\r\n",
					"    ,d.linkused as tms_driverpayitem_linkused\r\n",
					"    ,d.manualadjustment as tms_driverpayitem_manualadjustment\r\n",
					"    ,d.editby as tms_driverpayitem_editby\r\n",
					"    ,d.drivername as tms_driverpayitem_drivername\r\n",
					"    ,to_timestamp(7200+d.dispatchdate) as tms_driverpayitem_dispatchdate\r\n",
					"    ,d.bookings as tms_driverpayitem_bookings\r\n",
					"    ,d.employeecode as tms_driverpayitem_employeecode\r\n",
					"    ,d.originatedfrom as tms_driverpayitem_originatedfrom\r\n",
					"    ,d.reportid as tms_driverpayitem_reportid\r\n",
					"\r\n",
					"FROM publicdriverpayitem d\r\n",
					"WHERE d.dispatchdate >0\r\n",
					""
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stdriverpayitem = spark.sql(\"SELECT * FROM stdriverpayitem\")"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stdriverpayitem.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdriverpayitem.parquet', mode = \"overwrite\")\r\n",
					""
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"SUCCESS\")"
				],
				"execution_count": 47
			}
		]
	}
}