{
	"name": "11- Transactions_Continued_DEV",
	"properties": {
		"folder": {
			"name": "ARCHIVE/DEV/Archived/Transactions Notebooks DEV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 3,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "3",
				"spark.dynamicAllocation.maxExecutors": "3",
				"spark.autotune.trackingId": "fb4cd926-6530-4bd6-a2eb-7a7135869e88"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#TRANSACTIONS = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net//DataLake/Structured/Facts/F_TRANSACTIONS.parquet', format='parquet')\r\n",
					"#TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")\r\n",
					"\r\n",
					"#Dim_ITEM = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/Dim_ITEM.parquet', format='parquet')\r\n",
					"#Dim_ITEM.createOrReplaceTempView(\"Dim_ITEM\")\r\n",
					"\r\n",
					"#Goods_Issues = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/F_Goods_Issues.parquet', format='parquet')\r\n",
					"#Goods_Issues.createOrReplaceTempView(\"Goods_Issues\")\r\n",
					"\r\n",
					"#dboOACT = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboOACT.parquet', format='parquet')\r\n",
					"#dboOACT.createOrReplaceTempView(\"dboOACT\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load EXCEL file with suffix time type categories\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Excel_Files/INLINE.xlsx\"\r\n",
					"var_File_Page = \"Sheet1\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"TimeType_Categories\")\r\n",
					"\r\n",
					"INLINE = spark.sql(\"\"\"SELECT Account_Type, Fleet_Cost1 as Fleet_Costs1 FROM  TimeType_Categories\"\"\")\r\n",
					"\r\n",
					"INLINE.createOrReplaceTempView(\"INLINE\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load EXCEL with Exceptions\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Excel_Files/Exceptions.xlsx\"\r\n",
					"var_File_Page = \"Sheet1\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"Exceptions_Categories\")\r\n",
					"\r\n",
					"Exceptions = spark.sql(\"\"\"SELECT `System Account Code KEY`, `Depot Code`, `Posting Date`, `TransId`, `Document Category`, `Transaction Detail`, `Line Total` FROM Exceptions_Categories\"\"\")\r\n",
					"\r\n",
					"Exceptions.createOrReplaceTempView(\"Exceptions\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPACCOUNTS2 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT distinct\r\n",
					"\t if(isnull(`System Account Code`), NULL, `System Account Code`) as `System_Account_CodeA`,\r\n",
					"\t if(isnull(`System Account Code`), '', `Account Type`) as `Account_Type`,\r\n",
					"     if(isnull(`System Account Code`), 'Unknown', `Account Code`) as `Account_CodeA`,\r\n",
					"     if(isnull(`System Account Code`), 'Unknown', `Service Type`) as `Service_TypeA`, \r\n",
					"     if(isnull(`System Account Code`), '', a.Depot) as Depot,\r\n",
					"     if(isnull(`System Account Code`), '', a.GroupMask) as GroupMaskA,\r\n",
					"     if(isnull(`System Account Code`), '', a.Company) as Company,\r\n",
					"     if(isnull(`System Account Code`), 'Unknown', TRIM(`Acct Project`)) as `Acct_Project`,\r\n",
					"     if(isnull(`System Account Code`), 0, a.FatherNum) as FatherNum,\r\n",
					"     if(isnull(`System Account Code`), '' , `Account Type`) as `Account_Name`,\r\n",
					"     if(isnull(`System Account Code`), NULL, `System Account Code`) || if(isnull(`System Account Code`), '', Company) as `System_Account_Code_KEY`,\r\n",
					"     `Account Status` as `Account_Status`,\r\n",
					"     a.Postable,\r\n",
					"     Upper(b.AcctName) as `Level_5_Name`,\r\n",
					"     Upper(c.AcctName) as `Level_4_Name`,\r\n",
					"     Upper(d.AcctName) as `Level_3_Name`,\r\n",
					"     Upper(e.AcctName) as `Level_2_Name`,\r\n",
					"     Upper(f.AcctName) as `Level_1_Name`\r\n",
					"FROM(\r\n",
					"SELECT AcctCode as `System Account Code`,\r\n",
					"     UPPER(LEFT(substring_index(AcctName, '(', -1), 2)) as `Account Type`,\r\n",
					"     Segment_0 as `Account Code`,\r\n",
					"     Segment_1 as `Service Type`, \r\n",
					"     Segment_2 as `Depot`,\r\n",
					"     GroupMask,\r\n",
					"     \"City Logistics New\" as Company,\r\n",
					"     TRIM(Project) as `Acct Project`,\r\n",
					"     FatherNum,\r\n",
					"     FrozenFor as `Account Status`,\r\n",
					"     Postable\r\n",
					"FROM dboOACT)a\r\n",
					"\r\n",
					"LEFT JOIN dboOACT b\r\n",
					"ON if(isnull(a.`System Account Code`), NULL, a.`System Account Code`)  = b.AcctCode\r\n",
					"AND a.FatherNum = b.FatherNum\r\n",
					"AND b.Levels = 5\r\n",
					"\r\n",
					"LEFT JOIN dboOACT c\r\n",
					"ON c.AcctCode = b.FatherNum\r\n",
					"AND c.Levels = 4\r\n",
					"\r\n",
					"LEFT JOIN dboOACT d\r\n",
					"ON d.AcctCode = c.FatherNum\r\n",
					"AND d.Levels = 3\r\n",
					"\r\n",
					"LEFT JOIN dboOACT e\r\n",
					"ON e.AcctCode = d.FatherNum\r\n",
					"AND e.Levels = 2\r\n",
					"\r\n",
					"LEFT JOIN dboOACT f\r\n",
					"ON f.AcctCode = e.FatherNum\r\n",
					"AND f.Levels = 1\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"#TMPACCOUNTS2.show()\r\n",
					"TMPACCOUNTS2.createOrReplaceTempView(\"TMPACCOUNTS2\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS = spark.sql(\"\"\"\r\n",
					"SELECT t.*,\r\n",
					"      --`System_Account_CodeA`  as `System_Account_Code`,\r\n",
					"\t `Account_Type`,\r\n",
					"     `Account_CodeA` as `Account_Code`,\r\n",
					"     `Service_TypeA` as `Service_Type`, \r\n",
					"     Depot,\r\n",
					"     GroupMaskA as GroupMask,\r\n",
					"     TRIM(`Acct_Project`) as `Acct_Project`,\r\n",
					"     `Level_2_Name`\r\n",
					"FROM `TRANSACTIONS` t\r\n",
					"LEFT JOIN TMPACCOUNTS2 tmp2\r\n",
					"       ON t.System_Account_Code = tmp2.System_Account_CodeA\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS.show()\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TRANSACTIONS = spark.sql(\"\"\"\r\n",
					"SELECT t.*,\r\n",
					"       --ItemCode as `Item_Code`, \r\n",
					"       Upper(ItemName) as Item,\r\n",
					"       Upper(CONCAT('(',left(ItemCode, 2),' - ',right(ItemCode, 3),')','')) as `Item_Type`,\r\n",
					"       --Upper(replace(ItemName , ('(' & left(ItemCode, 2) & ' - ' & right(ItemCode, 3) & ')'), '')) as `Item_Type`,\r\n",
					"       --`Company`,\r\n",
					"       InvntItem\r\n",
					"FROM `TRANSACTIONS` t\r\n",
					"LEFT JOIN Dim_ITEM i \r\n",
					"ON t.Item_Code = i.ItemCode\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS.show()\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TRANSACTIONS = spark.sql(\"\"\"\r\n",
					"SELECT t.*, Fleet_Costs1\r\n",
					"FROM `TRANSACTIONS` t\r\n",
					"LEFT JOIN `INLINE` i \r\n",
					"ON t.Account_Type = i.Account_Type\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS.show()\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TRANSACTIONS_Test = spark.sql(\"\"\"\r\n",
					"SELECT t.*,\r\n",
					"       --Company, \r\n",
					"       --TransId, \r\n",
					"       --LineNum as `Line_Number`,\r\n",
					"       U_ODO_START as `Fleet_KMs`\r\n",
					"       --,Right(Left(`U_EXPENSEITEM`,5),3) as SubDepotCode\r\n",
					"FROM `TRANSACTIONS` t\r\n",
					"LEFT JOIN Goods_Issues gi\r\n",
					"  ON t.TransId = gi.TransId\r\n",
					" AND t.Company = gi.Company\r\n",
					" AND t.Line_Number = gi.LineNum\r\n",
					" AND t.SubDepotCode = Right(Left(gi.U_EXPENSEITEM,5),3)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS_Test.show()\r\n",
					"TRANSACTIONS_Test.createOrReplaceTempView(\"TRANSACTIONS_Test\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TRANSACTIONSE = spark.sql(\"\"\"\r\n",
					"SELECT 'City Couriers' as Company,\r\n",
					"\t TransId,\r\n",
					"\t `Document_Category`,\r\n",
					"\t `Document_Number`,\r\n",
					"     Posting_Date,\r\n",
					"\t 1 as TransExclude\r\n",
					"FROM `TRANSACTIONS_Test`\r\n",
					" where `Company` || `Document_Number` || `Document_Category` = 'City Couriers1010Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1011Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1018Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1019Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1270Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1271Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1508Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1510Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1530Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1531Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1588Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1590Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1736Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1737Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1738Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1739Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers2022Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers2023Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers2025Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers2026Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1013Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1014Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1015Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1020Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1021Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1022Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1023Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1267Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1268Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1269Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1511Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1512Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1513Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1527Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1528Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1529Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1740Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1741Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers1742Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers2017Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers2018Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers2019Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers787Sales Invoice'\r\n",
					"    or `Company` || `Document_Number` || `Document_Category` = 'City Couriers789Sales Invoice'\r\n",
					"    or `Company` || `Customer_Reference` || `Document_Category` = 'City CouriersCOST RECOVERYSales Invoice'\r\n",
					"    or `Company` || `Customer_Reference` || `Document_Category` = 'City CouriersCOST RECOVERYSales Credit Note'\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONSE.show()\r\n",
					"TRANSACTIONSE.createOrReplaceTempView(\"TRANSACTIONSE\")"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TRANSACTIONS = spark.sql(\"\"\"\r\n",
					"SELECT t.*,\r\n",
					"       te.TransExclude\r\n",
					"FROM `TRANSACTIONS_Test` t \r\n",
					"LEFT JOIN TRANSACTIONSE te\r\n",
					"ON t.TransId = te.TransId\r\n",
					"AND t.Document_Category = te.Document_Category\r\n",
					"AND t.Document_Number = te.Document_Number\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS.show()\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TRANSACTIONS_FINAL = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT distinct\r\n",
					"\t *,\r\n",
					"\t if(isnull(U_RATE), 'ZZNONE', U_RATE) as U_RATE2,\r\n",
					"\t if(isnull(`Line_Total`), 0, `Line_Total`) as `Line_Total3`, \r\n",
					"\t --if(isnull(Discount), 0, Discount) as `Line Total3`,\r\n",
					"\t if(isnull(`Line_Total`), 0, `Line_Total`) + \r\n",
					"\t (if(isnull(`Line_Total`), 0, `Line_Total`)*\r\n",
					"\t (if(IsNull(`Doc_Discount_%`),0,`Doc_Discount_%`)*-1)/100) as `Line_Total2`,\r\n",
					"\t `System_Account_Code` || Company as `System_Account_Code_KEY`,\r\n",
					"     \r\n",
					"\t if(isnull(`Item_Code`), 'ZZNONE', `Item_Code` || Company) as `Item_Code_KEY`,\r\n",
					"\t if(`Account_Type` = 'DEPRECIATION PPE' ,\r\n",
					"\t (if(`Service_Type` = 'DT' or `Service_Type` = 'LT' or `Service_Type` = 'ET' or `Posting_Date` <= '2010/03/31', 1,0)),\r\n",
					"\t if(`Fleet_Costs1` = 1, 1, 0)) as `Fleet_Costs`,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n",
					"    \r\n",
					"\r\n",
					"\t if(isnull(Project) = 1 or Project = '', 'ZZNONE', TRIM(Project)) ||\r\n",
					"     if(isnull(Depot) = 1 or Depot = '', 'ZZNONE', TRIM(Depot)) ||\r\n",
					"     Company ||\r\n",
					"     Posting_Date ||\r\n",
					"     IF(isnull(Lane) = 1 or Lane = '', '', TRIM(Lane)) ||\r\n",
					"     if(isnull(Customer_Code) = 1 or Customer_Code = '', 'ZZNONE', TRIM(Customer_Code)) ||\r\n",
					"     if(isnull(Supplier_Code) = 1 or Supplier_Code = '', 'ZZNONE', TRIM(Supplier_Code))\r\n",
					"\t /*if(isnull(Project), 'ZZNONE', TRIM(Project)) || \r\n",
					"\t if(isnull(Depot), 'ZZNONE', Depot) || Company || `Posting_Date` || Lane || \r\n",
					"\t if(isnull(`Customer_Code`), 'ZZNONE', `Customer_Code`) || \r\n",
					"\t if(isnull(`Supplier_Code`), 'ZZNONE', `Supplier_Code`)*/ as MAINKEY2,\r\n",
					"\r\n",
					"     if(isnull(Project) = 1 or Project = '', 'ZZNONE', TRIM(Project)) ||\r\n",
					"     if(isnull(Depot) = 1 or Depot = '', 'ZZNONE', TRIM(Depot)) ||\r\n",
					"     Company ||\r\n",
					"     Posting_Date ||\r\n",
					"     IF(isnull(Lane) = 1 or Lane = '', '', TRIM(Lane)) ||\r\n",
					"     if(isnull(Customer_Code) = 1 or Customer_Code = '', 'ZZNONE', TRIM(Customer_Code)) ||\r\n",
					"     if(isnull(Supplier_Code) = 1 or Supplier_Code = '', 'ZZNONE', TRIM(Supplier_Code)) ||\r\n",
					"     Service_Type\r\n",
					"\t /*if(isnull(Project), 'ZZNONE', TRIM(Project)) || \r\n",
					"\t if(isnull(Depot), 'ZZNONE', Depot) || Company || `Posting_Date` || Lane || \r\n",
					"\t if(isnull(`Customer_Code`), 'ZZNONE', `Customer_Code`) || \r\n",
					"\t if(isnull(`Supplier_Code`), 'ZZNONE', `Supplier_Code`) || `Service_Type`*/ as `MAINKEY2_ST`,\r\n",
					"\r\n",
					"\t if(`Document_Category` = 'Sales Invoice' and InvntItem = 'Y', 1,\r\n",
					"\t if(`Document_Category` = 'Goods Return' and (GroupMask = 5 or GroupMask = 6), 1, \r\n",
					"\t if(`Document_Category` <> 'Journal' and `Document_Category` <> 'Manual Journal' and `Document_Category` <> 'Direct Postings' \r\n",
					"\t and (GroupMask = 1 or GroupMask = 2 or GroupMask = 3), 1,\r\n",
					"\t if((GroupMask = 4 or GroupMask = 5 or GroupMask = 6 or GroupMask = 7 or GroupMask = 8) and isnull(TransExclude) = 0, 1, \r\n",
					"\t  0)))) as Exclude,\r\n",
					"\t  if(`User_Code` = 1 and `Document_Category` = 'Goods Receipt Note', 1,0) as Exclude2\r\n",
					"\r\n",
					"FROM TRANSACTIONS\r\n",
					"WHERE `Account_Type` <> 'COST RECOVERY'\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS_FINAL.show()\r\n",
					"TRANSACTIONS_FINAL.createOrReplaceTempView(\"TRANSACTIONS_FINAL\")"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"TRANSACTIONS = spark.sql(\"\"\"\r\n",
					"SELECT DISTINCT *\r\n",
					"FROM TRANSACTIONS_FINAL\r\n",
					"WHERE Exclude = 0 and Posting_Date >= CAST(\"2016-04-01\" AS DATE)\r\n",
					"\"\"\")\r\n",
					"#TRANSACTIONS.show()\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS = TRANSACTIONS.withColumnRenamed(\"Line_Total\",\"Line_Total_Orig\")\r\n",
					"TRANSACTIONS = TRANSACTIONS.withColumnRenamed(\"Line_Total2\",\"Line_Total\")\r\n",
					"TRANSACTIONS = TRANSACTIONS.withColumnRenamed(\"Line_Total3\",\"Line_Total_Old\")\r\n",
					"TRANSACTIONS = TRANSACTIONS.drop(\"U_RATE\")\r\n",
					"TRANSACTIONS = TRANSACTIONS.withColumnRenamed(\"U_RATE2\",\"U_RATE\")\r\n",
					"\r\n",
					"TRANSACTIONS = TRANSACTIONS.drop(\"GroupMask\")\r\n",
					"TRANSACTIONS = TRANSACTIONS.drop(\"Exclude\")\r\n",
					"TRANSACTIONS = TRANSACTIONS.drop(\"Fleet_Costs1\")\r\n",
					"TRANSACTIONS = TRANSACTIONS.drop(\"Account_Code\")\r\n",
					"TRANSACTIONS = TRANSACTIONS.drop(\"Item_Code\")\r\n",
					"TRANSACTIONS = TRANSACTIONS.drop(\"Item\")\r\n",
					"\r\n",
					"TRANSACTIONS.createOrReplaceTempView(\"TRANSACTIONS\")"
				],
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Write Fact table to Blobstorage"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TRANSACTIONS.write.parquet('/DataLake/Structured/Facts/F_TRANSACTIONS_CONTINUED.parquet', mode='overwrite')\r\n",
					"TRANSACTIONS.write.mode(\"overwrite\").saveAsTable(\"mdw_uat_Transactions.F_TRANSACTIONS_CONTINUED\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"Scripts have successfully executed\")"
				],
				"execution_count": null
			}
		]
	}
}