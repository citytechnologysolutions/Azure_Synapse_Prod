{
	"name": "COST_Kms_Variable",
	"properties": {
		"folder": {
			"name": "DEV/Cost To Serve Notebooks DEV/CTS Run"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c7a47ac4-ac5d-4907-a56e-bc622d298af8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# This Notebook is intended to apply the KM Variable Cost to a parquet file for a Cost/Km value"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Steps:\r\n",
					"1. "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"MonthToRun = '2023-02-28'\r\n",
					"\r\n",
					"#STOPS\r\n",
					"parcel_track = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet/\", format='parquet')\r\n",
					"parcel = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet/\", format='parquet')\r\n",
					"waybill = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet/\", format='parquet')\r\n",
					"location = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet/\", format='parquet')\r\n",
					"dispatch_segment = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdispatchsegment.parquet/\", format='parquet')\r\n",
					"del_pickup_cust = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet/\", format='parquet')\r\n",
					"load_parent = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet/\", format='parquet')\r\n",
					"\r\n",
					"#STSAP\r\n",
					"dim_account = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_Account_Expose.parquet/\", format='parquet')\r\n",
					"dim_dates = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_DATES.parquet/\", format='parquet')\r\n",
					"dim_group = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_GROUP_Expose.parquet/\", format='parquet')\r\n",
					"trans_summary = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/sttransactionssummary.parquet/\", format='parquet')\r\n",
					"\r\n",
					"#STCTS\r\n",
					"DIM_CTS_I_GLMapDefault = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/Structured/Dimensions/DIM_CTS_I_GLMapDefault.parquet/\", format='parquet')\r\n",
					"DIM_CTS_I_PARAM_Ranges = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/Structured/Dimensions/DIM_CTS_I_PARAM_Ranges.parquet/\", format='parquet')\r\n",
					"\r\n",
					"#STMD\r\n",
					"stmddepot = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/MD/stmddepot.parquet/\", format='parquet')\r\n",
					"\r\n",
					"#STOPS\r\n",
					"parcel_track.createOrReplaceTempView(\"parcel_track\")\r\n",
					"parcel.createOrReplaceTempView(\"parcel\")\r\n",
					"waybill.createOrReplaceTempView(\"waybill\")\r\n",
					"location.createOrReplaceTempView(\"location\")\r\n",
					"dispatch_segment.createOrReplaceTempView(\"dispatch_segment\")\r\n",
					"del_pickup_cust.createOrReplaceTempView(\"del_pickup_cust\")\r\n",
					"load_parent.createOrReplaceTempView(\"load_parent\")\r\n",
					"\r\n",
					"#STSAP\r\n",
					"dim_account.createOrReplaceTempView(\"dim_account\")\r\n",
					"dim_dates.createOrReplaceTempView(\"dim_dates\")\r\n",
					"dim_group.createOrReplaceTempView(\"dim_group\")\r\n",
					"trans_summary.createOrReplaceTempView(\"trans_summary\")\r\n",
					"\r\n",
					"#STCTS\r\n",
					"DIM_CTS_I_GLMapDefault.createOrReplaceTempView(\"DIM_CTS_I_GLMapDefault\")\r\n",
					"DIM_CTS_I_PARAM_Ranges.createOrReplaceTempView(\"DIM_CTS_I_PARAM_Ranges\")\r\n",
					"\r\n",
					"#STMD\r\n",
					"stmddepot.createOrReplaceTempView(\"stmddepot\")\r\n",
					"\r\n",
					"spark.conf.set(\"spark.sql.sources.partitionOverwriteMode\",\"dynamic\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Calculating the monthly cost totals**"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Calculating the monthly distribution totals (Hours, KMs)**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"costs_monthly = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/CTS/Calculated_Tables/vw_CTS_Costs_2_TransactionsSummary_MapMonthTotals.parquet/\")\r\n",
					"drops_monthly = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/CTS/Calculated_Tables/F_CTS_Drops.parquet/\")\r\n",
					"costs_monthly.createOrReplaceTempView(\"costs_monthly\")\r\n",
					"drops_monthly.createOrReplaceTempView(\"drops_monthly\")\r\n",
					"\r\n",
					"\r\n",
					"costs_monthly_use = spark.sql(\"\"\"\r\n",
					"SELECT *\r\n",
					"FROM costs_monthly\r\n",
					"WHERE UOM = 'Kms'\r\n",
					"AND FixVarType = 'Variable'\r\n",
					"AND EO_PostingMonth = '\"\"\" + MonthToRun + \"\"\"'\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"drops_monthly_use = spark.sql(\"\"\"\r\n",
					"SELECT *\r\n",
					"FROM drops_monthly\r\n",
					"WHERE last_day(TRIP_START) = '\"\"\" + MonthToRun + \"\"\"'\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"costs_monthly_use.createOrReplaceTempView(\"costs_monthly_use\")\r\n",
					"drops_monthly_use.createOrReplaceTempView(\"drops_monthly_use\")\r\n",
					"\r\n",
					"display(costs_monthly_use.limit(3))\r\n",
					"display(drops_monthly_use.limit(3))"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"cost_per_activity = spark.sql(\"\"\"\r\n",
					"with activity as (\r\n",
					"\r\n",
					"    SELECT\r\n",
					"last_day(TRIP_START) AS TRIP_MONTH\r\n",
					",orv_dispatch_site\r\n",
					",SUM(DROP_KMs) AS DROP_KMs\r\n",
					"FROM drops_monthly_use\r\n",
					"GROUP BY last_day(TRIP_START)\r\n",
					",orv_dispatch_site\r\n",
					"\r\n",
					"),\r\n",
					"costs as (\r\n",
					"    SELECT\r\n",
					"EO_PostingMonth\r\n",
					",sap_transactionsline_subdepotcode\r\n",
					",SUM(COST_Other) AS COST_Other\r\n",
					",SUM(COST_Equipment) AS COST_Equipment\r\n",
					",SUM(COST_Fuel) AS COST_Fuel\r\n",
					",SUM(COST_Facilities) AS COST_Facilities\r\n",
					",SUM(COST_NonUnionisedLabour) AS COST_NonUnionisedLabour\r\n",
					",SUM(COST_UnionisedLabour) AS COST_UnionisedLabour\r\n",
					",SUM(COST_ServiceProvider) AS COST_ServiceProvider\r\n",
					",SUM(COST_Linehaul) AS COST_Linehaul\r\n",
					",SUM(\r\n",
					"\tCOALESCE(COST_Other,0) + \r\n",
					"\tCOALESCE(COST_Equipment,0) + \r\n",
					"\tCOALESCE(COST_Fuel,0) + \r\n",
					"\tCOALESCE(COST_Facilities,0) + \r\n",
					"\tCOALESCE(COST_NonUnionisedLabour,0) + \r\n",
					"\tCOALESCE(COST_UnionisedLabour,0) + \r\n",
					"\tCOALESCE(COST_ServiceProvider,0) + \r\n",
					"\tCOALESCE(COST_Linehaul,0)\r\n",
					"\t) as Cost\r\n",
					"FROM costs_monthly_use\r\n",
					"GROUP BY EO_PostingMonth\r\n",
					",sap_transactionsline_subdepotcode\r\n",
					")\r\n",
					"\r\n",
					"SELECT \r\n",
					"COALESCE(a.TRIP_MONTH,c.EO_PostingMonth) as MonthVal\r\n",
					",COALESCE(a.orv_dispatch_site, c.sap_transactionsline_subdepotcode) as DepotCode\r\n",
					",d.md_depot_depotname\r\n",
					",d.md_depot_division\r\n",
					",a.DROP_KMs\r\n",
					",c.Cost\r\n",
					",CASE WHEN a.DROP_KMs = 0 THEN NULL ELSE c.COST_Other / a.DROP_KMs END AS COST_OTHER_PerKm\r\n",
					",CASE WHEN a.DROP_KMs = 0 THEN NULL ELSE c.COST_Equipment / a.DROP_KMs END AS COST_Equipment_PerKm\r\n",
					",CASE WHEN a.DROP_KMs = 0 THEN NULL ELSE c.COST_Fuel / a.DROP_KMs END AS COST_Fuel_PerKm\r\n",
					",CASE WHEN a.DROP_KMs = 0 THEN NULL ELSE c.COST_Facilities / a.DROP_KMs END AS COST_Facilities_PerKm\r\n",
					",CASE WHEN a.DROP_KMs = 0 THEN NULL ELSE c.COST_NonUnionisedLabour / a.DROP_KMs END AS COST_NonUnionisedLabour_PerKm\r\n",
					",CASE WHEN a.DROP_KMs = 0 THEN NULL ELSE c.COST_UnionisedLabour / a.DROP_KMs END AS COST_UnionisedLabour_PerKm\r\n",
					",CASE WHEN a.DROP_KMs = 0 THEN NULL ELSE c.COST_ServiceProvider / a.DROP_KMs END AS COST_ServiceProvider_PerKm\r\n",
					",CASE WHEN a.DROP_KMs = 0 THEN NULL ELSE c.COST_Linehaul / a.DROP_KMs END AS COST_Linehaul_PerKm\r\n",
					",CASE WHEN a.DROP_KMs = 0 THEN NULL ELSE c.Cost / a.DROP_KMs END AS COST_ALL_PerKm\r\n",
					"\r\n",
					",COALESCE(a.TRIP_MONTH,c.EO_PostingMonth) as MONTH_PARTITION\r\n",
					"FROM activity a\r\n",
					"FULL OUTER JOIN costs c \r\n",
					"    ON a.TRIP_MONTH = c.EO_PostingMonth AND\r\n",
					"    a.orv_dispatch_site = c.sap_transactionsline_subdepotcode\r\n",
					"LEFT JOIN stmddepot d on COALESCE(a.orv_dispatch_site, c.sap_transactionsline_subdepotcode) = d.md_depot_itemlabel\r\n",
					"\r\n",
					"ORDER BY COST_ALL_PerKm desc\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"cost_per_activity.createOrReplaceTempView(\"cost_per_activity\")\r\n",
					"\r\n",
					"\r\n",
					"display(cost_per_activity)\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Writing cost_per_activity results\r\n",
					"\r\n",
					"cost_per_activity.write.mode('overwrite').partitionBy('MONTH_PARTITION').parquet(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/CTS/Calculated_Tables/CostPerActivity/CostPerKM.parquet/\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"drops_with_cost = spark.sql(\"\"\"\r\n",
					"SELECT dmu.*\r\n",
					",cpa.COST_OTHER_PerKm * dmu.DROP_KMs AS COST_Other\r\n",
					",cpa.COST_Equipment_PerKm * dmu.DROP_KMs AS COST_Equipment\r\n",
					",cpa.COST_Fuel_PerKm * dmu.DROP_KMs AS COST_Fuel\r\n",
					",cpa.COST_Facilities_PerKm * dmu.DROP_KMs AS COST_Facilities\r\n",
					",cpa.COST_NonUnionisedLabour_PerKm * dmu.DROP_KMs AS COST_Other\r\n",
					",cpa.COST_UnionisedLabour_PerKm * dmu.DROP_KMs AS COST_UnionisedLabour\r\n",
					",cpa.COST_ServiceProvider_PerKm * dmu.DROP_KMs AS COST_ServiceProvider\r\n",
					",cpa.COST_Linehaul_PerKm * dmu.DROP_KMs AS COST_Linehaul\r\n",
					",cpa.COST_ALL_PerKm * dmu.DROP_KMs AS COST_ALL\r\n",
					"\r\n",
					"FROM drops_monthly_use dmu\r\n",
					"LEFT JOIN cost_per_activity cpa ON dmu.orv_dispatch_site = cpa.DepotCode AND last_day(dmu.TRIP_START) = cpa.MonthVal\r\n",
					"ORDER BY COST_ALL desc\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"\r\n",
					"display(drops_with_cost)\r\n",
					"\r\n",
					""
				],
				"execution_count": 10
			}
		]
	}
}