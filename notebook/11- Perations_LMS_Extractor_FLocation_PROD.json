{
	"name": "11- Perations_LMS_Extractor_FLocation_PROD",
	"properties": {
		"folder": {
			"name": "ARCHIVE/PROD/Operations Notebooks PROD"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "21cb667a-f155-4976-b1b5-00a2e669113a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load Source Data from the Datalake"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"dboLocation = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboLocation.parquet', format='parquet')\r\n",
					"dboLocation.createOrReplaceTempView(\"dboLocation\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Import Pandas libary from Python"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load Excel Datasource"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load EXCEL with LMS_DEPOT_DESCRIPTION\r\n",
					"\r\n",
					"# Variables\r\n",
					"var_File_Path = \"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Finance and Operations Mapping Sources/FinanceReportingMapping.xlsx\"\r\n",
					"var_File_Page = \"LMS_DEPOT_DESCRIPTION\"\r\n",
					"\r\n",
					"# Processing\r\n",
					"excel_file = pd.ExcelFile(var_File_Path)\r\n",
					"excel_file_page = pd.read_excel(excel_file, var_File_Page)\r\n",
					"excel_file_Dataframe = spark.createDataFrame(excel_file_page)\r\n",
					"\r\n",
					"excel_file_Dataframe.createOrReplaceTempView(\"LMS_DEPOT_DESCRIPTION\")\r\n",
					"\r\n",
					"LMS_DEPOT_DESCRIPTION = spark.sql(\"\"\"SELECT `LMS Depot Description`, `DEPOTCODE`, LocationID, `PARENTDEPOTCODE` FROM LMS_DEPOT_DESCRIPTION\"\"\")\r\n",
					"\r\n",
					"LMS_DEPOT_DESCRIPTION.createOrReplaceTempView(\"LMS_DEPOT_DESCRIPTION\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start Qview scripting translared for MSSQL"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"LFLOCATION = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT `ID` AS `LF_ID`,\r\n",
					"       `Description` AS `LF_Description`,\r\n",
					"       `Code` AS `LF_Code`,\r\n",
					"       `Collect` AS `LF_Collect`,\r\n",
					"       `PCode` AS `LF_PCode`,\r\n",
					"       `CustID` AS `LF_CustID`,\r\n",
					"       `Retail` AS `LF_Retail`,\r\n",
					"       `Scale` AS `LF_Scale`,\r\n",
					"       `CustCode` AS `LF_CustCode`,\r\n",
					"       `CaptureOnly` AS `LF_CaptureOnly`,\r\n",
					"       `ZoneID` AS `LF_ZoneID`,\r\n",
					"       `ScanType` AS `LF_ScanType`,\r\n",
					"       `BillCustID` AS `LF_BillCustID`,\r\n",
					"       `Latitude` AS `LF_Latitude`,\r\n",
					"       `Longitude` AS `LF_Longitude`,\r\n",
					"       `HoldLocID` AS `LF_HoldLocID`,\r\n",
					"       `BranchManagerUserID` AS `LF_BranchManagerUserID`,\r\n",
					"       `FWCostCentre` AS `LF_FWCostCentre`,\r\n",
					"       `FWUserID` AS `LF_FWUserID`,\r\n",
					"       `FWMultiBusinessID` AS `LF_FWMultiBusinessID`,\r\n",
					"       `GLCode` AS `LF_GLCode`,\r\n",
					"       `HoldLocParentLocID` AS `LF_HoldLocParentLocID`\r\n",
					"FROM dboLocation\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#LFLOCATION.show()\r\n",
					"LFLOCATION.createOrReplaceTempView(\"LFLOCATION\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"LFLOCATION = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT lfl.*,\r\n",
					"       ldd.DEPOTCODE AS LF_SAPDepotCode,\r\n",
					"       ldd.PARENTDEPOTCODE AS LF_ParentDepotCode\r\n",
					"FROM LFLOCATION lfl\r\n",
					"LEFT JOIN LMS_DEPOT_DESCRIPTION ldd\r\n",
					"      ON lfl.LF_ID = ldd.LocationID \r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#LFLOCATION.show()\r\n",
					"LFLOCATION.createOrReplaceTempView(\"LFLOCATION\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"DIM_Location = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT LF_Description AS L_LMSDepotDescription,\r\n",
					"       LF_ID AS L_LocationID,\r\n",
					"       LF_SAPDepotCode AS D_SAPDepotCode,\r\n",
					"       LF_ParentDepotCode AS D_ParentDepotCode\r\n",
					"FROM LFLOCATION\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#DIM_Location.show()\r\n",
					"DIM_Location.createOrReplaceTempView(\"DIM_Location\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Print success message on the Production Script"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"Successful run of the script\")"
				],
				"execution_count": 16
			}
		]
	}
}