{
	"name": "05_DIST_STConsignment",
	"properties": {
		"folder": {
			"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1d1757d1-76e4-49c0-b143-ee9ac4a7b241"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
				"name": "PRDSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# from pyspark.sql.functions import *\r\n",
					"# import pandas as pd"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# #create dataframe for the sstconsignemntunion lms table\r\n",
					"# sstconsignemntunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet/', format='parquet')\r\n",
					"# sstconsignemntunion.createOrReplaceTempView(\"sstconsignemntunion\")\r\n",
					"\r\n",
					"# #create dataframe for the sstparcelbyconsignment lms table\r\n",
					"# sstparcelbyconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyconsignment.parquet', format='parquet')\r\n",
					"# sstparcelbyconsignment.createOrReplaceTempView(\"sstparcelbyconsignment\")\r\n",
					"\r\n",
					"# #create dataframe for the dbobill_consignmentr lms table\r\n",
					"# dbobill_consignmentr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_consignmentr.parquet', format='parquet')\r\n",
					"# dbobill_consignmentr.createOrReplaceTempView(\"dbobill_consignmentr\")\r\n",
					"\r\n",
					"# #create dataframe for the sstparcelunion lms table\r\n",
					"# sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
					"# sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
					"\r\n",
					"# #create dataframe for the dbowaybill lms table\r\n",
					"# dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
					"# dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
					""
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"\r\n",
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stconsignment_tmp1\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"\r\n",
					"    c.id as lms_consignment_id\r\n",
					"    ,c.CRef as lms_consignment_cref\r\n",
					"    ,c.CDate as lms_consignment_cdate\r\n",
					"    ,c.UserID as lms_consignment_userid\r\n",
					"    ,c.Appointment as lms_consignment_appointment\r\n",
					"    ,c.DeliverBy as lms_consignment_deliverby\r\n",
					"    ,c.DeliverByOriginal as lms_consignment_deliverbyoriginal\r\n",
					"    ,c.CustAccID as lms_consignment_custaccid\r\n",
					"    ,c.BillCust as lms_consignment_billcust\r\n",
					"    ,c.DeliverCustID as lms_consignment_delivercustid\r\n",
					"    ,c.InServiceReasonID as lms_consignment_inservicereasonid\r\n",
					"    ,c.InServiceComment as lms_consignment_inservicecomment\r\n",
					"    ,c.LastUpdate as lms_consignment_lastupdate\r\n",
					"    ,c.CollectID as lms_consignment_collectid\r\n",
					"    ,c.DeliverTypeID as lms_consignment_delivertypeid\r\n",
					"    ,c.BillTypeID as lms_consignment_billtypeid\r\n",
					"    ,c.LoadID as lms_consignment_loadid\r\n",
					"    ,pbc.lms_parcelbyconsignment_aggrweight\r\n",
					"    ,pbc.lms_parcelbyconsignment_aggrchargeweight\r\n",
					"    ,pbc.lms_parcelbyconsignment_aggrvolweight\r\n",
					"    ,pbc.lms_parcelbyconsignment_aggrvolumiserweight\r\n",
					"    ,pbc.lms_parcelbyconsignment_aggrmaxweight\r\n",
					"    ,pbc.lms_parcelbyconsignment_aggrnoparcels\r\n",
					"    ,pbc.lms_parcelbyconsignment_aggrweightexclspecdel\r\n",
					"    ,pbc.lms_parcelbyconsignment_aggrchargeweightexclspecdel\r\n",
					"    ,pbc.lms_parcelbyconsignment_aggrvolweightexclspecdel\r\n",
					"    ,pbc.lms_parcelbyconsignment_aggrvolumiserweightexclspecdel\r\n",
					"    ,pbc.lms_parcelbyconsignment_aggrmaxweightexclspecdel\r\n",
					"    ,pbc.lms_parcelbyconsignment_aggrnoparcelsexclspecdel\r\n",
					"    ,bcr.id as lms_billconsignmentr_id\r\n",
					"    ,bcr.ConsignID as lms_billconsignmentr_consignid\r\n",
					"    ,bcr.UpdateDate as lms_billconsignmentr_updatedate\r\n",
					"    ,bcr.PickUpRouteID as lms_billconsignmentr_pickuprouteid\r\n",
					"    ,bcr.DeliverRouteID as lms_billconsignmentr_deliverrouteid\r\n",
					"    ,bcr.ChargeWeight as lms_billconsignmentr_chargeweight\r\n",
					"    ,bcr.NoOfParcels as lms_billconsignmentr_noofparcels\r\n",
					"    ,bcr.TripDistance as lms_billconsignmentr_tripdistance\r\n",
					"    ,bcr.ConsignmentValue as lms_billconsignmentr_consignmentvalue\r\n",
					"    ,bcr.BillCust as lms_billconsignmentr_billcust\r\n",
					"    ,bcr.RedFlag as lms_billconsignmentr_redflag\r\n",
					"    ,bcr.UpdInd as lms_billconsignmentr_updind\r\n",
					"    ,bcr.ServiceTypeID as lms_billconsignmentr_servicetypeid\r\n",
					"    ,bcr.RouteMissingInd as lms_billconsignmentr_routemissingind\r\n",
					"    ,bcr.ChargesCalcInd as lms_billconsignmentr_chargescalcind\r\n",
					"    ,bcr.CDate1 as lms_billconsignmentr_cdate1\r\n",
					"    ,bcr.InvalidPCode as lms_billconsignmentr_invalidpcode\r\n",
					"    ,bcr.ProgramNo as lms_billconsignmentr_programno\r\n",
					"    ,bcr.TotRate as lms_billconsignmentr_totrate\r\n",
					"    ,bcr.RouteCharge as lms_billconsignmentr_routecharge\r\n",
					"    ,bcr.MinWeight as lms_billconsignmentr_minweight\r\n",
					"    ,bcr.MinRate as lms_billconsignmentr_minrate\r\n",
					"    ,bcr.COrderNo as lms_billconsignmentr_corderno\r\n",
					"    ,bcr.CustRef as lms_billconsignmentr_custref\r\n",
					"    ,bcr.ManualUpdateFlag as lms_billconsignmentr_manualupdateflag\r\n",
					"    ,bcr.PrevBillCustID as lms_billconsignmentr_prevbillcustid\r\n",
					"    ,bcr.SpecDelVehicleID as lms_billconsignmentr_specdelvehicleid\r\n",
					"    ,bcr.SpecDelMissingRouteFlag as lms_billconsignmentr_specdelmissingrouteflag\r\n",
					"    ,bcr.OverBorderFlag as lms_billconsignmentr_overborderflag\r\n",
					"    ,bcr.SameDeliverID as lms_billconsignmentr_samedeliverid\r\n",
					"    ,bcr.CombineRouteCharge as lms_billconsignmentr_combineroutecharge\r\n",
					"    ,bcr.WaybillID as lms_billconsignmentr_waybillid\r\n",
					"    ,bcr.RouteLineCount as lms_billconsignmentr_routelinecount\r\n",
					"    ,bcr.SameDelCount as lms_billconsignmentr_samedelcount\r\n",
					"    ,bcr.AWeight as lms_billconsignmentr_aweight\r\n",
					"    ,bcr.VWeight as lms_billconsignmentr_vweight\r\n",
					"    ,bcr.CustRef3 as lms_billconsignmentr_custref3\r\n",
					"    ,bcr.Units as lms_billconsignmentr_units\r\n",
					"    ,bcr.TotSurcharges as lms_billconsignmentr_totsurcharges\r\n",
					"    ,bcr.NoOfPallets as lms_billconsignmentr_noofpallets\r\n",
					"    ,bcr.InvalidPUDel as lms_billconsignmentr_invalidpudel\r\n",
					"    ,bcr.SharikaFlag as lms_billconsignmentr_sharikaflag\r\n",
					"    ,bcr.SapID as lms_billconsignmentr_sapid\r\n",
					"    ,bcr.TotFuelSurcharge as lms_billconsignmentr_totfuelsurcharge\r\n",
					"    ,bcr.TotDocSurcharge as lms_billconsignmentr_totdocsurcharge\r\n",
					"    ,bcr.TotOtherSurcharge as lms_billconsignmentr_totothersurcharge\r\n",
					"    ,bcr.SpecDel as lms_billconsignmentr_specdel\r\n",
					"    ,bcr.QuoteFlag as lms_billconsignmentr_quoteflag\r\n",
					"    ,bcr.BillPeriod as lms_billconsignmentr_billperiod\r\n",
					"    ,bcr.BillWeekR as lms_billconsignmentr_billweekr\r\n",
					"    ,bcr.BillPeriodFlag as lms_billconsignmentr_billperiodflag\r\n",
					"    ,bcr.SurhargeFlag as lms_billconsignmentr_surhargeflag\r\n",
					"    ,bcr.RecalcFlag as lms_billconsignmentr_recalcflag\r\n",
					"    ,bcr.QuoteMissingFlag as lms_billconsignmentr_quotemissingflag\r\n",
					"    ,bcr.DeliverTypeID as lms_billconsignmentr_delivertypeid\r\n",
					"    ,bcr.TotCovidSurcharge as lms_billconsignmentr_totcovidsurcharge\r\n",
					"\r\n",
					"FROM\r\n",
					"sstconsignemntunion c\r\n",
					"LEFT JOIN sstparcelbyconsignment pbc on c.id= pbc.lms_parcelbyconsignment_consignid\r\n",
					"LEFT JOIN dbobill_consignmentr bcr on c.id= bcr.consignid\r\n",
					"\r\n",
					""
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stconsignment_tmp2\r\n",
					"AS\r\n",
					"SELECT DISTINCT\r\n",
					"\r\n",
					"p.consignid,\r\n",
					"max(w.poddate) as lms_consignment_maxpoddate\r\n",
					"\r\n",
					"FROM  sstparcelunion p\r\n",
					"LEFT JOIN dbowaybill w on w.id = p.waybillid\r\n",
					"WHERE p.consignid is not null\r\n",
					"GROUP BY p.consignid"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"\r\n",
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stconsignment_tmp3\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    c.*\r\n",
					"    ,c2.lms_consignment_maxpoddate\r\n",
					"    ,CASE \r\n",
					"\t    WHEN (coalesce(c2.lms_consignment_maxpoddate,CURRENT_TIMESTAMP)) <= (date(c.lms_consignment_deliverby) + interval '86399 seconds') THEN 1\r\n",
					"\t    ELSE 0\r\n",
					"    END lms_consignment_inserviceflag\r\n",
					"    ,CASE\r\n",
					"        WHEN c2.lms_consignment_maxpoddate is null then 0  \r\n",
					"        ELSE DATE_PART('day', c2.lms_consignment_maxpoddate - c.lms_consignment_cdate)\r\n",
					"    END as lms_consignment_actualleaddays\r\n",
					"    ,to_timestamp((cast(to_date(c.lms_consignment_cdate,'yyyy-MM-dd') as string)||' 23:59:59.999')) lms_consignment_cdateroundup\r\n",
					"FROM stconsignment_tmp1 c\r\n",
					"LEFT JOIN stconsignment_Tmp2 c2 ON c2.consignid = c.lms_consignment_id"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stconsignment_tmp3 = spark.sql(\"SELECT * FROM stconsignment_tmp3\")"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stconsignment_tmp4=stconsignment_tmp3.withColumn('consignagedifferenceinseconds',col(\"lms_consignment_maxpoddate\").cast(\"long\") - col('lms_consignment_cdateroundup').cast(\"long\"))"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stconsignment_tmp4.createOrReplaceTempView(\"stconsignment_tmp4\")"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"stconsignment\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    *\r\n",
					"    ,CASE \r\n",
					"        WHEN lms_consignment_cdate is null THEN 'Not Consigned'\r\n",
					"        WHEN lms_consignment_maxpoddate is null THEN 'Not Delivered'\r\n",
					"        WHEN (consignagedifferenceinseconds/24) < 12 THEN '< 12 hrs'\r\n",
					"        WHEN (consignagedifferenceinseconds/24) < 24 THEN '< 24 hrs'\r\n",
					"        WHEN (consignagedifferenceinseconds/24) < 48 THEN '< 2 days'\r\n",
					"        WHEN (consignagedifferenceinseconds/24) < 72 THEN '< 3 days'\r\n",
					"        WHEN (consignagedifferenceinseconds/24) < 96 THEN '< 4 days'\r\n",
					"        WHEN (consignagedifferenceinseconds/24) < 120 THEN '< 5 days'\r\n",
					"        WHEN (consignagedifferenceinseconds/24) < 144 THEN '< 6 days'\r\n",
					"        WHEN (consignagedifferenceinseconds/24) < 168 THEN '< 7 days'\r\n",
					"        WHEN (consignagedifferenceinseconds/24) > 168 THEN '> 7 days'\r\n",
					"        ELSE NULL\r\n",
					"    END as lms_consignment_age\r\n",
					"\r\n",
					"FROM stconsignment_tmp4\r\n",
					""
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"stconsignment = spark.sql(\"SELECT * FROM stconsignment\")"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# stconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stconsignment.parquet', mode = \"overwrite\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"SUCCESS\")"
				],
				"execution_count": null
			}
		]
	}
}