{
	"name": "10- Perations_LMS_Extractor_Waybill_DEV",
	"properties": {
		"folder": {
			"name": "ARCHIVE/DEV/Archived/Operations Notebooks DEV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 6,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "6",
				"spark.dynamicAllocation.maxExecutors": "6",
				"spark.autotune.trackingId": "c9b41af6-8079-4258-b697-198db4cd0796"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## SOR scripting for T_Waybill"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#dboWaybill = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboWaybill.parquet', format='parquet')\r\n",
					"#dboWaybill.createOrReplaceTempView(\"dboWaybill\")\r\n",
					"\r\n",
					"#dbodb_DelayReason = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbodb_DelayReason.parquet', format='parquet')\r\n",
					"#dbodb_DelayReason.createOrReplaceTempView(\"dbodb_DelayReason\")\r\n",
					"\r\n",
					"#dbodb_NotDbReason = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbodb_NotDbReason.parquet', format='parquet')\r\n",
					"#dbodb_NotDbReason.createOrReplaceTempView(\"dbodb_NotDbReason\")\r\n",
					"\r\n",
					"#dbodb_DeliveryStatus = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbodb_DeliveryStatus.parquet', format='parquet')\r\n",
					"#dbodb_DeliveryStatus.createOrReplaceTempView(\"dbodb_DeliveryStatus\")\r\n",
					"\r\n",
					"#dbodb_ReasonGroup = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbodb_ReasonGroup.parquet', format='parquet')\r\n",
					"#dbodb_ReasonGroup.createOrReplaceTempView(\"dbodb_ReasonGroup\")\r\n",
					"\r\n",
					"#dbodb_ReasonDetail = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbodb_ReasonDetail.parquet', format='parquet')\r\n",
					"#dbodb_ReasonDetail.createOrReplaceTempView(\"dbodb_ReasonDetail\")\r\n",
					"\r\n",
					"#dbodb_InServiceReason = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbodb_InServiceReason.parquet', format='parquet')\r\n",
					"#dbodb_InServiceReason.createOrReplaceTempView(\"dbodb_InServiceReason\")\r\n",
					"\r\n",
					"#publicpod = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicpod.parquet', format='parquet')\r\n",
					"#publicpod.createOrReplaceTempView(\"publicpod\")"
				],
				"execution_count": 145
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start of 03a_Perations_LMS_Extractor_Daily_18_Waybill"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"WAYBILL = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT ID AS `WB_ID`,\r\n",
					"\r\n",
					"to_timestamp(`Date`, 'YYYY/MM/DD hh:mm:ss') AS `WB_DDateTime`,\r\n",
					"to_date(`Date`,'YYYY/MM/DD') AS `WB_DDate`,\r\n",
					"\r\n",
					"to_timestamp(`PODDate`, 'YYYY/MM/DD hh:mm:ss') AS `WB_PODDateTime`,\r\n",
					"to_date(`PODDate`,'YYYY/MM/DD') AS `WB_PODDate`,\r\n",
					"\r\n",
					"CustomerID \t\t\t\t\tAS `WB_CustomerID`,\r\n",
					"BService \t\t\t\t\tAS `WB_BService`,\r\n",
					"CService \t\t\t\t\tAS `WB_CService`,\r\n",
					"OriginID \t\t\t\t\tAS `WB_OriginID`,\r\n",
					"DefUser \t\t\t\t\tAS `WB_DefUser`,\r\n",
					"Distance \t\t\t\t\tAS `WB_Distance`,\r\n",
					"CourierID \t\t\t\t\tAS `WB_CourierID`,\r\n",
					"CourierWBNo \t\t\t\tAS `WB_CourierWBNo`,\r\n",
					"Weight \t\t\t\t\t\tAS `WB_Weight`,\r\n",
					"Volume \t\t\t\t\t\tAS `WB_Volume`,\r\n",
					"VolumetricWeight \t\t\tAS `WB_VolumetricWeight`,\r\n",
					"ChargeWeight \t\t\t\tAS `WB_ChargeWeight`,\r\n",
					"BillType \t\t\t\t\tAS `WB_BillType`,\r\n",
					"NoOfParcels \t\t\t\tAS `WB_NoOfParcels`,\r\n",
					"CapDate \t\t\t\t\tAS `WB_CapDate`,\r\n",
					"Surcharge \t\t\t\t\tAS `WB_Surcharge`,\r\n",
					"Insurance \t\t\t\t\tAS `WB_Insurance`,\r\n",
					"Tax \t\t\t\t\t\tAS `WB_Tax`,\r\n",
					"TotalCharge \t\t\t\tAS `WB_TotalCharge`,\r\n",
					"DestinationName \t\t\tAS `WB_DestinationName`,\r\n",
					"OrderType \t\t\t\t\tAS `WB_OrderType`,\r\n",
					"PickupCustID \t\t\t\tAS `WB_PickupCustID`,\r\n",
					"DeliverCustID \t\t\t\tAS `WB_DeliverCustID`,\r\n",
					"BillTo \t\t\t\t\t\tAS `WB_BillTo`,\r\n",
					"Claimable \t\t\t\t\tAS `WB_Claimable`,\r\n",
					"Override \t\t\t\t\tAS `WB_Override`,\r\n",
					"VehicleCapacity \t\t\tAS `WB_VehicleCapacity`,\r\n",
					"CustPODDate \t\t\t\tAS `WB_CustPODDate`,\r\n",
					"Signee \t\t\t\t\t\tAS `WB_Signee`,\r\n",
					"GRVNo \t\t\t\t\t\tAS `WB_GRVNo`,\r\n",
					"Endorsements \t\t\t\tAS `WB_Endorsements`,\r\n",
					"BillCust \t\t\t\t\tAS `WB_BillCust`,\r\n",
					"COURIER_FROM \t\t\t\tAS `WB_COURIER_FROM`,\r\n",
					"COURIER_TO \t\t\t\t\tAS `WB_COURIER_TO`,\r\n",
					"Charge \t\t\t\t\t\tAS `WB_Charge`,\r\n",
					"TVALUE \t\t\t\t\t\tAS `WB_TVALUE`,\r\n",
					"InService \t\t\t\t\tAS `WB_InService`,\r\n",
					"DBTotalCharge \t\t\t\tAS `WB_DBTotalCharge`,\r\n",
					"LoadID \t\t\t\t\t\tAS `WB_LoadID`,\r\n",
					"RouteID \t\t\t\t\tAS `WB_RouteID`,\r\n",
					"mrpFlag \t\t\t\t\tAS `WB_mrpFlag`,\r\n",
					"Printed \t\t\t\t\tAS `WB_Printed`,\r\n",
					"SReasonID \t\t\t\t\tAS `WB_SReasonID`,\r\n",
					"MinKg \t\t\t\t\t\tAS `WB_MinKg`,\r\n",
					"MinRate \t\t\t\t\tAS `WB_MinRate`,\r\n",
					"Addrate \t\t\t\t\tAS `WB_Addrate`,\r\n",
					"DocFees \t\t\t\t\tAS `WB_DocFees`,\r\n",
					"Volumetric \t\t\t\t\tAS `WB_Volumetric`,\r\n",
					"HasPrinted \t\t\t\t\tAS `WB_HasPrinted`,\r\n",
					"Site \t\t\t\t\t\tAS `WB_Site`,\r\n",
					"DeliveryNo \t\t\t\t\tAS `WB_DeliveryNo`,\r\n",
					"FuelLevy \t\t\t\t\tAS `WB_FuelLevy`,\r\n",
					"TotFuelLevy \t\t\t\tAS `WB_TotFuelLevy`,\r\n",
					"CustAccID \t\t\t\t\tAS `WB_CustAccID`,\r\n",
					"PODADDED \t\t\t\t\tAS `WB_PODADDED`,\r\n",
					"Scanned \t\t\t\t\tAS `WB_Scanned`,\r\n",
					"UserID \t\t\t\t\t\tAS `WB_UserID`,\r\n",
					"Autoprinted\t\t\t\t \tAS `WB_Autoprinted`,\r\n",
					"PodUserID \t\t\t\t\tAS `WB_PodUserID`,\r\n",
					"ScanUserID \t\t\t\t\tAS `WB_ScanUserID`,\r\n",
					"cref \t\t\t\t\t\tAS `WB_cref`,\r\n",
					"UShort \t\t\t\t\t\tAS `WB_UShort`,\r\n",
					"Delays \t\t\t\t\t\tAS `WB_Delays`,\r\n",
					"DeBriefed \t\t\t\t\tAS `WB_DeBriefed`,\r\n",
					"DeBriefDt \t\t\t\t\tAS `WB_DeBriefDt`,\r\n",
					"DBCtnsRet \t\t\t\t\tAS `WB_DBCtnsRet`,\r\n",
					"Uploaded \t\t\t\t\tAS `WB_Uploaded`,\r\n",
					"ServiceExclude \t\t\t\tAS `WB_ServiceExclude`,\r\n",
					"Failed \t\t\t\t\t\tAS `WB_Failed`,\r\n",
					"PODURL \t\t\t\t\t\tAS `WB_PODURL`,\r\n",
					"DelayReasonID \t\t\t\tAS `WB_DelayReasonID`,\r\n",
					"NotDebrievReasonID \t\t\tAS `WB_NotDebrievReasonID`,\r\n",
					"DeliveryStatID \t\t\t\tAS `WB_DeliveryStatID`,\r\n",
					"ReasonGroupID \t\t\t\tAS `WB_ReasonGroupID`,\r\n",
					"eMailCust \t\t\t\t\tAS `WB_eMailCust`,\r\n",
					"MobileIssueReportedID \t\tAS `WB_MobileIssueReportedID`,\r\n",
					"isMobile \t\t\t\t\tAS `WB_isMobile`,\r\n",
					"CustComment \t\t\t\tAS `WB_CustComment`,\r\n",
					"CustFeedback \t\t\t\tAS `WB_CustFeedback`,\r\n",
					"ReasonDetailID \t\t\t\tAS `WB_ReasonDetailID`,\r\n",
					"MobileComments \t\t\t\tAS `WB_MobileComments`,\r\n",
					"InServiceReasonID \t\t\tAS `WB_InServiceReasonID`,\r\n",
					"NotDebrievCom \t\t\t\tAS `WB_NotDebrievCom`,\r\n",
					"CallProgID \t\t\t\t\tAS `WB_CallProgID`,\r\n",
					"LastUpdate   \t\t\t\tAS `WB_LastUpdate`,\r\n",
					"Dropsequence   \t\t\t\tAS `WB_Dropsequence`,\r\n",
					"Noofparcelssreturned   \t\tAS `WB_Noofparcelssreturned`,\r\n",
					"lat   \t\t\t\t\t\tAS `WB_lat`,\r\n",
					"lng   \t\t\t\t\t\tAS `WB_lng`,\r\n",
					"SignatureURL   \t\t\t\tAS `WB_SignatureURL`,\r\n",
					"`Comment`  \t\t\t\t\tAS `WB_Comment`,\r\n",
					"ORVCode   \t\t\t\t\tAS `WB_ORVCode`,\r\n",
					"DeliverBy   \t\t\t\tAS `WB_DeliverBy`,\r\n",
					"\r\n",
					"\r\n",
					"IF(ISNULL(`Date`) or Date = '#',0,1) AS `WB_HasDDate`,\r\n",
					"IF(ISNULL(`PODDate`) or PODDate = '#',0,1) AS `WB_HasPODDate`,\r\n",
					"\r\n",
					"DelayReason\t\t\t\t\tAS `WB_DelayReason`,\r\n",
					"DeliveryStatus\t\t\t\tAS `WB_DeliveryStatus`,\r\n",
					"InServiceReason\t\t\t\tAS `WB_InServiceReason`,\r\n",
					"InServiceReasonGroup\t\tAS `WB_InServiceReasonGroup`,\r\n",
					"NotDebriefedReason\t\t\tAS `WB_NotDebriefedReason`,\r\n",
					"ReasonDetail\t\t\t\tAS `WB_ReasonDetail`,\r\n",
					"ReasonGroup\t\t\t\t\tAS `WB_ReasonGroup`\r\n",
					"\r\n",
					"FROM(\r\n",
					"    SELECT w.* \r\n",
					"          ,dr.Description AS DelayReason\r\n",
					"          ,nd.Description AS NotDebriefedReason\r\n",
					"          ,ds.Description AS DeliveryStatus\r\n",
					"          ,rg.Description AS ReasonGroup\r\n",
					"          ,rd.Description AS ReasonDetail\r\n",
					"          ,isr.Reason AS InServiceReason\r\n",
					"          ,isrg.Description AS InServiceReasonGroup\r\n",
					"    FROM dboWaybill w\r\n",
					"    LEFT JOIN dbodb_DelayReason dr on dr.id = w.DelayReasonID\r\n",
					"    LEFT JOIN dbodb_NotDbReason nd on nd.id = w.NotDebrievReasonID\r\n",
					"    LEFT JOIN dbodb_DeliveryStatus ds on ds.id = w.DeliveryStatID\r\n",
					"    LEFT JOIN dbodb_ReasonGroup rg on rg.id = w.ReasonGroupID\r\n",
					"    LEFT JOIN dbodb_ReasonDetail rd on rd.id = w.ReasonDetailID\r\n",
					"    LEFT JOIN dbodb_InServiceReason isr on isr.id = w.InServiceReasonID\r\n",
					"    LEFT JOIN dbodb_ReasonGroup isrg on isrg.id = isr.ReasonGroupID\r\n",
					"    )a\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#WAYBILL.show()\r\n",
					"WAYBILL.createOrReplaceTempView(\"WAYBILL\")"
				],
				"execution_count": 146
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## End of 03a_Perations_LMS_Extractor_Daily_18_Waybill"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start of 01a_OnRoute_Extractor_Weekly_08_POD"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"pod = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT did AS `delivery.id`,\r\n",
					"       id AS `pod.id`,\r\n",
					"       name AS `pod.name`,\r\n",
					"       poddate AS `pod.poddate`,\r\n",
					"       lat AS `pod.lat`,\r\n",
					"       lng AS `pod.lng`,\r\n",
					"       customerrating AS `pod.customerrating`,\r\n",
					"       customerfeedback AS `pod.customerfeedback`\r\n",
					"FROM publicpod\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#pod.show()\r\n",
					"pod.createOrReplaceTempView(\"pod\")"
				],
				"execution_count": 147
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## End of 01a_OnRoute_Extractor_Weekly_08_POD"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start of 01a_OnRoute_Extractor_Weekly_06_Delivery"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#delivery = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
					"#delivery.createOrReplaceTempView(\"delivery\")"
				],
				"execution_count": 148
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## End of 01a_OnRoute_Extractor_Weekly_06_Delivery"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start of 01a_OnRoute_Extractor_Weekly_04_Dispatch"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"# LEAVE IT UNCOMMENTED AS THIS IS A DUPLICATE LOAD\r\n",
					"\r\n",
					"#dispatch = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net//DataLake/Structured/Facts/T_dispatch.parquet', format='parquet')\r\n",
					"#dispatch.createOrReplaceTempView(\"dispatch\")"
				],
				"execution_count": 149
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## End of 01a_OnRoute_Extractor_Weekly_04_Dispatch"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start of 03e_Operations_LMS_OnRouteDet_3MRolling_27_AddbackExpectionLoads"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#T_dispatch = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/T_dispatch.parquet', format='parquet')\r\n",
					"#T_dispatch.createOrReplaceTempView(\"T_dispatch\")\r\n",
					"\r\n",
					"#T_LOAD = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/T_LOAD.parquet', format='parquet')\r\n",
					"#T_LOAD.createOrReplaceTempView(\"T_LOAD\")\r\n",
					"\r\n",
					"#dbotrack = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dbotrack.parquet', format='parquet')\r\n",
					"#dbotrack.createOrReplaceTempView(\"dbotrack\")\r\n",
					"\r\n",
					"#dboWaybillsPerParcel = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboWaybillsPerParcel.parquet', format='parquet')\r\n",
					"#dboWaybillsPerParcel.createOrReplaceTempView(\"dboWaybillsPerParcel\")\r\n",
					"\r\n",
					"#dboparcel = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboparcel.parquet', format='parquet')\r\n",
					"#dboparcel.createOrReplaceTempView(\"dboparcel\")\r\n",
					"\r\n",
					"#dboparcel_archive = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboParcel_Archive.parquet', format='parquet')\r\n",
					"#dboparcel_archive.createOrReplaceTempView(\"dboparcel_archive\")\r\n",
					"\r\n",
					"#dboTrack_Archive = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/LMS/dboTrack_Archive.parquet', format='parquet')\r\n",
					"#dboTrack_Archive.createOrReplaceTempView(\"dboTrack_Archive\")\r\n",
					"\r\n",
					"#T_Parcel = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/T_Parcel.parquet', format='parquet')\r\n",
					"#T_Parcel.createOrReplaceTempView(\"T_Parcel\")"
				],
				"execution_count": 150
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA1 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT DISTINCT `dispatch.lmsid`\r\n",
					"FROM T_dispatch\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA1.show\r\n",
					"TMPMISSINGDATA1.createOrReplaceTempView(\"TMPMISSINGDATA1\")"
				],
				"execution_count": 151
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"LOAD = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT `dispatch.lmsid`,\r\n",
					"        1 AS Flag\r\n",
					"FROM T_LOAD\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#LOAD.show()\r\n",
					"LOAD.createOrReplaceTempView(\"LOAD\")"
				],
				"execution_count": 152
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA2 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT t.*\r\n",
					"FROM TMPMISSINGDATA1 t\r\n",
					"LEFT JOIN `LOAD` l\r\n",
					"       ON t.`dispatch.lmsid` = l.`dispatch.lmsid`\r\n",
					"      AND l.Flag <> 1\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA2.show()\r\n",
					"TMPMISSINGDATA2.createOrReplaceTempView(\"TMPMISSINGDATA2\")"
				],
				"execution_count": 153
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"T_LOAD = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT LD_ParentLoadID AS `dispatch.lmsid`,\r\n",
					"    LD_ID,\r\n",
					"    LD_ID AS WL_LoadID,\r\n",
					"    LD_DriverID,\r\n",
					"    LD_DriverName,\r\n",
					"    LD_VehicleID,     \r\n",
					"    LD_ParentLoadID,\r\n",
					"    LD_ChildLoadID,\r\n",
					"    LD_Debriefed,\r\n",
					"    LD_finalFlag,\r\n",
					"    LD_LDate,\r\n",
					"    LD_ORVID,\r\n",
					"    LD_ORVStatus,\r\n",
					"    LD_ORV_Status,\r\n",
					"    LD_ovrIgnore,\r\n",
					"\tLD_ORVCode,\r\n",
					"    --Date(LD_ESTDepartureDateTime,'YYYY/MM/DD') AS LD_ESTDepartureDate,\r\n",
					"    LD_ESTDepartureDate,\r\n",
					"    LD_Site,\r\n",
					"    LD_FirstScanOnDate,\r\n",
					"\tLD_LastScanOnDate,\r\n",
					"\tLD_FirstScanOffDate,\r\n",
					"\tLD_LastScanOffDate,\r\n",
					"    LD_FleetNo,\r\n",
					"    LD_Trailer1FleetNo,\r\n",
					"    LD_Trailer2FleetNo,\r\n",
					"    LD_DriverIdPassportNo,\r\n",
					"    LD_MobileFeedbackReasonID,\r\n",
					"    LD_EffectiveLoadDurationMinutes,\r\n",
					"    LD_EffectiveOffLoadDurationMinutes,\r\n",
					"    LD_TTypeID,\r\n",
					"    1 AS LD_Exception\r\n",
					"FROM T_LOAD\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#T_LOAD.show()\r\n",
					"T_LOAD.createOrReplaceTempView(\"T_LOAD\")"
				],
				"execution_count": 154
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA2 = TMPMISSINGDATA2.unionByName(T_LOAD, allowMissingColumns=True)\r\n",
					"TMPMISSINGDATA2.createOrReplaceTempView(\"TMPMISSINGDATA2\")"
				],
				"execution_count": 155
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA2 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT t2.*,\r\n",
					"    LD_ID,\r\n",
					"    LD_ID AS WL_LoadID,\r\n",
					"    LD_DriverID,\r\n",
					"    LD_DriverName,\r\n",
					"    LD_VehicleID,     \r\n",
					"    LD_ParentLoadID,\r\n",
					"    LD_ChildLoadID,\r\n",
					"    LD_Debriefed,\r\n",
					"    LD_finalFlag,\r\n",
					"    LD_LDate,\r\n",
					"    LD_ORVID,\r\n",
					"    LD_ORVStatus,\r\n",
					"    LD_ORV_Status,\r\n",
					"    LD_ovrIgnore,\r\n",
					"\tLD_ORVCode,\r\n",
					"    --Date(LD_ESTDepartureDateTime,'YYYY/MM/DD') AS LD_ESTDepartureDate,\r\n",
					"    LD_ESTDepartureDate,\r\n",
					"    LD_Site,\r\n",
					"    LD_FirstScanOnDate,\r\n",
					"\tLD_LastScanOnDate,\r\n",
					"\tLD_FirstScanOffDate,\r\n",
					"\tLD_LastScanOffDate,\r\n",
					"    LD_FleetNo,\r\n",
					"    LD_Trailer1FleetNo,\r\n",
					"    LD_Trailer2FleetNo,\r\n",
					"    LD_DriverIdPassportNo,\r\n",
					"    LD_MobileFeedbackReasonID,\r\n",
					"    LD_EffectiveLoadDurationMinutes,\r\n",
					"    LD_EffectiveOffLoadDurationMinutes,\r\n",
					"    LD_TTypeID,\r\n",
					"    LD_Exception\r\n",
					"FROM TMPMISSINGDATA2 t2\r\n",
					"LEFT JOIN T_LOAD tl\r\n",
					"       ON t2.`dispatch.lmsid` = tl.`dispatch.lmsid`\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA2.show()\r\n",
					"TMPMISSINGDATA2.createOrReplaceTempView(\"TMPMISSINGDATA2\")"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## End of 03e_Operations_LMS_OnRouteDet_3MRolling_27_AddbackExpectionLoads"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start of 03e_Operations_LMS_OnRouteDet_3MRolling_28_AddbackExpectionTracks"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA3 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT DISTINCT LD_ID --Must use LD_ID and Not ParentLoadID as we need the subloads (merged)\r\n",
					"FROM TMPMISSINGDATA2\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA3.show\r\n",
					"TMPMISSINGDATA3.createOrReplaceTempView(\"TMPMISSINGDATA3\")"
				],
				"execution_count": 156
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"T_TRACK = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT ID AS TK_ID, \r\n",
					"ParcelID AS PC_ID, \r\n",
					"fromlocid AS FL_ID,\r\n",
					"tolocid AS TL_ID,\r\n",
					"TrackTypeID AS TT_ID,\r\n",
					"to_TIMESTAMP(OpenDt, 'YYYY/MM/DD hh:mm:ss') AS TK_OpenDtTime,\r\n",
					"to_Date(OpenDt,'YYYY/MM/DD') AS TK_OpenDt,\r\n",
					"to_TIMESTAMP(CloseDt, 'YYYY/MM/DD hh:mm:ss') AS TK_CloseDtTime,\r\n",
					"to_Date(CloseDt,'YYYY/MM/DD') AS TK_CloseDt,\r\n",
					"LoadID AS TK_LoadID, \r\n",
					"UserID AS TK_UserID, \r\n",
					"touserid AS TK_touserid,  \r\n",
					"TrackTypeID2 AS TK_TrackTypeID2,\r\n",
					"WaybillID AS TK_WaybillID\r\n",
					"\r\n",
					"FROM(\r\n",
					"SELECT \r\n",
					"dbotrack.ID,\r\n",
					"dbotrack.ParcelID,\r\n",
					"dbotrack.fromlocid,\r\n",
					"dbotrack.tolocid,\r\n",
					"dbotrack.TrackTypeID,\r\n",
					"\r\n",
					"dbotrack.OpenDt,\r\n",
					"dbotrack.CloseDt,\r\n",
					"dbotrack.LoadID,\r\n",
					"UserID,\r\n",
					"\r\n",
					"dbotrack.touserid,\r\n",
					"dbotrack.TrackTypeID2,\r\n",
					"T1.WaybillID AS WaybillID\r\n",
					"FROM dbotrack\r\n",
					"LEFT JOIN \r\n",
					"(\r\n",
					"\r\n",
					"\tSELECT \r\n",
					"\tdboWaybill.LoadID, \r\n",
					"\tdboWaybill.id AS WaybillID,\r\n",
					"\tT0.ParcelID\r\n",
					"\tFROM dboWaybill\r\n",
					"\tLEFT JOIN\r\n",
					"\t(\r\n",
					"\t\tSELECT DISTINCT \r\n",
					"\t\tparcelid,\r\n",
					"\t\tWaybillid\r\n",
					"\t\tFROM dboWaybillsPerParcel\r\n",
					"\t\t\tUNION \r\n",
					"\t\tSELECT DISTINCT \r\n",
					"\t\tid,\r\n",
					"\t\tWaybillid\r\n",
					"\t\tFROM dboparcel\r\n",
					"\t\t\tUNION ALL\r\n",
					"\t\tSELECT DISTINCT \r\n",
					"\t\tid,\r\n",
					"\t\tWaybillid\r\n",
					"\t\tFROM  dboparcel_archive\r\n",
					"\t\r\n",
					"\t) T0 on T0.WaybillID = dboWaybill.id\r\n",
					")T1 on T1.LoadID = dbotrack.LoadID and T1.ParcelID = dbotrack.ParcelID\r\n",
					"\r\n",
					"--WHERE OpenDt BETWEEN ${vCurrentExtractQVDStartDate} and ${vCurrentExtractQVDEndDate}\r\n",
					"AND dbotrack.TrackTypeID in (2,6)\r\n",
					"\r\n",
					"UNION ALL\r\n",
					"\r\n",
					"SELECT \r\n",
					"Track_Archive.ID,\r\n",
					"Track_Archive.ParcelID,\r\n",
					"Track_Archive.fromlocid,\r\n",
					"Track_Archive.tolocid,\r\n",
					"Track_Archive.TrackTypeID,\r\n",
					"\r\n",
					"Track_Archive.OpenDt,\r\n",
					"Track_Archive.CloseDt,\r\n",
					"Track_Archive.LoadID,\r\n",
					"UserID,\r\n",
					"\r\n",
					"Track_Archive.touserid,\r\n",
					"Track_Archive.TrackTypeID2,\r\n",
					"T1.WaybillID AS WaybillID\r\n",
					"FROM dboTrack_Archive Track_Archive\r\n",
					"LEFT JOIN \r\n",
					"(\r\n",
					"\r\n",
					"\tSELECT \r\n",
					"\twaybill.LoadID, \r\n",
					"\twaybill.id AS WaybillID,\r\n",
					"\tT0.ParcelID\r\n",
					"\tFROM dboWaybill waybill\r\n",
					"\tLEFT JOIN\r\n",
					"\t(\r\n",
					"\t\tSELECT DISTINCT \r\n",
					"\t\tparcelid,\r\n",
					"\t\tWaybillid\r\n",
					"\t\tFROM dboWaybillsPerParcel WaybillsPerParcel\r\n",
					"\t\t\tUNION \r\n",
					"\t\tSELECT DISTINCT \r\n",
					"\t\tid,\r\n",
					"\t\tWaybillid\r\n",
					"\t\tFROM dboparcel parcel\r\n",
					"\t\t\tUNION ALL\r\n",
					"\t\tSELECT DISTINCT \r\n",
					"\t\tid,\r\n",
					"\t\tWaybillid\r\n",
					"\t\tFROM dboparcel_archive Parcel_Archive\r\n",
					"\t\r\n",
					"\t) T0 on T0.WaybillID = waybill.id\r\n",
					")T1 on T1.LoadID = Track_Archive.LoadID and T1.ParcelID = Track_Archive.ParcelID\r\n",
					"\r\n",
					"--WHERE OpenDt BETWEEN ${vCurrentExtractQVDStartDate} and ${vCurrentExtractQVDEndDate}\r\n",
					"AND Track_Archive.TrackTypeID in (2,6)\r\n",
					")a\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#T_TRACK.show()\r\n",
					"T_TRACK.createOrReplaceTempView(\"T_TRACK\")\r\n",
					"#STORE * FROM \"TRACK\" INTO 'lib://QlikSense Path (cityc_clickview)/QVDs/LMS/Extractor/Daily/TRACK_$(vStoreSuffex).qvd'"
				],
				"execution_count": 157
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"T_TRACK = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT TK_ID, \r\n",
					"T_TRACK.PC_ID, \r\n",
					"FL_ID,\r\n",
					"TL_ID,\r\n",
					"TT_ID,\r\n",
					"TK_WaybillID AS WP_WB_ID,\r\n",
					"TK_OpenDtTime AS TK_ODatetTime,\r\n",
					"TK_OpenDt AS TK_ODate,\r\n",
					"TK_CloseDtTime AS TK_CDateTime,\r\n",
					"TK_CloseDt AS TK_CDate,\r\n",
					"TK_LoadID,\r\n",
					"TK_LoadID AS LD_ID, \r\n",
					"TK_TrackTypeID2,\r\n",
					"TK_WaybillID,\r\n",
					"if(isnull(TK_WaybillID),1,0) AS TK_SetLMSNoOfParcelLoadedFlag, --Use this fag to set the number of parcel loaded on the outer joined tracks with no waybill id records to 0 on waybill per load table\r\n",
					"\r\n",
					"PC_Weight AS TK_Weight,\r\n",
					"PC_ChargeWeight AS TK_ChargeWeight,\r\n",
					"PC_TotCharge AS TK_TotChargeAll,\r\n",
					"ROW_NUMBER() OVER(ORDER BY T_TRACK.PC_ID, TK_ID ASC) AS `Count`\r\n",
					"\r\n",
					"FROM T_TRACK\r\n",
					"\r\n",
					"LEFT JOIN T_Parcel\r\n",
					"       ON T_TRACK.PC_ID = T_Parcel.PC_ID\r\n",
					"ORDER BY PC_ID, TK_ID ASC\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#T_TRACK.show()\r\n",
					"T_TRACK.createOrReplaceTempView(\"T_TRACK\")"
				],
				"execution_count": 158
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tmp2 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *,\r\n",
					"       row_number() OVER(PARTITION BY PC_ID ORDER BY PC_ID, TK_ID) - 1 as TK_Occurrence\r\n",
					"FROM T_TRACK\r\n",
					"WHERE TT_ID = 6\r\n",
					"\r\n",
					"UNION ALL\r\n",
					"\r\n",
					"SELECT *,\r\n",
					"       NULL as TK_Occurrence\r\n",
					"FROM T_TRACK\r\n",
					"WHERE TT_ID = 2\r\n",
					"ORDER BY PC_ID, TK_ID ASC\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#tmp2.show()\r\n",
					"tmp2.createOrReplaceTempView(\"tmp2\")"
				],
				"execution_count": 159
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"T_TRACK = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT TK_ID, \r\n",
					"PC_ID, \r\n",
					"FL_ID,\r\n",
					"TL_ID,\r\n",
					"TT_ID,\r\n",
					"WP_WB_ID,\r\n",
					"TK_ODatetTime,\r\n",
					"TK_ODate,\r\n",
					"TK_CDateTime,\r\n",
					"TK_CDate,\r\n",
					"TK_LoadID,\r\n",
					"LD_ID, \r\n",
					"TK_TrackTypeID2,\r\n",
					"TK_WaybillID,\r\n",
					"TK_SetLMSNoOfParcelLoadedFlag,\r\n",
					"\r\n",
					"TK_Weight,\r\n",
					"TK_ChargeWeight,\r\n",
					"TK_TotChargeAll,\r\n",
					"IF(TK_Occurrence = 0, NULL,TK_Occurrence) AS TK_Occurrence,\r\n",
					"IF(TK_Occurrence = 1, TK_TotChargeAll,0) AS TK_TotCharge1stDist\r\n",
					"FROM tmp2\r\n",
					"ORDER BY `Count` ASC\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#T_TRACK.show()\r\n",
					"T_TRACK.createOrReplaceTempView(\"T_TRACK\")"
				],
				"execution_count": 160
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA3 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT tmp3.*,\r\n",
					"       TK_ID,\r\n",
					"       PC_ID, \r\n",
					"       FL_ID,\r\n",
					"       TL_ID,\r\n",
					"       TT_ID,\r\n",
					"       TK_WaybillID AS WP_WB_ID,\r\n",
					"       TK_ODatetTime,\r\n",
					"       TK_ODate,\r\n",
					"       TK_CDateTime,\r\n",
					"       TK_CDate,\r\n",
					"       TK_LoadID,\r\n",
					"       --TK_LoadID AS LD_ID, \r\n",
					"       TK_TrackTypeID2,\r\n",
					"       TK_WaybillID,\r\n",
					"       if(isnull(TK_WaybillID),1,0) AS TK_SetLMSNoOfParcelLoadedFlag, --Use this fag to set the number of parcel loaded on the outer joined tracks with no waybill id records to 0 on waybill per load table\r\n",
					"       1 AS TK_Exception\r\n",
					"FROM TMPMISSINGDATA3 tmp3\r\n",
					"LEFT JOIN T_TRACK tt\r\n",
					"       ON tmp3.LD_ID = tt.TK_LoadID\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA3.show()\r\n",
					"TMPMISSINGDATA3.createOrReplaceTempView(\"TMPMISSINGDATA3\")"
				],
				"execution_count": 161
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA3 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT t3.*,\r\n",
					"       PC_Weight AS TK_Weight,\r\n",
					"       PC_ChargeWeight AS TK_ChargeWeight,\r\n",
					"       PC_TotCharge\tAS TK_TotChargeAll\r\n",
					"FROM TMPMISSINGDATA3 t3\r\n",
					"LEFT JOIN T_Parcel tp\r\n",
					"       ON t3.PC_ID = tp.PC_ID\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA3.show()\r\n",
					"TMPMISSINGDATA3.createOrReplaceTempView(\"TMPMISSINGDATA3\")"
				],
				"execution_count": 162
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"T_TRACK2 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM T_TRACK\r\n",
					"LEFT JOIN TMPMISSINGDATA3\r\n",
					"USING(TK_ID, PC_ID, FL_ID, TL_ID, TT_ID, WP_WB_ID, TK_ODatetTime, TK_ODate, TK_CDateTime, TK_CDate, TK_LoadID, LD_ID, TK_TrackTypeID2, TK_WaybillID\r\n",
					",TK_SetLMSNoOfParcelLoadedFlag, TK_Weight,TK_ChargeWeight, TK_TotChargeAll)\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#T_TRACK2.show()\r\n",
					"T_TRACK2.createOrReplaceTempView(\"T_TRACK2\")"
				],
				"execution_count": 163
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"T_TRACK2 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT tt.TK_ID,\r\n",
					" tt.PC_ID,\r\n",
					" tt.FL_ID,\r\n",
					" tt.TL_ID,\r\n",
					" tt.TT_ID,\r\n",
					" tt.WP_WB_ID,\r\n",
					" tt.TK_ODatetTime,\r\n",
					" tt.TK_ODate,\r\n",
					" tt.TK_CDateTime,\r\n",
					" tt.TK_CDate,\r\n",
					" tt.TK_LoadID,\r\n",
					" tt.LD_ID,\r\n",
					" tt.TK_TrackTypeID2,\r\n",
					" tt.TK_WaybillID,\r\n",
					" tt.TK_SetLMSNoOfParcelLoadedFlag,\r\n",
					" tt.TK_Weight,\r\n",
					" tt.TK_ChargeWeight,\r\n",
					" tt.TK_TotChargeAll,\r\n",
					" tt.TK_Occurrence,\r\n",
					" tt.TK_TotCharge1stDist,\r\n",
					" t3.TK_Exception\r\n",
					"FROM T_TRACK2 tt\r\n",
					"LEFT JOIN TMPMISSINGDATA3 t3\r\n",
					"ON tt.TK_ID = t3.TK_ID\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#T_TRACK2.show()\r\n",
					"T_TRACK2.createOrReplaceTempView(\"T_TRACK2\")"
				],
				"execution_count": 164
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"T_TRACK = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT tt.*,\r\n",
					"       tl.LD_ParentLoadID AS TK_ParentLoadID\r\n",
					"FROM T_TRACK2 tt\r\n",
					"LEFT JOIN T_LOAD tl\r\n",
					"       ON tt.LD_ID = tl.LD_ID\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#T_TRACK.show()\r\n",
					"T_TRACK.createOrReplaceTempView(\"T_TRACK\")"
				],
				"execution_count": 165
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA4 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT DISTINCT PC_ID\r\n",
					"FROM TMPMISSINGDATA3\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA4.show()\r\n",
					"TMPMISSINGDATA4.createOrReplaceTempView(\"TMPMISSINGDATA4\")"
				],
				"execution_count": 166
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA4_2 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT t4.PC_ID,\r\n",
					"    tp.PC_ID AS WP_PC_ID,\r\n",
					"    tp.PC_ID AS CF_ParcelID,\r\n",
					"    OD_ID,\r\n",
					"    CN_ID,\r\n",
					"    WB_ID,\r\n",
					"    CL_ID,\r\n",
					"    MT_ID,\r\n",
					"    PC_Weight,\r\n",
					"    PC_TotCharge,\r\n",
					"    PC_DIMMS,\r\n",
					"    PC_NoOfPcls,\r\n",
					"    PC_PL,\r\n",
					"    PC_PW,\r\n",
					"    PC_PH,\r\n",
					"    PC_ADateTime,\r\n",
					"    PC_ADate,\r\n",
					"    PC_HandOverDateTime,\r\n",
					"    PC_HandOverDate,\r\n",
					"    PC_Barcode,\r\n",
					"    PC_VolWeight,\r\n",
					"    PC_ChargeWeight,\r\n",
					"    PC_DateVolumised,\r\n",
					"    PC_VolumiserWeight,\r\n",
					"    PC_VolumiserLength,\r\n",
					"    PC_VolumiserHeight,\r\n",
					"    PC_VolumiserWidth,\r\n",
					"    PC_Volumiserid,\r\n",
					"    PC_OD_HODateTime,\r\n",
					"    PC_OD_HODate,\r\n",
					"    PC_CN_CDateTime,\r\n",
					"    PC_CN_CDate,\r\n",
					"    PC_CN_DeliverByTime,\r\n",
					"    PC_CN_DeliverBy,\r\n",
					"    PC_WB_PODDateTime,\r\n",
					"    PC_WB_PODDate,\r\n",
					"    PC_WB_DDateTime,\r\n",
					"    PC_WB_DDate,\r\n",
					"    PC_WB_HasPODDate,\r\n",
					"    PC_InserviceIndicator,\r\n",
					"    --PC_LeadTimeBasedonPOD, Removing this field and doing the calulation below else there is a dime differencebetween the PC_LeadTimeBasedonPOD(calulated at extraction) and PC_LeadTimeBasedonPODExclWE (calulated on model Load)\r\n",
					"    IF(datediff(if(isnull(PC_WB_PODDateTime),now(),PC_WB_PODDateTime),to_timestamp(CONCAT(PC_CN_CDate, ' 23:59:59')))<0,0,\r\n",
					"         datediff(if(isnull(PC_WB_PODDateTime),now(),PC_WB_PODDateTime),to_timestamp(CONCAT(PC_CN_CDate, ' 23:59:59')))) AS PC_LeadTimeBasedonPOD,\r\n",
					"\r\n",
					"   -- PC_LeadTimeBasedonPODExclWE have been igonred for now as the final deliverable does not request this\r\n",
					"\r\n",
					"\r\n",
					"    PC_AgeAnalysisBasedonPOD,\r\n",
					"    1 AS PC_Exception\r\n",
					"FROM TMPMISSINGDATA4 t4\r\n",
					"LEFT JOIN T_Parcel tp\r\n",
					"ON t4.PC_ID = tp.PC_ID\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA4_2.show()\r\n",
					"TMPMISSINGDATA4_2.createOrReplaceTempView(\"TMPMISSINGDATA4_2\")"
				],
				"execution_count": 167
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA3 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT t3.*, \r\n",
					"       t4.PC_Weight AS TK_Weight,\r\n",
					"       t4.PC_ChargeWeight AS TK_ChargeWeight\r\n",
					"FROM TMPMISSINGDATA3 t3\r\n",
					"LEFT JOIN TMPMISSINGDATA4_2 t4\r\n",
					"ON t3.PC_ID = t4.PC_ID\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA3.show()\r\n",
					"TMPMISSINGDATA3.createOrReplaceTempView(\"TMPMISSINGDATA3\")"
				],
				"execution_count": 168
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"T_Parcel_v2 = T_Parcel.unionByName(TMPMISSINGDATA4, allowMissingColumns=True)\r\n",
					"T_Parcel_v2.createOrReplaceTempView(\"T_Parcel_v2\")"
				],
				"execution_count": 169
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## END of 03e_Operations_LMS_OnRouteDet_3MRolling_28_AddbackExpectionTracks"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start of 03e_Operations_LMS_OnRouteDet_3MRolling_29_AddbackExpectionWaybill"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA5a = spark.sql(\"\"\"\r\n",
					"\r\n",
					"    SELECT DISTINCT WP_WB_ID AS WB_ID\r\n",
					"\tFROM TMPMISSINGDATA3\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA5a.show()\r\n",
					"TMPMISSINGDATA5a.createOrReplaceTempView(\"TMPMISSINGDATA5a\")"
				],
				"execution_count": 170
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA5b = spark.sql(\"\"\"\r\n",
					"\r\n",
					"    SELECT DISTINCT WB_ID\r\n",
					"\tFROM TMPMISSINGDATA4_2\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA5b.show()\r\n",
					"TMPMISSINGDATA5b.createOrReplaceTempView(\"TMPMISSINGDATA5b\")"
				],
				"execution_count": 171
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"WAYBILL_2 = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT tmp5a.*,\r\n",
					"       w.WB_ID AS ER_WaybillID,\r\n",
					"       w.WB_LoadID,\r\n",
					"       w.WB_DDate,\r\n",
					"       w.WB_DDateTime,\r\n",
					"       w.WB_PODDate,\r\n",
					"       w.WB_PODDateTime,\r\n",
					"       w.WB_DelayReason,\r\n",
					"       w.WB_DeliveryStatus,\r\n",
					"       w.WB_InServiceReason,\r\n",
					"       w.WB_InServiceReasonGroup,\r\n",
					"       w.WB_NotDebriefedReason,\r\n",
					"       w.WB_ReasonDetail,\r\n",
					"       w.WB_ReasonGroup,\r\n",
					"       1 AS WB_Exception\r\n",
					"FROM TMPMISSINGDATA5a tmp5a\r\n",
					"LEFT JOIN WAYBILL w\r\n",
					"       ON tmp5a.WB_ID = w.WB_ID\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#WAYBILL_2.show()\r\n",
					"WAYBILL_2.createOrReplaceTempView(\"WAYBILL_2\")"
				],
				"execution_count": 172
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TMPMISSINGDATA5b = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT tmp5a.*,\r\n",
					"       w.WB_ID AS ER_WaybillID,\r\n",
					"       w.WB_LoadID,\r\n",
					"       w.WB_DDate,\r\n",
					"       w.WB_DDateTime,\r\n",
					"       w.WB_PODDate,\r\n",
					"       w.WB_PODDateTime,\r\n",
					"       w.WB_DelayReason,\r\n",
					"       w.WB_DeliveryStatus,\r\n",
					"       w.WB_InServiceReason,\r\n",
					"       w.WB_InServiceReasonGroup,\r\n",
					"       w.WB_NotDebriefedReason,\r\n",
					"       w.WB_ReasonDetail,\r\n",
					"       w.WB_ReasonGroup,\r\n",
					"       1 AS WB_Exception\r\n",
					"FROM TMPMISSINGDATA5b tmp5a\r\n",
					"LEFT JOIN WAYBILL w\r\n",
					"       ON tmp5a.WB_ID = w.WB_ID\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#TMPMISSINGDATA5b.show()\r\n",
					"TMPMISSINGDATA5b.createOrReplaceTempView(\"TMPMISSINGDATA5b\")"
				],
				"execution_count": 173
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"WAYBILL_Exception = TMPMISSINGDATA5b.unionByName(WAYBILL_2, allowMissingColumns=True).unionByName(WAYBILL, allowMissingColumns=True)\r\n",
					"WAYBILL_Exception.createOrReplaceTempView(\"WAYBILL_Exception\")"
				],
				"execution_count": 174
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## End of 03e_Operations_LMS_OnRouteDet_3MRolling_29_AddbackExpectionWaybill"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start of 03e_Operations_LMS_OnRouteDet_3MRolling_50_DeliveryWaybill"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"WAYBILLTMP = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT delivery.id AS `WB_delivery.id`,\r\n",
					"`dispatch.lmsid` as `WB_dispatch.lmsid`,\r\n",
					"delivery.did AS `WB_dispatch.id`,\r\n",
					"delivery.waybillid AS `WB_ID`,\r\n",
					"delivery.did AS `WB_delivery.dispatch.id`,\r\n",
					"delivery.customerid AS `WB_delivery.customerid`,\r\n",
					"delivery.address AS `WB_delivery.address`,\r\n",
					"delivery.town AS `WB_delivery.town`,\r\n",
					"delivery.province AS `WB_delivery.province`,\r\n",
					"delivery.country AS `WB_delivery.country`,\r\n",
					"delivery.lat AS `WB_delivery.lat`,\r\n",
					"delivery.lng AS `WB_delivery.lng`,\r\n",
					"concat('[',delivery.lng, ',' ,delivery.lat,']') AS `WB_delivery.geopoint`,\r\n",
					"delivery.placeid AS `WB_delivery.placeid`,\r\n",
					"delivery.what3words AS `WB_delivery.what3words`,\r\n",
					"delivery.zipcode AS `WB_delivery.zipcode`,\r\n",
					"delivery.billingcustid AS `WB_delivery.billingcustid`,\r\n",
					"from_unixtime(delivery.eta,'yyyy/MM/dd HH:mm:ss.SSS') AS `WB_delivery.eta`,\r\n",
					"from_unixtime(delivery.actualeta,'yyyy/MM/dd HH:mm:ss.SSS') AS `WB_delivery.actualeta`,\r\n",
					"from_unixtime(delivery.deliverydate,'yyyy/MM/dd HH:mm:ss.SSS') AS `WB_delivery.deliverydatetime`,\r\n",
					"from_unixtime(delivery.deliverydate,'yyyy/MM/dd') AS `WB_delivery.deliverydate`,\r\n",
					"date_format(to_utc_timestamp(to_timestamp(deliverydate), 'GMT-2'), 'HH:mm:ss') AS `WB_delivery.deliverytime`,\r\n",
					"date_format(to_utc_timestamp(to_timestamp(deliverby), 'GMT-2'), 'HH:mm:ss') AS `WB_delivery.deliverbydatetime`,\r\n",
					"to_date(to_utc_timestamp(to_timestamp(deliverby), 'GMT-2')) AS `WB_delivery.deliverbydate`,\r\n",
					"date_format(to_utc_timestamp(to_timestamp(deliverby), 'GMT-2'), 'HH:mm:ss') AS `WB_delivery.deliverbytime`,\r\n",
					"delivery.deliveryorder AS `WB_delivery.deliveryorder`,\r\n",
					"from_unixtime(delivery.tsgeofenceenter,'yyyy/MM/dd HH:mm:ss.SSS') AS `WB_delivery.tsgeofenceenter`,\r\n",
					"from_unixtime(delivery.tsscanningstart,'yyyy/MM/dd HH:mm:ss.SSS') AS `WB_delivery.tsscanningstart`,\r\n",
					"from_unixtime(delivery.tsscanningstop,'yyyy/MM/dd HH:mm:ss.SSS') AS `WB_delivery.tsscanningstop`,\r\n",
					"from_unixtime(delivery.tspodsignature,'yyyy/MM/dd HH:mm:ss.SSS') AS `WB_delivery.tspodsignature`,\r\n",
					"delivery.aid AS `WB_delivery.aid`,\r\n",
					"delivery.numprcls AS `WB_delivery.numprcls`,\r\n",
					"delivery.geocodingstatus AS `WB_delivery.geocodingstatus`,\r\n",
					"delivery.skipdate AS `WB_delivery.skipdate`,\r\n",
					"delivery.skipreason AS `WB_delivery.skipreason`,\r\n",
					"delivery.status AS `WB_delivery.status`,\r\n",
					"delivery.partialmatch AS `WB_delivery.partialmatch`,\r\n",
					"delivery.approximated AS `WB_delivery.approximated`,\r\n",
					"delivery.lmsorder AS `WB_delivery.lmsorder`,\r\n",
					"delivery.optimizedorder AS `WB_delivery.optimizedorder`,\r\n",
					"delivery.seal AS `WB_delivery.seal`,\r\n",
					"delivery.customerinvoice AS `WB_delivery.customerinvoice`,\r\n",
					"delivery.customerdn AS `WB_delivery.customerdn`,\r\n",
					"delivery.grv AS `WB_delivery.grv`,\r\n",
					"delivery.chepslip AS `WB_delivery.chepslip`,\r\n",
					"delivery.cleandelivery AS `WB_delivery.cleandelivery`,\r\n",
					"delivery.trackingcode AS `WB_delivery.trackingcode`,\r\n",
					"if(isnull(delivery.mode),'deliver',delivery.mode) AS `WB_delivery.mode`,\r\n",
					"delivery.customorder AS `WB_delivery.customorder`,\r\n",
					"delivery.verified AS `WB_delivery.verified`,\r\n",
					"delivery.altered AS `WB_delivery.altered`,\r\n",
					"delivery.orderid AS `WB_delivery.orderid`,\r\n",
					"delivery.lastregioncrossed AS `WB_delivery.lastregioncrossed`,\r\n",
					"delivery.mergeid AS `WB_delivery.mergeid`,\r\n",
					"delivery.orderref AS `WB_delivery.orderref`,\r\n",
					"delivery.drivernote AS `WB_delivery.drivernote`,\r\n",
					"delivery.timedefinite AS `WB_delivery.timedefinite`,\r\n",
					"delivery.orvcode AS `WB_delivery.orvcode`,\r\n",
					"delivery.vaid AS `WB_delivery.vaid`,\r\n",
					"delivery.delegatedate AS `WB_delivery.delegatedate`,\r\n",
					"delivery.delegatemode AS `WB_delivery.delegatemode`,\r\n",
					"delivery.debriefmode AS `WB_delivery.debriefmode`,\r\n",
					"delivery.debriefed AS `WB_delivery.debriefed`,\r\n",
					"delivery.insdate AS `WB_delivery.insdate`,\r\n",
					"delivery.reviseddebrief AS `WB_delivery.reviseddebrief`,\r\n",
					"delivery.lmsdebriefed AS `WB_delivery.lmsdebriefed`,\r\n",
					"delivery.uncanceldate AS `WB_delivery.uncanceldate`,\r\n",
					"from_unixtime(delivery.podlaterdate,'yyyy/MM/dd HH:mm:ss.SSS') AS `WB_delivery.podlaterdate`,\r\n",
					"delivery.podmanualdate AS `WB_delivery.podmanualdate`,\r\n",
					"delivery.manualdebriefreason AS `WB_delivery.manualdebriefreason`,\r\n",
					"delivery.submanualdebriefreason AS `WB_delivery.submanualdebriefreason`,\r\n",
					"delivery.outofgeofencereason AS `WB_delivery.outofgeofencereason`,\r\n",
					"delivery.tsentergeofenceapp AS `WB_delivery.tsentergeofenceapp`,\r\n",
					"delivery.tsexitgeofenceapp AS `WB_delivery.tsexitgeofenceapp`,\r\n",
					"delivery.comebacklater AS `WB_delivery.comebacklater`,\r\n",
					"delivery.uncancelusername AS `WB_delivery.uncancelusername`,\r\n",
					"publicpod.lat as p_lat,\r\n",
					"delivery.lat as d_lat,\r\n",
					"publicpod.lng as p_lng,\r\n",
					"delivery.lng as d_lng\r\n",
					"\r\n",
					"FROM delivery\r\n",
					"LEFT JOIN publicpod on delivery.id = publicpod.did\r\n",
					"LEFT JOIN dispatch on publicpod.did = `dispatch.id`\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#WAYBILLTMP.show()\r\n",
					"WAYBILLTMP.createOrReplaceTempView(\"WAYBILLTMP\")"
				],
				"execution_count": 175
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import to_timestamp, col, when, lit, round, min, max, substring, desc, count, sin, asin, cos, sqrt, pow, radians, date_format"
				],
				"execution_count": 176
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"JOINWAYBILLTMP = WAYBILLTMP.withColumn('WB_delivery.poddistancefromdeliverypoint', \r\n",
					"    2 * 3961 * asin(sqrt(pow(sin(radians((col('p_lat') - col('d_lat')) / 2)), 2) + cos(radians(col('d_lat'))) * cos(radians(col('p_lat'))) * pow(sin(radians((col('p_lng') - col('d_lng') ) / 2)), 2)))*1.60934\r\n",
					"    )\r\n",
					"\r\n",
					"# remove the unncessary fields\r\n",
					"JOINWAYBILLTMP = JOINWAYBILLTMP.drop(*('p_lat', 'd_lat', 'p_lng', 'd_lng'))\r\n",
					"\r\n",
					"JOINWAYBILLTMP.createOrReplaceTempView(\"JOINWAYBILLTMP\")"
				],
				"execution_count": 177
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"WAYBILL = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT w.*,\r\n",
					"--if(isnull(WB_LoadID),WB_ParentLoadIDTMP,WB_LoadID) AS `WB_LoadID`,\r\n",
					"--if(isnull(WB_ParentLoadID),WB_ParentLoadIDTMP,WB_ParentLoadID) AS `WB_ParentLoadID`, \r\n",
					"`WB_dispatch.lmsid`,\r\n",
					"`WB_delivery.id`,\r\n",
					"`WB_dispatch.id`,\r\n",
					"`WB_delivery.dispatch.id`,\r\n",
					"`WB_delivery.customerid`,\r\n",
					"`WB_delivery.address`,\r\n",
					"`WB_delivery.town`,\r\n",
					"`WB_delivery.province`,\r\n",
					"`WB_delivery.country`,\r\n",
					"`WB_delivery.lat`,\r\n",
					"`WB_delivery.lng`,\r\n",
					"`WB_delivery.geopoint`,\r\n",
					"`WB_delivery.placeid`,\r\n",
					"`WB_delivery.what3words`,\r\n",
					"`WB_delivery.zipcode`,\r\n",
					"`WB_delivery.billingcustid`,\r\n",
					"`WB_delivery.eta`,\r\n",
					"`WB_delivery.actualeta`,\r\n",
					"`WB_delivery.deliverydatetime`,\r\n",
					"`WB_delivery.deliverydate`,\r\n",
					"`WB_delivery.deliverytime`,\r\n",
					"`WB_delivery.deliverbydatetime`,\r\n",
					"`WB_delivery.deliverbydate`,\r\n",
					"`WB_delivery.deliverbytime`,\r\n",
					"`WB_delivery.deliveryorder`,\r\n",
					"`WB_delivery.tsgeofenceenter`,\r\n",
					"`WB_delivery.tsscanningstart`,\r\n",
					"`WB_delivery.tsscanningstop`,\r\n",
					"`WB_delivery.tspodsignature`,\r\n",
					"`WB_delivery.aid`,\r\n",
					"`WB_delivery.numprcls`,\r\n",
					"`WB_delivery.geocodingstatus`,\r\n",
					"`WB_delivery.skipdate`,\r\n",
					"`WB_delivery.skipreason`,\r\n",
					"`WB_delivery.status`,\r\n",
					"`WB_delivery.partialmatch`,\r\n",
					"`WB_delivery.approximated`,\r\n",
					"`WB_delivery.lmsorder`,\r\n",
					"`WB_delivery.optimizedorder`,\r\n",
					"`WB_delivery.seal`,\r\n",
					"`WB_delivery.customerinvoice`,\r\n",
					"`WB_delivery.customerdn`,\r\n",
					"`WB_delivery.grv`,\r\n",
					"`WB_delivery.chepslip`,\r\n",
					"`WB_delivery.cleandelivery`,\r\n",
					"`WB_delivery.trackingcode`,\r\n",
					"`WB_delivery.mode`,\r\n",
					"`WB_delivery.customorder`,\r\n",
					"`WB_delivery.verified`,\r\n",
					"`WB_delivery.altered`,\r\n",
					"`WB_delivery.orderid`,\r\n",
					"`WB_delivery.lastregioncrossed`,\r\n",
					"`WB_delivery.mergeid`,\r\n",
					"`WB_delivery.orderref`,\r\n",
					"`WB_delivery.drivernote`,\r\n",
					"`WB_delivery.timedefinite`,\r\n",
					"`WB_delivery.orvcode`,\r\n",
					"`WB_delivery.vaid`,\r\n",
					"`WB_delivery.delegatedate`,\r\n",
					"`WB_delivery.delegatemode`,\r\n",
					"`WB_delivery.debriefmode`,\r\n",
					"`WB_delivery.debriefed`,\r\n",
					"`WB_delivery.insdate`,\r\n",
					"`WB_delivery.reviseddebrief`,\r\n",
					"`WB_delivery.lmsdebriefed`,\r\n",
					"`WB_delivery.uncanceldate`,\r\n",
					"`WB_delivery.podlaterdate`,\r\n",
					"`WB_delivery.podmanualdate`,\r\n",
					"`WB_delivery.manualdebriefreason`,\r\n",
					"`WB_delivery.submanualdebriefreason`,\r\n",
					"`WB_delivery.outofgeofencereason`,\r\n",
					"`WB_delivery.tsentergeofenceapp`,\r\n",
					"`WB_delivery.tsexitgeofenceapp`,\r\n",
					"`WB_delivery.comebacklater`,\r\n",
					"`WB_delivery.uncancelusername`,\r\n",
					"`WB_delivery.poddistancefromdeliverypoint`\r\n",
					"FROM WAYBILL w\r\n",
					"LEFT JOIN JOINWAYBILLTMP on w.WB_ID = JOINWAYBILLTMP.WB_ID\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#WAYBILL.show()\r\n",
					"WAYBILL.createOrReplaceTempView(\"WAYBILL\")"
				],
				"execution_count": 178
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## End of 03e_Operations_LMS_OnRouteDet_3MRolling_50_DeliveryWaybill"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Start of 03e_Operations_LMS_OnRouteDet_3MRolling_52_PODWaybill"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"WAYBILL = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT w.*,\r\n",
					"--`delivery.id` \t\t\t\t\t\t\t\t\t\tAS `WB_delivery.id`,    \r\n",
					"`pod.id`\t\t\t\t\t\t\t\t\t\t\t\tAS `WB_pod.id`,\r\n",
					"`pod.name`\t\t\t\t\t\t\t\t\t\t\t\tAS `WB_pod.name`,\r\n",
					"`pod.poddate`\t\t\t\t\t\t\t\t\t\t\tAS `WB_pod.poddate`,\r\n",
					"concat('[', `pod.lng`, ',', `pod.lat`,']') \t\t\t\tAS `WB_pod.geopoint`,\r\n",
					"`pod.lat`\t\t\t\t\t\t\t\t\t\t\t\tAS `WB_pod.lat`,\r\n",
					"`pod.lng`\t\t\t\t\t\t\t\t\t\t\t\tAS `WB_pod.lng`,\r\n",
					"`pod.customerrating`\t\t\t\t\t\t\t\t\tAS `WB_pod.customerrating`,\r\n",
					"`pod.customerfeedback`\t\t\t\t\t\t\t\t\tAS `WB_pod.customerfeedback`\r\n",
					"FROM WAYBILL w\r\n",
					"LEFT JOIN pod on w.`WB_delivery.id` = pod.`delivery.id` \r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#WAYBILL.show()\r\n",
					"WAYBILL.createOrReplaceTempView(\"WAYBILL\")"
				],
				"execution_count": 179
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"T_WAYBILL = spark.sql(\"\"\"\r\n",
					"\r\n",
					"SELECT DISTINCT w.`WB_ID` AS `ER_WaybillID`,\r\n",
					"w.`WB_DDate`,\r\n",
					"w.`WB_DDateTime`,\r\n",
					"w.`WB_DeBriefDt`,\r\n",
					"w.`WB_DeBriefed`,\r\n",
					"w.`WB_DelayReason`,\r\n",
					"w.`WB_DeliveryStatus`,\r\n",
					"w.`WB_ID`,\r\n",
					"w.`WB_InService`,\r\n",
					"w.`WB_InServiceReason`,\r\n",
					"w.`WB_InServiceReasonGroup`,\r\n",
					"w.`WB_LoadID`,\r\n",
					"w.`WB_NotDebriefedReason`,\r\n",
					"w.`WB_ReasonDetail`,\r\n",
					"w.`WB_ReasonDetailID`,\r\n",
					"w.`WB_ReasonGroup`,\r\n",
					"w.`WB_ReasonGroupID`,\r\n",
					"w.`WB_PODDate`,\r\n",
					"w.`WB_PODDateTime`,\r\n",
					"w.`WB_pod.id`,\r\n",
					"w.`WB_pod.name`,\r\n",
					"w.`WB_pod.poddate`,\r\n",
					"w.`WB_pod.geopoint`,\r\n",
					"w.`WB_pod.lat`,\r\n",
					"w.`WB_pod.lng`,\r\n",
					"w.`WB_pod.customerrating`,\r\n",
					"w.`WB_pod.customerfeedback`,\r\n",
					"w.`WB_delivery.actualeta`,\r\n",
					"w.`WB_delivery.address`,\r\n",
					"w.`WB_delivery.aid`,\r\n",
					"w.`WB_delivery.altered`,\r\n",
					"w.`WB_delivery.approximated`,\r\n",
					"w.`WB_delivery.billingcustid`,\r\n",
					"w.`WB_delivery.chepslip`,\r\n",
					"w.`WB_delivery.cleandelivery`,\r\n",
					"w.`WB_delivery.comebacklater`,\r\n",
					"w.`WB_delivery.country`,\r\n",
					"w.`WB_delivery.customerdn`,\r\n",
					"w.`WB_delivery.customerid`,\r\n",
					"w.`WB_delivery.customerinvoice`,\r\n",
					"w.`WB_delivery.customorder`,\r\n",
					"w.`WB_delivery.debriefed`,\r\n",
					"w.`WB_delivery.debriefmode`,\r\n",
					"w.`WB_delivery.delegatedate`,\r\n",
					"w.`WB_delivery.delegatemode`,\r\n",
					"w.`WB_delivery.deliverbydate`,\r\n",
					"w.`WB_delivery.deliverbydatetime`,\r\n",
					"w.`WB_delivery.deliverbytime`,\r\n",
					"w.`WB_delivery.deliverydate`,\r\n",
					"w.`WB_delivery.deliverydatetime`,\r\n",
					"w.`WB_delivery.deliveryorder`,\r\n",
					"w.`WB_delivery.deliverytime`,\r\n",
					"w.`WB_delivery.dispatch.id`,\r\n",
					"w.`WB_delivery.drivernote`,\r\n",
					"w.`WB_delivery.eta`,\r\n",
					"w.`WB_delivery.geocodingstatus`,\r\n",
					"w.`WB_delivery.geopoint`,\r\n",
					"w.`WB_delivery.grv`,\r\n",
					"w.`WB_delivery.id`,\r\n",
					"w.`WB_delivery.insdate`,\r\n",
					"w.`WB_delivery.lastregioncrossed`,\r\n",
					"w.`WB_delivery.lat`,\r\n",
					"w.`WB_delivery.lmsdebriefed`,\r\n",
					"w.`WB_delivery.lmsorder`,\r\n",
					"w.`WB_delivery.lng`,\r\n",
					"w.`WB_delivery.manualdebriefreason`,\r\n",
					"w.`WB_delivery.mergeid`,\r\n",
					"w.`WB_delivery.mode`,\r\n",
					"w.`WB_delivery.numprcls`,\r\n",
					"w.`WB_delivery.optimizedorder`,\r\n",
					"w.`WB_delivery.orderid`,\r\n",
					"w.`WB_delivery.orderref`,\r\n",
					"w.`WB_delivery.orvcode`,\r\n",
					"w.`WB_delivery.outofgeofencereason`,\r\n",
					"w.`WB_delivery.partialmatch`,\r\n",
					"w.`WB_delivery.placeid`,\r\n",
					"w.`WB_delivery.poddistancefromdeliverypoint`,\r\n",
					"w.`WB_delivery.podlaterdate`,\r\n",
					"w.`WB_delivery.podmanualdate`,\r\n",
					"w.`WB_delivery.province`,\r\n",
					"w.`WB_delivery.reviseddebrief`,\r\n",
					"w.`WB_delivery.seal`,\r\n",
					"w.`WB_delivery.skipdate`,\r\n",
					"w.`WB_delivery.skipreason`,\r\n",
					"w.`WB_delivery.status`,\r\n",
					"w.`WB_delivery.submanualdebriefreason`,\r\n",
					"w.`WB_delivery.timedefinite`,\r\n",
					"w.`WB_delivery.town`,\r\n",
					"w.`WB_delivery.trackingcode`,\r\n",
					"w.`WB_delivery.tsentergeofenceapp`,\r\n",
					"w.`WB_delivery.tsexitgeofenceapp`,\r\n",
					"w.`WB_delivery.tsgeofenceenter`,\r\n",
					"w.`WB_delivery.tspodsignature`,\r\n",
					"w.`WB_delivery.tsscanningstart`,\r\n",
					"w.`WB_delivery.tsscanningstop`,\r\n",
					"w.`WB_delivery.uncanceldate`,\r\n",
					"w.`WB_delivery.uncancelusername`,\r\n",
					"w.`WB_delivery.vaid`,\r\n",
					"w.`WB_delivery.verified`,\r\n",
					"w.`WB_delivery.what3words`,\r\n",
					"w.`WB_delivery.zipcode`,\r\n",
					"w.`WB_dispatch.id`,\r\n",
					"w.`WB_dispatch.lmsid`,\r\n",
					"we.WB_Exception\r\n",
					"FROM WAYBILL w\r\n",
					"LEFT JOIN WAYBILL_Exception we\r\n",
					"       ON w.WB_ID = we.ER_WaybillID\r\n",
					"\r\n",
					"\"\"\")\r\n",
					"#T_WAYBILL.show()\r\n",
					"T_WAYBILL.createOrReplaceTempView(\"T_WAYBILL\")"
				],
				"execution_count": 180
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT WB_PODDate FROM T_WAYBILL LIMIT 100"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT WB_PODDateTime FROM T_WAYBILL LIMIT 100"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT WB_DeliveryStatus FROM T_WAYBILL LIMIT 100"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT `WB_pod.customerfeedback` FROM T_WAYBILL LIMIT 100"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT WB_ReasonGroup FROM T_WAYBILL LIMIT 100"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT `WB_delivery.actualeta` FROM T_WAYBILL LIMIT 100"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT `WB_delivery.podlaterdate` FROM T_WAYBILL LIMIT 100"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT `WB_delivery.tsgeofenceenter` FROM T_WAYBILL LIMIT 100"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT `WB_delivery.tspodsignature` FROM T_WAYBILL LIMIT 100"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT `WB_delivery.tsscanningstart` FROM T_WAYBILL LIMIT 100"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT `WB_delivery.tsscanningstop` FROM T_WAYBILL LIMIT 100"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT `WB_delivery.geopoint`, `WB_pod.geopoint`\r\n",
					"FROM T_WAYBILL \r\n",
					"WHERE `WB_delivery.tsscanningstart` LIKE '%2022/05/18%'\r\n",
					"  --AND `WB_delivery.tsscanningstop` = '2022/05/18 06:08:53.000'\r\n",
					"\r\n",
					"ORDER BY `WB_pod.geopoint`"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT *\r\n",
					"FROM T_WAYBILL\r\n",
					"WHERE ER_WaybillID IN (7941254,7972286)"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM T_WAYBILL \r\n",
					"WHERE WB_Exception = 1\r\n",
					"LIMIT 10"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"SELECT DISTINCT WB_Exception \r\n",
					"FROM T_WAYBILL \r\n",
					"LIMIT 100"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## End of 03e_Operations_LMS_OnRouteDet_3MRolling_52_PODWaybill"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"T_WAYBILL.write.parquet('/DataLake/Structured/Facts/T_WAYBILL.parquet', mode='overwrite')"
				],
				"execution_count": 181
			}
		]
	}
}