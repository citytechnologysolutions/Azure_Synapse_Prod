{
	"name": "SSTWaybilsPerParcel",
	"properties": {
		"folder": {
			"name": "TRANSFORM/01 SEMI-STRUCTURED/01_LMS Union"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DevSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "6ee9b647-7167-485c-a9b9-853d83d84460"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
				"name": "DevSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
					"# if 'prod' in Environment:\r\n",
					"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
					"# else:\r\n",
					"#     StorageAccount = 'citylogisticsstorage'\r\n",
					"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
					"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
					"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
					"\r\n",
					"# # ' + StorageAccount + '\r\n",
					""
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"source": [
					"# #Create DataFrame for the sstparcelunion LMS Table\r\n",
					"# sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
					"# sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
					"\r\n",
					"# #Create DataFrame for the ssttrackunion LMS Table\r\n",
					"# ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
					"# ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbowaybillsperparcel LMS Table\r\n",
					"# dbowaybillsperparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybillsperparcel.parquet', format='parquet')\r\n",
					"# dbowaybillsperparcel.createOrReplaceTempView(\"dbowaybillsperparcel\")\r\n",
					"\r\n",
					"# #Create DataFrame for the dbowaybill LMS Table\r\n",
					"# dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
					"# dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
					""
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"sstwaybillsperparcelunion_tmp1\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    null as id,\r\n",
					"    p.id as parcelid,\r\n",
					"    p.waybillid\r\n",
					"FROM SSTParcelUnion p\r\n",
					"UNION ALL\r\n",
					"SELECT \r\n",
					"    w.id,\r\n",
					"    w.parcelid,\r\n",
					"    w.waybillid\r\n",
					"FROM dbowaybillsperparcel w"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"sstwaybillsperparcelunion_tmp2\r\n",
					"AS\r\n",
					"SELECT \r\n",
					"    w.loadid ||'_'||t.parcelid as trackkey,\r\n",
					"    t.*,\r\n",
					"    w.loadid \r\n",
					"FROM sstwaybillsperparcelunion_tmp1 t\r\n",
					"LEFT JOIN dbowaybill w on w.id = t.waybillid "
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sstwaybillsperparcelunion_tmp2 = spark.sql(\"SELECT * FROM sstwaybillsperparcelunion_tmp2\")"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.window import Window"
				],
				"execution_count": 65
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"partitionload=Window.partitionBy(\"trackkey\").orderBy(col(\"parcelid\"),col(\"id\").desc())\r\n",
					"sstwaybillsperparcelunion_tmp2 = sstwaybillsperparcelunion_tmp2.withColumn(\"rn\",row_number().over(partitionload))\r\n",
					"sstwaybillsperparcelunion_tmp2.createOrReplaceTempView(\"sstwaybillsperparcelunion_tmp2\")"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"CREATE OR REPLACE TEMP VIEW\r\n",
					"sstwaybillsperparcel\r\n",
					"AS\r\n",
					"SELECT DISTINCT\r\n",
					"    c.id as lms_waybillsperparcel_id,\r\n",
					"    a.trackkey as lms_waybillsperparcel_trackkey,\r\n",
					"    a.parcelid as lms_waybillsperparcel_parcelid,\r\n",
					"    a.waybillid as lms_waybillsperparcel_waybillid,\r\n",
					"    a.loadid as lms_waybillsperparcel_loadid,    \r\n",
					"    c.rdate as lms_waybillsperparcel_rdate,\r\n",
					"    c.returnedflag as lms_waybillsperparcel_returnedflag,\r\n",
					"    c.door_userid as lms_waybillsperparcel_dooruserid,\r\n",
					"    c.door_deliverydatetime as lms_waybillsperparcel_doordeliverydate,\r\n",
					"    c.stationid as lms_waybillsperparcel_stationid,\r\n",
					"    c.door_db_reasondetailid as lms_waybillsperparcel_doorreasondetailid,\r\n",
					"    c.door_comment as lms_waybillsperparcel_doorcomment,\r\n",
					"    c.debrief_userid as lms_waybillsperparcel_debriefuserid,\r\n",
					"    c.debrief_deliverydatetime as lms_waybillsperparcel_debriefdeliverydate,\r\n",
					"    c.debrief_comment as lms_waybillsperparcel_debriefcomment,\r\n",
					"    c.debrief_db_reasondetailid as lms_waybillsperparcel_debriefreasondetailid,\r\n",
					"    c.reasonupdates as lms_waybillsperparcel_reasonupdates,\r\n",
					"    c.callprogid as lms_waybillsperparcel_callprogid\r\n",
					"\r\n",
					"    -- c.orv_deliverydatetime as lms_waybillsperparcel_orvdeliverydate,\r\n",
					"    -- c.orv_db_reasondetailid as lms_waybillsperparcel_orvreasondetailid,\r\n",
					"\r\n",
					"\r\n",
					"FROM sstwaybillsperparcelunion_tmp2 a\r\n",
					"-- LEFT JOIN dbowaybillsperparcel c on c.waybillid = a.waybillid and c.parcelid = a.parcelid\r\n",
					"LEFT JOIN dbowaybillsperparcel c on c.id = a.id and a.id is not null\r\n",
					"WHERE  a.rn=1\r\n",
					""
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sstwaybillsperparcel = spark.sql(\"SELECT * FROM sstwaybillsperparcel\")"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# sstwaybillsperparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstwaybillsperparcel.parquet', mode = \"overwrite\")"
				],
				"execution_count": 69
			}
		]
	}
}