{
	"name": "LOAD_Tables",
	"properties": {
		"folder": {
			"name": "DEV/Cost To Serve Notebooks DEV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d0b212bd-bd4e-4b74-952e-2dee3498b01d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# WRITE abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/CTS_Results/\r\n",
					"\r\n",
					"from pyspark.sql import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"MonthToRun = '2023-02-28'\r\n",
					"\r\n",
					"#STOPS\r\n",
					"#parcel_track = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet/\", format='parquet')\r\n",
					"#parcel = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet/\", format='parquet')\r\n",
					"#waybill = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet/\", format='parquet')\r\n",
					"#location = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet/\", format='parquet')\r\n",
					"#dispatch_segment = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdispatchsegment.parquet/\", format='parquet')\r\n",
					"#del_pickup_cust = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet/\", format='parquet')\r\n",
					"#load_parent = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet/\", format='parquet')\r\n",
					"\r\n",
					"#STSAP\r\n",
					"#dim_account = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_Account_Expose.parquet/\", format='parquet')\r\n",
					"#dim_dates = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_DATES.parquet/\", format='parquet')\r\n",
					"#dim_group = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_GROUP_Expose.parquet/\", format='parquet')\r\n",
					"#trans_summary = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/sttransactionssummary.parquet/\", format='parquet')\r\n",
					"\r\n",
					"#CTS Inputs\r\n",
					"#dim_skippedreasoninclude = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/Structured/Dimensions/DIM_SkippedReasonIncludeExclude.parquet/\", format='parquet')\r\n",
					"\r\n",
					"\r\n",
					"#STOPS\r\n",
					"#parcel_track.createOrReplaceTempView(\"parcel_track\")\r\n",
					"#parcel.createOrReplaceTempView(\"parcel\")\r\n",
					"#waybill.createOrReplaceTempView(\"waybill\")\r\n",
					"#location.createOrReplaceTempView(\"location\")\r\n",
					"#dispatch_segment.createOrReplaceTempView(\"dispatch_segment\")\r\n",
					"#del_pickup_cust.createOrReplaceTempView(\"del_pickup_cust\")\r\n",
					"#load_parent.createOrReplaceTempView(\"load_parent\")\r\n",
					"\r\n",
					"#STSAP\r\n",
					"#dim_account.createOrReplaceTempView(\"dim_account\")\r\n",
					"#dim_dates.createOrReplaceTempView(\"dim_dates\")\r\n",
					"#dim_group.createOrReplaceTempView(\"dim_group\")\r\n",
					"#trans_summary.createOrReplaceTempView(\"trans_summary\")\r\n",
					"\r\n",
					"#CTS Inputs\r\n",
					"#dim_skippedreasoninclude.createOrReplaceTempView(\"dim_skippedreasoninclude\")"
				],
				"execution_count": null
			}
		]
	}
}