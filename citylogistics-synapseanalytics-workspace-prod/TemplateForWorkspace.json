{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "citylogistics-synapseanalytics-workspace-prod"
		},
		"AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().ASAEndpoint};Initial Catalog=@{linkedService().ASADataBase}"
		},
		"PostgreSQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'PostgreSQL'",
			"defaultValue": "Host=@{linkedService().ServerName};Port=@{linkedService().Port};Database=@{linkedService().DatabaseName};UID=@{linkedService().UserName};EncryptionMethod=0"
		},
		"PostgreSqlTestServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'PostgreSqlTestServer'",
			"defaultValue": "Host=orvdb.citylogistics.co.za;Port=5432;Database=orv;UID=synapse;EncryptionMethod=0"
		},
		"SQLTestServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQLTestServer'",
			"defaultValue": "Integrated Security=True;Data Source=CCLMSPROD;Initial Catalog=LogidataCC"
		},
		"SqlServer_DataBaseAuth_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer_DataBaseAuth'",
			"defaultValue": "Integrated Security=False;Data Source=@{linkedService().ServerName};Initial Catalog=@{linkedService().DatabaseName};User ID=@{linkedService().UserName}"
		},
		"SqlServer_WindowsAuth_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer_WindowsAuth'",
			"defaultValue": "Integrated Security=True;Data Source=@{linkedService().ServerName};Initial Catalog=@{linkedService().DatabaseName}"
		},
		"citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:citylogistics-synapseanalytics-workspace-prod.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"AzureKeyVaultCity_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://CityLogisticsKeyVault.vault.azure.net/"
		},
		"OnPremFileServerLinkedServer_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "@{linkedService().ServerName}"
		},
		"OnPremFileServerLinkedServer_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "@{linkedService().UserName}"
		},
		"SQLTestServer_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Synapse@citylogistics.co.za"
		},
		"SharePointHTTPLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://',linkedService().BaseUrl, '/', linkedService().SiteURL, '_api/web/GetFileByServerRelativeUrl (''', linkedService().FileName,''')/$value')}"
		},
		"SqlServer_WindowsAuth_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().UserName}"
		},
		"citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net"
		},
		"citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().DataLake}"
		},
		"citylogisticsstoragedevdatalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://citylogisticsstorage.dfs.core.windows.net/"
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_cw_items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "citybranch"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbocitybranch"
					}
				},
				{
					"Source": {
						"TableName": "deporequester"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodeporequester"
					}
				},
				{
					"Source": {
						"TableName": "depot"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodepot"
					}
				},
				{
					"Source": {
						"TableName": "ipaddress"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dboipaddress"
					}
				},
				{
					"Source": {
						"TableName": "maillistaddress"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbomaillistaddress"
					}
				},
				{
					"Source": {
						"TableName": "maillistcontact"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbomaillistcontact"
					}
				},
				{
					"Source": {
						"TableName": "maillistcustomer"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbomaillistcustomer"
					}
				},
				{
					"Source": {
						"TableName": "peoplebasic"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbopeoplebasic"
					}
				},
				{
					"Source": {
						"TableName": "peopledriver"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbopeopledriver"
					}
				},
				{
					"Source": {
						"TableName": "peoplepersonal"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbopeoplepersonal"
					}
				},
				{
					"Source": {
						"TableName": "selist"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dboselist"
					}
				},
				{
					"Source": {
						"TableName": "selistitem"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dboselistitem"
					}
				},
				{
					"Source": {
						"TableName": "vehicleadmin"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehicleadmin"
					}
				},
				{
					"Source": {
						"TableName": "vehiclebasic"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehiclebasic"
					}
				},
				{
					"Source": {
						"TableName": "vehicleequipment"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehicleequipment"
					}
				},
				{
					"Source": {
						"TableName": "vehiclefinance"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehiclefinance"
					}
				},
				{
					"Source": {
						"TableName": "vehiclemovement"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehiclemovement"
					}
				},
				{
					"Source": {
						"TableName": "vehicleoperations"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehicleoperations"
					}
				},
				{
					"Source": {
						"TableName": "vehicletracking"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehicletracking"
					}
				},
				{
					"Source": {
						"TableName": "vehicletype"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovehicletype"
					}
				},
				{
					"Source": {
						"TableName": "wfapproval"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbowfapproval"
					}
				},
				{
					"Source": {
						"TableName": "wfmail"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbowfmail"
					}
				},
				{
					"Source": {
						"TableName": "wftargets"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbowftargets"
					}
				}
			]
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": true
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": false
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_CW_Items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "Bill_AuditRouteRatesR"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_auditrouteratesr"
					}
				},
				{
					"Source": {
						"TableName": "Bill_RouteRate"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_routerate"
					}
				},
				{
					"Source": {
						"TableName": "Driver"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodriver"
					}
				},
				{
					"Source": {
						"TableName": "Location"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbolocation"
					}
				},
				{
					"Source": {
						"TableName": "PNPHUDetail"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbopnphudetail"
					}
				},
				{
					"Source": {
						"TableName": "Vehicle"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbovehicle"
					}
				},
				{
					"Source": {
						"TableName": "DC_Transfer"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodc_transfer"
					}
				},
				{
					"Source": {
						"TableName": "Bill_BillCustGroups"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_billcustgroups"
					}
				},
				{
					"Source": {
						"TableName": "Bill_BillTypesR"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_billtypesr"
					}
				},
				{
					"Source": {
						"TableName": "Bill_BTYPE"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_btype"
					}
				},
				{
					"Source": {
						"TableName": "Bill_CalcTypes"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_calctypes"
					}
				},
				{
					"Source": {
						"TableName": "Bill_CollectStatus"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_collectstatus"
					}
				},
				{
					"Source": {
						"TableName": "Bill_CustomerGroups"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_customergroups"
					}
				},
				{
					"Source": {
						"TableName": "Bill_CustomerGroupTypes"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_customergrouptypes"
					}
				},
				{
					"Source": {
						"TableName": "Bill_CustTypeR"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_custtyper"
					}
				},
				{
					"Source": {
						"TableName": "Bill_DeliverType"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_delivertype"
					}
				},
				{
					"Source": {
						"TableName": "Bill_MasterEcommZones"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_masterecommzones"
					}
				},
				{
					"Source": {
						"TableName": "Bill_MonthsR"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_monthsr"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ParcelPackaging"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_parcelpackaging"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ParcelType"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_parceltype"
					}
				},
				{
					"Source": {
						"TableName": "Bill_Periods"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_periods"
					}
				},
				{
					"Source": {
						"TableName": "Bill_PostalCodesR"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_postalcodesr"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ProductCategory"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_productcategory"
					}
				},
				{
					"Source": {
						"TableName": "Bill_RateCardR"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_ratecardr"
					}
				},
				{
					"Source": {
						"TableName": "Bill_RateGroup"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_rategroup"
					}
				},
				{
					"Source": {
						"TableName": "Bill_RouteType"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_routetype"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ServiceType"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_servicetype"
					}
				},
				{
					"Source": {
						"TableName": "Bill_SurchargeTypes"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_surchargetypes"
					}
				},
				{
					"Source": {
						"TableName": "Bill_UnitOfMeasureR"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_unitofmeasurer"
					}
				},
				{
					"Source": {
						"TableName": "Bill_UOM"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_uom"
					}
				},
				{
					"Source": {
						"TableName": "Bill_WeightCalcType"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_weightcalctype"
					}
				},
				{
					"Source": {
						"TableName": "Bill_Wtype"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_wtype"
					}
				},
				{
					"Source": {
						"TableName": "Bill_Zone"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_zone"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ZoneRoute"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobill_zoneroute"
					}
				},
				{
					"Source": {
						"TableName": "Broutemaster"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbobroutemaster"
					}
				},
				{
					"Source": {
						"TableName": "CountryMaster"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbocountrymaster"
					}
				},
				{
					"Source": {
						"TableName": "courier"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbocourier"
					}
				},
				{
					"Source": {
						"TableName": "CustAcc"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbocustacc"
					}
				},
				{
					"Source": {
						"TableName": "db_CollectStatus"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodb_collectstatus"
					}
				},
				{
					"Source": {
						"TableName": "db_DelayReason"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodb_delayreason"
					}
				},
				{
					"Source": {
						"TableName": "db_DeliveryStatus"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodb_deliverystatus"
					}
				},
				{
					"Source": {
						"TableName": "db_Endorsement"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodb_endorsement"
					}
				},
				{
					"Source": {
						"TableName": "db_InServiceReason"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodb_inservicereason"
					}
				},
				{
					"Source": {
						"TableName": "db_MobileFeedbackReason"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodb_mobilefeedbackreason"
					}
				},
				{
					"Source": {
						"TableName": "db_NotDbReason"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodb_notdbreason"
					}
				},
				{
					"Source": {
						"TableName": "db_ReasonDetail"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodb_reasondetail"
					}
				},
				{
					"Source": {
						"TableName": "db_ReasonGroup"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodb_reasongroup"
					}
				},
				{
					"Source": {
						"TableName": "Dstatus"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbodstatus"
					}
				},
				{
					"Source": {
						"TableName": "RouteRateType"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dborouteratetype"
					}
				},
				{
					"Source": {
						"TableName": "SRoute"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbosroute"
					}
				},
				{
					"Source": {
						"TableName": "SRouteGroup"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbosroutegroup"
					}
				},
				{
					"Source": {
						"TableName": "Stations"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbostations"
					}
				},
				{
					"Source": {
						"TableName": "TrackType"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbotracktype"
					}
				},
				{
					"Source": {
						"TableName": "Users"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbousers"
					}
				},
				{
					"Source": {
						"TableName": "Volumiser"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbovolumiser"
					}
				},
				{
					"Source": {
						"TableName": "WBEndorsement"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbowbendorsement"
					}
				},
				{
					"Source": {
						"TableName": "Zone"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbozone"
					}
				}
			]
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": true
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": false
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_CW_Items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "OITM"
					},
					"Increment": {
						"IncField": "itemcode",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbooitm"
					}
				},
				{
					"Source": {
						"TableName": "OACT"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbooact"
					}
				},
				{
					"Source": {
						"TableName": "OASC"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbooasc"
					}
				},
				{
					"Source": {
						"TableName": "OCRD"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dboocrd"
					}
				},
				{
					"Source": {
						"TableName": "OCTG"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbooctg"
					}
				},
				{
					"Source": {
						"TableName": "OFPR"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dboofpr"
					}
				},
				{
					"Source": {
						"TableName": "OITB"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbooitb"
					}
				},
				{
					"Source": {
						"TableName": "OPRJ"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dbooprj"
					}
				},
				{
					"Source": {
						"TableName": "OUSR"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dboousr"
					}
				},
				{
					"Source": {
						"TableName": "OWHS"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "dboowhs"
					}
				}
			]
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": true
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": true
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_Sharepoint Full Take-on_parameters_CW_Items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "Shared Documents/General/ASA Excel Data Sources/Cost To Serve Mapping Sources"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "Unstructured Data/CTS Mappings"
					}
				}
			]
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_Sharepoint Full Take-on_parameters_SharepointSiteName": {
			"type": "string",
			"defaultValue": "DataWarehouse"
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_cw_items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "costmodel"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publiccostmodel"
					}
				},
				{
					"Source": {
						"TableName": "courier"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publiccourier"
					}
				},
				{
					"Source": {
						"TableName": "depo"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicdepo"
					}
				},
				{
					"Source": {
						"TableName": "device"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicdevice"
					}
				},
				{
					"Source": {
						"TableName": "dispatchcrew"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicdispatchcrew"
					}
				},
				{
					"Source": {
						"TableName": "geofence"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicgeofence"
					}
				},
				{
					"Source": {
						"TableName": "geofence"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicgeofence"
					}
				},
				{
					"Source": {
						"TableName": "geofenceattribute"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicgeofenceattribute"
					}
				},
				{
					"Source": {
						"TableName": "geofenceattribute"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicgeofenceattribute"
					}
				},
				{
					"Source": {
						"TableName": "geopoint"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicgeopoint"
					}
				},
				{
					"Source": {
						"TableName": "geopoint"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicgeopoint"
					}
				},
				{
					"Source": {
						"TableName": "hvcategory"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publichvcategory"
					}
				},
				{
					"Source": {
						"TableName": "hvcategory"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publichvcategory"
					}
				},
				{
					"Source": {
						"TableName": "hvcustomersurvey"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publichvcustomersurvey"
					}
				},
				{
					"Source": {
						"TableName": "hvsla"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publichvsla"
					}
				},
				{
					"Source": {
						"TableName": "hvtag"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publichvtag"
					}
				},
				{
					"Source": {
						"TableName": "hvtype"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publichvtype"
					}
				},
				{
					"Source": {
						"TableName": "lhcustomer"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publiclhcustomer"
					}
				},
				{
					"Source": {
						"TableName": "list"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publiclist"
					}
				},
				{
					"Source": {
						"TableName": "listitem"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publiclistitem"
					}
				},
				{
					"Source": {
						"TableName": "mall"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicmall"
					}
				},
				{
					"Source": {
						"TableName": "manualdebriefreason"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicmanualdebriefreason"
					}
				},
				{
					"Source": {
						"TableName": "orvrole"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicorvrole"
					}
				},
				{
					"Source": {
						"TableName": "orvuserhvtype"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicorvuserhvtype"
					}
				},
				{
					"Source": {
						"TableName": "precheckoption"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicprecheckoption"
					}
				},
				{
					"Source": {
						"TableName": "precheckquestion"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicprecheckquestion"
					}
				},
				{
					"Source": {
						"TableName": "reasons"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicreasons"
					}
				},
				{
					"Source": {
						"TableName": "roletofeature"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicroletofeature"
					}
				},
				{
					"Source": {
						"TableName": "routetocourier"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicroutetocourier"
					}
				},
				{
					"Source": {
						"TableName": "systemfeature"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicsystemfeature"
					}
				},
				{
					"Source": {
						"TableName": "userdepo"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicuserdepo"
					}
				},
				{
					"Source": {
						"TableName": "userdevice"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicuserdevice"
					}
				},
				{
					"Source": {
						"TableName": "userrole"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicuserrole"
					}
				},
				{
					"Source": {
						"TableName": "usertorole"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicusertorole"
					}
				},
				{
					"Source": {
						"TableName": "vanassistant"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicvanassistant"
					}
				},
				{
					"Source": {
						"TableName": "vehicle"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publicvehicle"
					}
				},
				{
					"Source": {
						"TableName": "zoneroute"
					},
					"Increment": {
						"IncField": "0",
						"IdField": "0"
					},
					"destination": {
						"FileName": "publiczoneroute"
					}
				}
			]
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_TakeOnPeriod": {
			"type": "string",
			"defaultValue": " "
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": true
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": false
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_LimitedLoadTopX": {
			"type": "string",
			"defaultValue": " "
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_cw_items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "driverpayitem"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicdriverpayitem"
					}
				}
			]
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_TakeOnPeriod": {
			"type": "string",
			"defaultValue": " "
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": true
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": false
		},
		"Full Take-on PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_LimitedLoadTopX": {
			"type": "string",
			"defaultValue": " "
		},
		"Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_CW_Items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "Bill_ConsignmentR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_consignmentr"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ExceptionR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_exceptionr"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ConsignRouteChargeR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_consignroutecharger"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ConsignSurChargeR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_consignsurcharger"
					}
				},
				{
					"Source": {
						"TableName": "Bill_BillCustomersR"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_billcustomersr"
					}
				},
				{
					"Source": {
						"TableName": "Collect"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbocollect"
					}
				},
				{
					"Source": {
						"TableName": "Consignment"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboconsignment"
					}
				},
				{
					"Source": {
						"TableName": "Customer"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbocustomer"
					}
				},
				{
					"Source": {
						"TableName": "DC_Transfer"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodc_transfer"
					}
				},
				{
					"Source": {
						"TableName": "Driver"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodriver"
					}
				},
				{
					"Source": {
						"TableName": "LeadTime"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtime"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeGroup"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimegroup"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeGroupDC"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimegroupdc"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeSection"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimesection"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeStructure"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimestructure"
					}
				},
				{
					"Source": {
						"TableName": "Loads"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboloads"
					}
				},
				{
					"Source": {
						"TableName": "order"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboorder"
					}
				},
				{
					"Source": {
						"TableName": "Parcel"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboparcel"
					}
				},
				{
					"Source": {
						"TableName": "ParcelDetail"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboparceldetail"
					}
				},
				{
					"Source": {
						"TableName": "ParcelStatus"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboparcelstatus"
					}
				},
				{
					"Source": {
						"TableName": "Track"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbotrack"
					}
				},
				{
					"Source": {
						"TableName": "Vehicle"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbovehicle"
					}
				},
				{
					"Source": {
						"TableName": "Waybill"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbowaybill"
					}
				},
				{
					"Source": {
						"TableName": "WaybillsPerParcel"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbowaybillsperparcel"
					}
				},
				{
					"Source": {
						"TableName": "PLC_LPNRouting"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboplc_lpnrouting"
					}
				},
				{
					"Source": {
						"TableName": "Bill_AuditRouteRatesR"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_auditrouteratesr"
					}
				},
				{
					"Source": {
						"TableName": "Bill_RouteRate"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_routerate"
					}
				},
				{
					"Source": {
						"TableName": "WeekendHoliday"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboweekendholiday"
					}
				},
				{
					"Source": {
						"TableName": "Driver"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodriver"
					}
				},
				{
					"Source": {
						"TableName": "Location"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbolocation"
					}
				},
				{
					"Source": {
						"TableName": "PNPHUDetail"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbopnphudetail"
					}
				},
				{
					"Source": {
						"TableName": "Vehicle"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbovehicle"
					}
				},
				{
					"Source": {
						"TableName": "DC_Transfer"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodc_transfer"
					}
				}
			]
		},
		"Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_TakeOnPeriod": {
			"type": "string",
			"defaultValue": " "
		},
		"Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": false
		},
		"Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": false
		},
		"Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_LimitedLoadTopX": {
			"type": "string",
			"defaultValue": " "
		},
		"Incre PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_CW_Items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "IGE1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboige1"
					}
				},
				{
					"Source": {
						"TableName": "IGN1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboign1"
					}
				},
				{
					"Source": {
						"TableName": "INV1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboinv1"
					}
				},
				{
					"Source": {
						"TableName": "JDT1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbojdt1"
					}
				},
				{
					"Source": {
						"TableName": "MFRHistoryDaily"
					},
					"Increment": {
						"IncField": "changedateto",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbomfrhistorydaily"
					}
				},
				{
					"Source": {
						"TableName": "MRV1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbomrv1"
					}
				},
				{
					"Source": {
						"TableName": "MRV2"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbomrv2"
					}
				},
				{
					"Source": {
						"TableName": "OIGE"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbooige"
					}
				},
				{
					"Source": {
						"TableName": "OIGN"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbooign"
					}
				},
				{
					"Source": {
						"TableName": "OINM"
					},
					"Increment": {
						"IncField": "transnum",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbooinm"
					}
				},
				{
					"Source": {
						"TableName": "OINV"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbooinv"
					}
				},
				{
					"Source": {
						"TableName": "OITW"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbooitw"
					}
				},
				{
					"Source": {
						"TableName": "OJDT"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboojdt"
					}
				},
				{
					"Source": {
						"TableName": "OMRV"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboomrv"
					}
				},
				{
					"Source": {
						"TableName": "OPCH"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboopch"
					}
				},
				{
					"Source": {
						"TableName": "OPDN"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboopdn"
					}
				},
				{
					"Source": {
						"TableName": "OPOR"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboopor"
					}
				},
				{
					"Source": {
						"TableName": "ORIN"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboorin"
					}
				},
				{
					"Source": {
						"TableName": "ORPC"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboorpc"
					}
				},
				{
					"Source": {
						"TableName": "ORPD"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboorpd"
					}
				},
				{
					"Source": {
						"TableName": "PCH1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbopch1"
					}
				},
				{
					"Source": {
						"TableName": "PDN1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbopdn1"
					}
				},
				{
					"Source": {
						"TableName": "POR1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbopor1"
					}
				},
				{
					"Source": {
						"TableName": "RIN1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dborin1"
					}
				},
				{
					"Source": {
						"TableName": "RPC1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dborpc1"
					}
				},
				{
					"Source": {
						"TableName": "RPD1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dborpd1"
					}
				}
			]
		},
		"Incre PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_TakeOnPeriod": {
			"type": "string",
			"defaultValue": " "
		},
		"Incre PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": true
		},
		"Incre PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": true
		},
		"Incre PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_LimitedLoadTopX": {
			"type": "string",
			"defaultValue": " "
		},
		"Incre PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_cw_items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "chatmsg"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicchatmsg"
					}
				},
				{
					"Source": {
						"TableName": "claim"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicclaim"
					}
				},
				{
					"Source": {
						"TableName": "customer"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publiccustomer"
					}
				},
				{
					"Source": {
						"TableName": "customeraccess"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publiccustomeraccess"
					}
				},
				{
					"Source": {
						"TableName": "customeraccesschild"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publiccustomeraccesschild"
					}
				},
				{
					"Source": {
						"TableName": "cutomerdeliverytracking"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publiccutomerdeliverytracking"
					}
				},
				{
					"Source": {
						"TableName": "delivery"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicdelivery"
					}
				},
				{
					"Source": {
						"TableName": "dispatch"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicdispatch"
					}
				},
				{
					"Source": {
						"TableName": "dispatchactionlog"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicdispatchactionlog"
					}
				},
				{
					"Source": {
						"TableName": "dispatchdevice"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicdispatchdevice"
					}
				},
				{
					"Source": {
						"TableName": "dispatchsegment"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicdispatchsegment"
					}
				},
				{
					"Source": {
						"TableName": "dispatchstart"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicdispatchstart"
					}
				},
				{
					"Source": {
						"TableName": "draftcollection"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicdraftcollection"
					}
				},
				{
					"Source": {
						"TableName": "emaildeliverystatus"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicemaildeliverystatus"
					}
				},
				{
					"Source": {
						"TableName": "event"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicevent"
					}
				},
				{
					"Source": {
						"TableName": "expense"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicexpense"
					}
				},
				{
					"Source": {
						"TableName": "hvcomment"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publichvcomment"
					}
				},
				{
					"Source": {
						"TableName": "hvcustomersurvey"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publichvcustomersurvey"
					}
				},
				{
					"Source": {
						"TableName": "hvlog"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publichvlog"
					}
				},
				{
					"Source": {
						"TableName": "hvnotification"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publichvnotification"
					}
				},
				{
					"Source": {
						"TableName": "hvticket"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publichvticket"
					}
				},
				{
					"Source": {
						"TableName": "lhchangerequest"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publiclhchangerequest"
					}
				},
				{
					"Source": {
						"TableName": "lhdelivery"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publiclhdelivery"
					}
				},
				{
					"Source": {
						"TableName": "lhdispatchsegment"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publiclhdispatchsegment"
					}
				},
				{
					"Source": {
						"TableName": "lhtmsdata"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publiclhtmsdata"
					}
				},
				{
					"Source": {
						"TableName": "orvconnect"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicorvconnect"
					}
				},
				{
					"Source": {
						"TableName": "orvconnectemailampm"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicorvconnectemailampm"
					}
				},
				{
					"Source": {
						"TableName": "orvconnectnotes"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicorvconnectnotes"
					}
				},
				{
					"Source": {
						"TableName": "orvconnectparcel"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicorvconnectparcel"
					}
				},
				{
					"Source": {
						"TableName": "parcel"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicparcel"
					}
				},
				{
					"Source": {
						"TableName": "pod"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicpod"
					}
				},
				{
					"Source": {
						"TableName": "precheckanswer"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicprecheckanswer"
					}
				},
				{
					"Source": {
						"TableName": "supervisorticket"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicsupervisorticket"
					}
				},
				{
					"Source": {
						"TableName": "tmstrailerslog"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publictmstrailerslog"
					}
				},
				{
					"Source": {
						"TableName": "whatsappmsg"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicwhatsappmsg"
					}
				},
				{
					"Source": {
						"TableName": "reportdistotmgntdispatchdt"
					},
					"Increment": {
						"IncField": "dispatchid",
						"IdField": "dispatchid"
					},
					"destination": {
						"FileName": "publicreportdistotmgntdispatchdt"
					}
				},
				{
					"Source": {
						"TableName": "orvuser"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicorvuser"
					}
				}
			]
		},
		"Incre PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_TakeOnPeriod": {
			"type": "string",
			"defaultValue": " "
		},
		"Incre PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": false
		},
		"Incre PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": false
		},
		"Incre PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_LimitedLoadTopX": {
			"type": "string",
			"defaultValue": " "
		},
		"Incre PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_cw_items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "address"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicaddress"
					}
				},
				{
					"Source": {
						"TableName": "booking"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicbooking"
					}
				},
				{
					"Source": {
						"TableName": "customer"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publiccustomer"
					}
				},
				{
					"Source": {
						"TableName": "driverpay"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicdriverpay"
					}
				},
				{
					"Source": {
						"TableName": "financedata"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicfinancedata"
					}
				},
				{
					"Source": {
						"TableName": "fuelcard"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicfuelcard"
					}
				},
				{
					"Source": {
						"TableName": "fuelzone"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicfuelzone"
					}
				},
				{
					"Source": {
						"TableName": "fuelzonehistory"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicfuelzonehistory"
					}
				},
				{
					"Source": {
						"TableName": "instruction"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicinstruction"
					}
				},
				{
					"Source": {
						"TableName": "invoice"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicinvoice"
					}
				},
				{
					"Source": {
						"TableName": "invoiceitem"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicinvoiceitem"
					}
				},
				{
					"Source": {
						"TableName": "lmsdata"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publiclmsdata"
					}
				},
				{
					"Source": {
						"TableName": "nonbooking"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicnonbooking"
					}
				},
				{
					"Source": {
						"TableName": "ratecomponent"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicratecomponent"
					}
				},
				{
					"Source": {
						"TableName": "rateprofile"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicrateprofile"
					}
				},
				{
					"Source": {
						"TableName": "route"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicroute"
					}
				},
				{
					"Source": {
						"TableName": "thirdparty"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicthirdparty"
					}
				},
				{
					"Source": {
						"TableName": "track"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publictrack"
					}
				},
				{
					"Source": {
						"TableName": "trip"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publictrip"
					}
				},
				{
					"Source": {
						"TableName": "triptrackinghistory"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publictriptrackinghistory"
					}
				},
				{
					"Source": {
						"TableName": "driverpayitem"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicdriverpayitem"
					}
				},
				{
					"Source": {
						"TableName": "selist"
					},
					"Increment": {
						"IncField": "moddate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicselist"
					}
				},
				{
					"Source": {
						"TableName": "selistitem"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "publicselistitem"
					}
				}
			]
		},
		"Incre PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_TakeOnPeriod": {
			"type": "string",
			"defaultValue": " "
		},
		"Incre PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": false
		},
		"Incre PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": false
		},
		"Incre PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_LimitedLoadTopX": {
			"type": "string",
			"defaultValue": " "
		},
		"Rolling PROD_Weekly Trigger_properties_LMS LOAD PROD_parameters_CW_Items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "Bill_ConsignmentR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_consignmentr"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ExceptionR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_exceptionr"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ConsignRouteChargeR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_consignroutecharger"
					}
				},
				{
					"Source": {
						"TableName": "Bill_ConsignSurChargeR"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_consignsurcharger"
					}
				},
				{
					"Source": {
						"TableName": "Bill_BillCustomersR"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbobill_billcustomersr"
					}
				},
				{
					"Source": {
						"TableName": "Collect"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbocollect"
					}
				},
				{
					"Source": {
						"TableName": "Consignment"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboconsignment"
					}
				},
				{
					"Source": {
						"TableName": "Customer"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbocustomer"
					}
				},
				{
					"Source": {
						"TableName": "DC_Transfer"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodc_transfer"
					}
				},
				{
					"Source": {
						"TableName": "Driver"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbodriver"
					}
				},
				{
					"Source": {
						"TableName": "LeadTime"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtime"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeGroup"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimegroup"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeGroupDC"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimegroupdc"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeSection"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimesection"
					}
				},
				{
					"Source": {
						"TableName": "LeadTimeStructure"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboleadtimestructure"
					}
				},
				{
					"Source": {
						"TableName": "Loads"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboloads"
					}
				},
				{
					"Source": {
						"TableName": "order"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboorder"
					}
				},
				{
					"Source": {
						"TableName": "Parcel"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboparcel"
					}
				},
				{
					"Source": {
						"TableName": "ParcelDetail"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboparceldetail"
					}
				},
				{
					"Source": {
						"TableName": "ParcelStatus"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboparcelstatus"
					}
				},
				{
					"Source": {
						"TableName": "Track"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbotrack"
					}
				},
				{
					"Source": {
						"TableName": "Vehicle"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbovehicle"
					}
				},
				{
					"Source": {
						"TableName": "Waybill"
					},
					"Increment": {
						"IncField": "lastupdate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbowaybill"
					}
				},
				{
					"Source": {
						"TableName": "WaybillsPerParcel"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbowaybillsperparcel"
					}
				},
				{
					"Source": {
						"TableName": "PLC_LPNRouting"
					},
					"Increment": {
						"IncField": "id",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboplc_lpnrouting"
					}
				}
			]
		},
		"Rolling PROD_Weekly Trigger_properties_LMS LOAD PROD_parameters_TakeOnPeriod": {
			"type": "string",
			"defaultValue": "SELECT DATEADD(DAY,1,EOMONTH(DATEADD(MONTH,-3,GETDATE()),-1))"
		},
		"Rolling PROD_Weekly Trigger_properties_LMS LOAD PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": false
		},
		"Rolling PROD_Weekly Trigger_properties_LMS LOAD PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": false
		},
		"Rolling PROD_Weekly Trigger_properties_SAP LOAD PROD_parameters_CW_Items": {
			"type": "array",
			"defaultValue": [
				{
					"Source": {
						"TableName": "IGE1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboige1"
					}
				},
				{
					"Source": {
						"TableName": "IGN1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboign1"
					}
				},
				{
					"Source": {
						"TableName": "INV1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboinv1"
					}
				},
				{
					"Source": {
						"TableName": "JDT1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbojdt1"
					}
				},
				{
					"Source": {
						"TableName": "MFRHistoryDaily"
					},
					"Increment": {
						"IncField": "changedateto",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbomfrhistorydaily"
					}
				},
				{
					"Source": {
						"TableName": "MRV1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbomrv1"
					}
				},
				{
					"Source": {
						"TableName": "MRV2"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbomrv2"
					}
				},
				{
					"Source": {
						"TableName": "OIGE"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbooige"
					}
				},
				{
					"Source": {
						"TableName": "OIGN"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbooign"
					}
				},
				{
					"Source": {
						"TableName": "OINM"
					},
					"Increment": {
						"IncField": "transnum",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbooinm"
					}
				},
				{
					"Source": {
						"TableName": "OINV"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbooinv"
					}
				},
				{
					"Source": {
						"TableName": "OITW"
					},
					"Increment": {
						"IncField": "updatedate",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbooitw"
					}
				},
				{
					"Source": {
						"TableName": "OJDT"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboojdt"
					}
				},
				{
					"Source": {
						"TableName": "OMRV"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboomrv"
					}
				},
				{
					"Source": {
						"TableName": "OPCH"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboopch"
					}
				},
				{
					"Source": {
						"TableName": "OPDN"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboopdn"
					}
				},
				{
					"Source": {
						"TableName": "OPOR"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboopor"
					}
				},
				{
					"Source": {
						"TableName": "ORIN"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboorin"
					}
				},
				{
					"Source": {
						"TableName": "ORPC"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboorpc"
					}
				},
				{
					"Source": {
						"TableName": "ORPD"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dboorpd"
					}
				},
				{
					"Source": {
						"TableName": "PCH1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbopch1"
					}
				},
				{
					"Source": {
						"TableName": "PDN1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbopdn1"
					}
				},
				{
					"Source": {
						"TableName": "POR1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dbopor1"
					}
				},
				{
					"Source": {
						"TableName": "RIN1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dborin1"
					}
				},
				{
					"Source": {
						"TableName": "RPC1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dborpc1"
					}
				},
				{
					"Source": {
						"TableName": "RPD1"
					},
					"Increment": {
						"IncField": "u_doctime",
						"IdField": "id"
					},
					"destination": {
						"FileName": "dborpd1"
					}
				}
			]
		},
		"Rolling PROD_Weekly Trigger_properties_SAP LOAD PROD_parameters_TakeOnPeriod": {
			"type": "string",
			"defaultValue": "SELECT DATEADD(DAY,1,EOMONTH(DATEADD(MONTH,-3,GETDATE()),-1))"
		},
		"Rolling PROD_Weekly Trigger_properties_SAP LOAD PROD_parameters_Full_Load": {
			"type": "bool",
			"defaultValue": false
		},
		"Rolling PROD_Weekly Trigger_properties_SAP LOAD PROD_parameters_ColumnsNamesBlankSpaces": {
			"type": "bool",
			"defaultValue": true
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Avis Full Take-on')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Avis data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "OnPremSambaBinary",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@variables('ServerName')",
										"type": "Expression"
									},
									"UserName": {
										"value": "@variables('UserName')",
										"type": "Expression"
									},
									"SecretName": {
										"value": "@variables('SecretName')",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@variables('SourceDirectoryName')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('FileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DataLakeBinary",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@variables('ContainerName')",
										"type": "Expression"
									},
									"DestFolderName": {
										"value": "@variables('DestFolderName')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@variables('FileName')",
										"type": "Expression"
									},
									"DataLake": {
										"value": "@variables('DataLake')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"ServerName": {
						"type": "String",
						"defaultValue": "\\\\10.1.8.34"
					},
					"SourceDirectoryName": {
						"type": "String",
						"defaultValue": "Avis"
					},
					"FileName": {
						"type": "String"
					},
					"UserName": {
						"type": "String",
						"defaultValue": "Synapse@citylogistics.co.za"
					},
					"SecretName": {
						"type": "String",
						"defaultValue": "OnPremSambaSecret"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net/"
					},
					"DestFolderName": {
						"type": "String",
						"defaultValue": "\\Unstructured Data\\Avis_Files"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/SharePoint"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-05T14:54:15Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/OnPremSambaBinary')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeBinary')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CLMasterData Full Take-on_PROD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Iterate Data",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.CW_Items",
								"type": "Expression"
							},
							"batchCount": 2,
							"activities": [
								{
									"name": "If ColumnsNamesBlankSpacesOrLimitedLoad",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(pipeline().parameters.ColumnsNamesBlankSpaces,greater(length(pipeline().parameters.LimitedLoadTopX),1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "SelectStatementBuilder",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(' \nDECLARE @s VARCHAR(MAX)\nDECLARE @tablename VARCHAR(MAX) = ''', item().Source.TableName,'''\nSELECT @s = ISNULL(@s + '', '','''') + ''['' + c.name + '']'' + '' as [''+replace(c.name,'' '',''_'')+''] ''\nFROM sys.all_columns c \njoin sys.objects t ON c.object_id = t.object_id \nWHERE t.name =  @tablename \nSELECT ''SELECT ', if(greater(length(pipeline().parameters.LimitedLoadTopX),0),concat('TOP ', pipeline().parameters.LimitedLoadTopX),''), ' '' + @s + '' FROM ['' +  @tablename + '']', if(greater(length(item().Increment.IdField),1),concat(' ORDER BY ', item().Increment.IdField, ' DESC'),''),''' as Query')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "SqlServerDataSet",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@variables('ServerName')",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@variables('DatabaseName')",
																"type": "Expression"
															},
															"UserName": {
																"value": "@variables('UserName')",
																"type": "Expression"
															},
															"CW_SchemaName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"SecretName": {
																"value": "@variables('SecretName')",
																"type": "Expression"
															},
															"CW_TableName": {
																"value": "@item().Source.TableName",
																"type": "Expression"
															}
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If FullLoad",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.Full_Load",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Lookup Last Max Field",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('SELECT MAX(',item().Increment.IncField,')  as Field \n FROM\n    OPENROWSET(\n        BULK ','''',variables('DataLake'),variables('ContainerName'),'/',variables('FolderName'),'/',item().destination.FileName,'.parquet','''',\n        ',FORMAT = ','''PARQUET''','\n    ) AS [result]')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSqlConnection",
														"type": "DatasetReference",
														"parameters": {
															"ASAEndpoint": {
																"value": "@variables('ASAEndpoint')",
																"type": "Expression"
															},
															"ASADataBase": {
																"value": "@variables('ASADataBase')",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "Remove Old Data Incremental Data_SingleFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Lookup Last Max Field",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Remove Old Data Data_Folder",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_SingleFile",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "Remove Old Data Data_SingleFile",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "WaitBecause of Error",
												"type": "Wait",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_Folder",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "If ColumnsNamesBlankSpacesOrLimitedLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(pipeline().parameters.Full_Load,'FullTakeOn'\n   ,if(and(equals(item().Increment.IncField,item().Increment.IdField),lessOrEquals(length(pipeline().parameters.TakeOnPeriod),1)),'IdLoad'\n      ,'DateLoad'\n   )\n)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DateLoad",
												"activities": [
													{
														"name": "Partition DF",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded",
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_DateLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Copy New incremental data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(or(pipeline().parameters.ColumnsNamesBlankSpaces, greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n        activity('SelectStatementBuilder').output.firstRow.Query,concat('SELECT * FROM [', item().Source.TableName,']')\n        )\n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,concat('''',activity('Lookup Last Max Field').output.firstRow.Field,'''')\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete The Left File_DateLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_DateLoad_Folder",
																"dependencyConditions": [
																	"Failed",
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "UnionSparkJob",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy New incremental data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "UnionSparkJob_DateLoad",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 4
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											},
											{
												"value": "IdLoad",
												"activities": [
													{
														"name": "Copy New incremental data_IDLoad",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(or(pipeline().parameters.ColumnsNamesBlankSpaces,    greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n        activity('SelectStatementBuilder').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,activity('Lookup Last Max Field').output.firstRow.Field\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Data flow Union_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy New incremental data_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "IncrementalLoadID DataFlow",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_IdField": {
																		"value": "'@{item().Increment.IdField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source1": {},
																	"source2": {},
																	"WritetoDataLake": {}
																},
																"linkedServiceParameters": {
																	"source1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"WritetoDataLake": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Partition DF_IDLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_SingleFile",
																"dependencyConditions": [
																	"Succeeded",
																	"Failed"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{concat(variables('FolderName'),'_Incremental_Data')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete The Left File_IDLoad_Folder",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Data flow Union_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"wildcardFileName": {
																	"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
																	"type": "Expression"
																},
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete the Temp File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Left File_IDLoad_SingleFile",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Delete The Left File_IDLoad_Folder",
																"dependencyConditions": [
																	"Failed",
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "FullTakeOn",
												"activities": [
													{
														"name": "Copy_Data_Full_Take_On",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@if(or(pipeline().parameters.ColumnsNamesBlankSpaces, greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n    activity('SelectStatementBuilder').output.firstRow.Query,\n    concat('SELECT * FROM [', item().Source.TableName,']')\n    )",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Partition DF_FullLoad",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "Copy_Data_Full_Take_On",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "Partitioning DF",
																"type": "DataFlowReference",
																"parameters": {
																	"cw_FileName": {
																		"value": "'@{concat(item().Destination.FileName,'.parquet')}'",
																		"type": "Expression"
																	},
																	"cw_FolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_IncFolderName": {
																		"value": "'@{variables('FolderName')}'",
																		"type": "Expression"
																	},
																	"cw_incField": {
																		"value": "'@{item().Increment.IncField}'",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "'@{variables('ContainerName')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"source2": {},
																	"sink1": {}
																},
																"linkedServiceParameters": {
																	"source2": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	},
																	"sink1": {
																		"linkedService": {
																			"DataLake": {
																				"value": "@variables('DataLake')",
																				"type": "Expression"
																			}
																		}
																	}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "DataFlowIR",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "Delete the Temp File_FullLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Partition DF_FullLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "ERROR",
													"errorCode": "500"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": []
					},
					"TakeOnPeriod": {
						"type": "string",
						"defaultValue": " "
					},
					"Full_Load": {
						"type": "bool",
						"defaultValue": false
					},
					"ColumnsNamesBlankSpaces": {
						"type": "bool",
						"defaultValue": false
					},
					"LimitedLoadTopX": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"FolderName": {
						"type": "String",
						"defaultValue": "Unstructured Data/CLMasterData"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net/"
					},
					"ServerName": {
						"type": "String",
						"defaultValue": "CCLMSPROD"
					},
					"DataBaseName": {
						"type": "String",
						"defaultValue": "CLMasterData"
					},
					"UserName": {
						"type": "String",
						"defaultValue": "Synapse@citylogistics.co.za"
					},
					"SecretName": {
						"type": "String",
						"defaultValue": "CLMastSecret"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "public"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"ASAEndpoint": {
						"type": "String",
						"defaultValue": "citylogistics-synapseanalytics-workspace-prod-ondemand.sql.azuresynapse.net"
					},
					"ASADataBase": {
						"type": "String",
						"defaultValue": "master"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/CLMasterData"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-22T08:33:31Z",
				"type": "Microsoft.Synapse/workspaces/pipelines"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SqlServerDataSet')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlConnection')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeParquet')]",
				"[concat(variables('workspaceId'), '/dataflows/Partitioning DF')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/DataFlowIR')]",
				"[concat(variables('workspaceId'), '/notebooks/UnionSparkJob_DateLoad')]",
				"[concat(variables('workspaceId'), '/bigDataPools/PRDSparkPool')]",
				"[concat(variables('workspaceId'), '/dataflows/IncrementalLoadID DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_T1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_wdh",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "synapse/Unstructured Data/Onroute/"
							},
							{
								"name": "Destination",
								"value": "synapse/Unstructured Data/Onroute/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_wdh",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_wdh",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_wdh')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_wdh')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LMS LOAD PROD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Iterate Data",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.CW_Items",
								"type": "Expression"
							},
							"batchCount": 2,
							"activities": [
								{
									"name": "If ColumnsNamesBlankSpacesOrLimitedLoad",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(pipeline().parameters.ColumnsNamesBlankSpaces,greater(length(pipeline().parameters.LimitedLoadTopX),1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "SelectStatementBuilder",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(' \nDECLARE @s VARCHAR(MAX)\nDECLARE @tablename VARCHAR(MAX) = ''', item().Source.TableName,'''\nSELECT @s = ISNULL(@s + '', '','''') + ''['' + c.name + '']'' + '' as [''+replace(c.name,'' '',''_'')+''] ''\nFROM sys.all_columns c \njoin sys.objects t ON c.object_id = t.object_id \nWHERE t.name =  @tablename \nSELECT ''SELECT ', if(greater(length(pipeline().parameters.LimitedLoadTopX),1),concat('TOP ', pipeline().parameters.LimitedLoadTopX),''), ' '' + @s + '' FROM ['' +  @tablename + '']', if(and(greater(length(item().Increment.IdField),1),greater(length(pipeline().parameters.LimitedLoadTopX),1)),concat(' ORDER BY ', item().Increment.IdField, ' DESC'),''),''' as Query')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "SqlServerDataSet",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@variables('ServerName')",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@variables('DatabaseName')",
																"type": "Expression"
															},
															"UserName": {
																"value": "@variables('UserName')",
																"type": "Expression"
															},
															"CW_SchemaName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"SecretName": {
																"value": "@variables('SecretName')",
																"type": "Expression"
															},
															"CW_TableName": {
																"value": "@item().Source.TableName",
																"type": "Expression"
															}
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If FullLoad",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.Full_Load",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Lookup Last Max Field",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('SELECT MAX(',item().Increment.IncField,')  as Field \n FROM\n    OPENROWSET(\n        BULK ','''',variables('DataLake'),variables('ContainerName'),'/',variables('FolderName'),'/',item().destination.FileName,'.parquet','''',\n        ',FORMAT = ','''PARQUET''','\n    ) AS [result]')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSqlConnection",
														"type": "DatasetReference",
														"parameters": {
															"ASAEndpoint": {
																"value": "@variables('ASAEndpoint')",
																"type": "Expression"
															},
															"ASADataBase": {
																"value": "@variables('ASADataBase')",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "Remove Old Data Incremental Data_SingleFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Lookup Last Max Field",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Remove Old Data Data_Folder",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_SingleFile",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "Remove Old Data Data_SingleFile",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "WaitBecause of Error",
												"type": "Wait",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_Folder",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "If ColumnsNamesBlankSpacesOrLimitedLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(pipeline().parameters.Full_Load,'FullTakeOn'\n   ,if(and(equals(item().Increment.IncField,item().Increment.IdField),lessOrEquals(length(pipeline().parameters.TakeOnPeriod),1)),'IdLoad'\n      ,'DateLoad'\n   )\n)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DateLoad",
												"activities": [
													{
														"name": "Delete the Temp File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_DateLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_DateLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Copy New incremental data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(or(pipeline().parameters.ColumnsNamesBlankSpaces, greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n        activity('SelectStatementBuilder').output.firstRow.Query,concat('SELECT * FROM [', item().Source.TableName,']')\n        )\n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,concat('''',activity('Lookup Last Max Field').output.firstRow.Field,'''')\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "UnionSparkJob_DateLoad",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy New incremental data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "UnionSparkJob_DateLoad",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.enabled": true,
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 2
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											},
											{
												"value": "IdLoad",
												"activities": [
													{
														"name": "Copy New incremental data_IDLoad",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(or(pipeline().parameters.ColumnsNamesBlankSpaces,    greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n        activity('SelectStatementBuilder').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,activity('Lookup Last Max Field').output.firstRow.Field\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete the Temp File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "UnionSparkJob_IDLoad",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy New incremental data_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "UnionSparkJob_IDLoad",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.enabled": true,
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 2
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											},
											{
												"value": "FullTakeOn",
												"activities": [
													{
														"name": "Copy_Data_Full_Take_On",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@if(or(pipeline().parameters.ColumnsNamesBlankSpaces, greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n    activity('SelectStatementBuilder').output.firstRow.Query,\n    concat('SELECT * FROM [', item().Source.TableName,']')\n    )",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete the Temp File_FullLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "PartitionSparkJob",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "PartitionSparkJob",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy_Data_Full_Take_On",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "PartitionSparkJob",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.enabled": true,
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 2
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "ERROR",
													"errorCode": "500"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"CW_Items": {
						"type": "Array",
						"defaultValue": []
					},
					"TakeOnPeriod": {
						"type": "string",
						"defaultValue": " "
					},
					"Full_Load": {
						"type": "bool",
						"defaultValue": false
					},
					"ColumnsNamesBlankSpaces": {
						"type": "bool",
						"defaultValue": false
					},
					"LimitedLoadTopX": {
						"type": "string",
						"defaultValue": " "
					}
				},
				"variables": {
					"FolderName": {
						"type": "String",
						"defaultValue": "Unstructured Data/LMS"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net/"
					},
					"ServerName": {
						"type": "String",
						"defaultValue": "CCLMSPROD"
					},
					"DatabaseName": {
						"type": "String",
						"defaultValue": "LogidataCC"
					},
					"UserName": {
						"type": "String",
						"defaultValue": "Synapse@citylogistics.co.za"
					},
					"SecretName": {
						"type": "String",
						"defaultValue": "LMSSecret"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "dbo"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"ASAEndpoint": {
						"type": "String",
						"defaultValue": "citylogistics-synapseanalytics-workspace-prod-ondemand.sql.azuresynapse.net"
					},
					"ASADataBase": {
						"type": "String",
						"defaultValue": "master"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/LMS"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-04T06:38:01Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SqlServerDataSet')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlConnection')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeParquet')]",
				"[concat(variables('workspaceId'), '/notebooks/UnionSparkJob_DateLoad')]",
				"[concat(variables('workspaceId'), '/bigDataPools/PRDSparkPool')]",
				"[concat(variables('workspaceId'), '/notebooks/UnionSparkJob_IDLoad')]",
				"[concat(variables('workspaceId'), '/notebooks/PartitionSparkJob')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ORV LOAD PROD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Iterate Data",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.CW_Items",
								"type": "Expression"
							},
							"batchCount": 2,
							"activities": [
								{
									"name": "If ColumnsNamesBlankSpacesOrLimitedLoad",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(pipeline().parameters.ColumnsNamesBlankSpaces,greater(length(pipeline().parameters.LimitedLoadTopX),1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "SelectStatementBuilder",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "PostgreSqlSource",
														"query": {
															"value": "@concat(' \nDECLARE @s VARCHAR(MAX)\nDECLARE @tablename VARCHAR(MAX) = ''', item().Source.TableName,'''\nSELECT @s = ISNULL(@s + '', '','''') + ''['' + c.name + '']'' + '' as ['' + replace(c.name,'' '',''_'') + ''] ''\nFROM information_schema.columns c \nWHERE table_name = @tablename\nSELECT ''SELECT '' + @s + '' FROM ['' +  @tablename + '']', if(greater(length(item().Increment.IdField),1),concat(' ORDER BY ', item().Increment.IdField, ' DESC'),''), if(greater(length(pipeline().parameters.LimitedLoadTopX),1),concat(' LIMIT ', pipeline().parameters.LimitedLoadTopX),''),''' as Query')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "PostgresSQL_Dataset",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@variables('ServerName')",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@variables('DatabaseName')",
																"type": "Expression"
															},
															"UserName": {
																"value": "@variables('UserName')",
																"type": "Expression"
															},
															"CW_SchemaName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"SecretName": {
																"value": "@variables('SecretName')",
																"type": "Expression"
															},
															"CW_TableName": {
																"value": "@item().Source.TableName",
																"type": "Expression"
															},
															"Port": {
																"value": "@variables('Port')",
																"type": "Expression"
															}
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If FullLoad",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.Full_Load",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Lookup Last Max Field",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('SELECT MAX(',item().Increment.IncField,')  as Field \n FROM\n    OPENROWSET(\n        BULK ','''',variables('DataLake'),variables('ContainerName'),'/',variables('FolderName'),'/',item().destination.FileName,'.parquet','''',\n        ',FORMAT = ','''PARQUET''','\n    ) AS [result]')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSqlConnection",
														"type": "DatasetReference",
														"parameters": {
															"ASAEndpoint": {
																"value": "@variables('ASAEndpoint')",
																"type": "Expression"
															},
															"ASADataBase": {
																"value": "@variables('ASADataBase')",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "Remove Old Data Incremental Data_SingleFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Lookup Last Max Field",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Remove Old Data Data_Folder",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_SingleFile",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "Remove Old Data Data_SingleFile",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "WaitBecause of Error",
												"type": "Wait",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_Folder",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "If ColumnsNamesBlankSpacesOrLimitedLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(pipeline().parameters.Full_Load,'FullTakeOn'\n   ,if(and(equals(item().Increment.IncField,item().Increment.IdField),lessOrEquals(length(pipeline().parameters.TakeOnPeriod),1)),'IdLoad'\n      ,'DateLoad'\n   )\n)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DateLoad",
												"activities": [
													{
														"name": "Delete the Temp File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_DateLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_DateLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Copy New incremental data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "PostgreSqlSource",
																"query": {
																	"value": "@concat(if(or(pipeline().parameters.ColumnsNamesBlankSpaces, greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n        activity('SelectStatementBuilder').output.firstRow.Query,concat('SELECT * FROM ', item().Source.TableName)\n        )\n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,concat('''',activity('Lookup Last Max Field').output.firstRow.Field,'''')\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "PostgresSQL_Dataset",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	},
																	"Port": {
																		"value": "@variables('Port')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "UnionSparkJob_DateLoad",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy New incremental data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "UnionSparkJob_DateLoad",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.enabled": true,
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 2
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											},
											{
												"value": "IdLoad",
												"activities": [
													{
														"name": "Copy New incremental data_IDLoad",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "PostgreSqlSource",
																"query": {
																	"value": "@concat(if(or(pipeline().parameters.ColumnsNamesBlankSpaces,    greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n        activity('SelectStatementBuilder').output.firstRow.Query, concat('SELECT * FROM ', item().Source.TableName)\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,activity('Lookup Last Max Field').output.firstRow.Field\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "PostgresSQL_Dataset",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	},
																	"Port": {
																		"value": "@variables('Port')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete the Temp File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "UnionSparkJob_IDLoad",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy New incremental data_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "UnionSparkJob_IDLoad",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.enabled": true,
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 2
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											},
											{
												"value": "FullTakeOn",
												"activities": [
													{
														"name": "Copy_Data_Full_Take_On",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "PostgreSqlSource",
																"query": {
																	"value": "@if(or(pipeline().parameters.ColumnsNamesBlankSpaces, greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n    activity('SelectStatementBuilder').output.firstRow.Query,\n    concat('SELECT * FROM ', item().Source.TableName)\n    )",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "PostgresSQL_Dataset",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	},
																	"Port": {
																		"value": "@variables('Port')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete the Temp File_FullLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "PartitionSparkJob",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "PartitionSparkJob",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy_Data_Full_Take_On",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "PartitionSparkJob",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.enabled": true,
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 2
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "ERROR",
													"errorCode": "500"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": []
					},
					"TakeOnPeriod": {
						"type": "string",
						"defaultValue": " "
					},
					"Full_Load": {
						"type": "bool",
						"defaultValue": false
					},
					"ColumnsNamesBlankSpaces": {
						"type": "bool",
						"defaultValue": false
					},
					"LimitedLoadTopX": {
						"type": "string",
						"defaultValue": " "
					}
				},
				"variables": {
					"FolderName": {
						"type": "String",
						"defaultValue": "Unstructured Data/Onroute"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net/"
					},
					"ServerName": {
						"type": "String",
						"defaultValue": "orvdb.citylogistics.co.za"
					},
					"DatabaseName": {
						"type": "String",
						"defaultValue": "orv"
					},
					"UserName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"SecretName": {
						"type": "String",
						"defaultValue": "ORVSecret"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "public"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"ASAEndpoint": {
						"type": "String",
						"defaultValue": "citylogistics-synapseanalytics-workspace-prod-ondemand.sql.azuresynapse.net"
					},
					"ASADataBase": {
						"type": "String",
						"defaultValue": "master"
					},
					"Integration Runtime": {
						"type": "String",
						"defaultValue": "DataFlowIR"
					},
					"Port": {
						"type": "String",
						"defaultValue": "5432"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/ORV"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-04T06:22:12Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/PostgresSQL_Dataset')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlConnection')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeParquet')]",
				"[concat(variables('workspaceId'), '/notebooks/UnionSparkJob_DateLoad')]",
				"[concat(variables('workspaceId'), '/bigDataPools/PRDSparkPool')]",
				"[concat(variables('workspaceId'), '/notebooks/UnionSparkJob_IDLoad')]",
				"[concat(variables('workspaceId'), '/notebooks/PartitionSparkJob')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RunOrder')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "SST_RunOrder",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "DeDupe BillConsignmentR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "SST_RunOrder",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "PRDSparkPool",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.enabled": true,
								"spark.dynamicAllocation.minExecutors": 4,
								"spark.dynamicAllocation.maxExecutors": 4
							},
							"driverSize": "Medium",
							"numExecutors": 4
						}
					},
					{
						"name": "STMD_RunOrder",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "SST_RunOrder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "STMD_RunOrder",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "PRDSparkPool",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.enabled": true,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 4
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "STOPS_RunOrderDistribution",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "STMD_RunOrder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "STOPS_RunOrderDistribution",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "PRDSparkPool",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.enabled": true,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 6
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "STOPS_RunOrderLinehaul",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "STMD_RunOrder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "STOPS_RunOrderLinehaul",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "PRDSparkPool",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.enabled": true,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 2
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "STSAP_RunOrder",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "STOPS_RunOrderLinehaul",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "STOPS_RunOrderDistribution",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "00_STSAP_RunOrder",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "PRDSparkPool",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.enabled": true,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 3
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "DeDupe BillConsignmentR",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Dedupe on bill_consignmentr",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "PRDSparkPool",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 2
							},
							"driverSize": "Small",
							"numExecutors": 2
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PROD/SoRs"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/SST_RunOrder')]",
				"[concat(variables('workspaceId'), '/bigDataPools/PRDSparkPool')]",
				"[concat(variables('workspaceId'), '/notebooks/STMD_RunOrder')]",
				"[concat(variables('workspaceId'), '/notebooks/STOPS_RunOrderDistribution')]",
				"[concat(variables('workspaceId'), '/notebooks/STOPS_RunOrderLinehaul')]",
				"[concat(variables('workspaceId'), '/notebooks/00_STSAP_RunOrder')]",
				"[concat(variables('workspaceId'), '/notebooks/Dedupe on bill_consignmentr')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SAP LOAD PROD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Iterate Data",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.CW_Items",
								"type": "Expression"
							},
							"batchCount": 2,
							"activities": [
								{
									"name": "If ColumnsNamesBlankSpacesOrLimitedLoad",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(pipeline().parameters.ColumnsNamesBlankSpaces,greater(length(pipeline().parameters.LimitedLoadTopX),1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "SelectStatementBuilder",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(' \nDECLARE @s VARCHAR(MAX)\nDECLARE @tablename VARCHAR(MAX) = ''', item().Source.TableName,'''\nSELECT @s = ISNULL(@s + '', '','''') + ''['' + c.name + '']'' + '' as [''+replace(c.name,'' '',''_'')+''] ''\nFROM sys.all_columns c \njoin sys.objects t ON c.object_id = t.object_id \nWHERE t.name =  @tablename \nSELECT ''SELECT ', if(greater(length(pipeline().parameters.LimitedLoadTopX),1),concat('TOP ', pipeline().parameters.LimitedLoadTopX),''), ' '' + @s + '' FROM ['' +  @tablename + '']', if(and(greater(length(item().Increment.IdField),1),greater(length(pipeline().parameters.LimitedLoadTopX),1)),concat(' ORDER BY ', item().Increment.IdField, ' DESC'),''),''' as Query')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "SqlServerDataSet",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@variables('ServerName')",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@variables('DatabaseName')",
																"type": "Expression"
															},
															"UserName": {
																"value": "@variables('UserName')",
																"type": "Expression"
															},
															"CW_SchemaName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"SecretName": {
																"value": "@variables('SecretName')",
																"type": "Expression"
															},
															"CW_TableName": {
																"value": "@item().Source.TableName",
																"type": "Expression"
															}
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If FullLoad",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.Full_Load",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Lookup Last Max Field",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('SELECT MAX(',item().Increment.IncField,')  as Field \n FROM\n    OPENROWSET(\n        BULK ','''',variables('DataLake'),variables('ContainerName'),'/',variables('FolderName'),'/',item().destination.FileName,'.parquet','''',\n        ',FORMAT = ','''PARQUET''','\n    ) AS [result]')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSqlConnection",
														"type": "DatasetReference",
														"parameters": {
															"ASAEndpoint": {
																"value": "@variables('ASAEndpoint')",
																"type": "Expression"
															},
															"ASADataBase": {
																"value": "@variables('ASADataBase')",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "Remove Old Data Incremental Data_SingleFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Lookup Last Max Field",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Remove Old Data Data_Folder",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_SingleFile",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "Remove Old Data Data_SingleFile",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "WaitBecause of Error",
												"type": "Wait",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_Folder",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "If ColumnsNamesBlankSpacesOrLimitedLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(pipeline().parameters.Full_Load,'FullTakeOn'\n   ,if(and(equals(item().Increment.IncField,item().Increment.IdField),lessOrEquals(length(pipeline().parameters.TakeOnPeriod),1)),'IdLoad'\n      ,if(equals(item().Increment.IdField,'DocEntry'),'DateLoad_NoDedupe'\n      ,'DateLoad_Dedupe'\n      )\n   )\n)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DateLoad_Dedupe",
												"activities": [
													{
														"name": "Delete the Temp File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_DateLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_DateLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Copy New incremental data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(or(pipeline().parameters.ColumnsNamesBlankSpaces, greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n        activity('SelectStatementBuilder').output.firstRow.Query,concat('SELECT * FROM [', item().Source.TableName,']')\n        )\n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,concat('''',activity('Lookup Last Max Field').output.firstRow.Field,'''')\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "UnionSparkJob_DateLoad",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy New incremental data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "UnionSparkJob_DateLoad",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 4
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											},
											{
												"value": "IdLoad",
												"activities": [
													{
														"name": "Copy New incremental data_IDLoad",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(or(pipeline().parameters.ColumnsNamesBlankSpaces,    greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n        activity('SelectStatementBuilder').output.firstRow.Query, concat('SELECT * FROM [', item().Source.TableName,']')\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,activity('Lookup Last Max Field').output.firstRow.Field\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete the Temp File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_IDload",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_IDload",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "UnionSparkJob_IDload",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy New incremental data_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "UnionSparkJob_IDLoad",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 4
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											},
											{
												"value": "FullTakeOn",
												"activities": [
													{
														"name": "Copy_Data_Full_Take_On",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@if(or(pipeline().parameters.ColumnsNamesBlankSpaces, greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n    activity('SelectStatementBuilder').output.firstRow.Query,\n    concat('SELECT * FROM [', item().Source.TableName,']')\n    )",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete the Temp File_FullLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "PartitionSparkJob",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "PartitionSparkJob",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy_Data_Full_Take_On",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "PartitionSparkJob",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 4
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											},
											{
												"value": "DateLoad_NoDedupe",
												"activities": [
													{
														"name": "Delete the Temp File_NoDedupe",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_NoDedupe",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File_NoDedupe",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_NoDedupe",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Copy New incremental data_NoDedupe",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "SqlServerSource",
																"sqlReaderQuery": {
																	"value": "@concat(if(or(pipeline().parameters.ColumnsNamesBlankSpaces, greater(length(pipeline().parameters.LimitedLoadTopX),1))\n            , activity('SelectStatementBuilder').output.firstRow.Query\n            , concat('SELECT * FROM [', item().Source.TableName,']')\n        )\n    , ' WHERE ', item().Increment.IdField, ' IN ( SELECT DISTINCT '\n    , item().Increment.IdField\n    , ' FROM [', item().Source.TableName,']'\n    , ' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,concat('''',activity('Lookup Last Max Field').output.firstRow.Field,'''')\n        )\n    , ')'\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "SqlServerDataSet",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "UnionSparkJob_NoDedupe",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy New incremental data_NoDedupe",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "UnionSparkJob_DateLoad_NoDupeCheck",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 4
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "ERROR",
													"errorCode": "500"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"CW_Items": {
						"type": "Array",
						"defaultValue": []
					},
					"TakeOnPeriod": {
						"type": "string",
						"defaultValue": " "
					},
					"Full_Load": {
						"type": "bool",
						"defaultValue": false
					},
					"ColumnsNamesBlankSpaces": {
						"type": "bool",
						"defaultValue": true
					},
					"LimitedLoadTopX": {
						"type": "string",
						"defaultValue": " "
					}
				},
				"variables": {
					"FolderName": {
						"type": "String",
						"defaultValue": "Unstructured Data/SAP"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net/"
					},
					"ServerName": {
						"type": "String",
						"defaultValue": "CCSQL01"
					},
					"DatabaseName": {
						"type": "String",
						"defaultValue": "SBK_CityLogistics "
					},
					"UserName": {
						"type": "String",
						"defaultValue": "Synapse@citylogistics.co.za"
					},
					"SecretName": {
						"type": "String",
						"defaultValue": "SAPSecret"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "dbo"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"ASAEndpoint": {
						"type": "String",
						"defaultValue": "citylogistics-synapseanalytics-workspace-prod-ondemand.sql.azuresynapse.net"
					},
					"ASADataBase": {
						"type": "String",
						"defaultValue": "master"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/SAP"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-04T06:38:01Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SqlServerDataSet')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlConnection')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeParquet')]",
				"[concat(variables('workspaceId'), '/notebooks/UnionSparkJob_DateLoad')]",
				"[concat(variables('workspaceId'), '/bigDataPools/PRDSparkPool')]",
				"[concat(variables('workspaceId'), '/notebooks/UnionSparkJob_IDLoad')]",
				"[concat(variables('workspaceId'), '/notebooks/PartitionSparkJob')]",
				"[concat(variables('workspaceId'), '/notebooks/UnionSparkJob_DateLoad_NoDupeCheck')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sharepoint Full Take-on')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Bearer Token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://accounts.accesscontrol.windows.net/',variables('TenantID'),'/tokens/OAuth/2')\n",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=',variables('client_id'),'@',variables('TenantID'),'&client_secret=',variables('client_secret'),'&resource=00000003-0000-0ff1-ce00-000000000000','/',variables('BaseURL'),'@',variables('TenantID'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.CW_Items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable SourceFolder",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SharePointFolderName",
										"value": {
											"value": "@item().Source.TableName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable DestFolder",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "DestFolderName",
										"value": {
											"value": "@item().Destination.FileName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable SiteURL",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SiteURL",
										"value": {
											"value": "@concat('sites/',pipeline().parameters.SharepointSiteName,'/')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get All the Files_copy1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get List of File Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of File Names').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data Folder 1_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.03:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization: Bearer ', activity('Get Bearer Token').output.access_token)}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SharePointBinary",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@{item().ServerRelativeUrl}",
													"type": "Expression"
												},
												"BaseURL": {
													"value": "@variables('BaseURL')",
													"type": "Expression"
												},
												"SiteURL": {
													"value": "@variables('SiteURL')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataLakeBinary",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@variables('ContainerName')",
													"type": "Expression"
												},
												"DestFolderName": {
													"value": "@variables('DestFolderName')",
													"type": "Expression"
												},
												"DataLake": {
													"value": "@variables('DataLake')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@{item().Name}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get List of File Names",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://',variables('BaseURL'),'/',variables('SiteURL'),'_api/web/GetFolderByServerRelativeUrl(','''','/',variables('SiteURL'),variables('SharePointFolderName'),'''',')/Files')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@{concat('Bearer ', activity('Get Bearer Token').output.access_token)}",
									"type": "Expression"
								},
								"Accept": "application/json"
							},
							"body": "grant_type=client_credentials&client_id=bd146d1a-7d3f-4b57-8d4e-c794594a7f7f@0e23ddde-1cba-42eb-9760-e698ce0a9b00&client_secret=tI58Q~wsUQhC0tnGQ_KenYWvWfbqWPevgSKm6dsT&resource=00000003-0000-0ff1-ce00-000000000000/citycouriers365.sharepoint.com@0e23ddde-1cba-42eb-9760-e698ce0a9b00"
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"CW_Items": {
						"type": "array"
					},
					"SharepointSiteName": {
						"type": "string",
						"defaultValue": "DataWarehouse"
					}
				},
				"variables": {
					"TenantID": {
						"type": "String",
						"defaultValue": "0e23ddde-1cba-42eb-9760-e698ce0a9b00"
					},
					"client_id": {
						"type": "String",
						"defaultValue": "bd146d1a-7d3f-4b57-8d4e-c794594a7f7f"
					},
					"client_secret": {
						"type": "String",
						"defaultValue": "tI58Q~wsUQhC0tnGQ_KenYWvWfbqWPevgSKm6dsT"
					},
					"BaseURL": {
						"type": "String",
						"defaultValue": "citycouriers365.sharepoint.com"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net/"
					},
					"SiteURL": {
						"type": "String"
					},
					"SharePointFolderName": {
						"type": "String"
					},
					"DestFolderName": {
						"type": "String"
					},
					"FileList": {
						"type": "Array"
					},
					"FolderContent": {
						"type": "Array"
					},
					"Temp": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/SharePoint"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/SharePointBinary')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeBinary')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TMS LOAD PROD')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Iterate Data",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.CW_Items",
								"type": "Expression"
							},
							"batchCount": 2,
							"activities": [
								{
									"name": "If ColumnsNamesBlankSpacesOrLimitedLoad",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(pipeline().parameters.ColumnsNamesBlankSpaces,greater(length(pipeline().parameters.LimitedLoadTopX),1))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "SelectStatementBuilder",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "PostgreSqlSource",
														"query": {
															"value": "@concat(' \nDECLARE @s VARCHAR(MAX)\nDECLARE @tablename VARCHAR(MAX) = ''', item().Source.TableName,'''\nSELECT @s = ISNULL(@s + '', '','''') + ''['' + c.name + '']'' + '' as ['' + replace(c.name,'' '',''_'') + ''] ''\nFROM information_schema.columns c \nWHERE table_name = @tablename\nSELECT ''SELECT '' + @s + '' FROM ['' +  @tablename + '']', if(greater(length(item().Increment.IdField),1),concat(' ORDER BY ', item().Increment.IdField, ' DESC'),''), if(greater(length(pipeline().parameters.LimitedLoadTopX),1),concat(' LIMIT ', pipeline().parameters.LimitedLoadTopX),''),''' as Query')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "PostgresSQL_Dataset",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@variables('ServerName')",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@variables('DatabaseName')",
																"type": "Expression"
															},
															"UserName": {
																"value": "@variables('UserName')",
																"type": "Expression"
															},
															"CW_SchemaName": {
																"value": "@variables('SchemaName')",
																"type": "Expression"
															},
															"SecretName": {
																"value": "@variables('SecretName')",
																"type": "Expression"
															},
															"CW_TableName": {
																"value": "@item().Source.TableName",
																"type": "Expression"
															},
															"Port": {
																"value": "@variables('Port')",
																"type": "Expression"
															}
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If FullLoad",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@pipeline().parameters.Full_Load",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Lookup Last Max Field",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat('SELECT MAX(',item().Increment.IncField,')  as Field \n FROM\n    OPENROWSET(\n        BULK ','''',variables('DataLake'),variables('ContainerName'),'/',variables('FolderName'),'/',item().destination.FileName,'.parquet','''',\n        ',FORMAT = ','''PARQUET''','\n    ) AS [result]')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AzureSqlConnection",
														"type": "DatasetReference",
														"parameters": {
															"ASAEndpoint": {
																"value": "@variables('ASAEndpoint')",
																"type": "Expression"
															},
															"ASADataBase": {
																"value": "@variables('ASADataBase')",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "Remove Old Data Incremental Data_SingleFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Lookup Last Max Field",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Remove Old Data Data_Folder",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_SingleFile",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@{concat(variables('ContainerName'),'/',variables('FolderName'),'/',item().Destination.FileName,'.parquet','/')}",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "Remove Old Data Data_SingleFile",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.03:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DataLakeParquet",
														"type": "DatasetReference",
														"parameters": {
															"CW_FolderName": {
																"value": "@variables('FolderName')",
																"type": "Expression"
															},
															"CW_FileName": {
																"value": "@concat(item().Destination.FileName,'.parquet')",
																"type": "Expression"
															},
															"ContainerName": {
																"value": "@variables('ContainerName')",
																"type": "Expression"
															},
															"DataLake": {
																"value": "@variables('DataLake')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											},
											{
												"name": "WaitBecause of Error",
												"type": "Wait",
												"dependsOn": [
													{
														"activity": "Remove Old Data Data_Folder",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "If ColumnsNamesBlankSpacesOrLimitedLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@if(pipeline().parameters.Full_Load,'FullTakeOn'\n   ,if(and(equals(item().Increment.IncField,item().Increment.IdField),lessOrEquals(length(pipeline().parameters.TakeOnPeriod),1)),'IdLoad'\n      ,'DateLoad'\n   )\n)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "DateLoad",
												"activities": [
													{
														"name": "Delete the Temp File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_DateLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_DateLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Copy New incremental data",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "PostgreSqlSource",
																"query": {
																	"value": "@concat(if(or(pipeline().parameters.ColumnsNamesBlankSpaces, greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n        activity('SelectStatementBuilder').output.firstRow.Query,concat('SELECT * FROM ', item().Source.TableName)\n        )\n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,concat('''',activity('Lookup Last Max Field').output.firstRow.Field,'''')\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "PostgresSQL_Dataset",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	},
																	"Port": {
																		"value": "@variables('Port')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "UnionSparkJob_DateLoad",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy New incremental data",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "UnionSparkJob_DateLoad",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.enabled": true,
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 2
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											},
											{
												"value": "IdLoad",
												"activities": [
													{
														"name": "Copy New incremental data_IDLoad",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.03:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "PostgreSqlSource",
																"query": {
																	"value": "@concat(if(or(pipeline().parameters.ColumnsNamesBlankSpaces,    greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n        activity('SelectStatementBuilder').output.firstRow.Query, concat('SELECT * FROM ', item().Source.TableName)\n        )   \n    ,' WHERE ', item().Increment.IncField, ' > ',\n        if(greater(length(pipeline().parameters.TakeOnPeriod),1)\n        ,pipeline().parameters.TakeOnPeriod\n        ,activity('Lookup Last Max Field').output.firstRow.Field\n        )\n    )",
																	"type": "Expression"
																},
																"queryTimeout": "02:00:00",
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "PostgresSQL_Dataset",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	},
																	"Port": {
																		"value": "@variables('Port')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete the Temp File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "Delete The Right File_IDLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "UnionSparkJob_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "UnionSparkJob_IDLoad",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy New incremental data_IDLoad",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "UnionSparkJob_IDLoad",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.enabled": true,
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 2
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											},
											{
												"value": "FullTakeOn",
												"activities": [
													{
														"name": "Copy_Data_Full_Take_On",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 3,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "PostgreSqlSource",
																"query": {
																	"value": "@if(or(pipeline().parameters.ColumnsNamesBlankSpaces, greater(length(pipeline().parameters.LimitedLoadTopX),1)),\n    activity('SelectStatementBuilder').output.firstRow.Query,\n    concat('SELECT * FROM ', item().Source.TableName)\n    )",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "PostgresSQL_Dataset",
																"type": "DatasetReference",
																"parameters": {
																	"ServerName": {
																		"value": "@variables('ServerName')",
																		"type": "Expression"
																	},
																	"DatabaseName": {
																		"value": "@variables('DatabaseName')",
																		"type": "Expression"
																	},
																	"UserName": {
																		"value": "@variables('UserName')",
																		"type": "Expression"
																	},
																	"CW_SchemaName": {
																		"value": "@variables('SchemaName')",
																		"type": "Expression"
																	},
																	"SecretName": {
																		"value": "@variables('SecretName')",
																		"type": "Expression"
																	},
																	"CW_TableName": {
																		"value": "@item().Source.TableName",
																		"type": "Expression"
																	},
																	"Port": {
																		"value": "@variables('Port')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "Delete the Temp File_FullLoad",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "PartitionSparkJob",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "DataLakeParquet",
																"type": "DatasetReference",
																"parameters": {
																	"CW_FolderName": {
																		"value": "@concat(variables('FolderName'),'/T1')",
																		"type": "Expression"
																	},
																	"CW_FileName": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"ContainerName": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"DataLake": {
																		"value": "@variables('DataLake')",
																		"type": "Expression"
																	}
																}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobFSReadSettings",
																"recursive": true,
																"enablePartitionDiscovery": false
															}
														}
													},
													{
														"name": "PartitionSparkJob",
														"type": "SynapseNotebook",
														"dependsOn": [
															{
																"activity": "Copy_Data_Full_Take_On",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"notebook": {
																"referenceName": "PartitionSparkJob",
																"type": "NotebookReference"
															},
															"parameters": {
																"cw_FolderName": {
																	"value": {
																		"value": "@variables('FolderName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_FileName": {
																	"value": {
																		"value": "@concat(item().Destination.FileName,'.parquet')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IncFolderName": {
																	"value": {
																		"value": "@concat(variables('FolderName'),'_Incremental_Data')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"cw_IdField": {
																	"value": {
																		"value": "@item().Increment.IdField",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"ContainerName": {
																	"value": {
																		"value": "@variables('ContainerName')",
																		"type": "Expression"
																	},
																	"type": "string"
																},
																"DataLakeDF": {
																	"value": {
																		"value": "@replace(variables('DataLake'),'https://','')",
																		"type": "Expression"
																	},
																	"type": "string"
																}
															},
															"snapshot": true,
															"sparkPool": {
																"referenceName": "PRDSparkPool",
																"type": "BigDataPoolReference"
															},
															"executorSize": "Medium",
															"conf": {
																"spark.dynamicAllocation.enabled": true,
																"spark.dynamicAllocation.minExecutors": 1,
																"spark.dynamicAllocation.maxExecutors": 2
															},
															"driverSize": "Medium",
															"numExecutors": 1
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": "ERROR",
													"errorCode": "500"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": []
					},
					"TakeOnPeriod": {
						"type": "string",
						"defaultValue": " "
					},
					"Full_Load": {
						"type": "bool",
						"defaultValue": false
					},
					"ColumnsNamesBlankSpaces": {
						"type": "bool",
						"defaultValue": false
					},
					"LimitedLoadTopX": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"FolderName": {
						"type": "String",
						"defaultValue": "Unstructured Data/TMS"
					},
					"DataLake": {
						"type": "String",
						"defaultValue": "https://citylogisticsstorageprod.dfs.core.windows.net/"
					},
					"ServerName": {
						"type": "String",
						"defaultValue": "orvdb.citylogistics.co.za"
					},
					"DatabaseName": {
						"type": "String",
						"defaultValue": "tmsapi"
					},
					"UserName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"SecretName": {
						"type": "String",
						"defaultValue": "TMSSecret"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "public"
					},
					"ContainerName": {
						"type": "String",
						"defaultValue": "synapse"
					},
					"ASAEndpoint": {
						"type": "String",
						"defaultValue": "citylogistics-synapseanalytics-workspace-prod-ondemand.sql.azuresynapse.net"
					},
					"ASADataBase": {
						"type": "String",
						"defaultValue": "master"
					},
					"Port": {
						"type": "String",
						"defaultValue": "5433"
					}
				},
				"folder": {
					"name": "PROD/BackEnd/Extract/TMS"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-04T06:22:12Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/PostgresSQL_Dataset')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlConnection')]",
				"[concat(variables('workspaceId'), '/datasets/DataLakeParquet')]",
				"[concat(variables('workspaceId'), '/notebooks/UnionSparkJob_DateLoad')]",
				"[concat(variables('workspaceId'), '/bigDataPools/PRDSparkPool')]",
				"[concat(variables('workspaceId'), '/notebooks/UnionSparkJob_IDLoad')]",
				"[concat(variables('workspaceId'), '/notebooks/PartitionSparkJob')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlConnection')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"ASAEndpoint": {
							"value": "@dataset().ASAEndpoint",
							"type": "Expression"
						},
						"ASADataBase": {
							"value": "@dataset().ASADataBase",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ASAEndpoint": {
						"type": "string"
					},
					"ASADataBase": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataLakeBinary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
					"type": "LinkedServiceReference",
					"parameters": {
						"DataLake": {
							"value": "@dataset().DataLake",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"DestFolderName": {
						"type": "string"
					},
					"DataLake": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DestFolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataLakeParquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
					"type": "LinkedServiceReference",
					"parameters": {
						"DataLake": {
							"value": "@dataset().DataLake",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"CW_FolderName": {
						"type": "string"
					},
					"CW_FileName": {
						"type": "string"
					},
					"ContainerName": {
						"type": "string"
					},
					"DataLake": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().CW_FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().CW_FolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_wdh')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Unstructured Data/TMS",
						"fileSystem": "synapse"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OnPremSambaBinary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremFileServerLinkedServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					},
					"DirectoryName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DirectoryName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/OnPremFileServerLinkedServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PostgresSQL_Dataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSQL",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretName",
							"type": "Expression"
						},
						"Port": {
							"value": "@dataset().Port",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"CW_SchemaName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					},
					"CW_TableName": {
						"type": "string"
					},
					"Port": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().CW_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().CW_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/PostgreSQL')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SharePointBinary')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SharePointHTTPLS",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseUrl": {
							"value": "@dataset().BaseURL",
							"type": "Expression"
						},
						"FileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"SiteURL": {
							"value": "@dataset().SiteURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					},
					"BaseURL": {
						"type": "string"
					},
					"SiteURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SharePointHTTPLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_wdh')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "citylogisticsstoragedevdatalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Unstructured Data/TMS",
						"fileSystem": "synapse"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogisticsstoragedevdatalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServerDataSet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer_WindowsAuth",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"CW_SchemaName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					},
					"CW_TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().CW_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().CW_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SqlServer_WindowsAuth')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServerDataSet_DBAuth')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer_DataBaseAuth",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"CW_SchemaName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					},
					"CW_TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().CW_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().CW_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SqlServer_DataBaseAuth')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureKeyVaultCity')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVaultCity_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"ASAEndpoint": {
						"type": "string"
					},
					"ASADataBase": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OnPremFileServerLinkedServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('OnPremFileServerLinkedServer_properties_typeProperties_host')]",
					"userId": "[parameters('OnPremFileServerLinkedServer_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultCity",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIRCityIntra",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIRCityIntra')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVaultCity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PostgreSQL')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					},
					"Port": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "PostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('PostgreSQL_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultCity",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIRCityIntra",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIRCityIntra')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVaultCity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PostgreSqlTestServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('PostgreSqlTestServer_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultCity",
							"type": "LinkedServiceReference"
						},
						"secretName": "ORVSecret"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIRCityIntra",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIRCityIntra')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVaultCity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLTestServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SQLTestServer_connectionString')]",
					"userName": "[parameters('SQLTestServer_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultCity",
							"type": "LinkedServiceReference"
						},
						"secretName": "LMSSecret"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIRCityIntra",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIRCityIntra')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVaultCity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SharePointHTTPLS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"BaseUrl": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"SiteURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('SharePointHTTPLS_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServer_DataBaseAuth')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer_DataBaseAuth_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultCity",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIRCityIntra",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIRCityIntra')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVaultCity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServer_WindowsAuth')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer_WindowsAuth_connectionString')]",
					"userName": "[parameters('SqlServer_WindowsAuth_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultCity",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIRCityIntra",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/SelfHostedIRCityIntra')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVaultCity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('citylogistics-synapseanalytics-workspace-prod-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DataLake": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/citylogisticsstoragedevdatalake')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('citylogisticsstoragedevdatalake_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Full Take-on PROD_Daily Trigger Midnight')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the daily trigger at midnight",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CLMasterData Full Take-on_PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"cw_items": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_cw_items')]",
							"Full_Load": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_CLMasterData Full Take-on_PROD_parameters_ColumnsNamesBlankSpaces')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "LMS LOAD PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"CW_Items": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_CW_Items')]",
							"Full_Load": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_ColumnsNamesBlankSpaces')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "SAP LOAD PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"CW_Items": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_CW_Items')]",
							"Full_Load": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_ColumnsNamesBlankSpaces')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "Avis Full Take-on",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "Sharepoint Full Take-on",
							"type": "PipelineReference"
						},
						"parameters": {
							"CW_Items": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_Sharepoint Full Take-on_parameters_CW_Items')]",
							"SharepointSiteName": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_Sharepoint Full Take-on_parameters_SharepointSiteName')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "ORV LOAD PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"cw_items": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_cw_items')]",
							"TakeOnPeriod": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_TakeOnPeriod')]",
							"Full_Load": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_ColumnsNamesBlankSpaces')]",
							"LimitedLoadTopX": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_LimitedLoadTopX')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "TMS LOAD PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"cw_items": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_cw_items')]",
							"TakeOnPeriod": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_TakeOnPeriod')]",
							"Full_Load": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_ColumnsNamesBlankSpaces')]",
							"LimitedLoadTopX": "[parameters('Full Take-on PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_LimitedLoadTopX')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-10-05T08:43:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								0
							],
							"weekDays": [
								"Monday",
								"Wednesday",
								"Tuesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/CLMasterData Full Take-on_PROD')]",
				"[concat(variables('workspaceId'), '/pipelines/LMS LOAD PROD')]",
				"[concat(variables('workspaceId'), '/pipelines/SAP LOAD PROD')]",
				"[concat(variables('workspaceId'), '/pipelines/Avis Full Take-on')]",
				"[concat(variables('workspaceId'), '/pipelines/Sharepoint Full Take-on')]",
				"[concat(variables('workspaceId'), '/pipelines/ORV LOAD PROD')]",
				"[concat(variables('workspaceId'), '/pipelines/TMS LOAD PROD')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Full Take-on PROD_Daily Trigger Rest')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the Daily trigger for the rest of the day\n",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-10-05T08:44:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								10,
								12,
								15
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday",
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Incre PROD_Daily Trigger Midnight')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the daily trigger at midnight",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "LMS LOAD PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"CW_Items": "[parameters('Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_CW_Items')]",
							"TakeOnPeriod": "[parameters('Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_TakeOnPeriod')]",
							"Full_Load": "[parameters('Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_ColumnsNamesBlankSpaces')]",
							"LimitedLoadTopX": "[parameters('Incre PROD_Daily Trigger Midnight_properties_LMS LOAD PROD_parameters_LimitedLoadTopX')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "SAP LOAD PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"CW_Items": "[parameters('Incre PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_CW_Items')]",
							"TakeOnPeriod": "[parameters('Incre PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_TakeOnPeriod')]",
							"Full_Load": "[parameters('Incre PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Incre PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_ColumnsNamesBlankSpaces')]",
							"LimitedLoadTopX": "[parameters('Incre PROD_Daily Trigger Midnight_properties_SAP LOAD PROD_parameters_LimitedLoadTopX')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "ORV LOAD PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"cw_items": "[parameters('Incre PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_cw_items')]",
							"TakeOnPeriod": "[parameters('Incre PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_TakeOnPeriod')]",
							"Full_Load": "[parameters('Incre PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Incre PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_ColumnsNamesBlankSpaces')]",
							"LimitedLoadTopX": "[parameters('Incre PROD_Daily Trigger Midnight_properties_ORV LOAD PROD_parameters_LimitedLoadTopX')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "TMS LOAD PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"cw_items": "[parameters('Incre PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_cw_items')]",
							"TakeOnPeriod": "[parameters('Incre PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_TakeOnPeriod')]",
							"Full_Load": "[parameters('Incre PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Incre PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_ColumnsNamesBlankSpaces')]",
							"LimitedLoadTopX": "[parameters('Incre PROD_Daily Trigger Midnight_properties_TMS LOAD PROD_parameters_LimitedLoadTopX')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-10-05T08:43:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								0
							],
							"weekDays": [
								"Monday",
								"Wednesday",
								"Tuesday",
								"Friday",
								"Thursday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/LMS LOAD PROD')]",
				"[concat(variables('workspaceId'), '/pipelines/SAP LOAD PROD')]",
				"[concat(variables('workspaceId'), '/pipelines/ORV LOAD PROD')]",
				"[concat(variables('workspaceId'), '/pipelines/TMS LOAD PROD')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Incre PROD_Daily Trigger Rest')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the Daily trigger for the rest of the day\n",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-10-05T08:44:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								10,
								12,
								15
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday",
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Incre PROD_Weekly Trigger Rest')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the trigger for the rest of the day on a Sunday",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-10-09T07:33:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								10,
								15,
								0
							],
							"weekDays": [
								"Sunday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rolling PROD_Weekly Trigger')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the trigger for once a week 12:00 on a Sunday",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "LMS LOAD PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"CW_Items": "[parameters('Rolling PROD_Weekly Trigger_properties_LMS LOAD PROD_parameters_CW_Items')]",
							"TakeOnPeriod": "[parameters('Rolling PROD_Weekly Trigger_properties_LMS LOAD PROD_parameters_TakeOnPeriod')]",
							"Full_Load": "[parameters('Rolling PROD_Weekly Trigger_properties_LMS LOAD PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Rolling PROD_Weekly Trigger_properties_LMS LOAD PROD_parameters_ColumnsNamesBlankSpaces')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "SAP LOAD PROD",
							"type": "PipelineReference"
						},
						"parameters": {
							"CW_Items": "[parameters('Rolling PROD_Weekly Trigger_properties_SAP LOAD PROD_parameters_CW_Items')]",
							"TakeOnPeriod": "[parameters('Rolling PROD_Weekly Trigger_properties_SAP LOAD PROD_parameters_TakeOnPeriod')]",
							"Full_Load": "[parameters('Rolling PROD_Weekly Trigger_properties_SAP LOAD PROD_parameters_Full_Load')]",
							"ColumnsNamesBlankSpaces": "[parameters('Rolling PROD_Weekly Trigger_properties_SAP LOAD PROD_parameters_ColumnsNamesBlankSpaces')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-10-01T00:56:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								12
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/LMS LOAD PROD')]",
				"[concat(variables('workspaceId'), '/pipelines/SAP LOAD PROD')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SoR RunOrder Trigger')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "RunOrder",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-05-21T15:12:00",
						"timeZone": "South Africa Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								5
							],
							"weekDays": [
								"Monday",
								"Wednesday",
								"Tuesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/RunOrder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataFlowIR')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 16,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataFlowIRLarge')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 32,
							"timeToLive": 5,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SelfHostedIRCityIntra')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IncrementalLoadDate DataFlow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "WritetoDataLake"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     cw_FolderName as string,",
						"     cw_FileName as string,",
						"     cw_IncFolderName as string,",
						"     cw_IdField as string,",
						"     ContainerName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: ($cw_FolderName),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source1",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: ($cw_IncFolderName),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source2",
						"source1, source2 exists($cw_IdField == $cw_IdField,",
						"     negate:false,",
						"     broadcast: 'right')~> exists1",
						"exists1, source2 union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: (concat($cw_IncFolderName,'/T1/',$cw_FileName)),",
						"     truncate: true,",
						"     compressionCodec: 'snappy',",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('dynamicRange', 64,",
						"          $cw_IdField",
						"     )) ~> WritetoDataLake"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IncrementalLoadID DataFlow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "WritetoDataLake"
						}
					],
					"transformations": [
						{
							"name": "UnionOnID"
						}
					],
					"scriptLines": [
						"parameters{",
						"     cw_FolderName as string,",
						"     cw_FileName as string,",
						"     cw_IncFolderName as string,",
						"     cw_IdField as string,",
						"     ContainerName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: ($cw_FolderName),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source1",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: ($cw_IncFolderName),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source2",
						"source1, source2 union(byName: true)~> UnionOnID",
						"UnionOnID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: (concat($cw_IncFolderName,'/T1/',$cw_FileName)),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('dynamicRange', 64,",
						"          $cw_IdField",
						"     )) ~> WritetoDataLake"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Partitioning DF')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     cw_FileName as string,",
						"     cw_FolderName as string,",
						"     cw_IncFolderName as string,",
						"     cw_incField as string,",
						"     ContainerName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: (concat($cw_IncFolderName,'/T1')),",
						"     fileName: ($cw_FileName),",
						"     compressionCodec: 'snappy') ~> source2",
						"source2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: ($ContainerName),",
						"     folderPath: (concat($cw_FolderName,'/',$cw_FileName)),",
						"     truncate: true,",
						"     compressionCodec: 'snappy',",
						"     umask: 0776,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/citylogistics_synapseanalytics_workspace_WorkspaceSecondaryStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STBillZone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STBillZone') )\n    DROP EXTERNAL TABLE dbo.D_STBillZone\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STBillZone (\n    [lms_billzone_id] int,\n    [lms_billzone_description] nvarchar(4000),\n    [lms_billzone_zonemasterid] int,\n    [lms_billzone_countryid] int\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stbillzone.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STBillZone \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STBillZoneRoute')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STBillZoneRoute') )\n    DROP EXTERNAL TABLE dbo.D_STBillZoneRoute\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STBillZoneRoute (\n    [lms_billzoneroute_id] int,\n    [lms_billzoneroute_description] nvarchar(4000),\n    [lms_billzoneroute_zoneid] int,\n    [lms_billzoneroute_zrscode] nvarchar(4000),\n    [lms_billzoneroute_zonerouteorder] int,\n    [lms_billzoneroute_zonetype] nvarchar(4000),\n    [lms_billzoneroute_broutemasterid] int,\n    [lms_billzoneroute_broutecode] nvarchar(4000)\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stbillzoneroute.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STBillZoneRoute \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STBusinessPartners')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STBusinessPartners') )\n    DROP EXTERNAL TABLE dbo.D_STBusinessPartners\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STBusinessPartners (\n\t[sap_businesspartners_cardcode] nvarchar(4000),\n\t[sap_businesspartners_cardname] nvarchar(4000),\n\t[sap_businesspartners_cardtype] nvarchar(4000),\n\t[sap_businesspartners_groupcode] int,\n\t[sap_businesspartners_cmpprivate] nvarchar(4000),\n\t[sap_businesspartners_groupnum] int,\n\t[sap_businesspartners_creditline] numeric(18,2),\n\t[sap_businesspartners_debtline] numeric(18,2),\n\t[sap_businesspartners_discount] numeric(18,2),\n\t[sap_businesspartners_vatstatus] nvarchar(4000),\n\t[sap_businesspartners_lictradnum] nvarchar(4000),\n\t[sap_businesspartners_city] nvarchar(4000),\n\t[sap_businesspartners_u_boy_tb_0] nvarchar(4000),\n\t[sap_businesspartners_u_creditapp] nvarchar(4000),\n\t[sap_businesspartners_u_creditref] nvarchar(4000),\n\t[sap_businesspartners_u_creditcontract] nvarchar(4000),\n\t[sap_businesspartners_u_bee] int,\n\t[sap_businesspartners_u_depotmanager] nvarchar(4000),\n\t[sap_businesspartners_u_branchmanager] nvarchar(4000),\n\t[sap_businesspartners_u_petty_cash] numeric(18,2),\n\n\n    \n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/stbusinnesspartner.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STBusinessPartners \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STChartOfAccounts')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STChartOfAccounts') )\n    DROP EXTERNAL TABLE dbo.D_STChartOfAccounts\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STChartOfAccounts (\n[sap_account_acctcode] nvarchar(4000),\n[sap_account_acctname] nvarchar(4000),\n[sap_account_accttype] nvarchar(4000),\n[sap_account_segment_0] nvarchar(4000),\n[sap_account_segment_1] nvarchar(4000),\n[sap_account_segment_2] nvarchar(4000),\n[sap_account_groupmask] int,\n[sap_account_fathernum] nvarchar(4000),\n[sap_account_frozenfor] nvarchar(4000),\n[sap_account_postable] nvarchar(4000),\n[sap_account_level5name] nvarchar(4000),\n[sap_account_level4name] nvarchar(4000),\n[sap_account_fathernum2] nvarchar(4000),\n[sap_account_level3name] nvarchar(4000),\n[sap_account_fathernum3] nvarchar(4000),\n[sap_account_level2name] nvarchar(4000),\n[sap_account_fathernum4] nvarchar(4000),\n[sap_account_level1name] nvarchar(4000),\n[sap_account_fathernum5] nvarchar(4000)\n\n    \n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/stchartofaccounts.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STChartOfAccounts \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STDepot')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STDepot') )\n    DROP EXTERNAL TABLE dbo.D_STDepot\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STDepot (\n    [md_depot_id] int,\n    [md_depot_itemlabel] nvarchar(4000),\n    [md_depot_itemvalue] nvarchar(4000),\n    [md_depot_depotname] nvarchar(4000),\n    [md_depot_parentdepotcode] nvarchar(4000),\n    [md_depot_division] nvarchar(4000),\n    [md_depot_address] nvarchar(4000),\n    [md_depot_latitude] numeric(18,2),\n    [md_depot_longitude] numeric(18,2),\n    [md_depot_sapdepreciationaccountcode] nvarchar(4000),\n    [md_depot_mfrauthoriser] nvarchar(4000),\n    [md_depot_mfrapplicationflag] int,\n    [md_depot_activeflag] int,\n    [md_depot_operationsmanager] nvarchar(4000),\n    [md_depot_branchmanager] nvarchar(4000),\n    [md_depot_fleetmanager] nvarchar(4000)\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdepot.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STDepot \nGO\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STDepotMap')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STDepotMap') )\n    DROP EXTERNAL TABLE dbo.D_STDepotMap\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STDepotMap (\n[excel_depotmap_locationid] int,\n[excel_depotmap_locationdescription]nvarchar(4000),\n[excel_depotmap_parentdepot]nvarchar(4000),\n[excel_depotmap_subdepot]nvarchar(4000),\n\n    \n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/stdepotmap.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STDepotMap \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STDepotOrv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STDepotOrv') )\n    DROP EXTERNAL TABLE dbo.D_STDepotOrv\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STDepotOrv (\n    [orv_depot_id] bigint,\n    [orv_depot_name] nvarchar(4000),\n    [orv_depot_depcode] nvarchar(4000),\n    [orv_depot_address] nvarchar(4000),\n    [orv_depot_suburb] nvarchar(4000),\n    [orv_depot_city] nvarchar(4000),\n    [orv_depot_zipcode] nvarchar(4000),\n    [orv_depot_region] nvarchar(4000),\n    [orv_depot_lat] float,\n    [orv_depot_lng] float,\n    [orv_depot_placeid] nvarchar(4000),\n    [orv_depot_w3w] nvarchar(4000),\n    [orv_depot_insdate] datetime2(7),\n    [orv_depot_update] datetime2(7),\n    [orv_depot_lmsid] int,\n    [orv_depot_country] nvarchar(4000),\n    [orv_depot_status] nvarchar(4000)\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdepotorv.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STDepotOrv \nGO\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STDispatchActionLog')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STDispatchActionLog') )\n    DROP EXTERNAL TABLE dbo.D_STDispatchActionLog\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STDispatchActionLog (\n[orv_dispatchactionlog_id] bigint,\n [orv_dispatchactionlog_lat] float,\n [orv_dispatchactionlog_lng] float,\n [orv_dispatchactionlog_reason] nvarchar(4000),\n [orv_dispatchactionlog_mode] nvarchar(4000),\n [orv_dispatchactionlog_insdate] datetime2(7),\n [orv_dispatchactionlog_did] bigint,\n [orv_dispatchactionlog_action] nvarchar(4000),\n [orv_dispatchactionlog_uid] bigint\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdispatchactionlog.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STDispatchActionLog \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STDispatchSegment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STDispatchSegment') )\n    DROP EXTERNAL TABLE dbo.D_STDispatchSegment\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STDispatchSegment (\n    [orv_dispatchsegment_id] bigint,\n    [orv_dispatchsegment_fromdelid] bigint,\n    [orv_dispatchsegment_todelid] bigint,\n    [orv_dispatchsegment_distance] int,\n    [orv_dispatchsegment_duration] int,\n    [orv_dispatchsegment_did] bigint,\n    [orv_dispatchsegment_tollcost] bigint,\n    [orv_dispatchsegment_fuelcost] bigint,\n    [orv_dispatchsegment_inscost] bigint,\n    [orv_dispatchsegment_labourcost] bigint,\n    [orv_dispatchsegment_maintcost] bigint,\n    [orv_dispatchsegment_cpicost] bigint,\n    [orv_dispatchsegment_vehicleclass] nvarchar(4000),\n    [orv_dispatchsegment_fromlat] float,\n    [orv_dispatchsegment_fromlng] float,\n    [orv_dispatchsegment_tolat] float,\n    [orv_dispatchsegment_tolng] float,\n    [orv_dispatchsegment_departuredate] datetime2(7),\n    [orv_dispatchsegment_arrivaldate] datetime2(7),\n    [orv_dispatchsegment_debriefeddate] datetime2(7),\n    [orv_dispatchsegment_optimized] int,\n    [orv_dispatchsegment_segmentorder] int,\n    [orv_dispatchsegment_customized] int,\n    [orv_dispatchsegment_parcelct] int\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdispatchsegment.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STDispatchSegment\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STDocumentCategories')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STDocumentCategories') )\n    DROP EXTERNAL TABLE dbo.D_STDocumentCategories\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STDocumentCategories (\n    [sap_transactionsline_doccat] nvarchar(4000),\n    [sap_transactionsline_doccatname] nvarchar(4000),\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/stdocumentcategories.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STDocumentCategories \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STDriverPay')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STDriverPay') )\n    DROP EXTERNAL TABLE dbo.D_STDriverPay\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STDriverPay (\n    [tms_driverpay_id] bigint,\n    [tms_driverpay_routeid] bigint,\n    [tms_driverpay_triprate] int,\n    [tms_driverpay_mealrate] int,\n    [tms_driverpay_linkrate] int,\n    [tms_driverpay_sleepoverrate] int,\n    [tms_driverpay_numsleepover] int,\n    [tms_driverpay_nummeal] int,\n    [tms_driverpay_validfromdate] datetime2(7),\n    [tms_driverpay_validtodate] datetime2(7),\n    [tms_driverpay_insdate] datetime2(7),\n    [tms_driverpay_moddate] datetime2(7),\n    [tms_driverpay_insby] bigint,\n    [tms_driverpay_airtimerate] int,\n    [tms_driverpay_status] nvarchar(4000),\n    [tms_driverpay_legacyid] int,\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdriverpay.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STDriverPay \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STEndorsmentReasons')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STEndorsmentReasons') )\n    DROP EXTERNAL TABLE dbo.D_STEndorsmentReasons\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STEndorsmentReasons (\n\t[lmds_db_reasondetail_id] int,\n\t[lmds_db_reasondetail_description] nvarchar(4000),\n\t[lmds_db_reasondetail_reasongroupid] int,\n\t[lmds_db_reasondetail_orv_type] int,\n\t[lmds_db_reasondetail_active] int,\n\t[lmds_db_reasondetail_actionid] int,\n\t[lmds_db_reasondetail_cancelreason] int,\n\t[lmds_db_reasondetail_lmsreasonrule] int,\n\t[lmds_db_reasongroup_description] nvarchar(4000),\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stendorsmentreason.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STEndorsmentReasons \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STFinanceDates')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STFinanceDates') )\n    DROP EXTERNAL TABLE dbo.D_STFinanceDates\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STFinanceDates (\n[date_dim_id] int,\n[sap_transactionsheader_postingdate] date,\n[epoch] bigint,\n[actual_year] int,\n[actual_year_month] nvarchar(4000),\n[actual_month_name] nvarchar(4000),\n[actual_month_number] nvarchar(4000),\n[actual_day_name] nvarchar(4000),\n[actual_day_of_week] int,\n[is_week_day] int,\n[actual_day_of_month] int,\n[is_last_day_of_month] int,\n[last_day_of_month] nvarchar(4000),\n[actual_day_of_year] int,\n[actual_week_of_year] int,\n[actual_quarter_of_year] int,\n[fiscal_year] int,\n[fiscal_year_month] nvarchar(4000),\n[fiscal_month_sort] int,\n[actual_month_sort] int,\n\n\n    \n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/stfinancedates.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STFinanceDates \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STFuelCard')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STFuelCard') )\n    DROP EXTERNAL TABLE dbo.D_STFuelCard\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STFuelCard (\n    [tms_fuelcard_id] bigint,\n    [tms_fuelcard_eid] bigint,\n    [tms_fuelcard_entity] nvarchar(4000),\n    [tms_fuelcard_baseprice] int,\n    [tms_fuelcard_routeid] bigint,\n    [tms_fuelcard_operatingpercentage] int,\n    [tms_fuelcard_insdate] datetime2(7),\n    [tms_fuelcard_activefromdate] datetime2(7),\n    [tms_fuelcard_activetodate] datetime2(7),\n    [tms_fuelcard_moddate] datetime2(7),\n    [tms_fuelcard_status] nvarchar(4000),\n    [tms_fuelcard_insby] bigint,\n    [tms_fuelcard_zoneid] bigint,\n    [tms_fuelcard_legacyid] bigint,\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stfuelcard.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STFuelCard \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STFuelZone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STFuelZone') )\n    DROP EXTERNAL TABLE dbo.D_STFuelZone\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STFuelZone (\n    [tms_fuelzone_id] bigint,\n    [tms_fuelzone_zonename] nvarchar(4000),\n    [tms_fuelzone_rulingprice] int,\n    [tms_fuelzone_insdate] datetime2(7),\n    [tms_fuelzone_moddate] datetime2(7),\n    [tms_fuelzone_insby] bigint,\n    [tms_fuelzone_lastrulingprice] int,\n    [tms_fuelzone_legacyid] bigint,\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stfuelzone.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STFuelZone \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STFuelZoneHistory')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STFuelZoneHistory') )\n    DROP EXTERNAL TABLE dbo.D_STFuelZoneHistory\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STFuelZoneHistory (\n    [tms_fuelzonehistory_id] bigint,\n    [tms_fuelzonehistory_zoneid] bigint,\n    [tms_fuelzonehistory_rulingprice] int,\n    [tms_fuelzonehistory_validfromdate] bigint,\n    [tms_fuelzonehistory_validtodate] bigint,\n    [tms_fuelzonehistory_editby] bigint,\n    [tms_fuelzonehistory_insdate] datetime2(7),\n    [tms_fuelzonehistory_moddate] datetime2(7),\n\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stfuelzonehistory.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STFuelZoneHistory \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STInServiceReasons')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STInServiceReasons') )\n    DROP EXTERNAL TABLE dbo.D_STInServiceReasons\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STInServiceReasons (\n\t[lms_inservicereason_id] int,\n\t[lms_inservicereason_reasongroupid] int,\n\t[lms_reasongroup_description] nvarchar(4000),\n\t[lms_inservicereason_reason] nvarchar(4000),\n\t[lms_inservicereason_valid] int\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stinservicereasons.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STInServiceReasons \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STItems')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STItems') )\n    DROP EXTERNAL TABLE dbo.D_STItems\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STItems (\n\t[sap_itemgroup_itmsgrpcod] int,\n\t[sap_itemgroup_itmsgrpnam] nvarchar(4000),\n\t[sap_item_itemcode] nvarchar(4000),\n\t[sap_item_itemname] nvarchar(4000),\n\t[sap_item_cstgrpcode] int,\n\t[sap_item_vatgourpsa] nvarchar(4000),\n\t[sap_item_codebars] nvarchar(4000),\n\t[sap_item_prchseitem] nvarchar(4000),\n\t[sap_item_sellitem] nvarchar(4000),\n\t[sap_item_cardcode] nvarchar(4000),\n\t[sap_item_suppcatnum] nvarchar(4000),\n\t[sap_item_invntitem] nvarchar(4000),\n\t[sap_item_u_boy_tb_0] nvarchar(4000),\n\t[sap_item_u_svctype] nvarchar(4000),\n\t[sap_item_u_depot] nvarchar(4000),\n\n    \n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/stitems.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STItems \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STLMSBillCustomer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STLMSBillCustomer') )\n    DROP EXTERNAL TABLE dbo.D_STLMSBillCustomer\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STLMSBillCustomer (\n    [lms_customer_id] int,\n    [lms_customer_activeflag] int,\n    [lms_customer_adres1] nvarchar(4000),\n    [lms_customer_adres2] nvarchar(4000),\n    [lms_customer_appointment] int,\n    [lms_customer_areadesc] nvarchar(4000),\n    [lms_customer_autoemailflag] int,\n    [lms_customer_bill_routeid] int,\n    [lms_customer_bill_servicetypeid] int,\n    [lms_customer_bill_zonerouteid] int,\n    [lms_customer_brouteid] int,\n    [lms_customer_btype] int,\n    [lms_customer_ccdepot] nvarchar(4000),\n    [lms_customer_ccroute] nvarchar(4000),\n    [lms_customer_chainstoreflag] int,\n    [lms_customer_consperord] int,\n    [lms_customer_contactperson] nvarchar(4000),\n    [lms_customer_countrycode] nvarchar(4000),\n    [lms_customer_cref] nvarchar(4000),\n    [lms_customer_cref2] nvarchar(4000),\n    [lms_customer_crouteid] nvarchar(4000),\n    [lms_customer_ctype] int,\n    [lms_customer_custaccid] int,\n    [lms_customer_custgroupid] int,\n    [lms_customer_custmainid] int,\n    [lms_customer_custrateid] int,\n    [lms_customer_custroutegroupid] int,\n    [lms_customer_custservicedays] numeric(18,2),\n    [lms_customer_custservicetime] numeric(18,2),\n    [lms_customer_dc] int,\n    [lms_customer_defdelpcode] nvarchar(4000),\n    [lms_customer_deliverydepotid] int,\n    [lms_customer_deliverytype] nvarchar(4000),\n    [lms_customer_destinationlocationcode] nvarchar(4000),\n    [lms_customer_dualbillcourier] nvarchar(4000),\n    [lms_customer_email] nvarchar(4000),\n    [lms_customer_faxno] nvarchar(4000),\n    [lms_customer_fctype] int,\n    [lms_customer_flevy] numeric(18,2),\n    [lms_customer_incompleteorderchkflag] int,\n    [lms_customer_insertdate] datetime2(7),\n    [lms_customer_isbillto] int,\n    [lms_customer_isbooking] int,\n    [lms_customer_ishighvolume] int,\n    [lms_customer_ismanual] int,\n    [lms_customer_lastupdate] datetime2(7),\n    [lms_customer_locationtypecode] nvarchar(4000),\n    [lms_customer_maxcartons] int,\n    [lms_customer_name] nvarchar(4000),\n    [lms_customer_nddid] int,\n    [lms_customer_onholdid] int,\n    [lms_customer_pcode] nvarchar(4000),\n    [lms_customer_pcodeid] int,\n    [lms_customer_servrouteid] int,\n    [lms_customer_srouteid] int,\n    [lms_customer_storeid] int,\n    [lms_customer_suburb] nvarchar(4000),\n    [lms_customer_telno] nvarchar(4000),\n    [lms_customer_town] nvarchar(4000),\n    [lms_customer_volfact] numeric(18,2),\n    [lms_customer_wtype] int,\n    [orv_customer_id] bigint,\n    [orv_customer_name] nvarchar(4000),\n    [orv_customer_contact] nvarchar(4000),\n    [orv_customer_email] nvarchar(4000),\n    [orv_customer_mobileno] nvarchar(4000),\n    [orv_customer_landline] nvarchar(4000),\n    [orv_customer_ctype] nvarchar(4000),\n    [orv_customer_parent] bigint,\n    [orv_customer_lastupdate] datetime2(7),\n    [orv_customer_lmsid] int,\n    [orv_customer_srouteid] bigint,\n    [orv_customer_verified] int,\n    [orv_customer_defaultmaildomain] nvarchar(4000),\n    [orv_customer_autoassignticketid] bigint,\n    [orv_customer_sendinfodel] int,\n    [orv_customer_anonemailcustsupportemail] nvarchar(4000),\n    [orv_customer_anonemailcustsupporttel] nvarchar(4000),\n    [orv_customer_cref] int,\n    [orv_customer_division] int,\n    [orv_customer_ecomm] int,\n    [orv_customer_preverifiedaddid] bigint,\n    [orv_customer_mallname] nvarchar(4000),\n    [orv_customer_mallid] bigint,\n    [orv_customer_mallflag] int,\n    [orv_customer_malllmsid] bigint,\n    [orv_customer_highvolume] int,\n    [orv_customer_custreference] nvarchar(4000),\n    [orv_customer_unverdate] bigint,\n    [orv_customer_verdate] bigint,\n    [orv_customer_groupid] bigint,\n    [orv_customer_postalcodecustgroupid] nvarchar(4000),\n    [orv_customer_webhookauthcredential] nvarchar(4000),\n    [orv_customer_mergedinto] bigint,\n    [orv_customer_cusmergedate] bigint,\n    [orv_customer_customerref] nvarchar(4000),\n    [orv_customer_routemaint] int,\n    [lms_customer_billcustid] int,\n    [lms_customer_billcustbillcustid] int,\n    [lms_customer_billcustincovalue] int,\n    [lms_customer_billcustdaterangelimit] int,\n    [lms_customer_billcuststatus] int,\n    [lms_customer_billcustnote] nvarchar(4000),\n    [lms_customer_billcustcustgroupid] int,\n    [lms_customer_billcustactiveflag] int,\n    [lms_customer_billcustrouterateeffectivedate] datetime2(7),\n    [lms_customer_billcustratesaddedflag] int,\n    [lms_customer_billcustibtratesflag] int,\n    [lms_customer_billcustslidingscaleflag] int,\n    [lms_customer_billcustsapflag] int,\n    [lms_customer_billcustsapcode] nvarchar(4000),\n    [lms_customer_billcustsapcustname] nvarchar(4000),\n    [lms_customer_billcustaveragepclrateflag] int,\n    [lms_customer_billcustaveragepclkg] numeric(18,2),\n    [lms_customer_billcustbilldatestart] int,\n    [lms_customer_billcustitemcode] nvarchar(4000),\n    [lms_customer_billcustservicetypeflag] int,\n    [lms_customer_billcustreturnreverserateflag] int,\n    [lms_customer_billcustminnoofpcls] int,\n    [lms_customer_billcustproductcategoryid] int,\n    [lms_customer_billcustsamedayconsolidation] int,\n    [lms_customer_billcustrategroupid] int,\n    [lms_customer_billcustrisksurchargeflag] int,\n    [lms_customer_billcustapplyavgvolweight] int,\n    [lms_customer_billcustavgvolweight] numeric(18,2),\n    [lms_customer_billcustecommcustomerflag] int,\n    [lms_customer_billcustleadtimestructureid] int,\n    [lms_customer_billcustrecalcinprogress] int,\n    [lms_customer_billcustrecalcuserid] int,\n    [lms_customer_billcustneedwebhook] int,\n    [lms_customer_billcustroutemaint] int,\n    [lms_customer_billcustlhdistrflag] int,\n    [lms_customer_billcustgroupid] int,\n    [lms_customer_billcustgroupdescription] nvarchar(4000),\n    [lms_customer_billcustgroupgrouptypeid] int,\n    [lms_customer_billcustgrouptypeid] int,\n    [lms_customer_billcustgrouptypedescription] nvarchar(4000)\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stbillcustomer.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STLMSBillCustomer \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STLMSBookingWeights')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STLMSBookingWeights') )\n    DROP EXTERNAL TABLE dbo.D_STLMSBookingWeights\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STLMSBookingWeights (\n    [tms_lmsbookingweights_bookingid] bigint,\n    [tms_lmsbookingweights_loadid] bigint,\n    [tms_lmsbookingweights_numprcls] int,\n    [tms_lmsbookingweights_totalweight] float,\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stlmsbookingweights.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STLMSBookingWeights \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STLMSDeliveryPickupCustomer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STLMSDeliveryPickupCustomer') )\n    DROP EXTERNAL TABLE dbo.D_STLMSDeliveryPickupCustomer\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STLMSDeliveryPickupCustomer (\n    [lms_customer_id] int,\n    [lms_customer_activeflag] int,\n    [lms_customer_adres1] nvarchar(4000),\n    [lms_customer_adres2] nvarchar(4000),\n    [lms_customer_appointment] int,\n    [lms_customer_areadesc] nvarchar(4000),\n    [lms_customer_autoemailflag] int,\n    [lms_customer_bill_routeid] int,\n    [lms_customer_bill_servicetypeid] int,\n    [lms_customer_bill_zonerouteid] int,\n    [lms_customer_brouteid] int,\n    [lms_customer_btype] int,\n    [lms_customer_ccdepot] nvarchar(4000),\n    [lms_customer_ccroute] nvarchar(4000),\n    [lms_customer_chainstoreflag] int,\n    [lms_customer_consperord] int,\n    [lms_customer_contactperson] nvarchar(4000),\n    [lms_customer_countrycode] nvarchar(4000),\n    [lms_customer_cref] nvarchar(4000),\n    [lms_customer_cref2] nvarchar(4000),\n    [lms_customer_crouteid] nvarchar(4000),\n    [lms_customer_ctype] int,\n    [lms_customer_custaccid] int,\n    [lms_customer_custgroupid] int,\n    [lms_customer_custmainid] int,\n    [lms_customer_custrateid] int,\n    [lms_customer_custroutegroupid] int,\n    [lms_customer_custservicedays] numeric(18,2),\n    [lms_customer_custservicetime] numeric(18,2),\n    [lms_customer_dc] int,\n    [lms_customer_defdelpcode] nvarchar(4000),\n    [lms_customer_deliverydepotid] int,\n    [lms_customer_deliverytype] nvarchar(4000),\n    [lms_customer_destinationlocationcode] nvarchar(4000),\n    [lms_customer_dualbillcourier] nvarchar(4000),\n    [lms_customer_email] nvarchar(4000),\n    [lms_customer_faxno] nvarchar(4000),\n    [lms_customer_fctype] int,\n    [lms_customer_flevy] numeric(18,2),\n    [lms_customer_incompleteorderchkflag] int,\n    [lms_customer_insertdate] datetime2(7),\n    [lms_customer_isbillto] int,\n    [lms_customer_isbooking] int,\n    [lms_customer_ishighvolume] int,\n    [lms_customer_ismanual] int,\n    [lms_customer_lastupdate] datetime2(7),\n    [lms_customer_locationtypecode] nvarchar(4000),\n    [lms_customer_maxcartons] int,\n    [lms_customer_name] nvarchar(4000),\n    [lms_customer_nddid] int,\n    [lms_customer_onholdid] int,\n    [lms_customer_pcode] nvarchar(4000),\n    [lms_customer_pcodeid] int,\n    [lms_customer_servrouteid] int,\n    [lms_customer_srouteid] int,\n    [lms_customer_storeid] int,\n    [lms_customer_suburb] nvarchar(4000),\n    [lms_customer_telno] nvarchar(4000),\n    [lms_customer_town] nvarchar(4000),\n    [lms_customer_volfact] numeric(18,2),\n    [lms_customer_wtype] int,\n    [orv_customer_id] bigint,\n    [orv_customer_name] nvarchar(4000),\n    [orv_customer_contact] nvarchar(4000),\n    [orv_customer_email] nvarchar(4000),\n    [orv_customer_mobileno] nvarchar(4000),\n    [orv_customer_landline] nvarchar(4000),\n    [orv_customer_ctype] nvarchar(4000),\n    [orv_customer_parent] bigint,\n    [orv_customer_lastupdate] datetime2(7),\n    [orv_customer_lmsid] int,\n    [orv_customer_srouteid] bigint,\n    [orv_customer_verified] int,\n    [orv_customer_defaultmaildomain] nvarchar(4000),\n    [orv_customer_autoassignticketid] bigint,\n    [orv_customer_sendinfodel] int,\n    [orv_customer_anonemailcustsupportemail] nvarchar(4000),\n    [orv_customer_anonemailcustsupporttel] nvarchar(4000),\n    [orv_customer_cref] int,\n    [orv_customer_division] int,\n    [orv_customer_ecomm] int,\n    [orv_customer_preverifiedaddid] bigint,\n    [orv_customer_mallname] nvarchar(4000),\n    [orv_customer_mallid] bigint,\n    [orv_customer_mallflag] int,\n    [orv_customer_malllmsid] bigint,\n    [orv_customer_highvolume] int,\n    [orv_customer_custreference] nvarchar(4000),\n    [orv_customer_unverdate] bigint,\n    [orv_customer_verdate] bigint,\n    [orv_customer_groupid] bigint,\n    [orv_customer_postalcodecustgroupid] nvarchar(4000),\n    [orv_customer_webhookauthcredential] nvarchar(4000),\n    [orv_customer_mergedinto] bigint,\n    [orv_customer_cusmergedate] bigint,\n    [orv_customer_customerref] nvarchar(4000),\n    [orv_customer_routemaint] int,\n    [lms_customer_billcustid] int,\n    [lms_customer_billcustbillcustid] int,\n    [lms_customer_billcustincovalue] int,\n    [lms_customer_billcustdaterangelimit] int,\n    [lms_customer_billcuststatus] int,\n    [lms_customer_billcustnote] nvarchar(4000),\n    [lms_customer_billcustcustgroupid] int,\n    [lms_customer_billcustactiveflag] int,\n    [lms_customer_billcustrouterateeffectivedate] datetime2(7),\n    [lms_customer_billcustratesaddedflag] int,\n    [lms_customer_billcustibtratesflag] int,\n    [lms_customer_billcustslidingscaleflag] int,\n    [lms_customer_billcustsapflag] int,\n    [lms_customer_billcustsapcode] nvarchar(4000),\n    [lms_customer_billcustsapcustname] nvarchar(4000),\n    [lms_customer_billcustaveragepclrateflag] int,\n    [lms_customer_billcustaveragepclkg] numeric(18,2),\n    [lms_customer_billcustbilldatestart] int,\n    [lms_customer_billcustitemcode] nvarchar(4000),\n    [lms_customer_billcustservicetypeflag] int,\n    [lms_customer_billcustreturnreverserateflag] int,\n    [lms_customer_billcustminnoofpcls] int,\n    [lms_customer_billcustproductcategoryid] int,\n    [lms_customer_billcustsamedayconsolidation] int,\n    [lms_customer_billcustrategroupid] int,\n    [lms_customer_billcustrisksurchargeflag] int,\n    [lms_customer_billcustapplyavgvolweight] int,\n    [lms_customer_billcustavgvolweight] numeric(18,2),\n    [lms_customer_billcustecommcustomerflag] int,\n    [lms_customer_billcustleadtimestructureid] int,\n    [lms_customer_billcustrecalcinprogress] int,\n    [lms_customer_billcustrecalcuserid] int,\n    [lms_customer_billcustneedwebhook] int,\n    [lms_customer_billcustroutemaint] int,\n    [lms_customer_billcustlhdistrflag] int,\n    [lms_customer_billcustgroupid] int,\n    [lms_customer_billcustgroupdescription] nvarchar(4000),\n    [lms_customer_billcustgroupgrouptypeid] int,\n    [lms_customer_billcustgrouptypeid] int,\n    [lms_customer_billcustgrouptypedescription] nvarchar(4000)\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdeliverypickupcustomer.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STLMSDeliveryPickupCustomer \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STLMSParcelWeights')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STLMSParcelWeights') )\n    DROP EXTERNAL TABLE dbo.D_STLMSParcelWeights\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STLMSParcelWeights (\n    [tms_lmsparcelweights_bookingid] bigint,\n    [tms_lmsparcelweights_loadid] bigint,\n    [tms_lmsparcelweights_parcelid] int,\n    [tms_lmsparcelweights_weight] float,\n    [tms_lmsparcelweights_chargeweight] decimal(36,6),\n    [tms_lmsparcel_volweight] float,\n    [tms_lmsparcelweights_volumiserweight] decimal(36,6),\n    [tms_lmsparcelweights_billbustomer] nvarchar(4000),\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stlmsparcelweights.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STLMSParcelWeights \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STLMSTrackScanTime')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STLMSTrackScanTime') )\n    DROP EXTERNAL TABLE dbo.D_STLMSTrackScanTime\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STLMSTrackScanTime (\n    [lms_track_loadid] int,\n    [lms_loads_masterloadid] int,\n    [lms_track_firstscan] datetime2(7),\n    [lms_track_lastscan] datetime2(7),\n    [lms_track_loadtime] bigint,\n   \n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stlmstrackscantime.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STLMSTrackScanTime \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STLocation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STLocation') )\n    DROP EXTERNAL TABLE dbo.D_STLocation\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STLocation (\n    [lms_location_id] int,\n    [lms_location_description] nvarchar(4000),\n    [lms_location_code] nvarchar(4000),\n    [lms_location_collect] int,\n    [lms_location_pcode] nvarchar(4000),\n    [lms_location_custid] int,\n    [lms_location_retail] int,\n    [lms_location_scale] int,\n    [lms_location_custcode] int,\n    [lms_location_captureonly] int,\n    [lms_location_zoneid] int,\n    [lms_location_scantype] int,\n    [lms_location_billcustid] int,\n    [lms_location_latitude] nvarchar(4000),\n    [lms_location_longitude] nvarchar(4000),\n    [lms_location_holdlocid] int,\n    [lms_location_branchmanageruserid] int,\n    [lms_location_fwcostcentre] int,\n    [lms_location_fwuserid] int,\n    [lms_location_fwmultibusinessid] int,\n    [lms_location_glcode] nvarchar(4000),\n    [lms_location_hubcode] nvarchar(4000),\n    [lms_location_fwapikey] nvarchar(4000),\n    [lms_location_geolocationgroupid] int,\n    [lms_location_geolocationflag] int,\n    [lms_location_orvactive] int,\n    [lms_location_cref] nvarchar(4000),\n    [lms_location_tempcol] int,\n    [lms_location_holdlocparentlocid] int,\n    [lms_location_floorsize] int,\n    [lms_location_isstationidenabled] int,\n    [lms_location_activeflag] int,\n    [lms_location_masterlocid] int,\n    [lms_location_locationtypeid] int,\n    [lms_location_locationcode] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stlocation.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STLocation \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STMDDepot')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/MasterData"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STMDDepot') )\n    DROP EXTERNAL TABLE dbo.D_STMDDepot\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STMDDepot (\n\n[md_depot_id] bigint,\n[md_depot_itemlabel] nvarchar(4000),\n[md_depot_depotname] nvarchar(4000),\n[md_depot_parentdepotcode] nvarchar(4000),\n[md_depot_division] nvarchar(4000),\n[md_depot_address] nvarchar(4000),\n[md_depot_latitude] numeric(18,2),\n[md_depot_longitude] numeric(18,2),\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/MD/stmddepot.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n--synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/MD/stmddepot.parquet\n\n\nSELECT TOP 100 * FROM dbo.D_STMDDepot \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STMD",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STMDPeople')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/MasterData"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STMDPeople') )\n    DROP EXTERNAL TABLE dbo.D_STMDPeople\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STMDPeople (\n    [md_people_id] bigint,\n    [md_people_empid] bigint,\n    [md_people_employeecode] nvarchar(4000),\n    [md_people_uid] nvarchar(4000),\n    [md_people_firstname] nvarchar(4000),\n    [md_people_lastname] nvarchar(4000),\n    [md_people_knownasname] nvarchar(4000),\n    [md_people_birthdate] bigint,\n    [md_people_gender] nvarchar(4000),\n    [md_people_cellno] nvarchar(4000),\n    [md_people_emailaddress] nvarchar(4000),\n    [md_people_nationality] nvarchar(4000),\n    [md_people_idnumber] nvarchar(4000),\n    [md_people_passportno] nvarchar(4000),\n    [md_people_passportcountrycode] nvarchar(4000),\n    [md_people_idpassportno] nvarchar(4000),\n    [md_people_dateengaged] datetime2(7),\n    [md_people_datejoinedgroup] datetime2(7),\n    [md_people_employeestatus] nvarchar(4000),\n    [md_people_terminationdate] datetime2(7),\n    [md_people_terminationreasonid] int,\n    [md_people_depotcode] nvarchar(4000),\n    [md_people_jobcategory] nvarchar(4000),\n    [md_people_jobtitle] nvarchar(4000),\n    [md_people_source] nvarchar(4000),\n    [md_people_insby] nvarchar(4000),\n    [md_people_islinehaul] int,\n    [md_people_companycode] nvarchar(4000),\n    [md_people_companydisplayname] nvarchar(4000),\n    [md_people_companyrulecode] nvarchar(4000),\n    [md_people_reportstoemployee] nvarchar(4000),\n    [md_people_reporttoempid] bigint,\n    [md_people_internalexternal] nvarchar(4000),\n    [md_people_driverid] bigint,\n    [md_people_licenseno] nvarchar(4000),\n    [md_people_driverrestriction] nvarchar(4000),\n    [md_people_issuecountry] nvarchar(4000),\n    [md_people_issuedate] datetime2(7),\n    [md_people_licensevalidfrom] datetime2(7),\n    [md_people_licensevalidto] datetime2(7),\n    [md_people_vehiclecode] nvarchar(4000),\n    [md_people_vehiclerestriction] nvarchar(4000),\n    [md_people_driverphoto] nvarchar(4000),\n    [md_people_licenseexpired] int,\n    [md_people_prdpcode] nvarchar(4000),\n    [md_people_prdpexpiry] datetime2(7),\n    [md_people_personalid] bigint,\n    [md_people_physicalblock] nvarchar(4000),\n    [md_people_physicalcitytown] nvarchar(4000),\n    [md_people_physicalcomplex] nvarchar(4000),\n    [md_people_physicalcountrycode] nvarchar(4000),\n    [md_people_physicaldistrictid] nvarchar(4000),\n    [md_people_physicallevelfloor] nvarchar(4000),\n    [md_people_physicalpostalcode] nvarchar(4000),\n    [md_people_physicalprovince] nvarchar(4000),\n    [md_people_physicalstreetfarmname] nvarchar(4000),\n    [md_people_physicalstreetnumber] nvarchar(4000),\n    [md_people_physicalsuburbdistrict] nvarchar(4000),\n    [md_people_physicalunitpostalnumber] nvarchar(4000),\n    [md_people_postaladdressid] nvarchar(4000),\n    [md_people_postaladdressservicetype] nvarchar(4000),\n    [md_people_postalblock] nvarchar(4000),\n    [md_people_postalcitytown] nvarchar(4000),\n    [md_people_postalcomplex] nvarchar(4000),\n    [md_people_postalconcat] nvarchar(4000),\n    [md_people_postaldistrictid] nvarchar(4000),\n    [md_people_postallevelfloor] nvarchar(4000),\n    [md_people_postalpostalcode] nvarchar(4000),\n    [md_people_postalprovince] nvarchar(4000),\n    [md_people_postalstreetfarmname] nvarchar(4000),\n    [md_people_postalstreetnumber] nvarchar(4000),\n    [md_people_postalsuburbdistrict] nvarchar(4000),\n    [md_people_postalunitpostalnumber] nvarchar(4000),\n    [md_people_racialgroup] nvarchar(4000),\n\n    \n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/MD/stmdpeople.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STMDPeople \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STMD",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STMDSapDepot')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STMDSapDepot') )\n    DROP EXTERNAL TABLE dbo.D_STMDSapDepot\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STMDSapDepot (\n\n    [md_depot_id] bigint,\n    [md_depot_parentdepotcode] nvarchar(4000),\n\t[sap_transactionsline_subdepotcode] nvarchar(4000),\n\t[md_depot_depotname] nvarchar(4000),\n\t[md_depot_division] nvarchar(4000),\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/stmdsapdepot.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STMDSapDepot \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STMDVehicle')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/MasterData"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STMDVehicle') )\n    DROP EXTERNAL TABLE dbo.D_STMDVehicle\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STMDVehicle (\n\n    [md_vehicle_id] bigint,\n    [md_vehicle_uid] nvarchar(4000),\n    [md_vehicle_vehicletype] nvarchar(4000),\n    [md_vehicle_internalexternal] nvarchar(4000),\n    [md_vehicle_activeflag] bigint,\n    [md_vehicle_vehiclestatus] nvarchar(4000),\n    [md_vehicle_chassisnumber] nvarchar(4000),\n    [md_vehicle_depot] nvarchar(4000),\n    [md_vehicle_enginenumber] nvarchar(4000),\n    [md_vehicle_fleetcode] nvarchar(4000),\n    [md_vehicle_fueltype] nvarchar(4000),\n    [md_vehicle_registrationnumber] nvarchar(4000),\n    [md_vehicle_vehicleapplication] nvarchar(4000),\n    [md_vehicle_vehiclebodymake] nvarchar(4000),\n    [md_vehicle_vehiclecolour] nvarchar(4000),\n    [md_vehicle_vehiclemake] nvarchar(4000),\n    [md_vehicle_vehiclemodel] nvarchar(4000),\n    [md_vehicle_vehicleseries] nvarchar(4000),\n    [md_vehicle_year] int,\n    [md_vehicle_vehicleownerid] bigint,\n    [md_vehicle_vehicleowner] nvarchar(4000),\n    [md_vehicle_staffvehicleflag] int,\n    [md_vehicle_vehicletrailersize] nvarchar(4000),\n    [md_vehicle_vehicletrailertype] nvarchar(4000),\n    [md_vehicle_vehicleetollclass] nvarchar(4000),\n    [md_vehicle_brn] nvarchar(4000),\n    [md_vehicle_brnnumber] nvarchar(4000),\n    [md_vehicle_vehicleregisterno] nvarchar(4000),\n    [md_vehicle_vehiclebasicinsdate] datetime2(7),\n    [md_vehicle_insby] nvarchar(4000),\n    [md_vehicle_islinehaulvehicle] int,\n    [md_vehicle_internalheight] numeric(18,2),\n    [md_vehicle_internallength] numeric(18,2),\n    [md_vehicle_internalvolume] numeric(18,2),\n    [md_vehicle_internalwidth] numeric(18,2),\n    [md_vehicle_vehiclebasicmoddate] datetime2(7),\n    [md_vehicle_trailerflag] int,\n    [md_vehicle_workflowstatus] nvarchar(4000),\n    [md_vehicle_vehicleapproveddate] datetime2(7),\n    [md_vehicle_mmcode] nvarchar(4000),\n    [md_vehicle_tmplicenseexpiery] bigint,\n    [md_vehicle_currentadvertising] nvarchar(4000),\n    [md_vehicle_fuelcardnumber] nvarchar(4000),\n    [md_vehicle_fuelcardreceivedate] datetime2(7),\n    [md_vehicle_licenseexpirydate] datetime2(7),\n    [md_vehicle_licensefee] numeric(18,2),\n    [md_vehicle_vehicleadvertisingindicator] nvarchar(4000),\n    [md_vehicle_vehiclespeedgoverningdevice] nvarchar(4000),\n    [md_vehicle_oldregistrationnumber] nvarchar(4000),\n    [md_vehicle_oldchassisnumber] nvarchar(4000),\n    [md_vehicle_oldenginenumber] nvarchar(4000),\n    [md_vehicle_logbookrecord] nvarchar(4000),\n    [md_vehicle_adminstatus] nvarchar(4000),\n    [md_vehicle_vehicleadmincompletebydate] datetime2(7),\n    [md_vehicle_backdoorheight] numeric(18,2),\n    [md_vehicle_backdoorwidth] numeric(18,2),\n    [md_vehicle_externalheight] numeric(18,2),\n    [md_vehicle_externallength] numeric(18,2),\n    [md_vehicle_externalwidth] numeric(18,2),\n    [md_vehicle_fleximounts] int,\n    [md_vehicle_fuelcapacity] numeric(18,2),\n    [md_vehicle_grossvehiclemass] numeric(18,2),\n    [md_vehicle_numberoftyres] int,\n    [md_vehicle_numberoftyresrear] int,\n    [md_vehicle_numberoftyressteering] int,\n    [md_vehicle_payload] numeric(18,2),\n    [md_vehicle_peoplecarrier] int,\n    [md_vehicle_tareweight] numeric(18,2),\n    [md_vehicle_tyresize] nvarchar(4000),\n    [md_vehicle_tyresizealternative] nvarchar(4000),\n    [md_vehicle_targetfuelconsumption] numeric(18,2),\n    [md_vehicle_tankrange] numeric(18,2),\n    [md_vehicle_operationsstatus] nvarchar(4000),\n    [md_vehicle_vehiclevehicleoperationscompletebydate] datetime2(7),\n    [md_vehicle_assetnumber] nvarchar(4000),\n    [md_vehicle_contractenddate] datetime2(7),\n    [md_vehicle_contractnumber] nvarchar(4000),\n    [md_vehicle_contractstartdate] datetime2(7),\n    [md_vehicle_vehiclefinancecompany] nvarchar(4000),\n    [md_vehicle_budgetrmcpk] numeric(18,2),\n    [md_vehicle_budgettyrecpk] numeric(18,2),\n    [md_vehicle_retailvalue] numeric(18,2),\n    [md_vehicle_tradeinvalue] numeric(18,2),\n    [md_vehicle_loadbodyreplacementcost] numeric(18,2),\n    [md_vehicle_financestatus] nvarchar(4000),\n    [md_vehicle_vehiclefinancecompletebydate] datetime2(7),\n    [md_vehicle_trackingstatus] nvarchar(4000),\n    [md_vehicle_vehicletrackingcompletebydate] datetime2(7),\n    [md_vehicle_vehicletrackingmoddate] datetime2(7),\n    [md_vehicle_assetid] bigint,\n    [md_vehicle_providerid] bigint,\n    [md_vehicle_providername] nvarchar(4000),\n    [md_vehicle_serial] nvarchar(4000),\n    [md_vehicle_vehicletrackinginsdate] datetime2(7),\n    [md_vehicle_linkdate] datetime2(7),\n    [md_vehicle_linkby] bigint,\n    [md_vehicle_linkbyname] nvarchar(4000),\n\n    \n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/MD/stmdvehicle.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STMDVehicle \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STMD",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STOpsRoute')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STOpsRoute') )\n    DROP EXTERNAL TABLE dbo.D_STOpsRoute\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STOpsRoute (\n[tms_opsroute_id] bigint,\n[tms_opsroute_name] nvarchar(4000),\n[tms_opsroute_slug] nvarchar(4000),\n[tms_opsroute_parentroute] bigint,\n[tms_opsroute_insdate] datetime2(7),\n[tms_opsroute_moddate] datetime2(7),\n[tms_opsroute_insby] bigint,\n[tms_opsroute_status] nvarchar(4000),\n[tms_opsroute_crossborder] int,\n[tms_opsroute_roundtripdays] int,\n[tms_opsroute_distance] int,\n[tms_opsroute_duration] int,\n[tms_opsroute_numofuse] int,\n[tms_opsroute_legacyid] int,\n[tms_opsroute_local] int,\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stopsroute.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STOpsRoute \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STPOLookup')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STPOLookup') )\n    DROP EXTERNAL TABLE dbo.D_STPOLookup\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STPOLookup (\n\n[sap_polookup_polookupid] nvarchar(4000),\n[sap_polookup_baseref] nvarchar(4000),\n[sap_polookup_docnum]int,\n[sap_polookup_docdate] date\n\n    \n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/stpolookup.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STPOLookup \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STParentRoute')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STParentRoute') )\n    DROP EXTERNAL TABLE dbo.D_STParentRoute\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STParentRoute (\n    [tms_parentroute_id] bigint,\n    [tms_parentroute_name] nvarchar(4000),\n    [tms_parentroute_slug] nvarchar(4000),\n    [tms_parentroute_parentroute] bigint,\n    [tms_parentroute_insdate] datetime2(7),\n    [tms_parentroute_moddate] datetime2(7),\n    [tms_parentroute_insby] bigint,\n    [tms_parentroute_status] nvarchar(4000),\n    [tms_parentroute_crossborder] int,\n    [tms_parentroute_roundtripdays] int,\n    [tms_parentroute_distance] int,\n    [tms_parentroute_duration] int,\n    [tms_parentroute_numofuse] int,\n    [tms_parentroute_legacyid] int,\n    [tms_parentroute_local] int\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stparentroute.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STParentRoute \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STPod')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STPod') )\n    DROP EXTERNAL TABLE dbo.D_STPod\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STPod (\n    [orv_pod_id] bigint,\n    [orv_pod_did] bigint,\n    [orv_pod_name] nvarchar(4000),\n    [orv_pod_poddate] datetime2(7),\n    [orv_pod_lat] float,\n    [orv_pod_lng] float,\n    [orv_pod_customerrating] int,\n    [orv_pod_customerfeedback] nvarchar(4000)\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stpod.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STPod \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STRateComponent')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STRateComponent') )\n    DROP EXTERNAL TABLE dbo.D_STRateComponent\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STRateComponent (\n    [tms_ratecomponent_id] bigint,\n    [tms_ratecomponent_profileid] bigint,\n    [tms_ratecomponent_ratetype] nvarchar(4000),\n    [tms_ratecomponent_amount] int,\n    [tms_ratecomponent_applyfuellevy] int,\n    [tms_ratecomponent_note] nvarchar(4000),\n    [tms_ratecomponent_insdate] datetime2(7),\n    [tms_ratecomponent_moddate] datetime2(7),\n    [tms_ratecomponent_insby] bigint,\n    [tms_ratecomponent_legacyid] int,\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stratecomponent.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STRateComponent \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STRateProfile')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STRateProfile') )\n    DROP EXTERNAL TABLE dbo.D_STRateProfile\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STRateProfile (\n    [tms_rateprofile_id] bigint,\n    [tms_rateprofile_eid] bigint,\n    [tms_rateprofile_entity] nvarchar(4000),\n    [tms_rateprofile_trailersize] nvarchar(4000),\n    [tms_rateprofile_routeid] bigint,\n    [tms_rateprofile_profiletype] nvarchar(4000),\n    [tms_rateprofile_fromdate] datetime2(7),\n    [tms_rateprofile_todate] datetime2(7),\n    [tms_rateprofile_insby] bigint,\n    [tms_rateprofile_status] nvarchar(4000),\n    [tms_rateprofile_insdate] datetime2(7),\n    [tms_rateprofile_moddate] datetime2(7),\n    [tms_rateprofile_note] nvarchar(4000),\n    [tms_rateprofile_legacyid] int,\n    [tms_rateprofile_usedfuelprice] int,\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/strateprofile.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STRateProfile \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STSRoute')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STSRoute') )\n    DROP EXTERNAL TABLE dbo.D_STSRoute\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STSRoute (\n    [lms_sroute_id] int,\n    [lms_sroute_billcustid] int,\n    [lms_sroute_courierid] nvarchar(4000),\n    [lms_sroute_description] nvarchar(4000),\n    [lms_sroute_code] nvarchar(4000),\n    [lms_sroute_id2] int,\n    [lms_sroute_sroutegroupid] int,\n    [lms_sroute_zoneid] int,\n    [lms_sroute_broutemasterid] int,\n    [lms_sroute_localflag] int,\n    [lms_sroute_area] nvarchar(4000),\n    [lms_sroute_highvolume] int\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stsroute.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STSRoute \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STTMSList')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STTMSList') )\n    DROP EXTERNAL TABLE dbo.D_STTMSList\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STTMSList (\n    [tms_list_id] bigint,\n    [tms_list_slug] nvarchar(4000),\n    [tms_list_valuetype] nvarchar(4000),\n    [tms_list_descr] nvarchar(4000),\n    [tms_list_insdate] datetime2(7),\n    [tms_list_moddate] datetime2(7),\n    [tms_list_refcols] nvarchar(4000),\n    [tms_list_editable] int,\n    [tms_listitem_id] bigint,\n    [tms_listitem_lid] bigint,\n    [tms_listitem_itemlabel] nvarchar(4000),\n    [tms_listitem_itemvalue] nvarchar(4000),\n    [tms_listitem_sort] int,\n    [tms_listitem_mdid] bigint,\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/sttmslist.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STTMSList \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STTMSPrimaryCustomer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STTMSPrimaryCustomer') )\n    DROP EXTERNAL TABLE dbo.D_STTMSPrimaryCustomer\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STTMSPrimaryCustomer (\n    [tms_customer_id] bigint,\n    [tms_customer_status] nvarchar(4000),\n    [tms_customer_name] nvarchar(4000),\n    [tms_customer_parentid] bigint,\n    [tms_customer_accountnumber] nvarchar(4000),\n    [tms_customer_revenuecode] nvarchar(4000),\n    [tms_customer_insdate] datetime2(7),\n    [tms_customer_moddate] datetime2(7),\n    [tms_customer_insby] bigint,\n    [tms_customer_opaqueid] nvarchar(4000),\n    [tms_customer_email] nvarchar(4000),\n    [tms_customer_areacode] nvarchar(4000),\n    [tms_customer_mobilenum] nvarchar(4000),\n    [tms_customer_legacyid] int,\n    [tms_customer_billingmethod] nvarchar(4000),\n    [tms_customer_adjustmetric] nvarchar(4000),\n    [tms_customer_adjustvalue] int,\n    [tms_customer_adjustnegativeallowed] int,\n    [tms_customer_adjustvalueusingprevmonth] int,\n    [tms_customer_excludefromnotinvoicedreport] int,\n    [tms_customer_logictype] nvarchar(4000),\n    [tms_customer_minliability] bigint\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stprimarycustomer.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STTMSPrimaryCustomer \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STTMSSecondaryCustomer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STTMSSecondaryCustomer') )\n    DROP EXTERNAL TABLE dbo.D_STTMSSecondaryCustomer\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STTMSSecondaryCustomer (\n    [tms_customer_id] bigint,\n    [tms_customer_status] nvarchar(4000),\n    [tms_customer_name] nvarchar(4000),\n    [tms_customer_parentid] bigint,\n    [tms_customer_accountnumber] nvarchar(4000),\n    [tms_customer_revenuecode] nvarchar(4000),\n    [tms_customer_insdate] datetime2(7),\n    [tms_customer_moddate] datetime2(7),\n    [tms_customer_insby] bigint,\n    [tms_customer_opaqueid] nvarchar(4000),\n    [tms_customer_email] nvarchar(4000),\n    [tms_customer_areacode] nvarchar(4000),\n    [tms_customer_mobilenum] nvarchar(4000),\n    [tms_customer_legacyid] int,\n    [tms_customer_billingmethod] nvarchar(4000),\n    [tms_customer_adjustmetric] nvarchar(4000),\n    [tms_customer_adjustvalue] int,\n    [tms_customer_adjustnegativeallowed] int,\n    [tms_customer_adjustvalueusingprevmonth] int,\n    [tms_customer_excludefromnotinvoicedreport] int,\n    [tms_customer_logictype] nvarchar(4000),\n    [tms_customer_minliability] bigint\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stsecondarycustomer.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STTMSSecondaryCustomer \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STThirdParty')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STThirdParty') )\n    DROP EXTERNAL TABLE dbo.D_STThirdParty\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STThirdParty (\n    [tms_thirdparty_id] bigint,\n    [tms_thirdparty_name] nvarchar(4000),\n    [tms_thirdparty_areacode] nvarchar(4000),\n    [tms_thirdparty_telnumber] nvarchar(4000),\n    [tms_thirdparty_mobareacode] nvarchar(4000),\n    [tms_thirdparty_mobnumer] nvarchar(4000),\n    [tms_thirdparty_contact] nvarchar(4000),\n    [tms_thirdparty_address] nvarchar(4000),\n    [tms_thirdparty_streetno] nvarchar(4000),\n    [tms_thirdparty_zipcode] nvarchar(4000),\n    [tms_thirdparty_city] nvarchar(4000),\n    [tms_thirdparty_province] nvarchar(4000),\n    [tms_thirdparty_status] nvarchar(4000),\n    [tms_thirdparty_mdvoid] bigint,\n    [tms_thirdparty_registration] nvarchar(4000),\n    [tms_thirdparty_email] nvarchar(4000),\n    [tms_thirdparty_accnumber] nvarchar(4000),\n    [tms_thirdparty_insdate] datetime2(7),\n    [tms_thirdparty_moddate] datetime2(7),\n    [tms_thirdparty_gitstatus] nvarchar(4000),\n    [tms_thirdparty_legacyid] int,\n    [tms_thirdparty_lat] float,\n    [tms_thirdparty_lng] float,\n    [tms_thirdparty_note] nvarchar(4000),\n    [tms_thirdparty_revenuecode] nvarchar(4000),\n    [tms_thirdparty_country] nvarchar(4000)\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stthirdparty.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STThirdParty \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STUserOrv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STUserOrv') )\n    DROP EXTERNAL TABLE dbo.D_STUserOrv\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STUserOrv (\n    [orv_orvuser_id] bigint,\n    [orv_orvuser_username] nvarchar(4000),\n    [orv_orvuser_fname] nvarchar(4000),\n    [orv_orvuser_lname] nvarchar(4000),\n    [orv_orvuser_empcode] nvarchar(4000),\n    [orv_orvuser_aka] nvarchar(4000),\n    [orv_orvuser_gender] nvarchar(4000),\n    [orv_orvuser_rsaid] nvarchar(4000),\n    [orv_orvuser_passportno] nvarchar(4000),\n    [orv_orvuser_idpassportno] nvarchar(4000),\n    [orv_orvuser_nationality] nvarchar(4000),\n    [orv_orvuser_termindate] datetime2(7),\n    [orv_orvuser_status] nvarchar(4000),\n    [orv_orvuser_depot] nvarchar(4000),\n    [orv_orvuser_jobcategory] nvarchar(4000),\n    [orv_orvuser_lmsid] bigint,\n    [orv_orvuser_vipid] bigint,\n    [orv_orvuser_crewlmsid] bigint,\n    [orv_orvuser_courierid] bigint\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/storvuser.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STUserOrv\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STVehicle')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STVehicle') )\n    DROP EXTERNAL TABLE dbo.D_STVehicle\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STVehicle (\n\n    [lms_vehicle_id] int,\n    [lms_vehicle_fleetno] nvarchar(4000),\n    [lms_vehicle_regno] nvarchar(4000),\n    [lms_vehicle_uid] nvarchar(4000),\n    [orv_vehicle_id] bigint,\n    [orv_vehicle_tollclass] nvarchar(4000),\n    [orv_vehicle_sapcode] nvarchar(4000),\n    [orv_vehicle_lmsid] bigint,\n\n    \n    \n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stvehicle.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STVehicle \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STWaybillDelayReasons')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STWaybillDelayReasons') )\n    DROP EXTERNAL TABLE dbo.D_STWaybillDelayReasons\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STWaybillDelayReasons (\n    [lms_delayreason_id] bigint,\n    [lms_delayreason_description] nvarchar(4000),\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stwaybilldelayreasons.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STWaybillDelayReasons \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STWaybillDeliveryStatusReasons')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STWaybillDeliveryStatusReasons') )\n    DROP EXTERNAL TABLE dbo.D_STWaybillDeliveryStatusReasons\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STWaybillDeliveryStatusReasons (\n    [lms_deliverystatus_id] bigint,\n    [lms_deliverystatus_description] nvarchar(4000),\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stwaybilldeliverystatusreasons.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STWaybillDeliveryStatusReasons \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STWaybillInServiceReasons')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STWaybillInServiceReasons') )\n    DROP EXTERNAL TABLE dbo.D_STWaybillInServiceReasons\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STWaybillInServiceReasons (\n    [lms_inservicereason_id] bigint,\n    [lms_inservicereason_description] nvarchar(4000),\n    [lms_inservicereason_group] nvarchar(4000),\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stwaybillinservicereasons.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STWaybillInServiceReasons \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STWaybillNotDBReasons')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STWaybillNotDBReasons') )\n    DROP EXTERNAL TABLE dbo.D_STWaybillNotDBReasons\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STWaybillNotDBReasons (\n    [lms_notdbreason_id] bigint,\n    [lms_notdbreason_description] nvarchar(4000),\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stwaybillnotdbreasons.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STWaybillNotDBReasons \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STWaybillReasonDetails')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STWaybillReasonDetails') )\n    DROP EXTERNAL TABLE dbo.D_STWaybillReasonDetails\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STWaybillReasonDetails (\n    [lms_reasondetail_id] bigint,\n    [lms_reasondetail_description] nvarchar(4000),\n    [lms_reasondetail_group] nvarchar(4000),\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stwaybillreasondetails.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STWaybillReasonDetails \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/D_STZone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.D_STZone') )\n    DROP EXTERNAL TABLE dbo.D_STZone\nGO\n\nCREATE EXTERNAL TABLE dbo.D_STZone (\n    [lms_zone_id] int,\n    [lms_zone_code] nvarchar(4000),\n    [lms_zone_description] nvarchar(4000),\n    [lms_zone_isocode] nvarchar(4000),\n    [lms_zone_locid] int,\n    [lms_zone_zonemasterid] int \n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stzone.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.D_STZone \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTBooking SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTBooking') )\n    DROP EXTERNAL TABLE dbo.F_SSTBooking\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTBooking (\n\t[tms_booking_id] bigint,\n\t[tms_booking_bookingtype] nvarchar(4000),\n\t[tms_booking_customerid] bigint,\n\t[tms_booking_trailersize] nvarchar(4000),\n\t[tms_booking_trailertype] nvarchar(4000),\n\t[tms_booking_routeid] bigint,\n\t[tms_booking_routename] nvarchar(4000),\n\t[tms_booking_cargoweight] float,\n\t[tms_booking_cubicvolume] float,\n\t[tms_booking_directbooking] int,\n\t[tms_booking_pickupdate] datetime2(7),\n\t[tms_booking_dispatchdate] datetime2(7),\n\t[tms_booking_deliverydate] datetime2(7),\n\t[tms_booking_insdate] datetime2(7),\n\t[tms_booking_moddate] datetime2(7),\n\t[tms_booking_status] nvarchar(4000),\n\t[tms_booking_tripid] bigint,\n\t[tms_booking_createdby] bigint,\n\t[tms_booking_allocatedby] bigint,\n\t[tms_booking_allocateddate] datetime2(7),\n\t[tms_booking_opsrouteid] bigint,\n\t[tms_booking_opsroutename] nvarchar(4000),\n\t[tms_booking_childcustomerid] bigint,\n\t[tms_booking_thirdpartyreason] nvarchar(4000),\n\t[tms_booking_thirdpartyrate] bigint,\n\t[tms_booking_cref1] nvarchar(4000),\n\t[tms_booking_cref2] nvarchar(4000),\n\t[tms_booking_thirdpartyvehicleflag] int,\n\t[tms_booking_thirdpartytrailerflag] int,\n\t[tms_booking_thirdpartydriverflag] int,\n\t[tms_booking_invoiceid] bigint,\n\t[tms_booking_docstatus] nvarchar(4000),\n\t[tms_booking_billingstatus] nvarchar(4000),\n\t[tms_booking_thirdpartyagreedrate] bigint,\n\t[tms_booking_invoiceddate] datetime2(7),\n\t[tms_booking_createdbyname] nvarchar(4000),\n\t[tms_booking_note] nvarchar(4000),\n\t[tms_booking_manifests] nvarchar(4000),\n\t[tms_booking_local] int,\n\t[tms_booking_docdate] datetime2(7),\n\t[tms_booking_billingmethod] nvarchar(4000),\n\t[tms_booking_originalpod] int,\n\t[tms_booking_ponumber] nvarchar(4000),\n\t[tms_booking_customerrate] bigint,\n\t[tms_booking_customeragreedrate] bigint,\n\t[tms_booking_assetreleasedate] datetime2(7),\n\t[tms_booking_thirdpartyid] bigint,\n\t[tms_booking_transporter] nvarchar(4000),\n\t[tms_booking_emailrequester] nvarchar(4000),\n\t[tms_booking_frombranchid] bigint,\n\t[tms_booking_tobranchid] bigint,\n\t[tms_booking_frombranch] nvarchar(4000),\n\t[tms_booking_tobranch] nvarchar(4000),\n\t[tms_booking_reason] nvarchar(4000),\n\t[tms_booking_startaddress] nvarchar(4000),\n\t[tms_booking_startlat] float,\n\t[tms_booking_startlng] float,\n\t[tms_booking_endaddress] nvarchar(4000),\n\t[tms_booking_endlat] float,\n\t[tms_booking_endlng] float,\n\t[tms_booking_convertedbookingid] bigint,\n\t[tms_customer_id] bigint,\n\t[tms_customer_status] nvarchar(4000),\n\t[tms_customer_name] nvarchar(4000),\n\t[tms_customer_parentid] bigint,\n\t[tms_customer_accountnumber] nvarchar(4000),\n\t[tms_customer_revenuecode] nvarchar(4000),\n\t[tms_customer_insdate] bigint,\n\t[tms_customer_moddate] bigint,\n\t[tms_customer_insby] bigint,\n\t[tms_customer_opaqueid] nvarchar(4000),\n\t[tms_customer_email] nvarchar(4000),\n\t[tms_customer_areacode] nvarchar(4000),\n\t[tms_customer_mobilenum] nvarchar(4000),\n\t[tms_customer_billingmethod] nvarchar(4000),\n\t[tms_customer_adjustmetric] nvarchar(4000),\n\t[tms_customer_adjustvalue] int,\n\t[tms_customer_adjustnegativeallowed] int,\n\t[tms_customer_adjustvalueusingprevmonth] int,\n\t[tms_customer_excludefromnotinvoicedreport] int,\n\t[tms_customer_logictype] nvarchar(4000),\n\t[tms_customer_childid] bigint,\n\t[tms_customer_childstatus] nvarchar(4000),\n\t[tms_customer_childname] nvarchar(4000),\n\t[tms_customer_childparentid] bigint,\n\t[tms_customer_childaccountnumber] nvarchar(4000),\n\t[tms_customer_childrevenuecode] nvarchar(4000),\n\t[tms_customer_childinsdate] bigint,\n\t[tms_customer_childmoddate] bigint,\n\t[tms_customer_childinsby] bigint,\n\t[tms_customer_childopaqueid] nvarchar(4000),\n\t[tms_customer_childemail] nvarchar(4000),\n\t[tms_customer_childareacode] nvarchar(4000),\n\t[tms_customer_childmobilenum] nvarchar(4000),\n\t[tms_customer_childbillingmethod] nvarchar(4000),\n\t[tms_customer_childadjustmetric] nvarchar(4000),\n\t[tms_customer_childadjustvalue] int,\n\t[tms_customer_childadjustnegativeallowed] int,\n\t[tms_customer_childadjustvalueusingprevmonth] int,\n\t[tms_customer_childexcludefromnotinvoicedreport] int,\n\t[tms_customer_childlogictype] nvarchar(4000),\n\t[tms_customer_childminliability] bigint,\n\t[tms_route_id] bigint,\n\t[tms_route_name] nvarchar(4000),\n\t[tms_route_slug] nvarchar(4000),\n\t[tms_route_parentroute] bigint,\n\t[tms_route_insdate] bigint,\n\t[tms_route_moddate] bigint,\n\t[tms_route_insby] bigint,\n\t[tms_route_status] nvarchar(4000),\n\t[tms_route_crossborder] int,\n\t[tms_route_roundtripdays] int,\n\t[tms_route_distance] int,\n\t[tms_route_duration] int,\n\t[tms_route_numofuse] int,\n\t[tms_route_local] int,\n\t[tms_route_opsrouteid] bigint,\n\t[tms_route_opsroutename] nvarchar(4000),\n\t[tms_route_opsrouteslug] nvarchar(4000),\n\t[tms_route_opsrouteparentroute] bigint,\n\t[tms_route_opsrouteinsdate] bigint,\n\t[tms_route_opsroutemoddate] bigint,\n\t[tms_route_opsrouteinsby] bigint,\n\t[tms_route_opsroutestatus] nvarchar(4000),\n\t[tms_route_opsroutecrossborder] int,\n\t[tms_route_opsrouteroundtripdays] int,\n\t[tms_route_opsroutedistance] int,\n\t[tms_route_opsrouteduration] int,\n\t[tms_route_opsroutenumofuse] int,\n\t[tms_route_opsroutelocal] int,\n\t[tms_thirdparty_id] bigint,\n\t[tms_thirdparty_name] nvarchar(4000),\n\t[tms_thirdparty_areacode] nvarchar(4000),\n\t[tms_thirdparty_telnumber] nvarchar(4000),\n\t[tms_thirdparty_mobareacode] nvarchar(4000),\n\t[tms_thirdparty_mobnumer] nvarchar(4000),\n\t[tms_thirdparty_contact] nvarchar(4000),\n\t[tms_thirdparty_address] nvarchar(4000),\n\t[tms_thirdparty_streetno] nvarchar(4000),\n\t[tms_thirdparty_zipcode] nvarchar(4000),\n\t[tms_thirdparty_city] nvarchar(4000),\n\t[tms_thirdparty_province] nvarchar(4000),\n\t[tms_thirdparty_status] nvarchar(4000),\n\t[tms_thirdparty_mdvoid] bigint,\n\t[tms_thirdparty_registration] nvarchar(4000),\n\t[tms_thirdparty_email] nvarchar(4000),\n\t[tms_thirdparty_accnumber] nvarchar(4000),\n\t[tms_thirdparty_insdate] bigint,\n\t[tms_thirdparty_moddate] bigint,\n\t[tms_thirdparty_gitstatus] nvarchar(4000),\n\t[tms_thirdparty_lat] float,\n\t[tms_thirdparty_lng] float,\n\t[tms_thirdparty_note] nvarchar(4000),\n\t[tms_thirdparty_revenuecode] nvarchar(4000),\n\t[tms_thirdparty_country] nvarchar(4000),\n\t[tms_financedata_id] bigint,\n\t[tms_financedata_bookingid] bigint,\n\t[tms_financedata_insdate] bigint,\n\t[tms_financedata_peaksurchagrebuy] bigint,\n\t[tms_financedata_peaksurchagresell] bigint,\n\t[tms_financedata_manualentryroadhaulsell] bigint,\n\t[tms_financedata_manualentryahocsell] bigint,\n\t[tms_financedata_systemfuellevy] bigint,\n\t[tms_financedata_systemratefuellevy] bigint,\n\t[tms_financedata_systemratefuelexlevy] bigint,\n\t[tms_financedata_systemratefuelinclevy] bigint,\n\t[tms_financedata_systemsellrate] bigint,\n\t[tms_financedata_totalsellrate] bigint,\n\t[tms_financedata_moddate] bigint,\n\t[tms_financedata_totalbuyrate] bigint,\n\t[tms_financedata_rateprofileid] bigint\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstbooking.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nSELECT TOP 100 * FROM dbo.F_SSTBooking \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTCollect SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTCollect') )\n    DROP EXTERNAL TABLE dbo.F_SSTCollect\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTCollect (\n\t[lms_collect_id] int,\n\t[lms_collect_date] datetime2(7),\n\t[lms_collect_cservice] nvarchar(4000),\n\t[lms_collect_billcust] int,\n\t[lms_collect_pickupcustid] int,\n\t[lms_collect_delivercustid] int,\n\t[lms_collect_locationid] int,\n\t[lms_collect_noofparcels] nvarchar(4000),\n\t[lms_collect_weight] nvarchar(4000),\n\t[lms_collect_timeready] nvarchar(4000),\n\t[lms_collect_vehiclecapacity] int,\n\t[lms_collect_collectrefno] nvarchar(4000),\n\t[lms_collect_timeclosed] nvarchar(4000),\n\t[lms_collect_securitycollect] int,\n\t[lms_collect_confirmedby] nvarchar(4000),\n\t[lms_collect_courierid] nvarchar(4000),\n\t[lms_collect_confirmeddate] datetime2(7),\n\t[lms_collect_transferreddate] datetime2(7),\n\t[lms_collect_senddate] datetime2(7),\n\t[lms_collect_orderid] int,\n\t[lms_collect_orderdate] datetime2(7),\n\t[lms_collect_userid] int,\n\t[lms_collect_reason] nvarchar(4000),\n\t[lms_collect_cubes] numeric(18,2),\n\t[lms_collect_custref] nvarchar(4000),\n\t[lms_collect_custref3] nvarchar(4000),\n\t[lms_collect_custaccid] int,\n\t[lms_collect_collectparentid] int,\n\t[lms_collect_duedate] datetime2(7),\n\t[lms_collect_specdel] int,\n\t[lms_collect_flunits] int,\n\t[lms_collect_flkgs] int,\n\t[lms_collect_quote] numeric(18,2),\n\t[lms_collect_bill_vehicletype] int,\n\t[lms_collect_collectstatusid] int,\n\t[lms_collect_bill_collectstatusid] int,\n\t[lms_collect_cancelreason] int,\n\t[lms_collect_cancelcomments] nvarchar(4000),\n\t[lms_collect_loadid] int,\n\t[lms_collect_custref2] nvarchar(4000),\n\t[lms_collect_created] datetime2(7),\n\t[lms_collect_oncollection] datetime2(7),\n\t[lms_collect_collected] datetime2(7),\n\t[lms_collect_complete] datetime2(7),\n\t[lms_collect_cancelled] datetime2(7),\n\t[lms_collect_failed] datetime2(7),\n\t[lms_collect_ctype] int,\n\t[lms_collect_quoteid] int,\n\t[lms_collect_lastupdate] datetime2(7),\n\t[lms_collect_notes] nvarchar(4000),\n\t[lms_collect_docurl] nvarchar(4000),\n\t[lms_collect_docdate] datetime2(7),\n\t[lms_collect_orvstatus] nvarchar(4000),\n\t[lms_collect_orvcode] int,\n\t[lms_collect_oldloadid] int,\n\t[lms_bcustomer_id] int,\n\t[lms_bcustomer_name] nvarchar(4000),\n\t[lms_pcustomer_id] int,\n\t[lms_pcustomer_name] nvarchar(4000),\n\t[lms_dcustomer_id] int,\n\t[lms_dcustomer_name] nvarchar(4000),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_clocation_id] int,\n\t[lms_clocation_description] nvarchar(4000),\n\t[lms_collectstatus_id] int,\n\t[lms_collectstatus_description] nvarchar(4000),\n\t[orv_draftcollection_id] bigint,\n\t[orv_draftcollection_fromlocid] int,\n\t[orv_draftcollection_loadid] int,\n\t[orv_draftcollection_status] nvarchar(4000),\n\t[orv_draftcollection_importedate] datetime2(7),\n\t[orv_draftcollection_fromstr] nvarchar(4000),\n\t[orv_draftcollection_did] bigint,\n\t[orv_draftcollection_mergedlmsid] int,\n\t[orv_draftcollection_rejectdate] datetime2(7),\n\t[orv_draftcollection_confirmdate] datetime2(7),\n\t[orv_draftcollection_customerref] nvarchar(4000),\n\t[orv_draftcollection_collectionwaybillid] bigint,\n\t[orv_draftcollection_collectbydate] datetime2(7),\n\t[orv_draftcollection_rejectreason] nvarchar(4000),\n\t[orv_draftcollection_cancelctr] int,\n\t[orv_delivery_id] bigint,\n\t[orv_delivery_dispatchid] bigint,\n\t[orv_delivery_waybillid] bigint,\n\t[orv_delivery_address] nvarchar(4000),\n\t[orv_delivery_town] nvarchar(4000),\n\t[orv_delivery_province] nvarchar(4000),\n\t[orv_delivery_country] nvarchar(4000),\n\t[orv_delivery_lat] float,\n\t[orv_delivery_lng] float,\n\t[orv_delivery_placeid] nvarchar(4000),\n\t[orv_delivery_what3words] nvarchar(4000),\n\t[orv_delivery_zipcode] nvarchar(4000),\n\t[orv_delivery_eta] datetime2(7),\n\t[orv_delivery_actualeta] datetime2(7),\n\t[orv_delivery_deliverydate] datetime2(7),\n\t[orv_delivery_deliverby] datetime2(7),\n\t[orv_delivery_deliveryorder] int,\n\t[orv_delivery_tsgeofenceenter] datetime2(7),\n\t[orv_delivery_tsscanningstart] datetime2(7),\n\t[orv_delivery_tsscanningstop] datetime2(7),\n\t[orv_delivery_tspodsignature] datetime2(7),\n\t[orv_delivery_aid] bigint,\n\t[orv_delivery_numprcls] int,\n\t[orv_delivery_geocodingstatus] nvarchar(4000),\n\t[orv_delivery_skipdate] datetime2(7),\n\t[orv_delivery_skipreason] nvarchar(4000),\n\t[orv_delivery_status] nvarchar(4000),\n\t[orv_delivery_partialmatch] int,\n\t[orv_delivery_approximated] int,\n\t[orv_delivery_lmsorder] int,\n\t[orv_delivery_optimizedorder] int,\n\t[orv_delivery_seal] nvarchar(4000),\n\t[orv_delivery_customerinvoice] int,\n\t[orv_delivery_customerdn] int,\n\t[orv_delivery_grv] nvarchar(4000),\n\t[orv_delivery_chepslip] int,\n\t[orv_delivery_cleandelivery] int,\n\t[orv_delivery_trackingcode] nvarchar(4000),\n\t[orv_delivery_mode] nvarchar(4000),\n\t[orv_delivery_customorder] int,\n\t[orv_delivery_verified] int,\n\t[orv_delivery_altered] int,\n\t[orv_delivery_orderid] int,\n\t[orv_delivery_mergeid] bigint,\n\t[orv_delivery_orderref] nvarchar(4000),\n\t[orv_delivery_drivernote] nvarchar(4000),\n\t[orv_delivery_guid] bigint,\n\t[orv_delivery_timedefinite] int,\n\t[orv_delivery_orvcode] int,\n\t[orv_delivery_vaid] bigint,\n\t[orv_delivery_delegatedate] datetime2(7),\n\t[orv_delivery_delegatemode] nvarchar(4000),\n\t[orv_delivery_debriefmode] nvarchar(4000),\n\t[orv_delivery_debriefed] int,\n\t[orv_delivery_insdate] datetime2(7),\n\t[orv_delivery_reviseddebrief] int,\n\t[orv_delivery_lmsdebriefed] int,\n\t[orv_delivery_uncanceldate] datetime2(7),\n\t[orv_delivery_podlaterdate] datetime2(7),\n\t[orv_delivery_podmanualdate] datetime2(7),\n\t[orv_delivery_manualdebriefreason] nvarchar(4000),\n\t[orv_delivery_submanualdebriefreason] nvarchar(4000),\n\t[orv_delivery_outofgeofencereason] nvarchar(4000),\n\t[orv_delivery_tsentergeofenceapp] datetime2(7),\n\t[orv_delivery_tsexitgeofenceapp] datetime2(7),\n\t[orv_delivery_comebacklater] bigint,\n\t[orv_delivery_uncancelusername] nvarchar(4000),\n\t[orv_delivery_cref] int,\n\t[orv_delivery_division] int,\n\t[orv_delivery_descriptionofgoods] nvarchar(4000),\n\t[orv_delivery_skiplng] float,\n\t[orv_delivery_skiplat] float,\n\t[orv_delivery_courierid] bigint,\n\t[orv_delivery_posreason] nvarchar(4000),\n\t[orv_delivery_moddate] datetime2(7),\n\t[orv_delivery_mallid] int,\n\t[orv_delivery_mallgid] bigint,\n\t[orv_delivery_lmsidskipreason] bigint,\n\t[orv_delivery_deleteforimport] int,\n\t[orv_delivery_podoutofgeofence] int,\n\t[orv_delivery_originalcustomerid] bigint,\n\t[orv_originalcustomer_id] bigint,\n\t[orv_originalcustomer_name] nvarchar(4000),\n\t[orv_mall_id] bigint,\n\t[orv_mall_mallname] nvarchar(4000),\n\t[orv_mall_branchname] nvarchar(4000),\n\t[orv_mall_gpretailer] nvarchar(4000),\n\t[orv_mall_highvoldelivery] nvarchar(4000),\n\t[orv_mall_stripmall] nvarchar(4000),\n\t[orv_mall_standalonestore] nvarchar(4000),\n\t[orv_mall_streetsidestore] nvarchar(4000),\n\t[orv_mall_dedicatedrouted] nvarchar(4000),\n\t[orv_mall_insdate] datetime2(7),\n\t[orv_mall_address] nvarchar(4000),\n\t[orv_mall_deleted] int,\n\t[orv_mall_lat] float,\n\t[orv_mall_lng] float\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstcollect.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTCollect\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTConsignment_SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTConsignment') )\n    DROP EXTERNAL TABLE dbo.F_SSTConsignment\nGO\n\n\nCREATE EXTERNAL TABLE dbo.F_SSTConsignment (\n\t[lms_consignment_id] int,\n\t[lms_consignment_cref] nvarchar(4000),\n\t[lms_consignment_cdate] datetime2(7),\n\t[lms_consignment_userid] int,\n\t[lms_consignment_appointment] datetime2(7),\n\t[lms_consignment_deliverby] datetime2(7),\n\t[lms_consignment_dconfirmed] nvarchar(4000),\n\t[lms_consignment_dcomment] nvarchar(4000),\n\t[lms_consignment_drefno] nvarchar(4000),\n\t[lms_consignment_loadid] int,\n\t[lms_consignment_delivercustid] int,\n\t[lms_consignment_mrpcflag] int,\n\t[lms_consignment_mrpflag] int,\n\t[lms_consignment_billcust] int,\n\t[lms_consignment_cserviceid] nvarchar(4000),\n\t[lms_consignment_lastupdate] datetime2(7),\n\t[lms_consignment_billflag] int,\n\t[lms_consignment_missingflag] int,\n\t[lms_consignment_routerateid] int,\n\t[lms_consignment_delivertypeid] int,\n\t[lms_consignment_billtypeid] int,\n\t[lms_consignment_totothersurcharges] numeric(28,2),\n\t[lms_consignment_lhaddrate] numeric(28,2),\n\t[lms_consignment_lhcharge] numeric(28,2),\n\t[lms_consignment_sapbillperiodid] int,\n\t[lms_consignment_lhrouterateid] int,\n\t[lms_parcelbyconsignment_consignid] int,\n\t[lms_parcelbyconsignment_aggweight] float,\n\t[lms_parcelbyconsignment_aggchargeweight] numeric(28,2),\n\t[lms_parcelbyconsignment_aggvolweight] float,\n\t[lms_parcelbyconsignment_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbyconsignment_noparcels] bigint,\n\t[lms_bill_consignmentr_id] int,\n\t[lms_bill_consignmentr_consignid] int,\n\t[lms_bill_consignmentr_updatedate] datetime2(7),\n\t[lms_bill_consignmentr_pickuprouteid] int,\n\t[lms_bill_consignmentr_deliverrouteid] int,\n\t[lms_bill_consignmentr_chargeweight] numeric(28,2),\n\t[lms_bill_consignmentr_noofparcels] int,\n\t[lms_bill_consignmentr_tripdistance] numeric(28,2),\n\t[lms_bill_consignmentr_consignmentvalue] numeric(28,2),\n\t[lms_bill_consignmentr_billcust] int,\n\t[lms_bill_consignmentr_redflag] int,\n\t[lms_bill_consignmentr_updind] int,\n\t[lms_bill_consignmentr_servicetypeid] int,\n\t[lms_bill_consignmentr_routemissingind] int,\n\t[lms_bill_consignmentr_chargescalcind] int,\n\t[lms_bill_consignmentr_cdate1] datetime2(7),\n\t[lms_bill_consignmentr_invalidpcode] int,\n\t[lms_bill_consignmentr_programno] int,\n\t[lms_bill_consignmentr_totrate] numeric(28,2),\n\t[lms_bill_consignmentr_routecharge] numeric(28,2),\n\t[lms_bill_consignmentr_minweight] numeric(28,2),\n\t[lms_bill_consignmentr_minrate] numeric(28,2),\n\t[lms_bill_consignmentr_corderno] nvarchar(4000),\n\t[lms_bill_consignmentr_custref] nvarchar(4000),\n\t[lms_bill_consignmentr_manualupdateflag] int,\n\t[lms_bill_consignmentr_prevbillcustid] int,\n\t[lms_bill_consignmentr_specdelvehicleid] int,\n\t[lms_bill_consignmentr_specdelmissingrouteflag] int,\n\t[lms_bill_consignmentr_overborderflag] int,\n\t[lms_bill_consignmentr_samedeliverid] int,\n\t[lms_bill_consignmentr_combineroutecharge] numeric(28,2),\n\t[lms_bill_consignmentr_waybillid] int,\n\t[lms_bill_consignmentr_routelinecount] int,\n\t[lms_bill_consignmentr_samedelcount] int,\n\t[lms_bill_consignmentr_aweight] numeric(28,2),\n\t[lms_bill_consignmentr_vweight] numeric(28,2),\n\t[lms_bill_consignmentr_custref3] nvarchar(4000),\n\t[lms_bill_consignmentr_units] int,\n\t[lms_bill_consignmentr_totsurcharges] numeric(28,2),\n\t[lms_bill_consignmentr_noofpallets] int,\n\t[lms_bill_consignmentr_invalidpudel] int,\n\t[lms_bill_consignmentr_sharikaflag] int,\n\t[lms_bill_consignmentr_sapid] int,\n\t[lms_bill_consignmentr_totfuelsurcharge] numeric(28,2),\n\t[lms_bill_consignmentr_totdocsurcharge] numeric(28,2),\n\t[lms_bill_consignmentr_totothersurcharge] numeric(28,2),\n\t[lms_bill_consignmentr_specdel] int,\n\t[lms_bill_consignmentr_quoteflag] int,\n\t[lms_bill_consignmentr_billperiod] nvarchar(4000),\n\t[lms_bill_consignmentr_billweekr] int,\n\t[lms_bill_consignmentr_billperiodflag] int,\n\t[lms_bill_consignmentr_surhargeflag] int,\n\t[lms_bill_consignmentr_recalcflag] int,\n\t[lms_bill_consignmentr_quotemissingflag] int,\n\t[lms_bill_consignmentr_delivertypeid] int,\n\t[lms_bill_consignmentr_totcovidsurcharge] numeric(28,2),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_users_site] nvarchar(4000),\n\t[lms_bcustomer_id] int,\n\t[lms_bcustomer_name] nvarchar(4000),\n\t[lms_dcustomer_id] int,\n\t[lms_dcustomer_name] nvarchar(4000),\n\t[lms_bill_routerate_id] int,\n\t[lms_bill_routerate_billcustid] int,\n\t[lms_bill_routerate_effectivedate] datetime2(7),\n\t[lms_bill_routerate_uomid] int,\n\t[lms_bill_routerate_routetypeid] int,\n\t[lms_bill_routerate_servicetypeid] int,\n\t[lms_bill_routerate_minkg] numeric(28,2),\n\t[lms_bill_routerate_minrate] numeric(28,2),\n\t[lms_bill_routerate_addrate] numeric(28,2),\n\t[lms_bill_routerate_servicedays] int,\n\t[lms_bill_routerate_servicehours] numeric(28,2),\n\t[lms_bill_routerate_ratecardind] int,\n\t[lms_bill_routerate_pickupid] int,\n\t[lms_bill_routerate_deliverid] int,\n\t[lms_bill_routerate_description] nvarchar(4000),\n\t[lms_bill_routerate_activeflag] int,\n\t[lms_bill_routerate_billroutetypeflag] int,\n\t[lms_bill_routerate_samedayflag] int,\n\t[lms_bill_routerate_specialrateflag] int,\n\t[lms_bill_routerate_tocustid] int,\n\t[lms_bill_routerate_maxparcel] int,\n\t[lms_bill_routerate_returnflag] int,\n\t[lms_bill_routerate_cutoff] numeric(28,2),\n\t[lms_bill_routerate_rateperkg] numeric(28,2),\n\t[lms_bill_routerate_userid] int,\n\t[lms_bill_routerate_authorizeperson] nvarchar(4000),\n\t[lms_bill_routerate_updatedate] datetime2(7),\n\t[lms_bill_routerate_delivertypeid] int,\n\t[lms_bill_routerate_billyear] int,\n\t[lms_bill_routerate_ecommzoneid] int,\n\t[lms_bill_routerate_billareaid] int,\n\t[lms_bill_routerate_routerateoverideflag] int,\n\t[lms_bill_billtypesr_id] int,\n\t[lms_bill_billtypesr_description] nvarchar(4000),\n\t[lms_bill_billtypesr_surchargeflag] int,\n\t[lms_bill_zoneroute_pickupid] int,\n\t[lms_bill_zoneroute_pickupdescription] nvarchar(4000),\n\t[lms_bill_zoneroute_pickupzoneid] int,\n\t[lms_bill_zoneroute_pickupzrscode] nvarchar(4000),\n\t[lms_bill_zoneroute_pickupzonerouteorder] int,\n\t[lms_bill_zoneroute_pickupzonetype] nvarchar(4000),\n\t[lms_bill_zoneroute_pickupbroutemasterid] int,\n\t[lms_bill_zoneroute_pickupbroutecode] nvarchar(4000),\n\t[lms_bill_zoneroute_deliverid] int,\n\t[lms_bill_zoneroute_deliverdescription] nvarchar(4000),\n\t[lms_bill_zoneroute_deliverzoneid] int,\n\t[lms_bill_zoneroute_deliverzrscode] nvarchar(4000),\n\t[lms_bill_zoneroute_deliverzonerouteorder] int,\n\t[lms_bill_zoneroute_deliverzonetype] nvarchar(4000),\n\t[lms_bill_zoneroute_deliverbroutemasterid] int,\n\t[lms_bill_zoneroute_deliverbroutecode] nvarchar(4000),\n\t[lms_bill_servicetype_id] int,\n\t[lms_bill_servicetype_description] nvarchar(4000),\n\t[lms_bill_servicetype_code] nvarchar(4000),\n\t[lms_bill_servicetype_ccode] nvarchar(4000),\n\t[lms_bill_zone_pickupid] int,\n\t[lms_bill_zone_pickupdescription] nvarchar(4000),\n\t[lms_bill_zone_pickupzonemasterid] int,\n\t[lms_bill_zone_pickupcountryid] int,\n\t[lms_bill_zone_deliverid] int,\n\t[lms_bill_zone_deliverdescription] nvarchar(4000),\n\t[lms_bill_zone_deliverzonemasterid] int,\n\t[lms_bill_zone_delivercountryid] int,\n\t[lms_bill_delivertype_id] int,\n\t[lms_bill_delivertype_description] nvarchar(4000),\n\t[lms_broutemaster_pickupid] int,\n\t[lms_broutemaster_pickupdescription] nvarchar(4000),\n\t[lms_broutemaster_pickupcode] nvarchar(4000),\n\t[lms_broutemaster_pickupbrouteparentid] int,\n\t[lms_broutemaster_deliverid] int,\n\t[lms_broutemaster_deliverdescription] nvarchar(4000),\n\t[lms_broutemaster_delivercode] nvarchar(4000),\n\t[lms_broutemaster_deliverbrouteparentid] int\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstconsignment.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTConsignment\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTInstruction SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTInstruction') )\n    DROP EXTERNAL TABLE dbo.F_SSTInstruction\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTInstruction (\n\t[tms_instruction_id] bigint,\n\t[tms_instruction_bookingid] bigint,\n\t[tms_instruction_addressid] bigint,\n\t[tms_instruction_insdate] datetime2(7),\n\t[tms_instruction_moddate] datetime2(7),\n\t[tms_instruction_insby] bigint,\n\t[tms_instruction_onroute] int,\n\t[tms_instruction_instrtype] nvarchar(4000),\n\t[tms_instruction_onrouteid] bigint,\n\t[tms_instruction_sort] int,\n\t[tms_instruction_note] nvarchar(4000),\n\t[tms_instruction_onroutestatus] nvarchar(4000),\n\t[tms_instruction_legacyid] bigint,\n\t[tms_instruction_legacyaddress] nvarchar(4000),\n\t[tms_instruction_citybranchid] bigint,\n\t[tms_instruction_citybranchname] nvarchar(4000),\n\t[tms_address_id] bigint,\n\t[tms_address_customerid] bigint,\n\t[tms_address_address] nvarchar(4000),\n\t[tms_address_streetno] nvarchar(4000),\n\t[tms_address_city] nvarchar(4000),\n\t[tms_address_province] nvarchar(4000),\n\t[tms_address_country] nvarchar(4000),\n\t[tms_address_addresstype] nvarchar(4000),\n\t[tms_address_lat] float,\n\t[tms_address_lng] float,\n\t[tms_address_insdate] datetime2(7),\n\t[tms_address_moddate] datetime2(7),\n\t[tms_address_lastuseddate] datetime2(7),\n\t[tms_address_searchfield] nvarchar(4000),\n\t[tms_address_zipcode] nvarchar(4000),\n\t[tms_address_slug] nvarchar(4000),\n\t[tms_customer_status] nvarchar(4000),\n\t[tms_customer_name] nvarchar(4000),\n\t[tms_customer_parentid] bigint,\n\t[tms_customer_accountnumber] nvarchar(4000),\n\t[tms_customer_revenuecode] nvarchar(4000),\n\t[tms_customer_insdate] datetime2(7),\n\t[tms_customer_moddate] datetime2(7),\n\t[tms_customer_insby] bigint,\n\t[tms_customer_opaqueid] nvarchar(4000),\n\t[tms_customer_email] nvarchar(4000),\n\t[tms_customer_areacode] nvarchar(4000),\n\t[tms_customer_mobilenum] nvarchar(4000),\n\t[tms_customer_legacyid] int,\n\t[tms_customer_billingmethod] nvarchar(4000),\n\t[tms_customer_adjustmetric] nvarchar(4000),\n\t[tms_customer_adjustvalue] int,\n\t[tms_customer_adjustnegativeallowed] int,\n\t[tms_customer_adjustvalueusingprevmonth] int,\n\t[tms_customer_excludefromnotinvoicedreport] int,\n\t[tms_customer_logictype] nvarchar(4000),\n\t[tms_customer_minliability] bigint,\n\t[orv_lhdelivery_id] bigint,\n\t[orv_lhdelivery_did] bigint,\n\t[orv_lhdelivery_address] nvarchar(4000),\n\t[orv_lhdelivery_lat] float,\n\t[orv_lhdelivery_lng] float,\n\t[orv_lhdelivery_actualeta] datetime2(7),\n\t[orv_lhdelivery_eta] datetime2(7),\n\t[orv_lhdelivery_tsgeofenceenter] datetime2(7),\n\t[orv_lhdelivery_tsdocuments] datetime2(7),\n\t[orv_lhdelivery_customerref1] nvarchar(4000),\n\t[orv_lhdelivery_customerref2] nvarchar(4000),\n\t[orv_lhdelivery_trailersize] nvarchar(4000),\n\t[orv_lhdelivery_cargoweight] float,\n\t[orv_lhdelivery_cubicvolume] float,\n\t[orv_lhdelivery_geocodingstatus] nvarchar(4000),\n\t[orv_lhdelivery_status] nvarchar(4000),\n\t[orv_lhdelivery_optimizedorder] int,\n\t[orv_lhdelivery_triporder] int,\n\t[orv_lhdelivery_sequence] int,\n\t[orv_lhdelivery_bookingid] bigint,\n\t[orv_lhdelivery_grv] int,\n\t[orv_lhdelivery_chepslip] int,\n\t[orv_lhdelivery_type] nvarchar(4000),\n\t[orv_lhdelivery_insdate] datetime2(7),\n\t[orv_lhdelivery_isdirect] int,\n\t[orv_lhdelivery_notes] nvarchar(4000),\n\t[orv_lhdelivery_contactperson] nvarchar(4000),\n\t[orv_lhdelivery_contactnumber] nvarchar(4000),\n\t[orv_lhdelivery_trailerfleetcode] nvarchar(4000),\n\t[orv_lhdelivery_primarycustomerid] bigint,\n\t[orv_lhdelivery_pcustomername] nvarchar(4000),\n\t[orv_lhdelivery_pcustomeraccountnumber] nvarchar(4000),\n\t[orv_lhdelivery_pcustomerrevenuecode] nvarchar(4000),\n\t[orv_lhdelivery_secondarycustomerid] bigint,\n\t[orv_lhdelivery_scustomername] nvarchar(4000),\n\t[orv_lhdelivery_scustomeraccountnumber] nvarchar(4000),\n\t[orv_lhdelivery_scustomerrevenuecode] nvarchar(4000),\n\t[orv_lhdelivery_actiondate] datetime2(7),\n\t[orv_lhdelivery_tsgeofenceexit] datetime2(7),\n\t[orv_lhdelivery_pctmsid] bigint,\n\t[orv_lhdelivery_sctmsid] bigint,\n\t[orv_lhdelivery_customorder] int,\n\t[orv_lhdelivery_skipdate] datetime2(7),\n\t[orv_lhdelivery_skipreason] nvarchar(4000),\n\t[orv_lhdelivery_outofgeofencereason] nvarchar(4000),\n\t[orv_lhdelivery_tsarrivedcustomer] datetime2(7),\n\t[orv_lhdelivery_tsdroppedoff] datetime2(7),\n\t[orv_lhdelivery_tsstartoffloading] datetime2(7),\n\t[orv_lhdelivery_tsstartloading] datetime2(7),\n\t[orv_lhdelivery_tsloaded] datetime2(7),\n\t[orv_lhdelivery_tsfinishedoffloading] datetime2(7),\n\t[orv_lhdelivery_tsdocumnetshanddovedriver] datetime2(7),\n\t[orv_lhdelivery_tsleavingcustomer] datetime2(7),\n\t[orv_lhdelivery_actionsubtype] nvarchar(4000),\n\t[orv_lhdelivery_tsstart] datetime2(7),\n\t[orv_lhdelivery_signame] nvarchar(4000),\n\t[orv_lhdelivery_signcomment] nvarchar(4000),\n\t[orv_lhdelivery_signdate] datetime2(7),\n\t[orv_lhdelivery_tsendtate] datetime2(7),\n\t[orv_lhdelivery_tsentergeofenceapp] datetime2(7),\n\t[orv_lhdelivery_tsexitgeofenceapp] datetime2(7),\n\t[orv_lhdelivery_tmsid] bigint,\n\t[orv_lhdelivery_subtype] nvarchar(4000),\n\t[orv_lhdelivery_needbotrailerver] int,\n\t[orv_lhdelivery_secondtrailerfleetcode] nvarchar(4000),\n\t[orv_lhdelivery_trailerverlat] float,\n\t[orv_lhdelivery_trailerverlng] float,\n\t[orv_lhdelivery_tstrailerver] datetime2(7),\n\t[orv_lhdelivery_podlat] float,\n\t[orv_lhdelivery_podlng] float,\n\t[orv_lhdelivery_skiplat] float,\n\t[orv_lhdelivery_skiplng] float,\n\t[orv_lhdelivery_uncanceldate] datetime2(7)\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstinstruction.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTInstruction \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTLoadChild SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTLoadChild') )\n    DROP EXTERNAL TABLE dbo.F_SSTLoadChild\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTLoadChild (\n\t[lms_loads_id] int,\n\t[lms_loads_routeid] int,\n\t[lms_loads_driverid] int,\n\t[lms_loads_sealno] nvarchar(4000),\n\t[lms_loads_vehicleid] int,\n\t[lms_loads_ttypeid] int,\n\t[lms_loads_userid] int,\n\t[lms_loads_ldate] datetime2(7),\n\t[lms_loads_courierid] nvarchar(4000),\n\t[lms_loads_site] nvarchar(4000),\n\t[lms_loads_fromlocid] int,\n\t[lms_loads_tolocid] int,\n\t[lms_loads_cdate] datetime2(7),\n\t[lms_loads_trailer1] int,\n\t[lms_loads_trailer2] int,\n\t[lms_loads_cref] nvarchar(4000),\n\t[lms_loads_debriefed] int,\n\t[lms_loads_mrpflag] int,\n\t[lms_loads_mrpcflag] int,\n\t[lms_loads_finalflag] int,\n\t[lms_loads_alidaflag] int,\n\t[lms_loads_puibts] int,\n\t[lms_loads_pucols] int,\n\t[lms_loads_planningref] nvarchar(4000),\n\t[lms_loads_interfacedate] datetime2(7),\n\t[lms_loads_nosealsret] int,\n\t[lms_loads_excludeopsi] int,\n\t[lms_loads_dccref] nvarchar(4000),\n\t[lms_loads_srouteid] int,\n\t[lms_loads_fuellitres] numeric(18,2),\n\t[lms_loads_outsourcedcrew] int,\n\t[lms_loads_masterloadid] int,\n\t[lms_loads_securitygatedespatched] datetime2(7),\n\t[lms_loads_securitygateuserid] int,\n\t[lms_loads_securitygatearrived] datetime2(7),\n\t[lms_loads_securitygatearriveduserid] int,\n\t[lms_loads_lastupdate] datetime2(7),\n\t[lms_loads_bayno] nvarchar(4000),\n\t[lms_loads_costs] numeric(18,2),\n\t[lms_loads_estdeparturedatetime] datetime2(7),\n\t[lms_loads_totalweight] numeric(18,0),\n\t[lms_loads_ovrignore] int,\n\t[lms_loads_childloadid] int,\n\t[lms_loads_orvcode] int,\n\t[lms_loads_companyid] int,\n\t[lms_loads_editloaddate] datetime2(7),\n\t[lms_loads_reopeneddate] datetime2(7),\n\t[lms_loads_reopeneduserid] int,\n\t[lms_loads_novehicle] int,\n\t[lms_loads_mobilefeedbackreasonid] int,\n\t[lms_loads_direct] int,\n\t[lms_loads_noofpcls] int,\n\t[lms_loads_debriefdt] datetime2(7),\n\t[lms_loads_httpcode] int,\n\t[lms_loads_parentloadid] int,\n\t[lms_loads_mrpobversion] int,\n\t[lms_parcelbyload_loadid] int,\n\t[lms_parcelbyload_aggweight] float,\n\t[lms_parcelbyload_aggchargeweight] numeric(28,2),\n\t[lms_parcelbyload_aggvolweight] float,\n\t[lms_parcelbyload_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbyload_noparcels] bigint,\n\t[lms_sroute_id] int,\n\t[lms_sroute_description] nvarchar(4000),\n\t[lms_driver_id] int,\n\t[lms_driver_dname] nvarchar(4000),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_users_site] nvarchar(4000),\n\t[lms_users_reopenuserid] int,\n\t[lms_users_reopenuserfullname] nvarchar(4000),\n\t[lms_users_reopenusersite] nvarchar(4000),\n\t[lms_vehicle_id] int,\n\t[lms_vehicle_fleetno] nvarchar(4000),\n\t[lms_vehicle_uid] nvarchar(4000),\n\t[lms_vehicle_trailer1id] int,\n\t[lms_vehicle_trailer1fleetno] nvarchar(4000),\n\t[lms_vehicle_trailer1uid] nvarchar(4000),\n\t[lms_vehicle_trailer2id] int,\n\t[lms_vehicle_trailer2fleetno] nvarchar(4000),\n\t[lms_vehicle_trailer2uid] nvarchar(4000),\n\t[md_vehiclebasic_id] bigint,\n\t[md_vehiclebasic_uid] nvarchar(4000),\n\t[md_vehiclebasic_vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_activeflag] bigint,\n\t[md_vehiclebasic_vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_depot] nvarchar(4000),\n\t[md_vehiclebasic_enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_fueltype] nvarchar(4000),\n\t[md_vehiclebasic_registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_year] int,\n\t[md_vehiclebasic_vehicleownerid] bigint,\n\t[md_vehiclebasic_vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_staffvehicleflag] int,\n\t[md_vehiclebasic_vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_brn] nvarchar(4000),\n\t[md_vehiclebasic_brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_insdate] bigint,\n\t[md_vehiclebasic_insby] nvarchar(4000),\n\t[md_vehiclebasic_islinehaulvehicle] int,\n\t[md_vehiclebasic_internalheight] numeric(18,2),\n\t[md_vehiclebasic_internallength] numeric(18,2),\n\t[md_vehiclebasic_internalvolume] numeric(18,2),\n\t[md_vehiclebasic_internalwidth] numeric(18,2),\n\t[md_vehiclebasic_moddate] bigint,\n\t[md_vehiclebasic_trailerflag] int,\n\t[md_vehiclebasic_workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_approveddate] bigint,\n\t[md_vehiclebasic_trailer1id] bigint,\n\t[md_vehiclebasic_trailer1uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer1activeflag] bigint,\n\t[md_vehiclebasic_trailer1vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer1enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer1year] int,\n\t[md_vehiclebasic_trailer1vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer1vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer1staffvehicleflag] int,\n\t[md_vehiclebasic_trailer1vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer1insdate] bigint,\n\t[md_vehiclebasic_trailer1insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer1islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer1internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer1internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer1moddate] bigint,\n\t[md_vehiclebasic_trailer1trailerflag] int,\n\t[md_vehiclebasic_trailer1workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1approveddate] bigint,\n\t[md_vehiclebasic_trailer2id] bigint,\n\t[md_vehiclebasic_trailer2uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer2activeflag] bigint,\n\t[md_vehiclebasic_trailer2vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer2enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer2year] int,\n\t[md_vehiclebasic_trailer2vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer2vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer2staffvehicleflag] int,\n\t[md_vehiclebasic_trailer2vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer2insdate] bigint,\n\t[md_vehiclebasic_trailer2insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer2islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer2internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer2internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer2moddate] bigint,\n\t[md_vehiclebasic_trailer2trailerflag] int,\n\t[md_vehiclebasic_trailer2workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2approveddate] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstloadchild.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTLoadChild\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTLoadParent SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTLoadParent') )\n    DROP EXTERNAL TABLE dbo.F_SSTLoadParent\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTLoadParent (\n\t[lms_loadparent_parentloadid] int,\n\t[lms_loadparent_aggweight] float,\n\t[lms_loadparent_aggchargeweight] numeric(18,2),\n\t[lms_loadparent_aggvolweight] float,\n\t[lms_loadparent_aggvolumiserweight] numeric(18,2),\n\t[lms_loadparent_noparcels] bigint,\n\t[orv_dispatch_id] bigint,\n\t[orv_dispatch_lmsid] bigint,\n\t[orv_dispatch_vid] bigint,\n\t[orv_dispatch_did] bigint,\n\t[orv_dispatch_status] nvarchar(4000),\n\t[orv_dispatch_startdate] datetime2(7),\n\t[orv_dispatch_stopdate] datetime2(7),\n\t[orv_dispatch_vehicletype] int,\n\t[orv_dispatch_uid] bigint,\n\t[orv_dispatch_estdepdate] datetime2(7),\n\t[orv_dispatch_trailer] bigint,\n\t[orv_dispatch_trailer2] bigint,\n\t[orv_dispatch_fromlocid] bigint,\n\t[orv_dispatch_tolocid] bigint,\n\t[orv_dispatch_site] nvarchar(4000),\n\t[orv_dispatch_lastupdate] datetime2(7),\n\t[orv_dispatch_etastatus] nvarchar(4000),\n\t[orv_dispatch_startinglat] float,\n\t[orv_dispatch_startinglng] float,\n\t[orv_dispatch_endinglat] float,\n\t[orv_dispatch_endinglng] float,\n\t[orv_dispatch_startingfrom] nvarchar(4000),\n\t[orv_dispatch_goingto] nvarchar(4000),\n\t[orv_dispatch_importissue] nvarchar(4000),\n\t[orv_dispatch_insdate] datetime2(7),\n\t[orv_dispatch_estarrdate] datetime2(7),\n\t[orv_dispatch_duration] bigint,\n\t[orv_dispatch_distance] bigint,\n\t[orv_dispatch_cost] bigint,\n\t[orv_dispatch_stoplat] float,\n\t[orv_dispatch_stoplng] float,\n\t[orv_dispatch_stopreason] nvarchar(4000),\n\t[orv_dispatch_startodo] bigint,\n\t[orv_dispatch_stopodo] bigint,\n\t[orv_dispatch_expduration] bigint,\n\t[orv_dispatch_expdistance] bigint,\n\t[orv_dispatch_expcost] bigint,\n\t[orv_dispatch_collectionid] bigint,\n\t[orv_dispatch_crew] int,\n\t[orv_dispatch_crewnames] nvarchar(4000),\n\t[orv_dispatch_bocloseuid] bigint,\n\t[orv_dispatch_routing] nvarchar(4000),\n\t[orv_dispatch_swapct] int,\n\t[orv_dispatch_debriefed] int,\n\t[orv_dispatch_debriefnotes] nvarchar(4000),\n\t[orv_dispatch_bopin] nvarchar(4000),\n\t[orv_dispatch_cpicost] bigint,\n\t[orv_dispatch_labourcost] bigint,\n\t[orv_dispatch_maintcost] bigint,\n\t[orv_dispatch_inscost] bigint,\n\t[orv_dispatch_tollcost] bigint,\n\t[orv_dispatch_fuelcost] bigint,\n\t[orv_dispatch_internal] int,\n\t[orv_dispatch_childids] nvarchar(4000),\n\t[orv_dispatch_guid] bigint,\n\t[orv_dispatch_timedefinite] int,\n\t[orv_dispatch_orvcode] int,\n\t[orv_dispatch_tsstopdepoenter] datetime2(7),\n\t[orv_dispatch_tsstartdepoexit] datetime2(7),\n\t[orv_dispatch_reroutect] int,\n\t[orv_dispatch_actualarrdate] datetime2(7),\n\t[orv_dispatch_physicalstartlat] float,\n\t[orv_dispatch_physicalstartlng] float,\n\t[orv_dispatch_tsstartdepoexitapp] datetime2(7),\n\t[orv_dispatch_tsstopdepoenterapp] datetime2(7),\n\t[orv_dispatch_uncanceldate] datetime2(7),\n\t[orv_dispatch_uncancelusername] nvarchar(4000),\n\t[orv_dispatch_lmsdebrifed] int,\n\t[orv_dispatch_reviseddebrief] int,\n\t[orv_dispatch_lhtransporter] nvarchar(4000),\n\t[orv_dispatch_triptype] nvarchar(4000),\n\t[orv_dispatch_startreason] nvarchar(4000),\n\t[orv_dispatch_route] nvarchar(4000),\n\t[orv_dispatch_tmstraileridentify] nvarchar(4000),\n\t[orv_dispatch_tmstrailer2identify] nvarchar(4000),\n\t[orv_dispatch_tmscontroller] nvarchar(4000),\n\t[orv_dispatch_routekey] nvarchar(4000),\n\t[orv_dispatch_courierid] bigint,\n\t[orv_dispatch_originalstartdate] datetime2(7),\n\t[orv_dispatch_originalextarrival] datetime2(7),\n\t[orv_dispatch_recomputeoriginals] int,\n\t[orv_dispatch_originalextdistance] bigint,\n\t[orv_dispatch_originalextduration] bigint,\n\t[orv_dispatch_moddate] datetime2(7),\n\t[orv_dispatch_tmsmode] int,\n\t[orv_dispatch_driversignature] bigint,\n\t[orv_vehicle_id] bigint,\n\t[orv_vehicle_fleetcode] nvarchar(4000),\n\t[orv_vehicle_lmsid] bigint,\n\t[orv_vehicle_trailer1id] bigint,\n\t[orv_vehicle_trailer1fleetcode] nvarchar(4000),\n\t[orv_vehicle_trailer1lmsid] bigint,\n\t[orv_vehicle_trailer2id] bigint,\n\t[orv_vehicle_trailer2fleetcode] nvarchar(4000),\n\t[orv_vehicle_trailer2lmsid] bigint,\n\t[lms_vehicle_id] int,\n\t[lms_vehicle_uid] nvarchar(4000),\n\t[lms_vehicle_trailer1id] int,\n\t[lms_vehicle_trailer1uid] nvarchar(4000),\n\t[lms_vehicle_trailer2id] int,\n\t[lms_vehicle_trailer2uid] nvarchar(4000),\n\t[orv_orvuser_id] bigint,\n\t[orv_orvuser_username] nvarchar(4000),\n\t[orv_orvuser_fname] nvarchar(4000),\n\t[orv_orvuser_lname] nvarchar(4000),\n\t[orv_orvuser_empcode] nvarchar(4000),\n\t[orv_orvuser_aka] nvarchar(4000),\n\t[orv_orvuser_gender] nvarchar(4000),\n\t[orv_orvuser_cellno] nvarchar(4000),\n\t[orv_orvuser_rsaid] nvarchar(4000),\n\t[orv_orvuser_passportno] nvarchar(4000),\n\t[orv_orvuser_idpassportno] nvarchar(4000),\n\t[orv_orvuser_nationality] nvarchar(4000),\n\t[orv_orvuser_birthcountry] nvarchar(4000),\n\t[orv_orvuser_engageddate] datetime2(7),\n\t[orv_orvuser_joineddate] datetime2(7),\n\t[orv_orvuser_termindate] datetime2(7),\n\t[orv_orvuser_status] nvarchar(4000),\n\t[orv_orvuser_depot] nvarchar(4000),\n\t[orv_orvuser_jobcategory] nvarchar(4000),\n\t[orv_orvuser_jobtitle] nvarchar(4000),\n\t[orv_orvuser_payroll] nvarchar(4000),\n\t[orv_orvuser_annualsalary] float,\n\t[orv_orvuser_insdate] datetime2(7),\n\t[orv_orvuser_lmsid] bigint,\n\t[orv_orvuser_vipid] bigint,\n\t[orv_orvuser_dadriver] int,\n\t[orv_orvuser_dasupervisor] int,\n\t[orv_orvuser_davanassistant] int,\n\t[orv_orvuser_crewlmsid] bigint,\n\t[orv_orvuser_courierid] bigint,\n\t[md_vehiclebasic_id] bigint,\n\t[md_vehiclebasic_uid] nvarchar(4000),\n\t[md_vehiclebasic_vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_activeflag] bigint,\n\t[md_vehiclebasic_vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_depot] nvarchar(4000),\n\t[md_vehiclebasic_enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_fueltype] nvarchar(4000),\n\t[md_vehiclebasic_registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_year] int,\n\t[md_vehiclebasic_vehicleownerid] bigint,\n\t[md_vehiclebasic_vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_staffvehicleflag] int,\n\t[md_vehiclebasic_vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_brn] nvarchar(4000),\n\t[md_vehiclebasic_brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_insdate] datetime2(7),\n\t[md_vehiclebasic_insby] nvarchar(4000),\n\t[md_vehiclebasic_islinehaulvehicle] int,\n\t[md_vehiclebasic_internalheight] numeric(18,2),\n\t[md_vehiclebasic_internallength] numeric(18,2),\n\t[md_vehiclebasic_internalvolume] numeric(18,2),\n\t[md_vehiclebasic_internalwidth] numeric(18,2),\n\t[md_vehiclebasic_moddate] datetime2(7),\n\t[md_vehiclebasic_trailerflag] int,\n\t[md_vehiclebasic_workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_approveddate] datetime2(7),\n\t[md_vehiclebasic_trailer1id] bigint,\n\t[md_vehiclebasic_trailer1uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer1activeflag] bigint,\n\t[md_vehiclebasic_trailer1vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer1enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer1year] int,\n\t[md_vehiclebasic_trailer1vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer1vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer1staffvehicleflag] int,\n\t[md_vehiclebasic_trailer1vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer1insdate] datetime2(7),\n\t[md_vehiclebasic_trailer1insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer1islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer1internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer1internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer1moddate] datetime2(7),\n\t[md_vehiclebasic_trailer1trailerflag] int,\n\t[md_vehiclebasic_trailer1workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1approveddate] datetime2(7),\n\t[md_vehiclebasic_trailer2id] bigint,\n\t[md_vehiclebasic_trailer2uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer2activeflag] bigint,\n\t[md_vehiclebasic_trailer2vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer2enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer2year] int,\n\t[md_vehiclebasic_trailer2vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer2vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer2staffvehicleflag] int,\n\t[md_vehiclebasic_trailer2vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer2insdate] datetime2(7),\n\t[md_vehiclebasic_trailer2insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer2islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer2internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer2internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer2moddate] datetime2(7),\n\t[md_vehiclebasic_trailer2trailerflag] int,\n\t[md_vehiclebasic_trailer2workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2approveddate] datetime2(7)\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstloadparent.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTLoadParent \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTOrder SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTOrder') )\n    DROP EXTERNAL TABLE dbo.F_SSTOrder\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTOrder (\n\t[lms_order_id] int,\n\t[lms_order_idold] nvarchar(4000),\n\t[lms_order_corderno] nvarchar(4000),\n\t[lms_order_custref] nvarchar(4000),\n\t[lms_order_waybillid] int,\n\t[lms_order_pickupcustid] int,\n\t[lms_order_delivercustid] int,\n\t[lms_order_billcustid] int,\n\t[lms_order_ovalue] numeric(18,2),\n\t[lms_order_hodate] datetime2(7),\n\t[lms_order_cservice] nvarchar(4000),\n\t[lms_order_courierid] nvarchar(4000),\n\t[lms_order_custservice] nvarchar(4000),\n\t[lms_order_userid] int,\n\t[lms_order_pcode] nvarchar(4000),\n\t[lms_order_appointment] datetime2(7),\n\t[lms_order_deliverby] datetime2(7),\n\t[lms_order_dconfirmed] nvarchar(4000),\n\t[lms_order_dcomment] nvarchar(4000),\n\t[lms_order_drefno] nvarchar(4000),\n\t[lms_order_duserid] int,\n\t[lms_order_nopods] int,\n\t[lms_order_duedate] datetime2(7),\n\t[lms_order_batchno] int,\n\t[lms_order_units] int,\n\t[lms_order_airfreightflag] int,\n\t[lms_order_custref3] nvarchar(4000),\n\t[lms_order_specdel] int,\n\t[lms_order_flunits] int,\n\t[lms_order_flkgs] int,\n\t[lms_order_inservice] datetime2(7),\n\t[lms_order_custdocs] int,\n\t[lms_order_scanned] datetime2(7),\n\t[lms_order_scanimagename1] nvarchar(4000),\n\t[lms_order_scanimagename] nvarchar(4000),\n\t[lms_order_changereasonid] int,\n\t[lms_order_bill_servicetype] int,\n\t[lms_order_bill_vehicletype] int,\n\t[lms_order_quote] numeric(18,2),\n\t[lms_order_consignlabel] int,\n\t[lms_order_custref2] nvarchar(4000),\n\t[lms_order_callprogid] int,\n\t[lms_order_callprogupddate] datetime2(7),\n\t[lms_order_submitedi] int,\n\t[lms_order_lastupdate] datetime2(7),\n\t[lms_order_quoteflag] int,\n\t[lms_order_bill_minrate] numeric(18,2),\n\t[lms_order_bill_addrate] numeric(18,2),\n\t[lms_order_bill_minkg] numeric(18,2),\n\t[lms_order_notes] nvarchar(4000),\n\t[lms_order_quoteweight] numeric(18,2),\n\t[lms_order_orderconsolidationid] int,\n\t[lms_order_quotefuellevy] numeric(18,2),\n\t[lms_order_quoteothersurcharges] numeric(18,2),\n\t[lms_order_quotedocfees] numeric(18,2),\n\t[lms_bcustomer_id] int,\n\t[lms_bcustomer_name] nvarchar(4000),\n\t[lms_pcustomer_id] int,\n\t[lms_pcustomer_name] nvarchar(4000),\n\t[lms_dcustomer_id] int,\n\t[lms_dcustomer_name] nvarchar(4000),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_users_site] nvarchar(4000),\n\t[lms_parcelbyorder_orderid] int,\n\t[lms_parcelbyorder_aggweight] float,\n\t[lms_parcelbyorder_aggchargeweight] numeric(28,2),\n\t[lms_parcelbyorder_aggvolweight] float,\n\t[lms_parcelbyorder_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbyorder_noparcels] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstorder.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTOrder\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTParcel SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcel') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcel\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTParcel (\n\t[lms_parcel_id] int,\n\t[lms_parcel_weight] float,\n\t[lms_parcel_waybillid] int,\n\t[lms_parcel_orderid] int,\n\t[lms_parcel_acceptancedate] datetime2(7),\n\t[lms_parcel_userid] int,\n\t[lms_parcel_barcode] nvarchar(4000),\n\t[lms_parcel_endorsement] nvarchar(4000),\n\t[lms_parcel_volweight] float,\n\t[lms_parcel_chargeweight] numeric(18,2),\n\t[lms_parcel_ptype] int,\n\t[lms_parcel_description] nvarchar(4000),\n\t[lms_parcel_locid] int,\n\t[lms_parcel_handoverdate] datetime2(7),\n\t[lms_parcel_seqno] int,\n\t[lms_parcel_floorstatus] nvarchar(4000),\n\t[lms_parcel_consignid] int,\n\t[lms_parcel_cref] nvarchar(4000),\n\t[lms_parcel_claimid] int,\n\t[lms_parcel_duedate] datetime2(7),\n\t[lms_parcel_coddate] datetime2(7),\n\t[lms_parcel_disflag] int,\n\t[lms_parcel_astoreid] int,\n\t[lms_parcel_mrpflag] int,\n\t[lms_parcel_nmrflag] int,\n\t[lms_parcel_consignflag] int,\n\t[lms_parcel_cmanifest] int,\n\t[lms_parcel_cbranchid] int,\n\t[lms_parcel_claimref] nvarchar(4000),\n\t[lms_parcel_cost] numeric(18,2),\n\t[lms_parcel_creason] nvarchar(4000),\n\t[lms_parcel_customerbarcode] nvarchar(4000),\n\t[lms_parcel_dbshorts] int,\n\t[lms_parcel_holddate] datetime2(7),\n\t[lms_parcel_aflag] int,\n\t[lms_parcel_stationid] int,\n\t[lms_parcel_dbshortsdesc] nvarchar(4000),\n\t[lms_parcel_dstatusid] int,\n\t[lms_parcel_dflag] int,\n\t[lms_parcel_callprogid] int,\n\t[lms_parcel_callprogupddate] datetime2(7),\n\t[lms_parcel_duplflag] int,\n\t[lms_parcel_lastupdate] datetime2(7),\n\t[lms_parcel_datevolumised] datetime2(7),\n\t[lms_parcel_volumiserweight] numeric(18,2),\n\t[lms_parcel_volumiserlength] numeric(18,2),\n\t[lms_parcel_volumiserheight] numeric(18,2),\n\t[lms_parcel_volumiserwidth] numeric(18,2),\n\t[lms_parcel_volumiserid] int,\n\t[lms_parcel_pl] numeric(18,2),\n\t[lms_parcel_ph] numeric(18,2),\n\t[lms_parcel_pw] numeric(18,2),\n\t[lms_parcel_totcharge] numeric(18,2),\n\t[lms_parcel_dontrecalc] int,\n\t[lms_parcel_containerid] int,\n\t[lms_parcel_avgvolweight] numeric(18,2),\n\t[lms_waybill_id] int,\n\t[lms_waybill_poddate] datetime2(7),\n\t[lms_waybill_date] datetime2(7),\n\t[lms_order_id] int,\n\t[lms_order_hodate] datetime2(7),\n\t[lms_order_corderno] nvarchar(4000),\n\t[lms_order_billcustid] int,\n\t[lms_order_pickupcustid] int,\n\t[lms_order_delivercustid] int,\n\t[lms_order_specdel] int,\n\t[lms_consignment_id] int,\n\t[lms_consignment_cdate] datetime2(7),\n\t[lms_consignment_deliverby] datetime2(7),\n\t[lms_parceldetail_parcelid] int,\n\t[lms_parceldetail_inservicestart] datetime2(7),\n\t[lms_parceldetail_deliverby] datetime2(7),\n\t[lms_parceldetail_servicedays] int,\n\t[lms_parceldetail_servicetime] numeric(13,4),\n\t[lms_parceldetail_cutofftime] numeric(13,4),\n\t[lms_parceldetail_appointment] datetime2(7),\n\t[lms_parceldetail_nddid] int,\n\t[lms_parceldetail_custonholdstart] datetime2(7),\n\t[lms_parceldetail_custonholdend] datetime2(7),\n\t[lms_parceldetail_splitinitial] int,\n\t[lms_parceldetail_weekendholidays] int,\n\t[lms_parceldetail_inbound] int,\n\t[lms_parceldetail_courierid] nvarchar(4000),\n\t[lms_parceldetail_serviceid] nvarchar(4000),\n\t[lms_parceldetail_custaccid] int,\n\t[lms_parceldetail_broutemasterid] int,\n\t[lms_parceldetail_broutemasterfromid] int,\n\t[lms_parceldetail_broutemastertoid] int,\n\t[lms_parceldetail_leadtimeid] int,\n\t[lms_bcustomer_id] int,\n\t[lms_bcustomer_name] nvarchar(4000),\n\t[lms_pcustomer_id] int,\n\t[lms_pcustomer_name] nvarchar(4000),\n\t[lms_dcustomer_id] int,\n\t[lms_dcustomer_name] nvarchar(4000),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_users_site] nvarchar(4000),\n\t[lms_bill_parceltype_id] int,\n\t[lms_bill_parceltype_description] nvarchar(4000),\n\t[lms_bill_parceltype_ptype] int,\n\t[lms_clocation_id] int,\n\t[lms_clocation_description] nvarchar(4000),\n\t[lms_dstatus_id] int,\n\t[lms_dstatus_description] nvarchar(4000),\n\t[lms_volumiser_id] int,\n\t[lms_volumiser_locid] int,\n\t[lms_volumiser_volumisercode] nvarchar(4000),\n\t[lms_volumiser_volumiserdescription] nvarchar(4000),\n\t[lms_volumiser_userid] int,\n\t[lms_volumiser_inlinescale] int,\n\t[orv_parcel_id] bigint,\n\t[orv_parcel_lmsid] bigint,\n\t[orv_parcel_did] bigint,\n\t[orv_parcel_scandate] datetime2(7),\n\t[orv_parcel_scanstatus] nvarchar(4000),\n\t[orv_parcel_scanmode] nvarchar(4000),\n\t[orv_parcel_claimid] bigint,\n\t[orv_parcel_courierid] bigint,\n\t[orv_parcel_moddate] datetime2(7)\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcel.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTParcel\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTParcelByConsignment SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcelByConsignment') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcelByConsignment\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTParcelByConsignment (\n\t[lms_parcelbyconsignment_consignid] int,\n\t[lms_parcelbyconsignment_aggweight] float,\n\t[lms_parcelbyconsignment_aggchargeweight] numeric(28,2),\n\t[lms_parcelbyconsignment_aggvolweight] float,\n\t[lms_parcelbyconsignment_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbyconsignment_noparcels] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcelbyconsignment.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTParcelByConsignment\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTParcelByLoad SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcelByLoad') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcelByLoad\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTParcelByLoad (\n\t[lms_parcelbyload_loadid] int,\n\t[lms_parcelbyload_aggweight] float,\n\t[lms_parcelbyload_aggchargeweight] numeric(28,2),\n\t[lms_parcelbyload_aggvolweight] float,\n\t[lms_parcelbyload_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbyload_noparcels] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcelbyload.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTParcelByLoad\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTParcelByOrder SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcelByOrder') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcelByOrder\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTParcelByOrder (\n\t[lms_parcelbyorder_orderid] int,\n\t[lms_parcelbyorder_aggweight] float,\n\t[lms_parcelbyorder_aggchargeweight] numeric(28,2),\n\t[lms_parcelbyorder_aggvolweight] float,\n\t[lms_parcelbyorder_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbyorder_noparcels] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcelbyorder.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTParcelByOrder\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTParcelByWaybill_SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE dbo.F_SSTParcelByWaybill;\n\nCREATE EXTERNAL TABLE dbo.F_SSTParcelByWaybill (\n\t[lms_parcelbywaybill_waybillid] int,\n\t[lms_parcelbywaybill_aggweight] float,\n\t[lms_parcelbywaybill_aggchargeweight] numeric(28,2),\n\t[lms_parcelbywaybill_aggvolweight] float,\n\t[lms_parcelbywaybill_aggvolumiserweight] numeric(28,2),\n\t[lms_parcelbywaybill_noparcels] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcelbywaybill.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTParcelByWaybill\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTTrack_SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE dbo.F_SSTTrack;\n\nCREATE EXTERNAL TABLE dbo.F_SSTTrack (\n\t[lms_track_id] int,\n\t[lms_track_opendt] datetime2(7),\n\t[lms_track_closedt] datetime2(7),\n\t[lms_track_loadid] int,\n\t[lms_track_userid] int,\n\t[lms_track_parcelid] int,\n\t[lms_track_tolocid] int,\n\t[lms_track_touserid] int,\n\t[lms_track_fromlocid] int,\n\t[lms_track_tracktypeid2] int,\n\t[lms_track_tracktypeid] int,\n\t[lms_track_lastupdate] datetime2(7),\n\t[lms_track_toloadid] int,\n\t[lms_track_openstationid] int,\n\t[lms_track_closestationid] int,\n\t[lms_parcel_weight] float,\n\t[lms_parcel_chargeweight] numeric(18,2),\n\t[lms_parcel_volweight] float,\n\t[lms_parcel_volumiserweight] numeric(18,2),\n\t[lms_flocation_id] int,\n\t[lms_flocation_description] nvarchar(4000),\n\t[lms_tlocation_id] int,\n\t[lms_tlocation_description] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/ssttrack.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTTrack\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTTrip SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTTrip') )\n    DROP EXTERNAL TABLE dbo.F_SSTTrip\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTTrip (\n\t[tms_trip_id] bigint,\n\t[tms_trip_driverid] nvarchar(4000),\n\t[tms_trip_vehicleid] nvarchar(4000),\n\t[tms_trip_trailerid] nvarchar(4000),\n\t[tms_trip_sectrailerid] nvarchar(4000),\n\t[tms_trip_status] nvarchar(4000),\n\t[tms_trip_routeid] bigint,\n\t[tms_trip_opsrouteid] bigint,\n\t[tms_trip_startfromaddress] nvarchar(4000),\n\t[tms_trip_startfromlat] float,\n\t[tms_trip_startfromlng] float,\n\t[tms_trip_dispatchdate] datetime2(7),\n\t[tms_trip_stopaddress] nvarchar(4000),\n\t[tms_trip_stoplat] float,\n\t[tms_trip_stoplng] float,\n\t[tms_trip_insdate] datetime2(7),\n\t[tms_trip_moddate] datetime2(7),\n\t[tms_trip_insby] bigint,\n\t[tms_trip_onrouteid] bigint,\n\t[tms_trip_uuid] nvarchar(4000),\n\t[tms_trip_insbyuser] nvarchar(4000),\n\t[tms_trip_thirdpartyid] bigint,\n\t[tms_trip_timehash] int,\n\t[tms_trip_onroutestatus] nvarchar(4000),\n\t[tms_trip_lastupdate] datetime2(7),\n\t[tms_trip_lastlng] float,\n\t[tms_trip_lastlat] float,\n\t[tms_trip_controllerid] bigint,\n\t[tms_trip_trackstatus] nvarchar(4000),\n\t[tms_trip_lastrackid] bigint,\n\t[tms_trip_customer] nvarchar(4000),\n\t[tms_trip_bookings] nvarchar(4000),\n\t[tms_trip_controller] nvarchar(4000),\n\t[tms_trip_transporter] nvarchar(4000),\n\t[tms_trip_legacyid] bigint,\n\t[tms_trip_originatedfrom] nvarchar(4000),\n\t[tms_trip_local] int,\n\t[tms_trip_startdate] datetime2(7),\n\t[tms_trip_enddate] datetime2(7),\n\t[tms_trip_actualdeliverydate] datetime2(7),\n\t[tms_trip_note] nvarchar(4000),\n\t[tms_trip_deliverydate] datetime2(7),\n\t[tms_trip_internalexternal] nvarchar(4000),\n\t[tms_trip_pickupstartaddress] nvarchar(4000),\n\t[orv_dispatch_id] bigint,\n\t[orv_dispatch_lmsid] bigint,\n\t[orv_dispatch_vid] bigint,\n\t[orv_dispatch_did] bigint,\n\t[orv_dispatch_status] nvarchar(4000),\n\t[orv_dispatch_startdate] datetime2(7),\n\t[orv_dispatch_stopdate] datetime2(7),\n\t[orv_dispatch_vehicletype] int,\n\t[orv_dispatch_uid] bigint,\n\t[orv_dispatch_estdepdate] datetime2(7),\n\t[orv_dispatch_trailer] bigint,\n\t[orv_dispatch_trailer2] bigint,\n\t[orv_dispatch_fromlocid] bigint,\n\t[orv_dispatch_tolocid] bigint,\n\t[orv_dispatch_site] nvarchar(4000),\n\t[orv_dispatch_lastupdate] datetime2(7),\n\t[orv_dispatch_etastatus] nvarchar(4000),\n\t[orv_dispatch_startinglat] float,\n\t[orv_dispatch_startinglng] float,\n\t[orv_dispatch_endinglat] float,\n\t[orv_dispatch_endinglng] float,\n\t[orv_dispatch_startingfrom] nvarchar(4000),\n\t[orv_dispatch_goingto] nvarchar(4000),\n\t[orv_dispatch_importissue] nvarchar(4000),\n\t[orv_dispatch_insdate] datetime2(7),\n\t[orv_dispatch_estarrdate] datetime2(7),\n\t[orv_dispatch_duration] bigint,\n\t[orv_dispatch_distance] bigint,\n\t[orv_dispatch_cost] bigint,\n\t[orv_dispatch_stoplat] float,\n\t[orv_dispatch_stoplng] float,\n\t[orv_dispatch_stopreason] nvarchar(4000),\n\t[orv_dispatch_startodo] bigint,\n\t[orv_dispatch_stopodo] bigint,\n\t[orv_dispatch_expduration] bigint,\n\t[orv_dispatch_expdistance] bigint,\n\t[orv_dispatch_expcost] bigint,\n\t[orv_dispatch_collectionid] bigint,\n\t[orv_dispatch_crew] int,\n\t[orv_dispatch_crewnames] nvarchar(4000),\n\t[orv_dispatch_bocloseuid] bigint,\n\t[orv_dispatch_routing] nvarchar(4000),\n\t[orv_dispatch_swapct] int,\n\t[orv_dispatch_debriefed] int,\n\t[orv_dispatch_debriefnotes] nvarchar(4000),\n\t[orv_dispatch_bopin] nvarchar(4000),\n\t[orv_dispatch_cpicost] bigint,\n\t[orv_dispatch_labourcost] bigint,\n\t[orv_dispatch_maintcost] bigint,\n\t[orv_dispatch_inscost] bigint,\n\t[orv_dispatch_tollcost] bigint,\n\t[orv_dispatch_fuelcost] bigint,\n\t[orv_dispatch_internal] int,\n\t[orv_dispatch_childids] nvarchar(4000),\n\t[orv_dispatch_guid] bigint,\n\t[orv_dispatch_timedefinite] int,\n\t[orv_dispatch_orvcode] int,\n\t[orv_dispatch_tsstopdepoenter] datetime2(7),\n\t[orv_dispatch_tsstartdepoexit] datetime2(7),\n\t[orv_dispatch_reroutect] int,\n\t[orv_dispatch_actualarrdate] datetime2(7),\n\t[orv_dispatch_physicalstartlat] float,\n\t[orv_dispatch_physicalstartlng] float,\n\t[orv_dispatch_tsstartdepoexitapp] datetime2(7),\n\t[orv_dispatch_tsstopdepoenterapp] datetime2(7),\n\t[orv_dispatch_uncanceldate] datetime2(7),\n\t[orv_dispatch_uncancelusername] nvarchar(4000),\n\t[orv_dispatch_lmsdebrifed] int,\n\t[orv_dispatch_reviseddebrief] int,\n\t[orv_dispatch_lhtransporter] nvarchar(4000),\n\t[orv_dispatch_triptype] nvarchar(4000),\n\t[orv_dispatch_startreason] nvarchar(4000),\n\t[orv_dispatch_route] nvarchar(4000),\n\t[orv_dispatch_tmstraileridentify] nvarchar(4000),\n\t[orv_dispatch_tmstrailer2identify] nvarchar(4000),\n\t[orv_dispatch_tmscontroller] nvarchar(4000),\n\t[orv_dispatch_routekey] nvarchar(4000),\n\t[orv_dispatch_courierid] bigint,\n\t[orv_dispatch_originalstartdate] datetime2(7),\n\t[orv_dispatch_originalextarrival] datetime2(7),\n\t[orv_dispatch_recomputeoriginals] int,\n\t[orv_dispatch_originalextdistance] bigint,\n\t[orv_dispatch_originalextduration] bigint,\n\t[orv_dispatch_moddate] datetime2(7),\n\t[orv_dispatch_tmsmode] int,\n\t[orv_dispatch_driversignature] bigint,\n\t[orv_vehicle_id] bigint,\n\t[orv_vehicle_fleetcode] nvarchar(4000),\n\t[orv_vehicle_lmsid] bigint,\n\t[orv_vehicle_trailer1id] bigint,\n\t[orv_vehicle_trailer1fleetcode] nvarchar(4000),\n\t[orv_vehicle_trailer1lmsid] bigint,\n\t[orv_vehicle_trailer2id] bigint,\n\t[orv_vehicle_trailer2fleetcode] nvarchar(4000),\n\t[orv_vehicle_trailer2lmsid] bigint,\n\t[lms_vehicle_id] int,\n\t[lms_vehicle_uid] nvarchar(4000),\n\t[lms_vehicle_trailer1id] int,\n\t[lms_vehicle_trailer1uid] nvarchar(4000),\n\t[lms_vehicle_trailer2id] int,\n\t[lms_vehicle_trailer2uid] nvarchar(4000),\n\t[orv_orvuser_id] bigint,\n\t[orv_orvuser_username] nvarchar(4000),\n\t[orv_orvuser_fname] nvarchar(4000),\n\t[orv_orvuser_lname] nvarchar(4000),\n\t[orv_orvuser_empcode] nvarchar(4000),\n\t[orv_orvuser_aka] nvarchar(4000),\n\t[orv_orvuser_gender] nvarchar(4000),\n\t[orv_orvuser_cellno] nvarchar(4000),\n\t[orv_orvuser_rsaid] nvarchar(4000),\n\t[orv_orvuser_passportno] nvarchar(4000),\n\t[orv_orvuser_idpassportno] nvarchar(4000),\n\t[orv_orvuser_nationality] nvarchar(4000),\n\t[orv_orvuser_birthcountry] nvarchar(4000),\n\t[orv_orvuser_engageddate] datetime2(7),\n\t[orv_orvuser_joineddate] datetime2(7),\n\t[orv_orvuser_termindate] datetime2(7),\n\t[orv_orvuser_status] nvarchar(4000),\n\t[orv_orvuser_depot] nvarchar(4000),\n\t[orv_orvuser_jobcategory] nvarchar(4000),\n\t[orv_orvuser_jobtitle] nvarchar(4000),\n\t[orv_orvuser_payroll] nvarchar(4000),\n\t[orv_orvuser_annualsalary] float,\n\t[orv_orvuser_insdate] datetime2(7),\n\t[md_vehiclebasic_id] bigint,\n\t[md_vehiclebasic_uid] nvarchar(4000),\n\t[md_vehiclebasic_vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_activeflag] bigint,\n\t[md_vehiclebasic_vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_depot] nvarchar(4000),\n\t[md_vehiclebasic_enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_fueltype] nvarchar(4000),\n\t[md_vehiclebasic_registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_year] int,\n\t[md_vehiclebasic_vehicleownerid] bigint,\n\t[md_vehiclebasic_vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_staffvehicleflag] int,\n\t[md_vehiclebasic_vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_brn] nvarchar(4000),\n\t[md_vehiclebasic_brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_insdate] datetime2(7),\n\t[md_vehiclebasic_insby] nvarchar(4000),\n\t[md_vehiclebasic_islinehaulvehicle] int,\n\t[md_vehiclebasic_internalheight] numeric(18,2),\n\t[md_vehiclebasic_internallength] numeric(18,2),\n\t[md_vehiclebasic_internalvolume] numeric(18,2),\n\t[md_vehiclebasic_internalwidth] numeric(18,2),\n\t[md_vehiclebasic_moddate] datetime2(7),\n\t[md_vehiclebasic_trailerflag] int,\n\t[md_vehiclebasic_workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_approveddate] datetime2(7),\n\t[md_vehiclebasic_trailer1id] bigint,\n\t[md_vehiclebasic_trailer1uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer1activeflag] bigint,\n\t[md_vehiclebasic_trailer1vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer1enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer1year] int,\n\t[md_vehiclebasic_trailer1vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer1vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer1staffvehicleflag] int,\n\t[md_vehiclebasic_trailer1vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer1insdate] datetime2(7),\n\t[md_vehiclebasic_trailer1insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer1islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer1internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer1internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer1moddate] datetime2(7),\n\t[md_vehiclebasic_trailer1trailerflag] int,\n\t[md_vehiclebasic_trailer1workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1approveddate] datetime2(7),\n\t[md_vehiclebasic_trailer2id] bigint,\n\t[md_vehiclebasic_trailer2uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer2activeflag] bigint,\n\t[md_vehiclebasic_trailer2vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer2enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer2year] int,\n\t[md_vehiclebasic_trailer2vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer2vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer2staffvehicleflag] int,\n\t[md_vehiclebasic_trailer2vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer2insdate] datetime2(7),\n\t[md_vehiclebasic_trailer2insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer2islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer2internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer2internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer2moddate] datetime2(7),\n\t[md_vehiclebasic_trailer2trailerflag] int,\n\t[md_vehiclebasic_trailer2workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2approveddate] datetime2(7),\n\t[tms_driverpayitem_id] bigint,\n\t[tms_driverpayitem_driverid] nvarchar(4000),\n\t[tms_driverpayitem_tripid] bigint,\n\t[tms_driverpayitem_triprate] int,\n\t[tms_driverpayitem_mealrate] int,\n\t[tms_driverpayitem_sleepoverrate] int,\n\t[tms_driverpayitem_airtimerate] int,\n\t[tms_driverpayitem_linkrate] int,\n\t[tms_driverpayitem_totalrate] int,\n\t[tms_driverpayitem_routeid] bigint,\n\t[tms_driverpayitem_routename] nvarchar(4000),\n\t[tms_driverpayitem_insdate] datetime2(7),\n\t[tms_driverpayitem_moddate] datetime2(7),\n\t[tms_driverpayitem_horse] nvarchar(4000),\n\t[tms_driverpayitem_trailers] nvarchar(4000),\n\t[tms_driverpayitem_linkused] int,\n\t[tms_driverpayitem_manualadjustment] int,\n\t[tms_driverpayitem_editby] bigint,\n\t[tms_driverpayitem_drivername] nvarchar(4000),\n\t[tms_driverpayitem_dispatchdate] datetime2(7),\n\t[tms_driverpayitem_bookings] nvarchar(4000),\n\t[tms_driverpayitem_employeecode] nvarchar(4000),\n\t[tms_driverpayitem_originatedfrom] nvarchar(4000),\n\t[tms_driverpayitem_reportid] bigint,\n\t[tms_financedata_aggrpeaksurchagrebuy] bigint,\n\t[tms_financedata_aggrpeaksurchagresell] bigint,\n\t[tms_financedata_aggrmanualentryroadhaulsell] bigint,\n\t[tms_financedata_aggrmanualentryahocsell] bigint,\n\t[tms_financedata_aggrsystemfuellevy] bigint,\n\t[tms_financedata_aggrsystemratefuellevy] bigint,\n\t[tms_financedata_aggrsystemratefuelexlevy] bigint,\n\t[tms_financedata_aggrsystemratefuelinclevy] bigint,\n\t[tms_financedata_aggrsystemsellrate] bigint,\n\t[tms_financedata_aggrtotalsellrate] bigint,\n\t[tms_financedata_aggrtotalbuyrate] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/ssttrip.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTTrip \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTWaybill_SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTWaybill') )\n    DROP EXTERNAL TABLE dbo.F_SSTWaybill\nGO\n\nCREATE EXTERNAL TABLE dbo.F_SSTWaybill (\n\t[lms_waybill_id] int,\n\t[lms_waybill_date] datetime2(7),\n\t[lms_waybill_bservice] nvarchar(4000),\n\t[lms_waybill_cservice] nvarchar(4000),\n\t[lms_waybill_originid] nvarchar(4000),\n\t[lms_waybill_defuser] nvarchar(4000),\n\t[lms_waybill_distance] float,\n\t[lms_waybill_courierid] nvarchar(4000),\n\t[lms_waybill_courierwbno] nvarchar(4000),\n\t[lms_waybill_billtype] int,\n\t[lms_waybill_capdate] datetime2(7),\n\t[lms_waybill_surcharge] numeric(18,2),\n\t[lms_waybill_insurance] numeric(18,2),\n\t[lms_waybill_tax] numeric(18,2),\n\t[lms_waybill_totalcharge] numeric(18,2),\n\t[lms_waybill_destinationname] nvarchar(4000),\n\t[lms_waybill_ordertype] int,\n\t[lms_waybill_pickupcustid] int,\n\t[lms_waybill_delivercustid] int,\n\t[lms_waybill_billto] nvarchar(4000),\n\t[lms_waybill_claimable] int,\n\t[lms_waybill_override] int,\n\t[lms_waybill_vehiclecapacity] int,\n\t[lms_waybill_custpoddate] datetime2(7),\n\t[lms_waybill_poddate] datetime2(7),\n\t[lms_waybill_signee] nvarchar(4000),\n\t[lms_waybill_grvno] nvarchar(4000),\n\t[lms_waybill_endorsements] nvarchar(4000),\n\t[lms_waybill_billcust] int,\n\t[lms_waybill_courier_from] nvarchar(4000),\n\t[lms_waybill_courier_to] nvarchar(4000),\n\t[lms_waybill_charge] numeric(18,2),\n\t[lms_waybill_tvalue] numeric(18,2),\n\t[lms_waybill_inservice] datetime2(7),\n\t[lms_waybill_dbtotalcharge] numeric(18,2),\n\t[lms_waybill_loadid] int,\n\t[lms_waybill_mrpflag] int,\n\t[lms_waybill_printed] int,\n\t[lms_waybill_sreasonid] int,\n\t[lms_waybill_minkg] numeric(18,2),\n\t[lms_waybill_minrate] numeric(18,2),\n\t[lms_waybill_addrate] numeric(18,2),\n\t[lms_waybill_docfees] numeric(18,2),\n\t[lms_waybill_volumetric] numeric(18,2),\n\t[lms_waybill_hasprinted] nvarchar(4000),\n\t[lms_waybill_site] nvarchar(4000),\n\t[lms_waybill_deliveryno] int,\n\t[lms_waybill_fuellevy] numeric(18,2),\n\t[lms_waybill_totfuellevy] numeric(18,2),\n\t[lms_waybill_custaccid] int,\n\t[lms_waybill_podadded] datetime2(7),\n\t[lms_waybill_scanned] int,\n\t[lms_waybill_userid] int,\n\t[lms_waybill_autoprinted] int,\n\t[lms_waybill_poduserid] int,\n\t[lms_waybill_scanuserid] int,\n\t[lms_waybill_cref] nvarchar(4000),\n\t[lms_waybill_ushort] int,\n\t[lms_waybill_delays] nvarchar(4000),\n\t[lms_waybill_debriefed] int,\n\t[lms_waybill_debriefdt] datetime2(7),\n\t[lms_waybill_dbctnsret] int,\n\t[lms_waybill_uploaded] int,\n\t[lms_waybill_serviceexclude] int,\n\t[lms_waybill_failed] int,\n\t[lms_waybill_delayreasonid] int,\n\t[lms_waybill_notdebrievreasonid] int,\n\t[lms_waybill_deliverystatid] int,\n\t[lms_waybill_reasongroupid] int,\n\t[lms_waybill_emailcust] int,\n\t[lms_waybill_mobileissuereportedid] int,\n\t[lms_waybill_ismobile] int,\n\t[lms_bcustomer_id] int,\n\t[lms_bcustomer_name] nvarchar(4000),\n\t[lms_pcustomer_id] int,\n\t[lms_pcustomer_name] nvarchar(4000),\n\t[lms_dcustomer_id] int,\n\t[lms_dcustomer_name] nvarchar(4000),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_users_site] nvarchar(4000),\n\t[lms_podusers_id] int,\n\t[lms_podusers_fullname] nvarchar(4000),\n\t[lms_podusers_site] nvarchar(4000),\n\t[lms_scanusers_id] int,\n\t[lms_scanusers_fullname] nvarchar(4000),\n\t[lms_scanusers_site] nvarchar(4000),\n\t[lms_delayreason_id] int,\n\t[lms_delayreason_description] nvarchar(4000),\n\t[lms_mobilefeedbackreason_id] int,\n\t[lms_mobilefeedbackreason_description] nvarchar(4000),\n\t[lms_reasondetail_id] int,\n\t[lms_reasondetail_description] nvarchar(4000),\n\t[lms_reasondetail_reasongroupid] int,\n\t[lms_reasongroup_id] int,\n\t[lms_reasongroup_description] nvarchar(4000),\n\t[lms_deliverystatus_id] int,\n\t[lms_deliverystatus_description] nvarchar(4000),\n\t[lms_parcelbywaybill_waybillid] int,\n\t[lms_parcelbywaybill_aggweight] float,\n\t[lms_parcelbywaybill_aggchargeweight] numeric(18,2),\n\t[lms_parcelbywaybill_aggvolweight] float,\n\t[lms_parcelbywaybill_aggvolumiserweight] numeric(18,2),\n\t[lms_parcelbywaybill_noparcels] bigint,\n\t[orv_delivery_id] bigint,\n\t[orv_delivery_dispatchid] bigint,\n\t[orv_delivery_waybillid] bigint,\n\t[orv_delivery_address] nvarchar(4000),\n\t[orv_delivery_town] nvarchar(4000),\n\t[orv_delivery_province] nvarchar(4000),\n\t[orv_delivery_country] nvarchar(4000),\n\t[orv_delivery_lat] float,\n\t[orv_delivery_lng] float,\n\t[orv_delivery_placeid] nvarchar(4000),\n\t[orv_delivery_what3words] nvarchar(4000),\n\t[orv_delivery_zipcode] nvarchar(4000),\n\t[orv_delivery_eta] datetime2(7),\n\t[orv_delivery_actualeta] datetime2(7),\n\t[orv_delivery_deliverydate] datetime2(7),\n\t[orv_delivery_deliverby] datetime2(7),\n\t[orv_delivery_deliveryorder] int,\n\t[orv_delivery_tsgeofenceenter] datetime2(7),\n\t[orv_delivery_tsscanningstart] datetime2(7),\n\t[orv_delivery_tsscanningstop] datetime2(7),\n\t[orv_delivery_tspodsignature] datetime2(7),\n\t[orv_delivery_aid] bigint,\n\t[orv_delivery_numprcls] int,\n\t[orv_delivery_geocodingstatus] nvarchar(4000),\n\t[orv_delivery_skipdate] datetime2(7),\n\t[orv_delivery_skipreason] nvarchar(4000),\n\t[orv_delivery_status] nvarchar(4000),\n\t[orv_delivery_partialmatch] int,\n\t[orv_delivery_approximated] int,\n\t[orv_delivery_lmsorder] int,\n\t[orv_delivery_optimizedorder] int,\n\t[orv_delivery_seal] nvarchar(4000),\n\t[orv_delivery_customerinvoice] int,\n\t[orv_delivery_customerdn] int,\n\t[orv_delivery_grv] nvarchar(4000),\n\t[orv_delivery_chepslip] int,\n\t[orv_delivery_cleandelivery] int,\n\t[orv_delivery_trackingcode] nvarchar(4000),\n\t[orv_delivery_mode] nvarchar(4000),\n\t[orv_delivery_customorder] int,\n\t[orv_delivery_verified] int,\n\t[orv_delivery_altered] int,\n\t[orv_delivery_orderid] int,\n\t[orv_delivery_mergeid] bigint,\n\t[orv_delivery_orderref] nvarchar(4000),\n\t[orv_delivery_drivernote] nvarchar(4000),\n\t[orv_delivery_timedefinite] int,\n\t[orv_delivery_orvcode] int,\n\t[orv_delivery_vaid] bigint,\n\t[orv_delivery_delegatedate] datetime2(7),\n\t[orv_delivery_delegatemode] nvarchar(4000),\n\t[orv_delivery_debriefmode] nvarchar(4000),\n\t[orv_delivery_debriefed] int,\n\t[orv_delivery_insdate] datetime2(7),\n\t[orv_delivery_reviseddebrief] int,\n\t[orv_delivery_lmsdebriefed] int,\n\t[orv_delivery_uncanceldate] datetime2(7),\n\t[orv_delivery_podlaterdate] datetime2(7),\n\t[orv_delivery_podmanualdate] datetime2(7),\n\t[orv_delivery_manualdebriefreason] nvarchar(4000),\n\t[orv_delivery_submanualdebriefreason] nvarchar(4000),\n\t[orv_delivery_outofgeofencereason] nvarchar(4000),\n\t[orv_delivery_tsentergeofenceapp] datetime2(7),\n\t[orv_delivery_tsexitgeofenceapp] datetime2(7),\n\t[orv_delivery_comebacklater] bigint,\n\t[orv_delivery_uncancelusername] nvarchar(4000),\n\t[orv_delivery_cref] int,\n\t[orv_delivery_division] int,\n\t[orv_delivery_descriptionofgoods] nvarchar(4000),\n\t[orv_delivery_skiplng] float,\n\t[orv_delivery_skiplat] float,\n\t[orv_delivery_courierid] bigint,\n\t[orv_delivery_posreason] nvarchar(4000),\n\t[orv_delivery_moddate] datetime2(7),\n\t[orv_delivery_mallid] int,\n\t[orv_delivery_mallgid] bigint,\n\t[orv_delivery_lmsidskipreason] bigint,\n\t[orv_delivery_deleteforimport] int,\n\t[orv_delivery_podoutofgeofence] int,\n\t[orv_delivery_originalcustomerid] bigint,\n\t[orv_originalcustomer_id] bigint,\n\t[orv_originalcustomer_name] nvarchar(4000),\n\t[orv_mall_id] bigint,\n\t[orv_mall_mallname] nvarchar(4000),\n\t[orv_mall_branchname] nvarchar(4000),\n\t[orv_mall_gpretailer] nvarchar(4000),\n\t[orv_mall_highvoldelivery] nvarchar(4000),\n\t[orv_mall_stripmall] nvarchar(4000),\n\t[orv_mall_standalonestore] nvarchar(4000),\n\t[orv_mall_streetsidestore] nvarchar(4000),\n\t[orv_mall_dedicatedrouted] nvarchar(4000),\n\t[orv_mall_insdate] datetime2(7),\n\t[orv_mall_address] nvarchar(4000),\n\t[orv_mall_deleted] int,\n\t[orv_mall_lat] float,\n\t[orv_mall_lng] float\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstwaybill.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTWaybill\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F_SSTWaybillsPerParcel_SoR')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTWaybillsPerParcel') )\n    DROP EXTERNAL TABLE dbo.F_SSTWaybillsPerParcel\nGO\n\n\nCREATE EXTERNAL TABLE dbo.F_SSTWaybillsPerParcel (\n\t[lms_waybillsperparcel_parcelid] int,\n    [lms_waybillsperparcel_waybillid] int,\n    [lms_waybillsperparcel_loadid] int\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstwaybillsperparcel.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.F_SSTWaybillsPerParcel\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Initialise DB')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create a database scoped credential in the Serverless SQL DB.\nCREATE DATABASE SCOPED CREDENTIAL SynapseUser WITH IDENTITY = 'Managed Identity';\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'synapse_citylogisticsstorageprod_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [synapse_citylogisticsstorage_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net',\n\t\tCREDENTIAL = SynapseUser\n\t)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STMD",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTBooking')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTBooking') )\n    DROP EXTERNAL TABLE dbo.F_SSTBooking\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTBooking') )\n    DROP EXTERNAL TABLE dbo.T_SSTBooking\nGO\n\n\nCREATE EXTERNAL TABLE dbo.T_SSTBooking (\n\t[tms_booking_id] bigint,\n\t[tms_booking_bookingtype] nvarchar(4000),\n\t[tms_booking_customerid] bigint,\n\t[tms_booking_trailersize] nvarchar(4000),\n\t[tms_booking_trailertype] nvarchar(4000),\n\t[tms_booking_routeid] bigint,\n\t[tms_booking_routename] nvarchar(4000),\n\t[tms_booking_cargoweight] float,\n\t[tms_booking_cubicvolume] float,\n\t[tms_booking_directbooking] int,\n\t[tms_booking_pickupdate] datetime2(7),\n\t[tms_booking_dispatchdate] datetime2(7),\n\t[tms_booking_deliverydate] datetime2(7),\n\t[tms_booking_insdate] datetime2(7),\n\t[tms_booking_moddate] datetime2(7),\n\t[tms_booking_status] nvarchar(4000),\n\t[tms_booking_tripid] bigint,\n\t[tms_booking_createdby] bigint,\n\t[tms_booking_allocatedby] bigint,\n\t[tms_booking_allocateddate] datetime2(7),\n\t[tms_booking_opsrouteid] bigint,\n\t[tms_booking_opsroutename] nvarchar(4000),\n\t[tms_booking_childcustomerid] bigint,\n\t[tms_booking_thirdpartyreason] nvarchar(4000),\n\t[tms_booking_thirdpartyrate] bigint,\n\t[tms_booking_cref1] nvarchar(4000),\n\t[tms_booking_cref2] nvarchar(4000),\n\t[tms_booking_thirdpartyvehicleflag] int,\n\t[tms_booking_thirdpartytrailerflag] int,\n\t[tms_booking_thirdpartydriverflag] int,\n\t[tms_booking_invoiceid] bigint,\n\t[tms_booking_docstatus] nvarchar(4000),\n\t[tms_booking_billingstatus] nvarchar(4000),\n\t[tms_booking_thirdpartyagreedrate] bigint,\n\t[tms_booking_invoiceddate] datetime2(7),\n\t[tms_booking_createdbyname] nvarchar(4000),\n\t[tms_booking_note] nvarchar(4000),\n\t[tms_booking_manifests] nvarchar(4000),\n\t[tms_booking_local] int,\n\t[tms_booking_docdate] datetime2(7),\n\t[tms_booking_billingmethod] nvarchar(4000),\n\t[tms_booking_originalpod] int,\n\t[tms_booking_ponumber] nvarchar(4000),\n\t[tms_booking_customerrate] bigint,\n\t[tms_booking_customeragreedrate] bigint,\n\t[tms_booking_assetreleasedate] datetime2(7),\n\t[tms_booking_thirdpartyid] bigint,\n\t[tms_booking_transporter] nvarchar(4000),\n\t[tms_booking_emailrequester] nvarchar(4000),\n\t[tms_booking_frombranchid] bigint,\n\t[tms_booking_tobranchid] bigint,\n\t[tms_booking_frombranch] nvarchar(4000),\n\t[tms_booking_tobranch] nvarchar(4000),\n\t[tms_booking_reason] nvarchar(4000),\n\t[tms_booking_startaddress] nvarchar(4000),\n\t[tms_booking_startlat] float,\n\t[tms_booking_startlng] float,\n\t[tms_booking_endaddress] nvarchar(4000),\n\t[tms_booking_endlat] float,\n\t[tms_booking_endlng] float,\n\t[tms_booking_convertedbookingid] bigint,\n\t[tms_customer_id] bigint,\n\t[tms_customer_status] nvarchar(4000),\n\t[tms_customer_name] nvarchar(4000),\n\t[tms_customer_parentid] bigint,\n\t[tms_customer_accountnumber] nvarchar(4000),\n\t[tms_customer_revenuecode] nvarchar(4000),\n\t[tms_customer_insdate] bigint,\n\t[tms_customer_moddate] bigint,\n\t[tms_customer_insby] bigint,\n\t[tms_customer_opaqueid] nvarchar(4000),\n\t[tms_customer_email] nvarchar(4000),\n\t[tms_customer_areacode] nvarchar(4000),\n\t[tms_customer_mobilenum] nvarchar(4000),\n\t[tms_customer_billingmethod] nvarchar(4000),\n\t[tms_customer_adjustmetric] nvarchar(4000),\n\t[tms_customer_adjustvalue] int,\n\t[tms_customer_adjustnegativeallowed] int,\n\t[tms_customer_adjustvalueusingprevmonth] int,\n\t[tms_customer_excludefromnotinvoicedreport] int,\n\t[tms_customer_logictype] nvarchar(4000),\n\t[tms_customer_childid] bigint,\n\t[tms_customer_childstatus] nvarchar(4000),\n\t[tms_customer_childname] nvarchar(4000),\n\t[tms_customer_childparentid] bigint,\n\t[tms_customer_childaccountnumber] nvarchar(4000),\n\t[tms_customer_childrevenuecode] nvarchar(4000),\n\t[tms_customer_childinsdate] bigint,\n\t[tms_customer_childmoddate] bigint,\n\t[tms_customer_childinsby] bigint,\n\t[tms_customer_childopaqueid] nvarchar(4000),\n\t[tms_customer_childemail] nvarchar(4000),\n\t[tms_customer_childareacode] nvarchar(4000),\n\t[tms_customer_childmobilenum] nvarchar(4000),\n\t[tms_customer_childbillingmethod] nvarchar(4000),\n\t[tms_customer_childadjustmetric] nvarchar(4000),\n\t[tms_customer_childadjustvalue] int,\n\t[tms_customer_childadjustnegativeallowed] int,\n\t[tms_customer_childadjustvalueusingprevmonth] int,\n\t[tms_customer_childexcludefromnotinvoicedreport] int,\n\t[tms_customer_childlogictype] nvarchar(4000),\n\t[tms_customer_childminliability] bigint,\n\t[tms_route_id] bigint,\n\t[tms_route_name] nvarchar(4000),\n\t[tms_route_slug] nvarchar(4000),\n\t[tms_route_parentroute] bigint,\n\t[tms_route_insdate] bigint,\n\t[tms_route_moddate] bigint,\n\t[tms_route_insby] bigint,\n\t[tms_route_status] nvarchar(4000),\n\t[tms_route_crossborder] int,\n\t[tms_route_roundtripdays] int,\n\t[tms_route_distance] int,\n\t[tms_route_duration] int,\n\t[tms_route_numofuse] int,\n\t[tms_route_local] int,\n\t[tms_route_opsrouteid] bigint,\n\t[tms_route_opsroutename] nvarchar(4000),\n\t[tms_route_opsrouteslug] nvarchar(4000),\n\t[tms_route_opsrouteparentroute] bigint,\n\t[tms_route_opsrouteinsdate] bigint,\n\t[tms_route_opsroutemoddate] bigint,\n\t[tms_route_opsrouteinsby] bigint,\n\t[tms_route_opsroutestatus] nvarchar(4000),\n\t[tms_route_opsroutecrossborder] int,\n\t[tms_route_opsrouteroundtripdays] int,\n\t[tms_route_opsroutedistance] int,\n\t[tms_route_opsrouteduration] int,\n\t[tms_route_opsroutenumofuse] int,\n\t[tms_route_opsroutelocal] int,\n\t[tms_thirdparty_id] bigint,\n\t[tms_thirdparty_name] nvarchar(4000),\n\t[tms_thirdparty_areacode] nvarchar(4000),\n\t[tms_thirdparty_telnumber] nvarchar(4000),\n\t[tms_thirdparty_mobareacode] nvarchar(4000),\n\t[tms_thirdparty_mobnumer] nvarchar(4000),\n\t[tms_thirdparty_contact] nvarchar(4000),\n\t[tms_thirdparty_address] nvarchar(4000),\n\t[tms_thirdparty_streetno] nvarchar(4000),\n\t[tms_thirdparty_zipcode] nvarchar(4000),\n\t[tms_thirdparty_city] nvarchar(4000),\n\t[tms_thirdparty_province] nvarchar(4000),\n\t[tms_thirdparty_status] nvarchar(4000),\n\t[tms_thirdparty_mdvoid] bigint,\n\t[tms_thirdparty_registration] nvarchar(4000),\n\t[tms_thirdparty_email] nvarchar(4000),\n\t[tms_thirdparty_accnumber] nvarchar(4000),\n\t[tms_thirdparty_insdate] bigint,\n\t[tms_thirdparty_moddate] bigint,\n\t[tms_thirdparty_gitstatus] nvarchar(4000),\n\t[tms_thirdparty_lat] float,\n\t[tms_thirdparty_lng] float,\n\t[tms_thirdparty_note] nvarchar(4000),\n\t[tms_thirdparty_revenuecode] nvarchar(4000),\n\t[tms_thirdparty_country] nvarchar(4000),\n\t[tms_financedata_id] bigint,\n\t[tms_financedata_bookingid] bigint,\n\t[tms_financedata_insdate] bigint,\n\t[tms_financedata_peaksurchagrebuy] bigint,\n\t[tms_financedata_peaksurchagresell] bigint,\n\t[tms_financedata_manualentryroadhaulsell] bigint,\n\t[tms_financedata_manualentryahocsell] bigint,\n\t[tms_financedata_systemfuellevy] bigint,\n\t[tms_financedata_systemratefuellevy] bigint,\n\t[tms_financedata_systemratefuelexlevy] bigint,\n\t[tms_financedata_systemratefuelinclevy] bigint,\n\t[tms_financedata_systemsellrate] bigint,\n\t[tms_financedata_totalsellrate] bigint,\n\t[tms_financedata_moddate] bigint,\n\t[tms_financedata_totalbuyrate] bigint,\n\t[tms_financedata_rateprofileid] bigint\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstbooking.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTBooking\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTCollect')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTCollect') )\n    DROP EXTERNAL TABLE dbo.F_SSTCollect\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTCollect') )\n    DROP EXTERNAL TABLE dbo.T_SSTCollect\nGO\n\n\nCREATE EXTERNAL TABLE dbo.T_SSTCollect (\n\t[lms_collect_id] int,\n\t[lms_collect_date] datetime2(7),\n\t[lms_collect_cservice] nvarchar(4000),\n\t[lms_collect_billcust] int,\n\t[lms_collect_pickupcustid] int,\n\t[lms_collect_delivercustid] int,\n\t[lms_collect_locationid] int,\n\t[lms_collect_noofparcels] nvarchar(4000),\n\t[lms_collect_weight] nvarchar(4000),\n\t[lms_collect_timeready] nvarchar(4000),\n\t[lms_collect_vehiclecapacity] int,\n\t[lms_collect_collectrefno] nvarchar(4000),\n\t[lms_collect_timeclosed] nvarchar(4000),\n\t[lms_collect_securitycollect] int,\n\t[lms_collect_confirmedby] nvarchar(4000),\n\t[lms_collect_courierid] nvarchar(4000),\n\t[lms_collect_confirmeddate] datetime2(7),\n\t[lms_collect_transferreddate] datetime2(7),\n\t[lms_collect_senddate] datetime2(7),\n\t[lms_collect_orderid] int,\n\t[lms_collect_orderdate] datetime2(7),\n\t[lms_collect_userid] int,\n\t[lms_collect_reason] nvarchar(4000),\n\t[lms_collect_cubes] numeric(18,2),\n\t[lms_collect_custref] nvarchar(4000),\n\t[lms_collect_custref3] nvarchar(4000),\n\t[lms_collect_custaccid] int,\n\t[lms_collect_collectparentid] int,\n\t[lms_collect_duedate] datetime2(7),\n\t[lms_collect_specdel] int,\n\t[lms_collect_flunits] int,\n\t[lms_collect_flkgs] int,\n\t[lms_collect_quote] numeric(18,2),\n\t[lms_collect_bill_vehicletype] int,\n\t[lms_collect_collectstatusid] int,\n\t[lms_collect_bill_collectstatusid] int,\n\t[lms_collect_cancelreason] int,\n\t[lms_collect_cancelcomments] nvarchar(4000),\n\t[lms_collect_loadid] int,\n\t[lms_collect_custref2] nvarchar(4000),\n\t[lms_collect_created] datetime2(7),\n\t[lms_collect_oncollection] datetime2(7),\n\t[lms_collect_collected] datetime2(7),\n\t[lms_collect_complete] datetime2(7),\n\t[lms_collect_cancelled] datetime2(7),\n\t[lms_collect_failed] datetime2(7),\n\t[lms_collect_ctype] int,\n\t[lms_collect_quoteid] int,\n\t[lms_collect_lastupdate] datetime2(7),\n\t[lms_collect_notes] nvarchar(4000),\n\t[lms_collect_docurl] nvarchar(4000),\n\t[lms_collect_docdate] datetime2(7),\n\t[lms_collect_orvstatus] nvarchar(4000),\n\t[lms_collect_orvcode] int,\n\t[lms_collect_oldloadid] int,\n\t[lms_bcustomer_id] int,\n\t[lms_bcustomer_name] nvarchar(4000),\n\t[lms_pcustomer_id] int,\n\t[lms_pcustomer_name] nvarchar(4000),\n\t[lms_dcustomer_id] int,\n\t[lms_dcustomer_name] nvarchar(4000),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_clocation_id] int,\n\t[lms_clocation_description] nvarchar(4000),\n\t[lms_collectstatus_id] int,\n\t[lms_collectstatus_description] nvarchar(4000),\n\t[orv_draftcollection_id] bigint,\n\t[orv_draftcollection_fromlocid] int,\n\t[orv_draftcollection_loadid] int,\n\t[orv_draftcollection_status] nvarchar(4000),\n\t[orv_draftcollection_importedate] datetime2(7),\n\t[orv_draftcollection_fromstr] nvarchar(4000),\n\t[orv_draftcollection_did] bigint,\n\t[orv_draftcollection_mergedlmsid] int,\n\t[orv_draftcollection_rejectdate] datetime2(7),\n\t[orv_draftcollection_confirmdate] datetime2(7),\n\t[orv_draftcollection_customerref] nvarchar(4000),\n\t[orv_draftcollection_collectionwaybillid] bigint,\n\t[orv_draftcollection_collectbydate] datetime2(7),\n\t[orv_draftcollection_rejectreason] nvarchar(4000),\n\t[orv_draftcollection_cancelctr] int,\n\t[orv_delivery_id] bigint,\n\t[orv_delivery_dispatchid] bigint,\n\t[orv_delivery_waybillid] bigint,\n\t[orv_delivery_address] nvarchar(4000),\n\t[orv_delivery_town] nvarchar(4000),\n\t[orv_delivery_province] nvarchar(4000),\n\t[orv_delivery_country] nvarchar(4000),\n\t[orv_delivery_lat] float,\n\t[orv_delivery_lng] float,\n\t[orv_delivery_placeid] nvarchar(4000),\n\t[orv_delivery_what3words] nvarchar(4000),\n\t[orv_delivery_zipcode] nvarchar(4000),\n\t[orv_delivery_eta] datetime2(7),\n\t[orv_delivery_actualeta] datetime2(7),\n\t[orv_delivery_deliverydate] datetime2(7),\n\t[orv_delivery_deliverby] datetime2(7),\n\t[orv_delivery_deliveryorder] int,\n\t[orv_delivery_tsgeofenceenter] datetime2(7),\n\t[orv_delivery_tsscanningstart] datetime2(7),\n\t[orv_delivery_tsscanningstop] datetime2(7),\n\t[orv_delivery_tspodsignature] datetime2(7),\n\t[orv_delivery_aid] bigint,\n\t[orv_delivery_numprcls] int,\n\t[orv_delivery_geocodingstatus] nvarchar(4000),\n\t[orv_delivery_skipdate] datetime2(7),\n\t[orv_delivery_skipreason] nvarchar(4000),\n\t[orv_delivery_status] nvarchar(4000),\n\t[orv_delivery_partialmatch] int,\n\t[orv_delivery_approximated] int,\n\t[orv_delivery_lmsorder] int,\n\t[orv_delivery_optimizedorder] int,\n\t[orv_delivery_seal] nvarchar(4000),\n\t[orv_delivery_customerinvoice] int,\n\t[orv_delivery_customerdn] int,\n\t[orv_delivery_grv] nvarchar(4000),\n\t[orv_delivery_chepslip] int,\n\t[orv_delivery_cleandelivery] int,\n\t[orv_delivery_trackingcode] nvarchar(4000),\n\t[orv_delivery_mode] nvarchar(4000),\n\t[orv_delivery_customorder] int,\n\t[orv_delivery_verified] int,\n\t[orv_delivery_altered] int,\n\t[orv_delivery_orderid] int,\n\t[orv_delivery_mergeid] bigint,\n\t[orv_delivery_orderref] nvarchar(4000),\n\t[orv_delivery_drivernote] nvarchar(4000),\n\t[orv_delivery_guid] bigint,\n\t[orv_delivery_timedefinite] int,\n\t[orv_delivery_orvcode] int,\n\t[orv_delivery_vaid] bigint,\n\t[orv_delivery_delegatedate] datetime2(7),\n\t[orv_delivery_delegatemode] nvarchar(4000),\n\t[orv_delivery_debriefmode] nvarchar(4000),\n\t[orv_delivery_debriefed] int,\n\t[orv_delivery_insdate] datetime2(7),\n\t[orv_delivery_reviseddebrief] int,\n\t[orv_delivery_lmsdebriefed] int,\n\t[orv_delivery_uncanceldate] datetime2(7),\n\t[orv_delivery_podlaterdate] datetime2(7),\n\t[orv_delivery_podmanualdate] datetime2(7),\n\t[orv_delivery_manualdebriefreason] nvarchar(4000),\n\t[orv_delivery_submanualdebriefreason] nvarchar(4000),\n\t[orv_delivery_outofgeofencereason] nvarchar(4000),\n\t[orv_delivery_tsentergeofenceapp] datetime2(7),\n\t[orv_delivery_tsexitgeofenceapp] datetime2(7),\n\t[orv_delivery_comebacklater] bigint,\n\t[orv_delivery_uncancelusername] nvarchar(4000),\n\t[orv_delivery_cref] int,\n\t[orv_delivery_division] int,\n\t[orv_delivery_descriptionofgoods] nvarchar(4000),\n\t[orv_delivery_skiplng] float,\n\t[orv_delivery_skiplat] float,\n\t[orv_delivery_courierid] bigint,\n\t[orv_delivery_posreason] nvarchar(4000),\n\t[orv_delivery_moddate] datetime2(7),\n\t[orv_delivery_mallid] int,\n\t[orv_delivery_mallgid] bigint,\n\t[orv_delivery_lmsidskipreason] bigint,\n\t[orv_delivery_deleteforimport] int,\n\t[orv_delivery_podoutofgeofence] int,\n\t[orv_delivery_originalcustomerid] bigint,\n\t[orv_originalcustomer_id] bigint,\n\t[orv_originalcustomer_name] nvarchar(4000),\n\t[orv_mall_id] bigint,\n\t[orv_mall_mallname] nvarchar(4000),\n\t[orv_mall_branchname] nvarchar(4000),\n\t[orv_mall_gpretailer] nvarchar(4000),\n\t[orv_mall_highvoldelivery] nvarchar(4000),\n\t[orv_mall_stripmall] nvarchar(4000),\n\t[orv_mall_standalonestore] nvarchar(4000),\n\t[orv_mall_streetsidestore] nvarchar(4000),\n\t[orv_mall_dedicatedrouted] nvarchar(4000),\n\t[orv_mall_insdate] datetime2(7),\n\t[orv_mall_address] nvarchar(4000),\n\t[orv_mall_deleted] int,\n\t[orv_mall_lat] float,\n\t[orv_mall_lng] float\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstcollect.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTCollect\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTConsignment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTConsignment') )\n    DROP EXTERNAL TABLE dbo.F_SSTConsignment\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTConsignment') )\n    DROP EXTERNAL TABLE dbo.T_SSTConsignment\nGO\n\n\n\nCREATE EXTERNAL TABLE dbo.T_SSTConsignment (\n[lms_consignment_id] int,\n[lms_consignment_cref] nvarchar(4000),\n[lms_consignment_cdate] datetime2(7),\n[lms_consignment_userid] int,\n[lms_consignment_appointment] datetime2(7),\n[lms_consignment_deliverby] datetime2(7),\n[lms_consignment_dconfirmed] nvarchar(4000),\n[lms_consignment_dcomment] nvarchar(4000),\n[lms_consignment_drefno] nvarchar(4000),\n[lms_consignment_loadid] int,\n[lms_consignment_delivercustid] int,\n[lms_consignment_mrpcflag] int,\n[lms_consignment_mrpflag] int,\n[lms_consignment_billcust] int,\n[lms_consignment_cserviceid] nvarchar(4000),\n[lms_consignment_lastupdate] datetime2(7),\n[lms_consignment_billflag] int,\n[lms_consignment_missingflag] int,\n[lms_consignment_routerateid] int,\n[lms_consignment_delivertypeid] int,\n[lms_consignment_billtypeid] int,\n[lms_consignment_totothersurcharges] numeric(18,2),\n[lms_consignment_lhaddrate] numeric(18,2),\n[lms_consignment_lhcharge] numeric(18,2),\n[lms_consignment_sapbillperiodid] int,\n[lms_consignment_lhrouterateid] int,\n[lms_parcelbyconsignment_consignid] int,\n[lms_parcelbyconsignment_aggrweight] numeric(18,2),\n[lms_parcelbyconsignment_aggrchargeweight] numeric(18,2),\n[lms_parcelbyconsignment_aggrvolweight] numeric(18,2),\n[lms_parcelbyconsignment_aggrvolumiserweight] numeric(18,2),\n[lms_parcelbyconsignment_aggrmaxweight] numeric(18,2),\n[lms_parcelbyconsignment_aggrnoparcels] bigint,\n[lms_parcelbyconsignment_aggrweightexclspecdel] numeric(18,2),\n[lms_parcelbyconsignment_aggrchargeweightexclspecdel] numeric(18,2),\n[lms_parcelbyconsignment_aggrvolweightexclspecdel] numeric(18,2),\n[lms_parcelbyconsignment_aggrvolumiserweightexclspecdel] numeric(18,2),\n[lms_parcelbyconsignment_aggrmaxweightexclspecdel] numeric(18,2),\n[lms_parcelbyconsignment_aggrnoparcelsexclspecdel] bigint,\n[lms_bill_consignmentr_id] int,\n[lms_bill_consignmentr_consignid] int,\n[lms_bill_consignmentr_updatedate] datetime2(7),\n[lms_bill_consignmentr_pickuprouteid] int,\n[lms_bill_consignmentr_deliverrouteid] int,\n[lms_bill_consignmentr_chargeweight] numeric(18,2),\n[lms_bill_consignmentr_noofparcels] int,\n[lms_bill_consignmentr_tripdistance] numeric(18,2),\n[lms_bill_consignmentr_consignmentvalue] numeric(18,2),\n[lms_bill_consignmentr_billcust] int,\n[lms_bill_consignmentr_redflag] int,\n[lms_bill_consignmentr_updind] int,\n[lms_bill_consignmentr_servicetypeid] int,\n[lms_bill_consignmentr_routemissingind] int,\n[lms_bill_consignmentr_chargescalcind] int,\n[lms_bill_consignmentr_cdate1] datetime2(7),\n[lms_bill_consignmentr_invalidpcode] int,\n[lms_bill_consignmentr_programno] int,\n[lms_bill_consignmentr_totrate] numeric(18,2),\n[lms_bill_consignmentr_routecharge] numeric(18,2),\n[lms_bill_consignmentr_minweight] numeric(18,2),\n[lms_bill_consignmentr_minrate] numeric(18,2),\n[lms_bill_consignmentr_corderno] nvarchar(4000),\n[lms_bill_consignmentr_custref] nvarchar(4000),\n[lms_bill_consignmentr_manualupdateflag] int,\n[lms_bill_consignmentr_prevbillcustid] int,\n[lms_bill_consignmentr_specdelvehicleid] int,\n[lms_bill_consignmentr_specdelmissingrouteflag] int,\n[lms_bill_consignmentr_overborderflag] int,\n[lms_bill_consignmentr_samedeliverid] int,\n[lms_bill_consignmentr_combineroutecharge] numeric(18,2),\n[lms_bill_consignmentr_waybillid] int,\n[lms_bill_consignmentr_routelinecount] int,\n[lms_bill_consignmentr_samedelcount] int,\n[lms_bill_consignmentr_aweight] numeric(18,2),\n[lms_bill_consignmentr_vweight] numeric(18,2),\n[lms_bill_consignmentr_custref3] nvarchar(4000),\n[lms_bill_consignmentr_units] int,\n[lms_bill_consignmentr_totsurcharges] numeric(18,2),\n[lms_bill_consignmentr_noofpallets] int,\n[lms_bill_consignmentr_invalidpudel] int,\n[lms_bill_consignmentr_sharikaflag] int,\n[lms_bill_consignmentr_sapid] int,\n[lms_bill_consignmentr_totfuelsurcharge] numeric(18,2),\n[lms_bill_consignmentr_totdocsurcharge] numeric(18,2),\n[lms_bill_consignmentr_totothersurcharge] numeric(18,2),\n[lms_bill_consignmentr_specdel] int,\n[lms_bill_consignmentr_quoteflag] int,\n[lms_bill_consignmentr_billperiod] nvarchar(4000),\n[lms_bill_consignmentr_billweekr] int,\n[lms_bill_consignmentr_billperiodflag] int,\n[lms_bill_consignmentr_surhargeflag] int,\n[lms_bill_consignmentr_recalcflag] int,\n[lms_bill_consignmentr_quotemissingflag] int,\n[lms_bill_consignmentr_delivertypeid] int,\n[lms_bill_consignmentr_totcovidsurcharge] numeric(18,2),\n[lms_users_id] int,\n[lms_users_fullname] nvarchar(4000),\n[lms_users_site] nvarchar(4000),\n[lms_bcustomer_id] int,\n[lms_bcustomer_name] nvarchar(4000),\n[lms_dcustomer_id] int,\n[lms_dcustomer_name] nvarchar(4000),\n[lms_bill_routerate_id] int,\n[lms_bill_routerate_billcustid] int,\n[lms_bill_routerate_effectivedate] datetime2(7),\n[lms_bill_routerate_uomid] int,\n[lms_bill_routerate_routetypeid] int,\n[lms_bill_routerate_servicetypeid] int,\n[lms_bill_routerate_minkg] numeric(18,2),\n[lms_bill_routerate_minrate] numeric(18,2),\n[lms_bill_routerate_addrate] numeric(18,2),\n[lms_bill_routerate_servicedays] int,\n[lms_bill_routerate_servicehours] numeric(18,2),\n[lms_bill_routerate_ratecardind] int,\n[lms_bill_routerate_pickupid] int,\n[lms_bill_routerate_deliverid] int,\n[lms_bill_routerate_description] nvarchar(4000),\n[lms_bill_routerate_activeflag] int,\n[lms_bill_routerate_billroutetypeflag] int,\n[lms_bill_routerate_samedayflag] int,\n[lms_bill_routerate_specialrateflag] int,\n[lms_bill_routerate_tocustid] int,\n[lms_bill_routerate_maxparcel] int,\n[lms_bill_routerate_returnflag] int,\n[lms_bill_routerate_cutoff] numeric(18,2),\n[lms_bill_routerate_rateperkg] numeric(18,2),\n[lms_bill_routerate_userid] int,\n[lms_bill_routerate_authorizeperson] nvarchar(4000),\n[lms_bill_routerate_updatedate] datetime2(7),\n[lms_bill_routerate_delivertypeid] int,\n[lms_bill_routerate_billyear] int,\n[lms_bill_routerate_ecommzoneid] int,\n[lms_bill_routerate_billareaid] int,\n[lms_bill_routerate_routerateoverideflag] int,\n[lms_bill_billtypesr_id] int,\n[lms_bill_billtypesr_description] nvarchar(4000),\n[lms_bill_billtypesr_surchargeflag] int,\n[lms_bill_zoneroute_pickupid] int,\n[lms_bill_zoneroute_pickupdescription] nvarchar(4000),\n[lms_bill_zoneroute_pickupzoneid] int,\n[lms_bill_zoneroute_pickupzrscode] nvarchar(4000),\n[lms_bill_zoneroute_pickupzonerouteorder] int,\n[lms_bill_zoneroute_pickupzonetype] nvarchar(4000),\n[lms_bill_zoneroute_pickupbroutemasterid] int,\n[lms_bill_zoneroute_pickupbroutecode] nvarchar(4000),\n[lms_bill_zoneroute_deliverid] int,\n[lms_bill_zoneroute_deliverdescription] nvarchar(4000),\n[lms_bill_zoneroute_deliverzoneid] int,\n[lms_bill_zoneroute_deliverzrscode] nvarchar(4000),\n[lms_bill_zoneroute_deliverzonerouteorder] int,\n[lms_bill_zoneroute_deliverzonetype] nvarchar(4000),\n[lms_bill_zoneroute_deliverbroutemasterid] int,\n[lms_bill_zoneroute_deliverbroutecode] nvarchar(4000),\n[lms_bill_servicetype_id] int,\n[lms_bill_servicetype_description] nvarchar(4000),\n[lms_bill_servicetype_code] nvarchar(4000),\n[lms_bill_servicetype_ccode] nvarchar(4000),\n[lms_bill_zone_pickupid] int,\n[lms_bill_zone_pickupdescription] nvarchar(4000),\n[lms_bill_zone_pickupzonemasterid] int,\n[lms_bill_zone_pickupcountryid] int,\n[lms_bill_zone_deliverid] int,\n[lms_bill_zone_deliverdescription] nvarchar(4000),\n[lms_bill_zone_deliverzonemasterid] int,\n[lms_bill_zone_delivercountryid] int,\n[lms_bill_delivertype_id] int,\n[lms_bill_delivertype_description] nvarchar(4000),\n[lms_broutemaster_pickupid] int,\n[lms_broutemaster_pickupdescription] nvarchar(4000),\n[lms_broutemaster_pickupcode] nvarchar(4000),\n[lms_broutemaster_pickupbrouteparentid] int,\n[lms_broutemaster_deliverid] int,\n[lms_broutemaster_deliverdescription] nvarchar(4000),\n[lms_broutemaster_delivercode] nvarchar(4000),\n[lms_broutemaster_deliverbrouteparentid] int,\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstconsignment.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTConsignment\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTInstruction')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTInstruction') )\n    DROP EXTERNAL TABLE dbo.F_SSTInstruction\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTInstruction') )\n    DROP EXTERNAL TABLE dbo.T_SSTInstruction\nGO\n\n\n\nCREATE EXTERNAL TABLE dbo.T_SSTInstruction (\n\t[tms_instruction_id] bigint,\n\t[tms_instruction_bookingid] bigint,\n\t[tms_instruction_addressid] bigint,\n\t[tms_instruction_insdate] datetime2(7),\n\t[tms_instruction_moddate] datetime2(7),\n\t[tms_instruction_insby] bigint,\n\t[tms_instruction_onroute] int,\n\t[tms_instruction_instrtype] nvarchar(4000),\n\t[tms_instruction_onrouteid] bigint,\n\t[tms_instruction_sort] int,\n\t[tms_instruction_note] nvarchar(4000),\n\t[tms_instruction_onroutestatus] nvarchar(4000),\n\t[tms_instruction_legacyid] bigint,\n\t[tms_instruction_legacyaddress] nvarchar(4000),\n\t[tms_instruction_citybranchid] bigint,\n\t[tms_instruction_citybranchname] nvarchar(4000),\n\t[tms_address_id] bigint,\n\t[tms_address_customerid] bigint,\n\t[tms_address_address] nvarchar(4000),\n\t[tms_address_streetno] nvarchar(4000),\n\t[tms_address_city] nvarchar(4000),\n\t[tms_address_province] nvarchar(4000),\n\t[tms_address_country] nvarchar(4000),\n\t[tms_address_addresstype] nvarchar(4000),\n\t[tms_address_lat] float,\n\t[tms_address_lng] float,\n\t[tms_address_insdate] datetime2(7),\n\t[tms_address_moddate] datetime2(7),\n\t[tms_address_lastuseddate] datetime2(7),\n\t[tms_address_searchfield] nvarchar(4000),\n\t[tms_address_zipcode] nvarchar(4000),\n\t[tms_address_slug] nvarchar(4000),\n\t[tms_customer_status] nvarchar(4000),\n\t[tms_customer_name] nvarchar(4000),\n\t[tms_customer_parentid] bigint,\n\t[tms_customer_accountnumber] nvarchar(4000),\n\t[tms_customer_revenuecode] nvarchar(4000),\n\t[tms_customer_insdate] datetime2(7),\n\t[tms_customer_moddate] datetime2(7),\n\t[tms_customer_insby] bigint,\n\t[tms_customer_opaqueid] nvarchar(4000),\n\t[tms_customer_email] nvarchar(4000),\n\t[tms_customer_areacode] nvarchar(4000),\n\t[tms_customer_mobilenum] nvarchar(4000),\n\t[tms_customer_legacyid] int,\n\t[tms_customer_billingmethod] nvarchar(4000),\n\t[tms_customer_adjustmetric] nvarchar(4000),\n\t[tms_customer_adjustvalue] int,\n\t[tms_customer_adjustnegativeallowed] int,\n\t[tms_customer_adjustvalueusingprevmonth] int,\n\t[tms_customer_excludefromnotinvoicedreport] int,\n\t[tms_customer_logictype] nvarchar(4000),\n\t[tms_customer_minliability] bigint,\n\t[orv_lhdelivery_id] bigint,\n\t[orv_lhdelivery_did] bigint,\n\t[orv_lhdelivery_address] nvarchar(4000),\n\t[orv_lhdelivery_lat] float,\n\t[orv_lhdelivery_lng] float,\n\t[orv_lhdelivery_actualeta] datetime2(7),\n\t[orv_lhdelivery_eta] datetime2(7),\n\t[orv_lhdelivery_tsgeofenceenter] datetime2(7),\n\t[orv_lhdelivery_tsdocuments] datetime2(7),\n\t[orv_lhdelivery_customerref1] nvarchar(4000),\n\t[orv_lhdelivery_customerref2] nvarchar(4000),\n\t[orv_lhdelivery_trailersize] nvarchar(4000),\n\t[orv_lhdelivery_cargoweight] float,\n\t[orv_lhdelivery_cubicvolume] float,\n\t[orv_lhdelivery_geocodingstatus] nvarchar(4000),\n\t[orv_lhdelivery_status] nvarchar(4000),\n\t[orv_lhdelivery_optimizedorder] int,\n\t[orv_lhdelivery_triporder] int,\n\t[orv_lhdelivery_sequence] int,\n\t[orv_lhdelivery_bookingid] bigint,\n\t[orv_lhdelivery_grv] int,\n\t[orv_lhdelivery_chepslip] int,\n\t[orv_lhdelivery_type] nvarchar(4000),\n\t[orv_lhdelivery_insdate] datetime2(7),\n\t[orv_lhdelivery_isdirect] int,\n\t[orv_lhdelivery_notes] nvarchar(4000),\n\t[orv_lhdelivery_contactperson] nvarchar(4000),\n\t[orv_lhdelivery_contactnumber] nvarchar(4000),\n\t[orv_lhdelivery_trailerfleetcode] nvarchar(4000),\n\t[orv_lhdelivery_primarycustomerid] bigint,\n\t[orv_lhdelivery_pcustomername] nvarchar(4000),\n\t[orv_lhdelivery_pcustomeraccountnumber] nvarchar(4000),\n\t[orv_lhdelivery_pcustomerrevenuecode] nvarchar(4000),\n\t[orv_lhdelivery_secondarycustomerid] bigint,\n\t[orv_lhdelivery_scustomername] nvarchar(4000),\n\t[orv_lhdelivery_scustomeraccountnumber] nvarchar(4000),\n\t[orv_lhdelivery_scustomerrevenuecode] nvarchar(4000),\n\t[orv_lhdelivery_actiondate] datetime2(7),\n\t[orv_lhdelivery_tsgeofenceexit] datetime2(7),\n\t[orv_lhdelivery_pctmsid] bigint,\n\t[orv_lhdelivery_sctmsid] bigint,\n\t[orv_lhdelivery_customorder] int,\n\t[orv_lhdelivery_skipdate] datetime2(7),\n\t[orv_lhdelivery_skipreason] nvarchar(4000),\n\t[orv_lhdelivery_outofgeofencereason] nvarchar(4000),\n\t[orv_lhdelivery_tsarrivedcustomer] datetime2(7),\n\t[orv_lhdelivery_tsdroppedoff] datetime2(7),\n\t[orv_lhdelivery_tsstartoffloading] datetime2(7),\n\t[orv_lhdelivery_tsstartloading] datetime2(7),\n\t[orv_lhdelivery_tsloaded] datetime2(7),\n\t[orv_lhdelivery_tsfinishedoffloading] datetime2(7),\n\t[orv_lhdelivery_tsdocumnetshanddovedriver] datetime2(7),\n\t[orv_lhdelivery_tsleavingcustomer] datetime2(7),\n\t[orv_lhdelivery_actionsubtype] nvarchar(4000),\n\t[orv_lhdelivery_tsstart] datetime2(7),\n\t[orv_lhdelivery_signame] nvarchar(4000),\n\t[orv_lhdelivery_signcomment] nvarchar(4000),\n\t[orv_lhdelivery_signdate] datetime2(7),\n\t[orv_lhdelivery_tsendtate] datetime2(7),\n\t[orv_lhdelivery_tsentergeofenceapp] datetime2(7),\n\t[orv_lhdelivery_tsexitgeofenceapp] datetime2(7),\n\t[orv_lhdelivery_tmsid] bigint,\n\t[orv_lhdelivery_subtype] nvarchar(4000),\n\t[orv_lhdelivery_needbotrailerver] int,\n\t[orv_lhdelivery_secondtrailerfleetcode] nvarchar(4000),\n\t[orv_lhdelivery_trailerverlat] float,\n\t[orv_lhdelivery_trailerverlng] float,\n\t[orv_lhdelivery_tstrailerver] datetime2(7),\n\t[orv_lhdelivery_podlat] float,\n\t[orv_lhdelivery_podlng] float,\n\t[orv_lhdelivery_skiplat] float,\n\t[orv_lhdelivery_skiplng] float,\n\t[orv_lhdelivery_uncanceldate] datetime2(7)\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstinstruction.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTInstruction \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTLoadChild')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTLoadChild') )\n    DROP EXTERNAL TABLE dbo.F_SSTLoadChild\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTLoadChild') )\n    DROP EXTERNAL TABLE dbo.T_SSTLoadChild\nGO\n\nCREATE EXTERNAL TABLE dbo.T_SSTLoadChild (\n[lms_loads_id] int,\n[lms_loads_routeid] int,\n[lms_loads_driverid] int,\n[lms_loads_sealno] nvarchar(4000),\n[lms_loads_vehicleid] int,\n[lms_loads_ttypeid] int,\n[lms_loads_userid] int,\n[lms_loads_ldate] datetime2(7),\n[lms_loads_courierid] nvarchar(4000),\n[lms_loads_site] nvarchar(4000),\n[lms_loads_fromlocid] int,\n[lms_loads_tolocid] int,\n[lms_loads_cdate] datetime2(7),\n[lms_loads_trailer1] int,\n[lms_loads_trailer2] int,\n[lms_loads_cref] nvarchar(4000),\n[lms_loads_debriefed] int,\n[lms_loads_mrpflag] int,\n[lms_loads_mrpcflag] int,\n[lms_loads_finalflag] int,\n[lms_loads_alidaflag] int,\n[lms_loads_puibts] int,\n[lms_loads_pucols] int,\n[lms_loads_planningref] nvarchar(4000),\n[lms_loads_interfacedate] datetime2(7),\n[lms_loads_nosealsret] int,\n[lms_loads_excludeopsi] int,\n[lms_loads_dccref] nvarchar(4000),\n[lms_loads_srouteid] int,\n[lms_loads_fuellitres] numeric(18,2),\n[lms_loads_outsourcedcrew] int,\n[lms_loads_masterloadid] int,\n[lms_loads_securitygatedespatched] datetime2(7),\n[lms_loads_securitygateuserid] int,\n[lms_loads_securitygatearrived] datetime2(7),\n[lms_loads_securitygatearriveduserid] int,\n[lms_loads_lastupdate] datetime2(7),\n[lms_loads_bayno] nvarchar(4000),\n[lms_loads_costs] numeric(18,2),\n[lms_loads_estdeparturedatetime] datetime2(7),\n[lms_loads_totalweight] numeric(18,2),\n[lms_loads_ovrignore] int,\n[lms_loads_childloadid] int,\n[lms_loads_orvcode] int,\n[lms_loads_companyid] int,\n[lms_loads_editloaddate] datetime2(7),\n[lms_loads_reopeneddate] datetime2(7),\n[lms_loads_reopeneduserid] int,\n[lms_loads_novehicle] int,\n[lms_loads_mobilefeedbackreasonid] int,\n[lms_loads_direct] int,\n[lms_loads_noofpcls] int,\n[lms_loads_debriefdt] datetime2(7),\n[lms_loads_httpcode] int,\n[lms_loads_parentloadid] int,\n[lms_loads_mrpobversion] int,\n[lms_parcelbyload_loadid] int,\n[lms_parcelbyload_aggrweight] numeric(18,2),\n[lms_parcelbyload_aggrchargeweight] numeric(18,2),\n[lms_parcelbyload_aggrvolweight] numeric(18,2),\n[lms_parcelbyload_aggrvolumiserweight] numeric(18,2),\n[lms_parcelbyload_aggrmaxweight] numeric(18,2),\n[lms_parcelbyload_aggrnoparcels] bigint,\n[lms_parcelbyload_aggrweightexclspecdel] numeric(18,2),\n[lms_parcelbyload_aggrchargeweightexclspecdel] numeric(18,2),\n[lms_parcelbyload_aggrvolweightexclspecdel] numeric(18,2),\n[lms_parcelbyload_aggrvolumiserweightexclspecdel] numeric(18,2),\n[lms_parcelbyload_aggrmaxweightexclspecdel] numeric(18,2),\n[lms_parcelbyload_aggrnoparcelsexclspecdel] bigint,\n[lms_sroute_id] int,\n[lms_sroute_description] nvarchar(4000),\n[lms_driver_id] int,\n[lms_driver_dname] nvarchar(4000),\n[lms_users_id] int,\n[lms_users_fullname] nvarchar(4000),\n[lms_users_site] nvarchar(4000),\n[lms_users_reopenuserid] int,\n[lms_users_reopenuserfullname] nvarchar(4000),\n[lms_users_reopenusersite] nvarchar(4000),\n[lms_vehicle_id] int,\n[lms_vehicle_fleetno] nvarchar(4000),\n[lms_vehicle_uid] nvarchar(4000),\n[lms_vehicle_trailer1id] int,\n[lms_vehicle_trailer1fleetno] nvarchar(4000),\n[lms_vehicle_trailer1uid] nvarchar(4000),\n[lms_vehicle_trailer2id] int,\n[lms_vehicle_trailer2fleetno] nvarchar(4000),\n[lms_vehicle_trailer2uid] nvarchar(4000),\n[md_vehiclebasic_id] bigint,\n[md_vehiclebasic_uid] nvarchar(4000),\n[md_vehiclebasic_vehicletype] nvarchar(4000),\n[md_vehiclebasic_internalexternal] nvarchar(4000),\n[md_vehiclebasic_activeflag] bigint,\n[md_vehiclebasic_vehiclestatus] nvarchar(4000),\n[md_vehiclebasic_chassisnumber] nvarchar(4000),\n[md_vehiclebasic_depot] nvarchar(4000),\n[md_vehiclebasic_enginenumber] nvarchar(4000),\n[md_vehiclebasic_fleetcode] nvarchar(4000),\n[md_vehiclebasic_fueltype] nvarchar(4000),\n[md_vehiclebasic_registrationnumber] nvarchar(4000),\n[md_vehiclebasic_vehicleapplication] nvarchar(4000),\n[md_vehiclebasic_vehiclebodymake] nvarchar(4000),\n[md_vehiclebasic_vehiclecolour] nvarchar(4000),\n[md_vehiclebasic_vehiclemake] nvarchar(4000),\n[md_vehiclebasic_vehiclemodel] nvarchar(4000),\n[md_vehiclebasic_vehicleseries] nvarchar(4000),\n[md_vehiclebasic_year] int,\n[md_vehiclebasic_vehicleownerid] bigint,\n[md_vehiclebasic_vehicleowner] nvarchar(4000),\n[md_vehiclebasic_staffvehicleflag] int,\n[md_vehiclebasic_vehicletrailersize] nvarchar(4000),\n[md_vehiclebasic_vehicletrailertype] nvarchar(4000),\n[md_vehiclebasic_vehicleetollclass] nvarchar(4000),\n[md_vehiclebasic_brn] nvarchar(4000),\n[md_vehiclebasic_brnnumber] nvarchar(4000),\n[md_vehiclebasic_vehicleregisterno] nvarchar(4000),\n[md_vehiclebasic_insdate] bigint,\n[md_vehiclebasic_insby] nvarchar(4000),\n[md_vehiclebasic_islinehaulvehicle] int,\n[md_vehiclebasic_internalheight] numeric(18,2),\n[md_vehiclebasic_internallength] numeric(18,2),\n[md_vehiclebasic_internalvolume] numeric(18,2),\n[md_vehiclebasic_internalwidth] numeric(18,2),\n[md_vehiclebasic_moddate] bigint,\n[md_vehiclebasic_trailerflag] int,\n[md_vehiclebasic_workflowstatus] nvarchar(4000),\n[md_vehiclebasic_approveddate] bigint,\n[md_vehiclebasic_trailer1id] bigint,\n[md_vehiclebasic_trailer1uid] nvarchar(4000),\n[md_vehiclebasic_trailer1vehicletype] nvarchar(4000),\n[md_vehiclebasic_trailer1internalexternal] nvarchar(4000),\n[md_vehiclebasic_trailer1activeflag] bigint,\n[md_vehiclebasic_trailer1vehiclestatus] nvarchar(4000),\n[md_vehiclebasic_trailer1chassisnumber] nvarchar(4000),\n[md_vehiclebasic_trailer1depot] nvarchar(4000),\n[md_vehiclebasic_trailer1enginenumber] nvarchar(4000),\n[md_vehiclebasic_trailer1fleetcode] nvarchar(4000),\n[md_vehiclebasic_trailer1fueltype] nvarchar(4000),\n[md_vehiclebasic_trailer1registrationnumber] nvarchar(4000),\n[md_vehiclebasic_trailer1vehicleapplication] nvarchar(4000),\n[md_vehiclebasic_trailer1vehiclebodymake] nvarchar(4000),\n[md_vehiclebasic_trailer1vehiclecolour] nvarchar(4000),\n[md_vehiclebasic_trailer1vehiclemake] nvarchar(4000),\n[md_vehiclebasic_trailer1vehiclemodel] nvarchar(4000),\n[md_vehiclebasic_trailer1vehicleseries] nvarchar(4000),\n[md_vehiclebasic_trailer1year] int,\n[md_vehiclebasic_trailer1vehicleownerid] bigint,\n[md_vehiclebasic_trailer1vehicleowner] nvarchar(4000),\n[md_vehiclebasic_trailer1staffvehicleflag] int,\n[md_vehiclebasic_trailer1vehicletrailersize] nvarchar(4000),\n[md_vehiclebasic_trailer1vehicletrailertype] nvarchar(4000),\n[md_vehiclebasic_trailer1vehicleetollclass] nvarchar(4000),\n[md_vehiclebasic_trailer1brn] nvarchar(4000),\n[md_vehiclebasic_trailer1brnnumber] nvarchar(4000),\n[md_vehiclebasic_trailer1vehicleregisterno] nvarchar(4000),\n[md_vehiclebasic_trailer1insdate] bigint,\n[md_vehiclebasic_trailer1insby] nvarchar(4000),\n[md_vehiclebasic_trailer1islinehaulvehicle] int,\n[md_vehiclebasic_trailer1internalheight] numeric(18,2),\n[md_vehiclebasic_trailer1internallength] numeric(18,2),\n[md_vehiclebasic_trailer1internalvolume] numeric(18,2),\n[md_vehiclebasic_trailer1internalwidth] numeric(18,2),\n[md_vehiclebasic_trailer1moddate] bigint,\n[md_vehiclebasic_trailer1trailerflag] int,\n[md_vehiclebasic_trailer1workflowstatus] nvarchar(4000),\n[md_vehiclebasic_trailer1approveddate] bigint,\n[md_vehiclebasic_trailer2id] bigint,\n[md_vehiclebasic_trailer2uid] nvarchar(4000),\n[md_vehiclebasic_trailer2vehicletype] nvarchar(4000),\n[md_vehiclebasic_trailer2internalexternal] nvarchar(4000),\n[md_vehiclebasic_trailer2activeflag] bigint,\n[md_vehiclebasic_trailer2vehiclestatus] nvarchar(4000),\n[md_vehiclebasic_trailer2chassisnumber] nvarchar(4000),\n[md_vehiclebasic_trailer2depot] nvarchar(4000),\n[md_vehiclebasic_trailer2enginenumber] nvarchar(4000),\n[md_vehiclebasic_trailer2fleetcode] nvarchar(4000),\n[md_vehiclebasic_trailer2fueltype] nvarchar(4000),\n[md_vehiclebasic_trailer2registrationnumber] nvarchar(4000),\n[md_vehiclebasic_trailer2vehicleapplication] nvarchar(4000),\n[md_vehiclebasic_trailer2vehiclebodymake] nvarchar(4000),\n[md_vehiclebasic_trailer2vehiclecolour] nvarchar(4000),\n[md_vehiclebasic_trailer2vehiclemake] nvarchar(4000),\n[md_vehiclebasic_trailer2vehiclemodel] nvarchar(4000),\n[md_vehiclebasic_trailer2vehicleseries] nvarchar(4000),\n[md_vehiclebasic_trailer2year] int,\n[md_vehiclebasic_trailer2vehicleownerid] bigint,\n[md_vehiclebasic_trailer2vehicleowner] nvarchar(4000),\n[md_vehiclebasic_trailer2staffvehicleflag] int,\n[md_vehiclebasic_trailer2vehicletrailersize] nvarchar(4000),\n[md_vehiclebasic_trailer2vehicletrailertype] nvarchar(4000),\n[md_vehiclebasic_trailer2vehicleetollclass] nvarchar(4000),\n[md_vehiclebasic_trailer2brn] nvarchar(4000),\n[md_vehiclebasic_trailer2brnnumber] nvarchar(4000),\n[md_vehiclebasic_trailer2vehicleregisterno] nvarchar(4000),\n[md_vehiclebasic_trailer2insdate] bigint,\n[md_vehiclebasic_trailer2insby] nvarchar(4000),\n[md_vehiclebasic_trailer2islinehaulvehicle] int,\n[md_vehiclebasic_trailer2internalheight] numeric(18,2),\n[md_vehiclebasic_trailer2internallength] numeric(18,2),\n[md_vehiclebasic_trailer2internalvolume] numeric(18,2),\n[md_vehiclebasic_trailer2internalwidth] numeric(18,2),\n[md_vehiclebasic_trailer2moddate] bigint,\n[md_vehiclebasic_trailer2trailerflag] int,\n[md_vehiclebasic_trailer2workflowstatus] nvarchar(4000),\n[md_vehiclebasic_trailer2approveddate] bigint,\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstloadchild.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTLoadChild\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTLoadParent')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTLoadParent') )\n    DROP EXTERNAL TABLE dbo.F_SSTLoadParent\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTLoadParent') )\n    DROP EXTERNAL TABLE dbo.T_SSTLoadParent\nGO\n\n\n\nCREATE EXTERNAL TABLE dbo.T_SSTLoadParent (\n[lms_loadparent_parentloadid] int,\n[lms_loadparent_aggrweight] numeric(18,2),\n[lms_loadparent_aggrchargeweight] numeric(18,2),\n[lms_loadparent_aggrvolweight] numeric(18,2),\n[lms_loadparent_aggrvolumiserweight] numeric(18,2),\n[lms_loadparent_aggrmaxweight] numeric(18,2),\n[lms_loadparent_aggrnoparcels] bigint,\n[lms_loadparent_aggrweightexclspecdel] numeric(18,2),\n[lms_loadparent_aggrchargeweightexclspecdel] numeric(18,2),\n[lms_loadparent_aggrvolweightexclspecdel] numeric(18,2),\n[lms_loadparent_aggrvolumiserweightexclspecdel] numeric(18,2),\n[lms_loadparent_aggrmaxweightexclspecdel] numeric(18,2),\n[lms_loadparent_aggrnoparcelsexclspecdel] bigint,\n[orv_dispatch_id] bigint,\n[orv_dispatch_lmsid] bigint,\n[orv_dispatch_vid] bigint,\n[orv_dispatch_did] bigint,\n[orv_dispatch_status] nvarchar(4000),\n[orv_dispatch_startdate] datetime2(7),\n[orv_dispatch_stopdate] datetime2(7),\n[orv_dispatch_vehicletype] int,\n[orv_dispatch_uid] bigint,\n[orv_dispatch_estdepdate] datetime2(7),\n[orv_dispatch_trailer] bigint,\n[orv_dispatch_trailer2] bigint,\n[orv_dispatch_fromlocid] bigint,\n[orv_dispatch_tolocid] bigint,\n[orv_dispatch_site] nvarchar(4000),\n[orv_dispatch_lastupdate] datetime2(7),\n[orv_dispatch_etastatus] nvarchar(4000),\n[orv_dispatch_startinglat] float,\n[orv_dispatch_startinglng] float,\n[orv_dispatch_endinglat] float,\n[orv_dispatch_endinglng] float,\n[orv_dispatch_startingfrom] nvarchar(4000),\n[orv_dispatch_goingto] nvarchar(4000),\n[orv_dispatch_importissue] nvarchar(4000),\n[orv_dispatch_insdate] datetime2(7),\n[orv_dispatch_estarrdate] datetime2(7),\n[orv_dispatch_duration] bigint,\n[orv_dispatch_distance] bigint,\n[orv_dispatch_cost] bigint,\n[orv_dispatch_stoplat] float,\n[orv_dispatch_stoplng] float,\n[orv_dispatch_stopreason] nvarchar(4000),\n[orv_dispatch_startodo] bigint,\n[orv_dispatch_stopodo] bigint,\n[orv_dispatch_expduration] bigint,\n[orv_dispatch_expdistance] bigint,\n[orv_dispatch_expcost] bigint,\n[orv_dispatch_collectionid] bigint,\n[orv_dispatch_crew] int,\n[orv_dispatch_crewnames] nvarchar(4000),\n[orv_dispatch_bocloseuid] bigint,\n[orv_dispatch_routing] nvarchar(4000),\n[orv_dispatch_swapct] int,\n[orv_dispatch_debriefed] int,\n[orv_dispatch_debriefnotes] nvarchar(4000),\n[orv_dispatch_bopin] nvarchar(4000),\n[orv_dispatch_cpicost] bigint,\n[orv_dispatch_labourcost] bigint,\n[orv_dispatch_maintcost] bigint,\n[orv_dispatch_inscost] bigint,\n[orv_dispatch_tollcost] bigint,\n[orv_dispatch_fuelcost] bigint,\n[orv_dispatch_internal] int,\n[orv_dispatch_childids] nvarchar(4000),\n[orv_dispatch_guid] bigint,\n[orv_dispatch_timedefinite] int,\n[orv_dispatch_orvcode] int,\n[orv_dispatch_tsstopdepoenter] datetime2(7),\n[orv_dispatch_tsstartdepoexit] datetime2(7),\n[orv_dispatch_reroutect] int,\n[orv_dispatch_actualarrdate] datetime2(7),\n[orv_dispatch_physicalstartlat] float,\n[orv_dispatch_physicalstartlng] float,\n[orv_dispatch_tsstartdepoexitapp] datetime2(7),\n[orv_dispatch_tsstopdepoenterapp] datetime2(7),\n[orv_dispatch_uncanceldate] datetime2(7),\n[orv_dispatch_uncancelusername] nvarchar(4000),\n[orv_dispatch_lmsdebrifed] int,\n[orv_dispatch_reviseddebrief] int,\n[orv_dispatch_lhtransporter] nvarchar(4000),\n[orv_dispatch_triptype] nvarchar(4000),\n[orv_dispatch_startreason] nvarchar(4000),\n[orv_dispatch_route] nvarchar(4000),\n[orv_dispatch_tmstraileridentify] nvarchar(4000),\n[orv_dispatch_tmstrailer2identify] nvarchar(4000),\n[orv_dispatch_tmscontroller] nvarchar(4000),\n[orv_dispatch_routekey] nvarchar(4000),\n[orv_dispatch_courierid] bigint,\n[orv_dispatch_originalstartdate] datetime2(7),\n[orv_dispatch_originalextarrival] datetime2(7),\n[orv_dispatch_recomputeoriginals] int,\n[orv_dispatch_originalextdistance] bigint,\n[orv_dispatch_originalextduration] bigint,\n[orv_dispatch_moddate] datetime2(7),\n[orv_dispatch_tmsmode] int,\n[orv_dispatch_driversignature] bigint,\n[orv_vehicle_id] bigint,\n[orv_vehicle_fleetcode] nvarchar(4000),\n[orv_vehicle_lmsid] bigint,\n[orv_vehicle_trailer1id] bigint,\n[orv_vehicle_trailer1fleetcode] nvarchar(4000),\n[orv_vehicle_trailer1lmsid] bigint,\n[orv_vehicle_trailer2id] bigint,\n[orv_vehicle_trailer2fleetcode] nvarchar(4000),\n[orv_vehicle_trailer2lmsid] bigint,\n[lms_vehicle_id] int,\n[lms_vehicle_uid] nvarchar(4000),\n[lms_vehicle_trailer1id] int,\n[lms_vehicle_trailer1uid] nvarchar(4000),\n[lms_vehicle_trailer2id] int,\n[lms_vehicle_trailer2uid] nvarchar(4000),\n[orv_orvuser_id] bigint,\n[orv_orvuser_username] nvarchar(4000),\n[orv_orvuser_fname] nvarchar(4000),\n[orv_orvuser_lname] nvarchar(4000),\n[orv_orvuser_empcode] nvarchar(4000),\n[orv_orvuser_aka] nvarchar(4000),\n[orv_orvuser_gender] nvarchar(4000),\n[orv_orvuser_cellno] nvarchar(4000),\n[orv_orvuser_rsaid] nvarchar(4000),\n[orv_orvuser_passportno] nvarchar(4000),\n[orv_orvuser_idpassportno] nvarchar(4000),\n[orv_orvuser_nationality] nvarchar(4000),\n[orv_orvuser_birthcountry] nvarchar(4000),\n[orv_orvuser_engageddate] datetime2(7),\n[orv_orvuser_joineddate] datetime2(7),\n[orv_orvuser_termindate] datetime2(7),\n[orv_orvuser_status] nvarchar(4000),\n[orv_orvuser_depot] nvarchar(4000),\n[orv_orvuser_jobcategory] nvarchar(4000),\n[orv_orvuser_jobtitle] nvarchar(4000),\n[orv_orvuser_payroll] nvarchar(4000),\n[orv_orvuser_annualsalary] float,\n[orv_orvuser_insdate] datetime2(7),\n[orv_orvuser_lmsid] bigint,\n[orv_orvuser_vipid] bigint,\n[orv_orvuser_dadriver] int,\n[orv_orvuser_dasupervisor] int,\n[orv_orvuser_davanassistant] int,\n[orv_orvuser_crewlmsid] bigint,\n[orv_orvuser_courierid] bigint,\n[md_vehiclebasic_id] bigint,\n[md_vehiclebasic_uid] nvarchar(4000),\n[md_vehiclebasic_vehicletype] nvarchar(4000),\n[md_vehiclebasic_internalexternal] nvarchar(4000),\n[md_vehiclebasic_activeflag] bigint,\n[md_vehiclebasic_vehiclestatus] nvarchar(4000),\n[md_vehiclebasic_chassisnumber] nvarchar(4000),\n[md_vehiclebasic_depot] nvarchar(4000),\n[md_vehiclebasic_enginenumber] nvarchar(4000),\n[md_vehiclebasic_fleetcode] nvarchar(4000),\n[md_vehiclebasic_fueltype] nvarchar(4000),\n[md_vehiclebasic_registrationnumber] nvarchar(4000),\n[md_vehiclebasic_vehicleapplication] nvarchar(4000),\n[md_vehiclebasic_vehiclebodymake] nvarchar(4000),\n[md_vehiclebasic_vehiclecolour] nvarchar(4000),\n[md_vehiclebasic_vehiclemake] nvarchar(4000),\n[md_vehiclebasic_vehiclemodel] nvarchar(4000),\n[md_vehiclebasic_vehicleseries] nvarchar(4000),\n[md_vehiclebasic_year] int,\n[md_vehiclebasic_vehicleownerid] bigint,\n[md_vehiclebasic_vehicleowner] nvarchar(4000),\n[md_vehiclebasic_staffvehicleflag] int,\n[md_vehiclebasic_vehicletrailersize] nvarchar(4000),\n[md_vehiclebasic_vehicletrailertype] nvarchar(4000),\n[md_vehiclebasic_vehicleetollclass] nvarchar(4000),\n[md_vehiclebasic_brn] nvarchar(4000),\n[md_vehiclebasic_brnnumber] nvarchar(4000),\n[md_vehiclebasic_vehicleregisterno] nvarchar(4000),\n[md_vehiclebasic_insdate] datetime2(7),\n[md_vehiclebasic_insby] nvarchar(4000),\n[md_vehiclebasic_islinehaulvehicle] int,\n[md_vehiclebasic_internalheight] numeric(18,2),\n[md_vehiclebasic_internallength] numeric(18,2),\n[md_vehiclebasic_internalvolume] numeric(18,2),\n[md_vehiclebasic_internalwidth] numeric(18,2),\n[md_vehiclebasic_moddate] datetime2(7),\n[md_vehiclebasic_trailerflag] int,\n[md_vehiclebasic_workflowstatus] nvarchar(4000),\n[md_vehiclebasic_approveddate] datetime2(7),\n[md_vehiclebasic_trailer1id] bigint,\n[md_vehiclebasic_trailer1uid] nvarchar(4000),\n[md_vehiclebasic_trailer1vehicletype] nvarchar(4000),\n[md_vehiclebasic_trailer1internalexternal] nvarchar(4000),\n[md_vehiclebasic_trailer1activeflag] bigint,\n[md_vehiclebasic_trailer1vehiclestatus] nvarchar(4000),\n[md_vehiclebasic_trailer1chassisnumber] nvarchar(4000),\n[md_vehiclebasic_trailer1depot] nvarchar(4000),\n[md_vehiclebasic_trailer1enginenumber] nvarchar(4000),\n[md_vehiclebasic_trailer1fleetcode] nvarchar(4000),\n[md_vehiclebasic_trailer1fueltype] nvarchar(4000),\n[md_vehiclebasic_trailer1registrationnumber] nvarchar(4000),\n[md_vehiclebasic_trailer1vehicleapplication] nvarchar(4000),\n[md_vehiclebasic_trailer1vehiclebodymake] nvarchar(4000),\n[md_vehiclebasic_trailer1vehiclecolour] nvarchar(4000),\n[md_vehiclebasic_trailer1vehiclemake] nvarchar(4000),\n[md_vehiclebasic_trailer1vehiclemodel] nvarchar(4000),\n[md_vehiclebasic_trailer1vehicleseries] nvarchar(4000),\n[md_vehiclebasic_trailer1year] int,\n[md_vehiclebasic_trailer1vehicleownerid] bigint,\n[md_vehiclebasic_trailer1vehicleowner] nvarchar(4000),\n[md_vehiclebasic_trailer1staffvehicleflag] int,\n[md_vehiclebasic_trailer1vehicletrailersize] nvarchar(4000),\n[md_vehiclebasic_trailer1vehicletrailertype] nvarchar(4000),\n[md_vehiclebasic_trailer1vehicleetollclass] nvarchar(4000),\n[md_vehiclebasic_trailer1brn] nvarchar(4000),\n[md_vehiclebasic_trailer1brnnumber] nvarchar(4000),\n[md_vehiclebasic_trailer1vehicleregisterno] nvarchar(4000),\n[md_vehiclebasic_trailer1insdate] datetime2(7),\n[md_vehiclebasic_trailer1insby] nvarchar(4000),\n[md_vehiclebasic_trailer1islinehaulvehicle] int,\n[md_vehiclebasic_trailer1internalheight] numeric(18,2),\n[md_vehiclebasic_trailer1internallength] numeric(18,2),\n[md_vehiclebasic_trailer1internalvolume] numeric(18,2),\n[md_vehiclebasic_trailer1internalwidth] numeric(18,2),\n[md_vehiclebasic_trailer1moddate] datetime2(7),\n[md_vehiclebasic_trailer1trailerflag] int,\n[md_vehiclebasic_trailer1workflowstatus] nvarchar(4000),\n[md_vehiclebasic_trailer1approveddate] datetime2(7),\n[md_vehiclebasic_trailer2id] bigint,\n[md_vehiclebasic_trailer2uid] nvarchar(4000),\n[md_vehiclebasic_trailer2vehicletype] nvarchar(4000),\n[md_vehiclebasic_trailer2internalexternal] nvarchar(4000),\n[md_vehiclebasic_trailer2activeflag] bigint,\n[md_vehiclebasic_trailer2vehiclestatus] nvarchar(4000),\n[md_vehiclebasic_trailer2chassisnumber] nvarchar(4000),\n[md_vehiclebasic_trailer2depot] nvarchar(4000),\n[md_vehiclebasic_trailer2enginenumber] nvarchar(4000),\n[md_vehiclebasic_trailer2fleetcode] nvarchar(4000),\n[md_vehiclebasic_trailer2fueltype] nvarchar(4000),\n[md_vehiclebasic_trailer2registrationnumber] nvarchar(4000),\n[md_vehiclebasic_trailer2vehicleapplication] nvarchar(4000),\n[md_vehiclebasic_trailer2vehiclebodymake] nvarchar(4000),\n[md_vehiclebasic_trailer2vehiclecolour] nvarchar(4000),\n[md_vehiclebasic_trailer2vehiclemake] nvarchar(4000),\n[md_vehiclebasic_trailer2vehiclemodel] nvarchar(4000),\n[md_vehiclebasic_trailer2vehicleseries] nvarchar(4000),\n[md_vehiclebasic_trailer2year] int,\n[md_vehiclebasic_trailer2vehicleownerid] bigint,\n[md_vehiclebasic_trailer2vehicleowner] nvarchar(4000),\n[md_vehiclebasic_trailer2staffvehicleflag] int,\n[md_vehiclebasic_trailer2vehicletrailersize] nvarchar(4000),\n[md_vehiclebasic_trailer2vehicletrailertype] nvarchar(4000),\n[md_vehiclebasic_trailer2vehicleetollclass] nvarchar(4000),\n[md_vehiclebasic_trailer2brn] nvarchar(4000),\n[md_vehiclebasic_trailer2brnnumber] nvarchar(4000),\n[md_vehiclebasic_trailer2vehicleregisterno] nvarchar(4000),\n[md_vehiclebasic_trailer2insdate] datetime2(7),\n[md_vehiclebasic_trailer2insby] nvarchar(4000),\n[md_vehiclebasic_trailer2islinehaulvehicle] int,\n[md_vehiclebasic_trailer2internalheight] numeric(18,2),\n[md_vehiclebasic_trailer2internallength] numeric(18,2),\n[md_vehiclebasic_trailer2internalvolume] numeric(18,2),\n[md_vehiclebasic_trailer2internalwidth] numeric(18,2),\n[md_vehiclebasic_trailer2moddate] datetime2(7),\n[md_vehiclebasic_trailer2trailerflag] int,\n[md_vehiclebasic_trailer2workflowstatus] nvarchar(4000),\n[md_vehiclebasic_trailer2approveddate] datetime2(7),\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstloadparent.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTLoadParent \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTOrder')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTOrder') )\n    DROP EXTERNAL TABLE dbo.F_SSTOrder\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTOrder') )\n    DROP EXTERNAL TABLE dbo.T_SSTOrder\nGO\n\nCREATE EXTERNAL TABLE dbo.T_SSTOrder (\n[lms_order_id] int,\n[lms_order_idold] nvarchar(4000),\n[lms_order_corderno] nvarchar(4000),\n[lms_order_custref] nvarchar(4000),\n[lms_order_waybillid] int,\n[lms_order_pickupcustid] int,\n[lms_order_delivercustid] int,\n[lms_order_billcustid] int,\n[lms_order_ovalue] numeric(18,2),\n[lms_order_hodate] datetime2(7),\n[lms_order_cservice] nvarchar(4000),\n[lms_order_courierid] nvarchar(4000),\n[lms_order_custservice] nvarchar(4000),\n[lms_order_userid] int,\n[lms_order_pcode] nvarchar(4000),\n[lms_order_appointment] datetime2(7),\n[lms_order_deliverby] datetime2(7),\n[lms_order_dconfirmed] nvarchar(4000),\n[lms_order_dcomment] nvarchar(4000),\n[lms_order_drefno] nvarchar(4000),\n[lms_order_duserid] int,\n[lms_order_nopods] int,\n[lms_order_duedate] datetime2(7),\n[lms_order_batchno] int,\n[lms_order_units] int,\n[lms_order_airfreightflag] int,\n[lms_order_custref3] nvarchar(4000),\n[lms_order_specdel] int,\n[lms_order_flunits] int,\n[lms_order_flkgs] int,\n[lms_order_inservice] datetime2(7),\n[lms_order_custdocs] int,\n[lms_order_scanned] datetime2(7),\n[lms_order_scanimagename1] nvarchar(4000),\n[lms_order_scanimagename] nvarchar(4000),\n[lms_order_changereasonid] int,\n[lms_order_bill_servicetype] int,\n[lms_order_bill_vehicletype] int,\n[lms_order_quote] numeric(18,2),\n[lms_order_consignlabel] int,\n[lms_order_custref2] nvarchar(4000),\n[lms_order_callprogid] int,\n[lms_order_callprogupddate] datetime2(7),\n[lms_order_submitedi] int,\n[lms_order_lastupdate] datetime2(7),\n[lms_order_quoteflag] int,\n[lms_order_bill_minrate] numeric(18,2),\n[lms_order_bill_addrate] numeric(18,2),\n[lms_order_bill_minkg] numeric(18,2),\n[lms_order_notes] nvarchar(4000),\n[lms_order_quoteweight] numeric(18,2),\n[lms_order_orderconsolidationid] int,\n[lms_order_quotefuellevy] numeric(18,2),\n[lms_order_quoteothersurcharges] numeric(18,2),\n[lms_order_quotedocfees] numeric(18,2),\n[lms_bcustomer_id] int,\n[lms_bcustomer_name] nvarchar(4000),\n[lms_pcustomer_id] int,\n[lms_pcustomer_name] nvarchar(4000),\n[lms_dcustomer_id] int,\n[lms_dcustomer_name] nvarchar(4000),\n[lms_users_id] int,\n[lms_users_fullname] nvarchar(4000),\n[lms_users_site] nvarchar(4000),\n[lms_parcelbyorder_orderid] int,\n[lms_parcelbyorder_aggrweight] numeric(18,2),\n[lms_parcelbyorder_aggrchargeweight] numeric(18,2),\n[lms_parcelbyorder_aggrvolweight] numeric(18,2),\n[lms_parcelbyorder_aggrvolumiserweight] numeric(18,2),\n[lms_parcelbyorder_aggrmaxweight] numeric(18,2),\n[lms_parcelbyorder_aggrnoparcels] bigint,\n[lms_parcelbyorder_aggrweightexclspecdel] numeric(18,2),\n[lms_parcelbyorder_aggrchargeweightexclspecdel] numeric(18,2),\n[lms_parcelbyorder_aggrvolweightexclspecdel] numeric(18,2),\n[lms_parcelbyorder_aggrvolumiserweightexclspecdel] numeric(18,2),\n[lms_parcelbyorder_aggrmaxweightexclspecdel] numeric(18,2),\n[lms_parcelbyorder_aggrnoparcelsexclspecdel] bigint,\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstorder.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTOrder\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTParcel')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcel') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcel\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTParcel') )\n    DROP EXTERNAL TABLE dbo.T_SSTParcel\nGO\n\nCREATE EXTERNAL TABLE dbo.T_SSTParcel (\n\t[lms_parcel_id] int,\n\t[lms_parcel_weight] float,\n\t[lms_parcel_waybillid] int,\n\t[lms_parcel_orderid] int,\n\t[lms_parcel_acceptancedate] datetime2(7),\n\t[lms_parcel_userid] int,\n\t[lms_parcel_barcode] nvarchar(4000),\n\t[lms_parcel_endorsement] nvarchar(4000),\n\t[lms_parcel_volweight] float,\n\t[lms_parcel_chargeweight] numeric(18,2),\n\t[lms_parcel_ptype] int,\n\t[lms_parcel_description] nvarchar(4000),\n\t[lms_parcel_locid] int,\n\t[lms_parcel_handoverdate] datetime2(7),\n\t[lms_parcel_seqno] int,\n\t[lms_parcel_floorstatus] nvarchar(4000),\n\t[lms_parcel_consignid] int,\n\t[lms_parcel_cref] nvarchar(4000),\n\t[lms_parcel_claimid] int,\n\t[lms_parcel_duedate] datetime2(7),\n\t[lms_parcel_coddate] datetime2(7),\n\t[lms_parcel_disflag] int,\n\t[lms_parcel_astoreid] int,\n\t[lms_parcel_mrpflag] int,\n\t[lms_parcel_nmrflag] int,\n\t[lms_parcel_consignflag] int,\n\t[lms_parcel_cmanifest] int,\n\t[lms_parcel_cbranchid] int,\n\t[lms_parcel_claimref] nvarchar(4000),\n\t[lms_parcel_cost] numeric(18,2),\n\t[lms_parcel_creason] nvarchar(4000),\n\t[lms_parcel_customerbarcode] nvarchar(4000),\n\t[lms_parcel_dbshorts] int,\n\t[lms_parcel_holddate] datetime2(7),\n\t[lms_parcel_aflag] int,\n\t[lms_parcel_stationid] int,\n\t[lms_parcel_dbshortsdesc] nvarchar(4000),\n\t[lms_parcel_dstatusid] int,\n\t[lms_parcel_dflag] int,\n\t[lms_parcel_callprogid] int,\n\t[lms_parcel_callprogupddate] datetime2(7),\n\t[lms_parcel_duplflag] int,\n\t[lms_parcel_lastupdate] datetime2(7),\n\t[lms_parcel_datevolumised] datetime2(7),\n\t[lms_parcel_volumiserweight] numeric(18,2),\n\t[lms_parcel_volumiserlength] numeric(18,2),\n\t[lms_parcel_volumiserheight] numeric(18,2),\n\t[lms_parcel_volumiserwidth] numeric(18,2),\n\t[lms_parcel_volumiserid] int,\n\t[lms_parcel_pl] numeric(18,2),\n\t[lms_parcel_ph] numeric(18,2),\n\t[lms_parcel_pw] numeric(18,2),\n\t[lms_parcel_totcharge] numeric(18,2),\n\t[lms_parcel_dontrecalc] int,\n\t[lms_parcel_containerid] int,\n\t[lms_parcel_avgvolweight] numeric(18,2),\n\t[lms_waybill_id] int,\n\t[lms_waybill_poddate] datetime2(7),\n\t[lms_waybill_date] datetime2(7),\n\t[lms_order_id] int,\n\t[lms_order_hodate] datetime2(7),\n\t[lms_order_corderno] nvarchar(4000),\n\t[lms_order_billcustid] int,\n\t[lms_order_pickupcustid] int,\n\t[lms_order_delivercustid] int,\n\t[lms_order_specdel] int,\n\t[lms_consignment_id] int,\n\t[lms_consignment_cdate] datetime2(7),\n\t[lms_consignment_deliverby] datetime2(7),\n\t[lms_parceldetail_parcelid] int,\n\t[lms_parceldetail_inservicestart] datetime2(7),\n\t[lms_parceldetail_deliverby] datetime2(7),\n\t[lms_parceldetail_servicedays] int,\n\t[lms_parceldetail_servicetime] numeric(13,4),\n\t[lms_parceldetail_cutofftime] numeric(13,4),\n\t[lms_parceldetail_appointment] datetime2(7),\n\t[lms_parceldetail_nddid] int,\n\t[lms_parceldetail_custonholdstart] datetime2(7),\n\t[lms_parceldetail_custonholdend] datetime2(7),\n\t[lms_parceldetail_splitinitial] int,\n\t[lms_parceldetail_weekendholidays] int,\n\t[lms_parceldetail_inbound] int,\n\t[lms_parceldetail_courierid] nvarchar(4000),\n\t[lms_parceldetail_serviceid] nvarchar(4000),\n\t[lms_parceldetail_custaccid] int,\n\t[lms_parceldetail_broutemasterid] int,\n\t[lms_parceldetail_broutemasterfromid] int,\n\t[lms_parceldetail_broutemastertoid] int,\n\t[lms_parceldetail_leadtimeid] int,\n\t[lms_bcustomer_id] int,\n\t[lms_bcustomer_name] nvarchar(4000),\n\t[lms_pcustomer_id] int,\n\t[lms_pcustomer_name] nvarchar(4000),\n\t[lms_dcustomer_id] int,\n\t[lms_dcustomer_name] nvarchar(4000),\n\t[lms_users_id] int,\n\t[lms_users_fullname] nvarchar(4000),\n\t[lms_users_site] nvarchar(4000),\n\t[lms_bill_parceltype_id] int,\n\t[lms_bill_parceltype_description] nvarchar(4000),\n\t[lms_bill_parceltype_ptype] int,\n\t[lms_clocation_id] int,\n\t[lms_clocation_description] nvarchar(4000),\n\t[lms_dstatus_id] int,\n\t[lms_dstatus_description] nvarchar(4000),\n\t[lms_volumiser_id] int,\n\t[lms_volumiser_locid] int,\n\t[lms_volumiser_volumisercode] nvarchar(4000),\n\t[lms_volumiser_volumiserdescription] nvarchar(4000),\n\t[lms_volumiser_userid] int,\n\t[lms_volumiser_inlinescale] int,\n\t[orv_parcel_id] bigint,\n\t[orv_parcel_lmsid] bigint,\n\t[orv_parcel_did] bigint,\n\t[orv_parcel_scandate] datetime2(7),\n\t[orv_parcel_scanstatus] nvarchar(4000),\n\t[orv_parcel_scanmode] nvarchar(4000),\n\t[orv_parcel_claimid] bigint,\n\t[orv_parcel_courierid] bigint,\n\t[orv_parcel_moddate] datetime2(7)\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcel.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTParcel\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTParcelByConsignment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcelByConsignment') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcelByConsignment\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTParcelByConsignment') )\n    DROP EXTERNAL TABLE dbo.T_SSTParcelByConsignment\nGO\n\n\nCREATE EXTERNAL TABLE dbo.T_SSTParcelByConsignment (\n\t[lms_parcelbyconsignment_consignid] int,\n\t[lms_parcelbyconsignment_aggrweight] numeric(28,2),\n\t[lms_parcelbyconsignment_aggrchargeweight] numeric(28,2),\n\t[lms_parcelbyconsignment_aggrvolweight] numeric(28,2),\n\t[lms_parcelbyconsignment_aggrvolumiserweight] numeric(28,2),\n\t[lms_parcelbyconsignment_aggrmaxweight] numeric(28,2),\n\t[lms_parcelbyconsignment_aggrnoparcels] bigint,\n\t[lms_parcelbyconsignment_aggrweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyconsignment_aggrchargeweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyconsignment_aggrvolweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyconsignment_aggrvolumiserweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyconsignment_aggrmaxweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyconsignment_aggrnoparcelsexclspecdel] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcelbyconsignment.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTParcelByConsignment\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTParcelByLoad')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcelByLoad') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcelByLoad\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTParcelByLoad') )\n    DROP EXTERNAL TABLE dbo.T_SSTParcelByLoad\nGO\n\nCREATE EXTERNAL TABLE dbo.T_SSTParcelByLoad (\n\t[lms_parcelbyload_loadid] int,\n\t[lms_parcelbyload_aggrweight] numeric(28,2),\n\t[lms_parcelbyload_aggrchargeweight] numeric(28,2),\n\t[lms_parcelbyload_aggrvolweight] numeric(28,2),\n\t[lms_parcelbyload_aggrvolumiserweight] numeric(28,2),\n\t[lms_parcelbyload_aggrmaxweight] numeric(28,2),\n\t[lms_parcelbyload_aggrnoparcels] bigint,\n\t[lms_parcelbyload_aggrweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyload_aggrchargeweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyload_aggrvolweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyload_aggrvolumiserweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyload_aggrmaxweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyload_aggrnoparcelsexclspecdel] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcelbyload.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTParcelByLoad\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTParcelByOrder')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcelByOrder') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcelByOrder\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTParcelByOrder') )\n    DROP EXTERNAL TABLE dbo.T_SSTParcelByOrder\nGO\n\n\nCREATE EXTERNAL TABLE dbo.T_SSTParcelByOrder (\n\t[lms_parcelbyorder_orderid] int,\n\t[lms_parcelbyorder_aggrweight] numeric(28,2),\n\t[lms_parcelbyorder_aggrchargeweight] numeric(28,2),\n\t[lms_parcelbyorder_aggrvolweight] numeric(28,2),\n\t[lms_parcelbyorder_aggrvolumiserweight] numeric(28,2),\n\t[lms_parcelbyorder_aggrmaxweight] numeric(28,2),\n\t[lms_parcelbyorder_aggrnoparcels] bigint,\n\t[lms_parcelbyorder_aggrweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyorder_aggrchargeweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyorder_aggrvolweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyorder_aggrvolumiserweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyorder_aggrmaxweightexclspecdel] numeric(28,2),\n\t[lms_parcelbyorder_aggrnoparcelsexclspecdel] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcelbyorder.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTParcelByOrder\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTParcelByWaybill')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTParcelByWaybill') )\n    DROP EXTERNAL TABLE dbo.F_SSTParcelByWaybill\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTParcelByWaybill') )\n    DROP EXTERNAL TABLE dbo.T_SSTParcelByWaybill\nGO\n\n\n\nCREATE EXTERNAL TABLE dbo.T_SSTParcelByWaybill (\n\t[lms_parcelbywaybill_waybillid] int,\n\t[lms_parcelbywaybill_aggrweight] numeric(28,2),\n\t[lms_parcelbywaybill_aggrchargeweight] numeric(28,2),\n\t[lms_parcelbywaybill_aggrvolweight] numeric(28,2),\n\t[lms_parcelbywaybill_aggrvolumiserweight] numeric(28,2),\n\t[lms_parcelbywaybill_aggrmaxweight] numeric(28,2),\n\t[lms_parcelbywaybill_aggrnoparcels] bigint,\n\t[lms_parcelbywaybill_aggrweightexclspecdel] numeric(28,2),\n\t[lms_parcelbywaybill_aggrchargeweightexclspecdel] numeric(28,2),\n\t[lms_parcelbywaybill_aggrvolweightexclspecdel] numeric(28,2),\n\t[lms_parcelbywaybill_aggrvolumiserweightexclspecdel] numeric(28,2),\n\t[lms_parcelbywaybill_aggrmaxweightexclspecdel] numeric(28,2),\n\t[lms_parcelbywaybill_aggrnoparcelsexclspecdel] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstparcelbywaybill.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTParcelByWaybill\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTTrack')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTTrack') )\n    DROP EXTERNAL TABLE dbo.F_SSTTrack\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTTrack') )\n    DROP EXTERNAL TABLE dbo.T_SSTTrack\nGO\n\n\n\nCREATE EXTERNAL TABLE dbo.T_SSTTrack (\n\t[lms_track_id] int,\n\t[lms_track_opendt] datetime2(7),\n\t[lms_track_closedt] datetime2(7),\n\t[lms_track_loadid] int,\n\t[lms_track_userid] int,\n\t[lms_track_parcelid] int,\n\t[lms_track_tolocid] int,\n\t[lms_track_touserid] int,\n\t[lms_track_fromlocid] int,\n\t[lms_track_tracktypeid2] int,\n\t[lms_track_tracktypeid] int,\n\t[lms_track_lastupdate] datetime2(7),\n\t[lms_track_toloadid] int,\n\t[lms_track_openstationid] int,\n\t[lms_track_closestationid] int,\n\t[lms_parcel_weight] float,\n\t[lms_parcel_chargeweight] numeric(18,2),\n\t[lms_parcel_volweight] float,\n\t[lms_parcel_volumiserweight] numeric(18,2),\n\t[lms_order_specdel] int,\n\t[lms_flocation_id] int,\n\t[lms_flocation_description] nvarchar(4000),\n\t[lms_tlocation_id] int,\n\t[lms_tlocation_description] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/ssttrack.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTTrack\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTTrip')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTTrip') )\n    DROP EXTERNAL TABLE dbo.F_SSTTrip\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTTrip') )\n    DROP EXTERNAL TABLE dbo.T_SSTTrip\nGO\n\n\nCREATE EXTERNAL TABLE dbo.T_SSTTrip (\n\t[tms_trip_id] bigint,\n\t[tms_trip_driverid] nvarchar(4000),\n\t[tms_trip_vehicleid] nvarchar(4000),\n\t[tms_trip_trailerid] nvarchar(4000),\n\t[tms_trip_sectrailerid] nvarchar(4000),\n\t[tms_trip_status] nvarchar(4000),\n\t[tms_trip_routeid] bigint,\n\t[tms_trip_opsrouteid] bigint,\n\t[tms_trip_startfromaddress] nvarchar(4000),\n\t[tms_trip_startfromlat] float,\n\t[tms_trip_startfromlng] float,\n\t[tms_trip_dispatchdate] datetime2(7),\n\t[tms_trip_stopaddress] nvarchar(4000),\n\t[tms_trip_stoplat] float,\n\t[tms_trip_stoplng] float,\n\t[tms_trip_insdate] datetime2(7),\n\t[tms_trip_moddate] datetime2(7),\n\t[tms_trip_insby] bigint,\n\t[tms_trip_onrouteid] bigint,\n\t[tms_trip_uuid] nvarchar(4000),\n\t[tms_trip_insbyuser] nvarchar(4000),\n\t[tms_trip_thirdpartyid] bigint,\n\t[tms_trip_timehash] int,\n\t[tms_trip_onroutestatus] nvarchar(4000),\n\t[tms_trip_lastupdate] datetime2(7),\n\t[tms_trip_lastlng] float,\n\t[tms_trip_lastlat] float,\n\t[tms_trip_controllerid] bigint,\n\t[tms_trip_trackstatus] nvarchar(4000),\n\t[tms_trip_lastrackid] bigint,\n\t[tms_trip_customer] nvarchar(4000),\n\t[tms_trip_bookings] nvarchar(4000),\n\t[tms_trip_controller] nvarchar(4000),\n\t[tms_trip_transporter] nvarchar(4000),\n\t[tms_trip_legacyid] bigint,\n\t[tms_trip_originatedfrom] nvarchar(4000),\n\t[tms_trip_local] int,\n\t[tms_trip_startdate] datetime2(7),\n\t[tms_trip_enddate] datetime2(7),\n\t[tms_trip_actualdeliverydate] datetime2(7),\n\t[tms_trip_note] nvarchar(4000),\n\t[tms_trip_deliverydate] datetime2(7),\n\t[tms_trip_internalexternal] nvarchar(4000),\n\t[tms_trip_pickupstartaddress] nvarchar(4000),\n\t[orv_dispatch_id] bigint,\n\t[orv_dispatch_lmsid] bigint,\n\t[orv_dispatch_vid] bigint,\n\t[orv_dispatch_did] bigint,\n\t[orv_dispatch_status] nvarchar(4000),\n\t[orv_dispatch_startdate] datetime2(7),\n\t[orv_dispatch_stopdate] datetime2(7),\n\t[orv_dispatch_vehicletype] int,\n\t[orv_dispatch_uid] bigint,\n\t[orv_dispatch_estdepdate] datetime2(7),\n\t[orv_dispatch_trailer] bigint,\n\t[orv_dispatch_trailer2] bigint,\n\t[orv_dispatch_fromlocid] bigint,\n\t[orv_dispatch_tolocid] bigint,\n\t[orv_dispatch_site] nvarchar(4000),\n\t[orv_dispatch_lastupdate] datetime2(7),\n\t[orv_dispatch_etastatus] nvarchar(4000),\n\t[orv_dispatch_startinglat] float,\n\t[orv_dispatch_startinglng] float,\n\t[orv_dispatch_endinglat] float,\n\t[orv_dispatch_endinglng] float,\n\t[orv_dispatch_startingfrom] nvarchar(4000),\n\t[orv_dispatch_goingto] nvarchar(4000),\n\t[orv_dispatch_importissue] nvarchar(4000),\n\t[orv_dispatch_insdate] datetime2(7),\n\t[orv_dispatch_estarrdate] datetime2(7),\n\t[orv_dispatch_duration] bigint,\n\t[orv_dispatch_distance] bigint,\n\t[orv_dispatch_cost] bigint,\n\t[orv_dispatch_stoplat] float,\n\t[orv_dispatch_stoplng] float,\n\t[orv_dispatch_stopreason] nvarchar(4000),\n\t[orv_dispatch_startodo] bigint,\n\t[orv_dispatch_stopodo] bigint,\n\t[orv_dispatch_expduration] bigint,\n\t[orv_dispatch_expdistance] bigint,\n\t[orv_dispatch_expcost] bigint,\n\t[orv_dispatch_collectionid] bigint,\n\t[orv_dispatch_crew] int,\n\t[orv_dispatch_crewnames] nvarchar(4000),\n\t[orv_dispatch_bocloseuid] bigint,\n\t[orv_dispatch_routing] nvarchar(4000),\n\t[orv_dispatch_swapct] int,\n\t[orv_dispatch_debriefed] int,\n\t[orv_dispatch_debriefnotes] nvarchar(4000),\n\t[orv_dispatch_bopin] nvarchar(4000),\n\t[orv_dispatch_cpicost] bigint,\n\t[orv_dispatch_labourcost] bigint,\n\t[orv_dispatch_maintcost] bigint,\n\t[orv_dispatch_inscost] bigint,\n\t[orv_dispatch_tollcost] bigint,\n\t[orv_dispatch_fuelcost] bigint,\n\t[orv_dispatch_internal] int,\n\t[orv_dispatch_childids] nvarchar(4000),\n\t[orv_dispatch_guid] bigint,\n\t[orv_dispatch_timedefinite] int,\n\t[orv_dispatch_orvcode] int,\n\t[orv_dispatch_tsstopdepoenter] datetime2(7),\n\t[orv_dispatch_tsstartdepoexit] datetime2(7),\n\t[orv_dispatch_reroutect] int,\n\t[orv_dispatch_actualarrdate] datetime2(7),\n\t[orv_dispatch_physicalstartlat] float,\n\t[orv_dispatch_physicalstartlng] float,\n\t[orv_dispatch_tsstartdepoexitapp] datetime2(7),\n\t[orv_dispatch_tsstopdepoenterapp] datetime2(7),\n\t[orv_dispatch_uncanceldate] datetime2(7),\n\t[orv_dispatch_uncancelusername] nvarchar(4000),\n\t[orv_dispatch_lmsdebrifed] int,\n\t[orv_dispatch_reviseddebrief] int,\n\t[orv_dispatch_lhtransporter] nvarchar(4000),\n\t[orv_dispatch_triptype] nvarchar(4000),\n\t[orv_dispatch_startreason] nvarchar(4000),\n\t[orv_dispatch_route] nvarchar(4000),\n\t[orv_dispatch_tmstraileridentify] nvarchar(4000),\n\t[orv_dispatch_tmstrailer2identify] nvarchar(4000),\n\t[orv_dispatch_tmscontroller] nvarchar(4000),\n\t[orv_dispatch_routekey] nvarchar(4000),\n\t[orv_dispatch_courierid] bigint,\n\t[orv_dispatch_originalstartdate] datetime2(7),\n\t[orv_dispatch_originalextarrival] datetime2(7),\n\t[orv_dispatch_recomputeoriginals] int,\n\t[orv_dispatch_originalextdistance] bigint,\n\t[orv_dispatch_originalextduration] bigint,\n\t[orv_dispatch_moddate] datetime2(7),\n\t[orv_dispatch_tmsmode] int,\n\t[orv_dispatch_driversignature] bigint,\n\t[orv_vehicle_id] bigint,\n\t[orv_vehicle_fleetcode] nvarchar(4000),\n\t[orv_vehicle_lmsid] bigint,\n\t[orv_vehicle_trailer1id] bigint,\n\t[orv_vehicle_trailer1fleetcode] nvarchar(4000),\n\t[orv_vehicle_trailer1lmsid] bigint,\n\t[orv_vehicle_trailer2id] bigint,\n\t[orv_vehicle_trailer2fleetcode] nvarchar(4000),\n\t[orv_vehicle_trailer2lmsid] bigint,\n\t[lms_vehicle_id] int,\n\t[lms_vehicle_uid] nvarchar(4000),\n\t[lms_vehicle_trailer1id] int,\n\t[lms_vehicle_trailer1uid] nvarchar(4000),\n\t[lms_vehicle_trailer2id] int,\n\t[lms_vehicle_trailer2uid] nvarchar(4000),\n\t[orv_orvuser_id] bigint,\n\t[orv_orvuser_username] nvarchar(4000),\n\t[orv_orvuser_fname] nvarchar(4000),\n\t[orv_orvuser_lname] nvarchar(4000),\n\t[orv_orvuser_empcode] nvarchar(4000),\n\t[orv_orvuser_aka] nvarchar(4000),\n\t[orv_orvuser_gender] nvarchar(4000),\n\t[orv_orvuser_cellno] nvarchar(4000),\n\t[orv_orvuser_rsaid] nvarchar(4000),\n\t[orv_orvuser_passportno] nvarchar(4000),\n\t[orv_orvuser_idpassportno] nvarchar(4000),\n\t[orv_orvuser_nationality] nvarchar(4000),\n\t[orv_orvuser_birthcountry] nvarchar(4000),\n\t[orv_orvuser_engageddate] datetime2(7),\n\t[orv_orvuser_joineddate] datetime2(7),\n\t[orv_orvuser_termindate] datetime2(7),\n\t[orv_orvuser_status] nvarchar(4000),\n\t[orv_orvuser_depot] nvarchar(4000),\n\t[orv_orvuser_jobcategory] nvarchar(4000),\n\t[orv_orvuser_jobtitle] nvarchar(4000),\n\t[orv_orvuser_payroll] nvarchar(4000),\n\t[orv_orvuser_annualsalary] float,\n\t[orv_orvuser_insdate] datetime2(7),\n\t[md_vehiclebasic_id] bigint,\n\t[md_vehiclebasic_uid] nvarchar(4000),\n\t[md_vehiclebasic_vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_activeflag] bigint,\n\t[md_vehiclebasic_vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_depot] nvarchar(4000),\n\t[md_vehiclebasic_enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_fueltype] nvarchar(4000),\n\t[md_vehiclebasic_registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_year] int,\n\t[md_vehiclebasic_vehicleownerid] bigint,\n\t[md_vehiclebasic_vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_staffvehicleflag] int,\n\t[md_vehiclebasic_vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_brn] nvarchar(4000),\n\t[md_vehiclebasic_brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_insdate] datetime2(7),\n\t[md_vehiclebasic_insby] nvarchar(4000),\n\t[md_vehiclebasic_islinehaulvehicle] int,\n\t[md_vehiclebasic_internalheight] numeric(18,2),\n\t[md_vehiclebasic_internallength] numeric(18,2),\n\t[md_vehiclebasic_internalvolume] numeric(18,2),\n\t[md_vehiclebasic_internalwidth] numeric(18,2),\n\t[md_vehiclebasic_moddate] datetime2(7),\n\t[md_vehiclebasic_trailerflag] int,\n\t[md_vehiclebasic_workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_approveddate] datetime2(7),\n\t[md_vehiclebasic_trailer1id] bigint,\n\t[md_vehiclebasic_trailer1uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer1activeflag] bigint,\n\t[md_vehiclebasic_trailer1vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer1enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer1fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer1year] int,\n\t[md_vehiclebasic_trailer1vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer1vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer1staffvehicleflag] int,\n\t[md_vehiclebasic_trailer1vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer1brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer1vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer1insdate] datetime2(7),\n\t[md_vehiclebasic_trailer1insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer1islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer1internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer1internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer1internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer1moddate] datetime2(7),\n\t[md_vehiclebasic_trailer1trailerflag] int,\n\t[md_vehiclebasic_trailer1workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer1approveddate] datetime2(7),\n\t[md_vehiclebasic_trailer2id] bigint,\n\t[md_vehiclebasic_trailer2uid] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2internalexternal] nvarchar(4000),\n\t[md_vehiclebasic_trailer2activeflag] bigint,\n\t[md_vehiclebasic_trailer2vehiclestatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2chassisnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2depot] nvarchar(4000),\n\t[md_vehiclebasic_trailer2enginenumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fleetcode] nvarchar(4000),\n\t[md_vehiclebasic_trailer2fueltype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2registrationnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleapplication] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclebodymake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclecolour] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemake] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehiclemodel] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleseries] nvarchar(4000),\n\t[md_vehiclebasic_trailer2year] int,\n\t[md_vehiclebasic_trailer2vehicleownerid] bigint,\n\t[md_vehiclebasic_trailer2vehicleowner] nvarchar(4000),\n\t[md_vehiclebasic_trailer2staffvehicleflag] int,\n\t[md_vehiclebasic_trailer2vehicletrailersize] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicletrailertype] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleetollclass] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brn] nvarchar(4000),\n\t[md_vehiclebasic_trailer2brnnumber] nvarchar(4000),\n\t[md_vehiclebasic_trailer2vehicleregisterno] nvarchar(4000),\n\t[md_vehiclebasic_trailer2insdate] datetime2(7),\n\t[md_vehiclebasic_trailer2insby] nvarchar(4000),\n\t[md_vehiclebasic_trailer2islinehaulvehicle] int,\n\t[md_vehiclebasic_trailer2internalheight] numeric(18,2),\n\t[md_vehiclebasic_trailer2internallength] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalvolume] numeric(18,2),\n\t[md_vehiclebasic_trailer2internalwidth] numeric(18,2),\n\t[md_vehiclebasic_trailer2moddate] datetime2(7),\n\t[md_vehiclebasic_trailer2trailerflag] int,\n\t[md_vehiclebasic_trailer2workflowstatus] nvarchar(4000),\n\t[md_vehiclebasic_trailer2approveddate] datetime2(7),\n\t[tms_driverpayitem_id] bigint,\n\t[tms_driverpayitem_driverid] nvarchar(4000),\n\t[tms_driverpayitem_tripid] bigint,\n\t[tms_driverpayitem_triprate] int,\n\t[tms_driverpayitem_mealrate] int,\n\t[tms_driverpayitem_sleepoverrate] int,\n\t[tms_driverpayitem_airtimerate] int,\n\t[tms_driverpayitem_linkrate] int,\n\t[tms_driverpayitem_totalrate] int,\n\t[tms_driverpayitem_routeid] bigint,\n\t[tms_driverpayitem_routename] nvarchar(4000),\n\t[tms_driverpayitem_insdate] datetime2(7),\n\t[tms_driverpayitem_moddate] datetime2(7),\n\t[tms_driverpayitem_horse] nvarchar(4000),\n\t[tms_driverpayitem_trailers] nvarchar(4000),\n\t[tms_driverpayitem_linkused] int,\n\t[tms_driverpayitem_manualadjustment] int,\n\t[tms_driverpayitem_editby] bigint,\n\t[tms_driverpayitem_drivername] nvarchar(4000),\n\t[tms_driverpayitem_dispatchdate] datetime2(7),\n\t[tms_driverpayitem_bookings] nvarchar(4000),\n\t[tms_driverpayitem_employeecode] nvarchar(4000),\n\t[tms_driverpayitem_originatedfrom] nvarchar(4000),\n\t[tms_driverpayitem_reportid] bigint,\n\t[tms_financedata_aggrpeaksurchagrebuy] bigint,\n\t[tms_financedata_aggrpeaksurchagresell] bigint,\n\t[tms_financedata_aggrmanualentryroadhaulsell] bigint,\n\t[tms_financedata_aggrmanualentryahocsell] bigint,\n\t[tms_financedata_aggrsystemfuellevy] bigint,\n\t[tms_financedata_aggrsystemratefuellevy] bigint,\n\t[tms_financedata_aggrsystemratefuelexlevy] bigint,\n\t[tms_financedata_aggrsystemratefuelinclevy] bigint,\n\t[tms_financedata_aggrsystemsellrate] bigint,\n\t[tms_financedata_aggrtotalsellrate] bigint,\n\t[tms_financedata_aggrtotalbuyrate] bigint\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/ssttrip.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTTrip \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTWaybill')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTWaybill') )\n    DROP EXTERNAL TABLE dbo.F_SSTWaybill\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTWaybill') )\n    DROP EXTERNAL TABLE dbo.T_SSTWaybill\nGO\n\n\nCREATE EXTERNAL TABLE dbo.T_SSTWaybill (\n[lms_waybill_id] int,\n[lms_waybill_date] datetime2(7),\n[lms_waybill_bservice] nvarchar(4000),\n[lms_waybill_cservice] nvarchar(4000),\n[lms_waybill_originid] nvarchar(4000),\n[lms_waybill_defuser] nvarchar(4000),\n[lms_waybill_distance] float,\n[lms_waybill_courierid] nvarchar(4000),\n[lms_waybill_courierwbno] nvarchar(4000),\n[lms_waybill_billtype] int,\n[lms_waybill_capdate] datetime2(7),\n[lms_waybill_surcharge] numeric(18,2),\n[lms_waybill_insurance] numeric(18,2),\n[lms_waybill_tax] numeric(18,2),\n[lms_waybill_totalcharge] numeric(18,2),\n[lms_waybill_destinationname] nvarchar(4000),\n[lms_waybill_ordertype] int,\n[lms_waybill_pickupcustid] int,\n[lms_waybill_delivercustid] int,\n[lms_waybill_billto] nvarchar(4000),\n[lms_waybill_claimable] int,\n[lms_waybill_override] int,\n[lms_waybill_vehiclecapacity] int,\n[lms_waybill_custpoddate] datetime2(7),\n[lms_waybill_poddate] datetime2(7),\n[lms_waybill_signee] nvarchar(4000),\n[lms_waybill_grvno] nvarchar(4000),\n[lms_waybill_endorsements] nvarchar(4000),\n[lms_waybill_billcust] int,\n[lms_waybill_courier_from] nvarchar(4000),\n[lms_waybill_courier_to] nvarchar(4000),\n[lms_waybill_charge] numeric(18,2),\n[lms_waybill_tvalue] numeric(18,2),\n[lms_waybill_inservice] datetime2(7),\n[lms_waybill_dbtotalcharge] numeric(18,2),\n[lms_waybill_loadid] int,\n[lms_waybill_mrpflag] int,\n[lms_waybill_printed] int,\n[lms_waybill_sreasonid] int,\n[lms_waybill_minkg] numeric(18,2),\n[lms_waybill_minrate] numeric(18,2),\n[lms_waybill_addrate] numeric(18,2),\n[lms_waybill_docfees] numeric(18,2),\n[lms_waybill_volumetric] numeric(18,2),\n[lms_waybill_hasprinted] nvarchar(4000),\n[lms_waybill_site] nvarchar(4000),\n[lms_waybill_deliveryno] int,\n[lms_waybill_fuellevy] numeric(18,2),\n[lms_waybill_totfuellevy] numeric(18,2),\n[lms_waybill_custaccid] int,\n[lms_waybill_podadded] datetime2(7),\n[lms_waybill_scanned] int,\n[lms_waybill_userid] int,\n[lms_waybill_autoprinted] int,\n[lms_waybill_poduserid] int,\n[lms_waybill_scanuserid] int,\n[lms_waybill_cref] nvarchar(4000),\n[lms_waybill_ushort] int,\n[lms_waybill_delays] nvarchar(4000),\n[lms_waybill_debriefed] int,\n[lms_waybill_debriefdt] datetime2(7),\n[lms_waybill_dbctnsret] int,\n[lms_waybill_uploaded] int,\n[lms_waybill_serviceexclude] int,\n[lms_waybill_failed] int,\n[lms_waybill_delayreasonid] int,\n[lms_waybill_notdebrievreasonid] int,\n[lms_waybill_deliverystatid] int,\n[lms_waybill_reasongroupid] int,\n[lms_waybill_emailcust] int,\n[lms_waybill_mobileissuereportedid] int,\n[lms_waybill_ismobile] int,\n[lms_bcustomer_id] int,\n[lms_bcustomer_name] nvarchar(4000),\n[lms_pcustomer_id] int,\n[lms_pcustomer_name] nvarchar(4000),\n[lms_dcustomer_id] int,\n[lms_dcustomer_name] nvarchar(4000),\n[lms_users_id] int,\n[lms_users_fullname] nvarchar(4000),\n[lms_users_site] nvarchar(4000),\n[lms_podusers_id] int,\n[lms_podusers_fullname] nvarchar(4000),\n[lms_podusers_site] nvarchar(4000),\n[lms_scanusers_id] int,\n[lms_scanusers_fullname] nvarchar(4000),\n[lms_scanusers_site] nvarchar(4000),\n[lms_delayreason_id] int,\n[lms_delayreason_description] nvarchar(4000),\n[lms_mobilefeedbackreason_id] int,\n[lms_mobilefeedbackreason_description] nvarchar(4000),\n[lms_reasondetail_id] int,\n[lms_reasondetail_description] nvarchar(4000),\n[lms_reasondetail_reasongroupid] int,\n[lms_reasongroup_id] int,\n[lms_reasongroup_description] nvarchar(4000),\n[lms_deliverystatus_id] int,\n[lms_deliverystatus_description] nvarchar(4000),\n[lms_parcelbywaybill_waybillid] int,\n[lms_parcelbywaybill_aggrweight] numeric(18,2),\n[lms_parcelbywaybill_aggrchargeweight] numeric(18,2),\n[lms_parcelbywaybill_aggrvolweight] numeric(18,2),\n[lms_parcelbywaybill_aggrvolumiserweight] numeric(18,2),\n[lms_parcelbywaybill_aggrmaxweight] numeric(18,2),\n[lms_parcelbywaybill_aggrnoparcels] bigint,\n[lms_parcelbywaybill_aggrweightexclspecdel] numeric(18,2),\n[lms_parcelbywaybill_aggrchargeweightexclspecdel] numeric(18,2),\n[lms_parcelbywaybill_aggrvolweightexclspecdel] numeric(18,2),\n[lms_parcelbywaybill_aggrvolumiserweightexclspecdel] numeric(18,2),\n[lms_parcelbywaybill_aggrmaxweightexclspecdel] numeric(18,2),\n[lms_parcelbywaybill_aggrnoparcelsexclspecdel] bigint,\n[orv_delivery_id] bigint,\n[orv_delivery_dispatchid] bigint,\n[orv_delivery_waybillid] bigint,\n[orv_delivery_address] nvarchar(4000),\n[orv_delivery_town] nvarchar(4000),\n[orv_delivery_province] nvarchar(4000),\n[orv_delivery_country] nvarchar(4000),\n[orv_delivery_lat] float,\n[orv_delivery_lng] float,\n[orv_delivery_placeid] nvarchar(4000),\n[orv_delivery_what3words] nvarchar(4000),\n[orv_delivery_zipcode] nvarchar(4000),\n[orv_delivery_eta] datetime2(7),\n[orv_delivery_actualeta] datetime2(7),\n[orv_delivery_deliverydate] datetime2(7),\n[orv_delivery_deliverby] datetime2(7),\n[orv_delivery_deliveryorder] int,\n[orv_delivery_tsgeofenceenter] datetime2(7),\n[orv_delivery_tsscanningstart] datetime2(7),\n[orv_delivery_tsscanningstop] datetime2(7),\n[orv_delivery_tspodsignature] datetime2(7),\n[orv_delivery_aid] bigint,\n[orv_delivery_numprcls] int,\n[orv_delivery_geocodingstatus] nvarchar(4000),\n[orv_delivery_skipdate] datetime2(7),\n[orv_delivery_skipreason] nvarchar(4000),\n[orv_delivery_status] nvarchar(4000),\n[orv_delivery_partialmatch] int,\n[orv_delivery_approximated] int,\n[orv_delivery_lmsorder] int,\n[orv_delivery_optimizedorder] int,\n[orv_delivery_seal] nvarchar(4000),\n[orv_delivery_customerinvoice] int,\n[orv_delivery_customerdn] int,\n[orv_delivery_grv] nvarchar(4000),\n[orv_delivery_chepslip] int,\n[orv_delivery_cleandelivery] int,\n[orv_delivery_trackingcode] nvarchar(4000),\n[orv_delivery_mode] nvarchar(4000),\n[orv_delivery_customorder] int,\n[orv_delivery_verified] int,\n[orv_delivery_altered] int,\n[orv_delivery_orderid] int,\n[orv_delivery_mergeid] bigint,\n[orv_delivery_orderref] nvarchar(4000),\n[orv_delivery_drivernote] nvarchar(4000),\n[orv_delivery_timedefinite] int,\n[orv_delivery_orvcode] int,\n[orv_delivery_vaid] bigint,\n[orv_delivery_delegatedate] datetime2(7),\n[orv_delivery_delegatemode] nvarchar(4000),\n[orv_delivery_debriefmode] nvarchar(4000),\n[orv_delivery_debriefed] int,\n[orv_delivery_insdate] datetime2(7),\n[orv_delivery_reviseddebrief] int,\n[orv_delivery_lmsdebriefed] int,\n[orv_delivery_uncanceldate] datetime2(7),\n[orv_delivery_podlaterdate] datetime2(7),\n[orv_delivery_podmanualdate] datetime2(7),\n[orv_delivery_manualdebriefreason] nvarchar(4000),\n[orv_delivery_submanualdebriefreason] nvarchar(4000),\n[orv_delivery_outofgeofencereason] nvarchar(4000),\n[orv_delivery_tsentergeofenceapp] datetime2(7),\n[orv_delivery_tsexitgeofenceapp] datetime2(7),\n[orv_delivery_comebacklater] bigint,\n[orv_delivery_uncancelusername] nvarchar(4000),\n[orv_delivery_cref] int,\n[orv_delivery_division] int,\n[orv_delivery_descriptionofgoods] nvarchar(4000),\n[orv_delivery_skiplng] float,\n[orv_delivery_skiplat] float,\n[orv_delivery_courierid] bigint,\n[orv_delivery_posreason] nvarchar(4000),\n[orv_delivery_moddate] datetime2(7),\n[orv_delivery_mallid] int,\n[orv_delivery_mallgid] bigint,\n[orv_delivery_lmsidskipreason] bigint,\n[orv_delivery_deleteforimport] int,\n[orv_delivery_podoutofgeofence] int,\n[orv_delivery_originalcustomerid] bigint,\n[orv_originalcustomer_id] bigint,\n[orv_originalcustomer_name] nvarchar(4000),\n[orv_mall_id] bigint,\n[orv_mall_mallname] nvarchar(4000),\n[orv_mall_branchname] nvarchar(4000),\n[orv_mall_gpretailer] nvarchar(4000),\n[orv_mall_highvoldelivery] nvarchar(4000),\n[orv_mall_stripmall] nvarchar(4000),\n[orv_mall_standalonestore] nvarchar(4000),\n[orv_mall_streetsidestore] nvarchar(4000),\n[orv_mall_dedicatedrouted] nvarchar(4000),\n[orv_mall_insdate] datetime2(7),\n[orv_mall_address] nvarchar(4000),\n[orv_mall_deleted] int,\n[orv_mall_lat] float,\n[orv_mall_lng] float,\n\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstwaybill.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTWaybill\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_SSTWaybillsPerParcel')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Semi Structured Schema on Read/OPS"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.F_SSTWaybillsPerParcel') )\n    DROP EXTERNAL TABLE dbo.F_SSTWaybillsPerParcel\nGO\n\nIF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_SSTWaybillsPerParcel') )\n    DROP EXTERNAL TABLE dbo.T_SSTWaybillsPerParcel\nGO\n\n\nCREATE EXTERNAL TABLE dbo.T_SSTWaybillsPerParcel (\n\t[lms_waybillsperparcel_parcelid] int,\n    [lms_waybillsperparcel_waybillid] int,\n    [lms_waybillsperparcel_loadid] int\n\t)\n\tWITH (\n\tLOCATION = 'Semi Structured Data/OPS/sstwaybillsperparcel.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_SSTWaybillsPerParcel\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SemiSTOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STBooking')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STBooking') )\n    DROP EXTERNAL TABLE dbo.T_STBooking\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STBooking (\n    [tms_booking_id] bigint,\n    [tms_booking_allocatedby] bigint,\n    [tms_booking_allocateddate] datetime2(7),\n    [tms_booking_assetreleasedate] datetime2(7),\n    [tms_booking_billingmethod] nvarchar(4000),\n    [tms_booking_billingstatus] nvarchar(4000),\n    [tms_booking_convertedbookingid] bigint,\n    [tms_booking_cargoweight] float,\n    [tms_booking_customerid] bigint,\n    [tms_booking_childcustomerid] bigint,\n    [tms_booking_insby] bigint,\n    [tms_booking_insbyname] nvarchar(4000),\n    [tms_booking_cref1] nvarchar(4000),\n    [tms_booking_cref2] nvarchar(4000),\n    [tms_booking_cubicvolume] float,\n    [tms_booking_customeragreedrate] bigint,\n    [tms_booking_customerrate] bigint,\n    [tms_booking_deliverydate] datetime2(7),\n    [tms_booking_directbooking] int,\n    [tms_booking_dispatchdate] datetime2(7),\n    [tms_booking_docdate] datetime2(7),\n    [tms_booking_docstatus] nvarchar(4000),\n    [tms_booking_emailrequester] nvarchar(4000),\n    [tms_booking_frombranch] nvarchar(4000),\n    [tms_booking_frombranchid] bigint,\n    [tms_booking_insdate] datetime2(7),\n    [tms_booking_invoiceddate] datetime2(7),\n    [tms_booking_invoiceid] bigint,\n    [tms_booking_legacyid] bigint,\n    [tms_booking_local] int,\n    [tms_booking_manifests] nvarchar(4000),\n    [tms_booking_moddate] datetime2(7),\n    [tms_booking_note] nvarchar(4000),\n    [tms_booking_opsrouteid] bigint,\n    [tms_booking_opsroutename] nvarchar(4000),\n    [tms_booking_originalpod] int,\n    [tms_booking_pickupdate] datetime2(7),\n    [tms_booking_ponumber] nvarchar(4000),\n    [tms_booking_routeid] bigint,\n    [tms_booking_routename] nvarchar(4000),\n    [tms_booking_status] nvarchar(4000),\n    [tms_booking_thirdpartyagreedrate] bigint,\n    [tms_booking_thirdpartydriverflag] int,\n    [tms_booking_thirdpartyid] bigint,\n    [tms_booking_thirdpartyrate] bigint,\n    [tms_booking_thirdpartyreason] nvarchar(4000),\n    [tms_booking_thirdpartytrailerflag] int,\n    [tms_booking_thirdpartyvehicleflag] int,\n    [tms_booking_tobranch] nvarchar(4000),\n    [tms_booking_tobranchid] bigint,\n    [tms_booking_trailersize] nvarchar(4000),\n    [tms_booking_trailertype] nvarchar(4000),\n    [tms_booking_transporter] nvarchar(4000),\n    [tms_booking_tripid] bigint,\n    [tms_booking_reason] nvarchar(4000),\n    [tms_booking_source] nvarchar(4000),\n    [tms_booking_type] nvarchar(4000),\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stbooking.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STBooking \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STConsignment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STConsignment') )\n    DROP EXTERNAL TABLE dbo.T_STConsignment\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STConsignment (\n[lms_consignment_id] int,\n[lms_consignment_cref] nvarchar(4000),\n[lms_consignment_cdate] datetime2(7),\n[lms_consignment_userid] int,\n[lms_consignment_appointment] datetime2(7),\n[lms_consignment_deliverby] datetime2(7),\n[lms_consignment_deliverbyoriginal] datetime2(7),\n[lms_consignment_custaccid] int,\n[lms_consignment_billcust] int,\n[lms_consignment_delivercustid] int,\n[lms_consignment_inservicereasonid] int,\n[lms_consignment_inservicecomment] nvarchar(4000),\n[lms_consignment_lastupdate] datetime2(7),\n[lms_consignment_collectid] int,\n[lms_consignment_delivertypeid] int,\n[lms_consignment_billtypeid] int,\n[lms_consignment_loadid] int,\n[lms_parcelbyconsignment_aggrweight] numeric(36,8),\n[lms_parcelbyconsignment_aggrchargeweight] numeric(36,8),\n[lms_parcelbyconsignment_aggrvolweight] numeric(36,8),\n[lms_parcelbyconsignment_aggrvolumiserweight] numeric(36,8),\n[lms_parcelbyconsignment_aggrmaxweight] numeric(36,8),\n[lms_parcelbyconsignment_aggrnoparcels] bigint,\n[lms_parcelbyconsignment_aggrweightexclspecdel] numeric(36,8),\n[lms_parcelbyconsignment_aggrchargeweightexclspecdel] numeric(36,8),\n[lms_parcelbyconsignment_aggrvolweightexclspecdel] numeric(36,8),\n[lms_parcelbyconsignment_aggrvolumiserweightexclspecdel] numeric(36,8),\n[lms_parcelbyconsignment_aggrmaxweightexclspecdel] numeric(36,8),\n[lms_parcelbyconsignment_aggrnoparcelsexclspecdel] bigint,\n[lms_billconsignmentr_id] int,\n[lms_billconsignmentr_consignid] int,\n[lms_billconsignmentr_updatedate] datetime2(7),\n[lms_billconsignmentr_pickuprouteid] int,\n[lms_billconsignmentr_deliverrouteid] int,\n[lms_billconsignmentr_chargeweight] numeric(36,8),\n[lms_billconsignmentr_noofparcels] int,\n[lms_billconsignmentr_tripdistance] numeric(36,8),\n[lms_billconsignmentr_consignmentvalue] numeric(36,8),\n[lms_billconsignmentr_billcust] int,\n[lms_billconsignmentr_redflag] int,\n[lms_billconsignmentr_updind] int,\n[lms_billconsignmentr_servicetypeid] int,\n[lms_billconsignmentr_routemissingind] int,\n[lms_billconsignmentr_chargescalcind] int,\n[lms_billconsignmentr_cdate1] datetime2(7),\n[lms_billconsignmentr_invalidpcode] int,\n[lms_billconsignmentr_programno] int,\n[lms_billconsignmentr_totrate] numeric(36,8),\n[lms_billconsignmentr_routecharge] numeric(36,8),\n[lms_billconsignmentr_minweight] numeric(36,8),\n[lms_billconsignmentr_minrate] numeric(36,8),\n[lms_billconsignmentr_corderno] nvarchar(4000),\n[lms_billconsignmentr_custref] nvarchar(4000),\n[lms_billconsignmentr_manualupdateflag] int,\n[lms_billconsignmentr_prevbillcustid] int,\n[lms_billconsignmentr_specdelvehicleid] int,\n[lms_billconsignmentr_specdelmissingrouteflag] int,\n[lms_billconsignmentr_overborderflag] int,\n[lms_billconsignmentr_samedeliverid] int,\n[lms_billconsignmentr_combineroutecharge] numeric(36,8),\n[lms_billconsignmentr_waybillid] int,\n[lms_billconsignmentr_routelinecount] int,\n[lms_billconsignmentr_samedelcount] int,\n[lms_billconsignmentr_aweight] numeric(36,8),\n[lms_billconsignmentr_vweight] numeric(36,8),\n[lms_billconsignmentr_custref3] nvarchar(4000),\n[lms_billconsignmentr_units] int,\n[lms_billconsignmentr_totsurcharges] numeric(36,8),\n[lms_billconsignmentr_noofpallets] int,\n[lms_billconsignmentr_invalidpudel] int,\n[lms_billconsignmentr_sharikaflag] int,\n[lms_billconsignmentr_sapid] int,\n[lms_billconsignmentr_totfuelsurcharge] numeric(36,8),\n[lms_billconsignmentr_totdocsurcharge] numeric(36,8),\n[lms_billconsignmentr_totothersurcharge] numeric(36,8),\n[lms_billconsignmentr_specdel] int,\n[lms_billconsignmentr_quoteflag] int,\n[lms_billconsignmentr_billperiod] nvarchar(4000),\n[lms_billconsignmentr_billweekr] int,\n[lms_billconsignmentr_billperiodflag] int,\n[lms_billconsignmentr_surhargeflag] int,\n[lms_billconsignmentr_recalcflag] int,\n[lms_billconsignmentr_quotemissingflag] int,\n[lms_billconsignmentr_delivertypeid] int,\n[lms_billconsignmentr_totcovidsurcharge] numeric(36,8),\n[lms_consignment_maxpoddate] datetime2(7),\n[lms_consignment_inserviceflag] int,\n[lms_consignment_actualleaddaysstartdate] datetime2(7),\n[lms_consignment_actualleaddaysenddate] datetime2(7),\n[lms_consignment_actualleaddays] float,\n[lms_consignment_actualleaddaysinclwe] float,\n[lms_consignment_cdateroundup] datetime2(7),\n[lms_consignment_age] nvarchar(4000),\n[consignagedifferenceinseconds] int,\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stconsignment.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STConsignment \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STConsignment_3MYoY')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STConsignment_3MYoY') )\n    DROP EXTERNAL TABLE dbo.T_STConsignment_3MYoY\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STConsignment_3MYoY (\n[lms_consignment_id] int,\n[lms_consignment_cref] nvarchar(4000),\n[lms_consignment_cdate] datetime2(7),\n[lms_consignment_userid] int,\n[lms_consignment_appointment] datetime2(7),\n[lms_consignment_deliverby] datetime2(7),\n[lms_consignment_deliverbyoriginal] datetime2(7),\n[lms_consignment_custaccid] int,\n[lms_consignment_billcust] int,\n[lms_consignment_delivercustid] int,\n[lms_consignment_inservicereasonid] int,\n[lms_consignment_inservicecomment] nvarchar(4000),\n[lms_consignment_lastupdate] datetime2(7),\n[lms_consignment_collectid] int,\n[lms_consignment_delivertypeid] int,\n[lms_consignment_billtypeid] int,\n[lms_consignment_loadid] int,\n[lms_parcelbyconsignment_aggrweight] numeric(36,8),\n[lms_parcelbyconsignment_aggrchargeweight] numeric(36,8),\n[lms_parcelbyconsignment_aggrvolweight] numeric(36,8),\n[lms_parcelbyconsignment_aggrvolumiserweight] numeric(36,8),\n[lms_parcelbyconsignment_aggrmaxweight] numeric(36,8),\n[lms_parcelbyconsignment_aggrnoparcels] bigint,\n[lms_parcelbyconsignment_aggrweightexclspecdel] numeric(36,8),\n[lms_parcelbyconsignment_aggrchargeweightexclspecdel] numeric(36,8),\n[lms_parcelbyconsignment_aggrvolweightexclspecdel] numeric(36,8),\n[lms_parcelbyconsignment_aggrvolumiserweightexclspecdel] numeric(36,8),\n[lms_parcelbyconsignment_aggrmaxweightexclspecdel] numeric(36,8),\n[lms_parcelbyconsignment_aggrnoparcelsexclspecdel] bigint,\n[lms_billconsignmentr_id] int,\n[lms_billconsignmentr_consignid] int,\n[lms_billconsignmentr_updatedate] datetime2(7),\n[lms_billconsignmentr_pickuprouteid] int,\n[lms_billconsignmentr_deliverrouteid] int,\n[lms_billconsignmentr_chargeweight] numeric(36,8),\n[lms_billconsignmentr_noofparcels] int,\n[lms_billconsignmentr_tripdistance] numeric(36,8),\n[lms_billconsignmentr_consignmentvalue] numeric(36,8),\n[lms_billconsignmentr_billcust] int,\n[lms_billconsignmentr_redflag] int,\n[lms_billconsignmentr_updind] int,\n[lms_billconsignmentr_servicetypeid] int,\n[lms_billconsignmentr_routemissingind] int,\n[lms_billconsignmentr_chargescalcind] int,\n[lms_billconsignmentr_cdate1] datetime2(7),\n[lms_billconsignmentr_invalidpcode] int,\n[lms_billconsignmentr_programno] int,\n[lms_billconsignmentr_totrate] numeric(36,8),\n[lms_billconsignmentr_routecharge] numeric(36,8),\n[lms_billconsignmentr_minweight] numeric(36,8),\n[lms_billconsignmentr_minrate] numeric(36,8),\n[lms_billconsignmentr_corderno] nvarchar(4000),\n[lms_billconsignmentr_custref] nvarchar(4000),\n[lms_billconsignmentr_manualupdateflag] int,\n[lms_billconsignmentr_prevbillcustid] int,\n[lms_billconsignmentr_specdelvehicleid] int,\n[lms_billconsignmentr_specdelmissingrouteflag] int,\n[lms_billconsignmentr_overborderflag] int,\n[lms_billconsignmentr_samedeliverid] int,\n[lms_billconsignmentr_combineroutecharge] numeric(36,8),\n[lms_billconsignmentr_waybillid] int,\n[lms_billconsignmentr_routelinecount] int,\n[lms_billconsignmentr_samedelcount] int,\n[lms_billconsignmentr_aweight] numeric(36,8),\n[lms_billconsignmentr_vweight] numeric(36,8),\n[lms_billconsignmentr_custref3] nvarchar(4000),\n[lms_billconsignmentr_units] int,\n[lms_billconsignmentr_totsurcharges] numeric(36,8),\n[lms_billconsignmentr_noofpallets] int,\n[lms_billconsignmentr_invalidpudel] int,\n[lms_billconsignmentr_sharikaflag] int,\n[lms_billconsignmentr_sapid] int,\n[lms_billconsignmentr_totfuelsurcharge] numeric(36,8),\n[lms_billconsignmentr_totdocsurcharge] numeric(36,8),\n[lms_billconsignmentr_totothersurcharge] numeric(36,8),\n[lms_billconsignmentr_specdel] int,\n[lms_billconsignmentr_quoteflag] int,\n[lms_billconsignmentr_billperiod] nvarchar(4000),\n[lms_billconsignmentr_billweekr] int,\n[lms_billconsignmentr_billperiodflag] int,\n[lms_billconsignmentr_surhargeflag] int,\n[lms_billconsignmentr_recalcflag] int,\n[lms_billconsignmentr_quotemissingflag] int,\n[lms_billconsignmentr_delivertypeid] int,\n[lms_billconsignmentr_totcovidsurcharge] numeric(36,8),\n[lms_consignment_maxpoddate] datetime2(7),\n[lms_consignment_inserviceflag] int,\n[lms_consignment_actualleaddaysstartdate] datetime2(7),\n[lms_consignment_actualleaddaysenddate] datetime2(7),\n[lms_consignment_actualleaddays] float,\n[lms_consignment_actualleaddaysinclwe] float,\n[lms_consignment_cdateroundup] datetime2(7),\n[lms_consignment_age] nvarchar(4000),\n[consignagedifferenceinseconds] int,\n\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stconsignment3myoy.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STConsignment_3MYoY \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STConsignment_CY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STConsignment_CY3Month') )\n    DROP VIEW dbo.T_STConsignment_CY3Month\nGO\n\nCREATE VIEW [dbo].[T_STConsignment_CY3Month]\n\nAS \n\nWITH CTE AS (\n\nSELECT lms_parcel_consignid as lms_consignment_id \nFROM dbo.T_STParcel \nWHERE lms_parcel_pdate >= DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0))\nAND lms_parcel_pdate <= DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7))))\n\nUNION\n\nSELECT lms_consignment_id \nFROM dbo.T_STConsignment \nWHERE lms_consignment_cdate >= DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0))\nAND lms_consignment_cdate <= DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7))))\n\n)\n\nSELECT \nC.*\nFROM CTE \nLEFT JOIN dbo.T_STConsignment C on C.lms_Consignment_id  = CTE.lms_Consignment_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STConsignment_PY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STConsignment_PY3Month') )\n    DROP VIEW dbo.T_STConsignment_PY3Month\nGO\n\nCREATE VIEW [dbo].[T_STConsignment_PY3Month]\n\nAS \n\nWITH CTE AS (\n\nSELECT lms_parcel_consignid as lms_consignment_id \nFROM dbo.T_STParcel \nWHERE lms_parcel_pdate >= DATEADD(yy,-1,DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0)))\nAND lms_parcel_pdate <= DATEADD(yy,-1,DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7)))))\n\nUNION\n\nSELECT lms_consignment_id \nFROM dbo.T_STConsignment \nWHERE lms_consignment_cdate >= DATEADD(yy,-1,DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0)))\nAND lms_consignment_cdate <= DATEADD(yy,-1,DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7)))))\n\n)\n\nSELECT \nC.*\nFROM CTE \nLEFT JOIN dbo.T_STConsignment C on C.lms_consignment_id  = CTE.lms_consignment_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STDCTransfer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STDCTransfer') )\n    DROP EXTERNAL TABLE dbo.T_STDCTransfer\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STDCTransfer (\n    [lms_dctransfer_id] int,\n    [lms_dctransfer_destinationstoreid] nvarchar(4000),\n    [lms_dctransfer_transfercode] nvarchar(4000),\n    [lms_dctransfer_audittype] nvarchar(4000),\n    [lms_dctransfer_qty] int,\n    [lms_dctransfer_dc_prepackid] int,\n    [lms_dctransfer_acceptancedate] datetime2(7),\n    [lms_dctransfer_auditflag] int,\n    [lms_dctransfer_audituserid] int,\n    [lms_dctransfer_auditlocid] int,\n    [lms_dctransfer_counted] int,\n    [lms_dctransfer_damagecount] int,\n    [lms_dctransfer_uploaded] int,\n    [lms_dctransfer_dc_torderid] int,\n    [lms_dctransfer_duedate] datetime2(7),\n    [lms_dctransfer_destinationlocationcode] nvarchar(4000),\n    [lms_dctransfer_destinationlocationtypecode] nvarchar(4000),\n    [lms_dctransfer_processfamilycode] nvarchar(4000),\n    [lms_dctransfer_grnversion] int\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdctransfer.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STDCTransfer \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STDocuments')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STDocuments') )\n    DROP EXTERNAL TABLE dbo.T_STDocuments\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STDocuments (\n\n\t[sap_documentsheader_docentry] int,\n\t[sap_documentsheader_docnum] int,\n\t[sap_documentsheader_doctype] nvarchar(4000),\n\t[sap_documentsheader_objtype] nvarchar(4000),\n\t[sap_documentsheader_postingdate] datetime2(7),\n\t[sap_documentsheader_duedate] datetime2(7),\n\t[sap_documentsheader_cardcode] nvarchar(4000),\n\t[sap_documentsheader_cardref] nvarchar(4000),\n\t[sap_documentsheader_discprcnt] numeric(18,2),\n\t[sap_documentsheader_discsum] numeric(18,2),\n\t[sap_documentsheader_doctotal] numeric(18,2),\n\t[sap_documentsheader_comments] nvarchar(4000),\n\t[sap_documentsheader_transid] int,\n\t[sap_documentsheader_u_expense_depot] nvarchar(4000),\n\t[sap_documentsline_linenum] int,\n\t[sap_documentsline_linestatus] nvarchar(4000),\n\t[sap_documentsline_itemcode] nvarchar(4000),\n\t[sap_documentsline_dscription] nvarchar(4000),\n\t[sap_documentsline_quantity] numeric(18,2),\n\t[sap_documentsline_openqty] numeric(18,2),\n\t[sap_documentsline_price] numeric(18,2),\n\t[sap_documentsline_rate] numeric(18,2),\n\t[sap_documentsline_discprcnt] numeric(18,2),\n\t[sap_documentsline_linetotal] numeric(18,2),\n\t[sap_documentsline_opensum] numeric(18,2),\n\t[sap_documentsline_pricebefdi] numeric(18,2),\n\t[sap_documentsline_docdate] datetime2(7),\n\t[sap_documentsline_project] nvarchar(4000),\n\t[sap_documentsline_vatprcnt] numeric(18,2),\n\t[sap_documentsline_vatgroup] nvarchar(4000),\n\t[sap_documentsline_vatamount] numeric(18,2),\n\t[sap_documentsline_u_reason] nvarchar(4000),\n\t[sap_documentsline_u_expenseitem] nvarchar(4000),\n\t[sap_documentsline_u_fueldate] datetime2(7),\n\t[sap_documentsline_acctcode] nvarchar(4000),\n\t[sap_documentsline_doccat] nvarchar(4000),\n\t[sap_documentsline_subdepotcode] nvarchar(4000),\n\t[sap_documentsline_u_rate] nvarchar(4000),\n\t[sap_documentsline_u_ir_number] int,\n\t[sap_documentsline_discsum] numeric(18,2),\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/stdocuments.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STDocuments \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STDriverPayItem')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STDriverPayItem') )\n    DROP EXTERNAL TABLE dbo.T_STDriverPayItem\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STDriverPayItem (\n    [tms_driverpayitem_id] bigint,\n    [tms_driverpayitem_driverid] nvarchar(4000),\n    [tms_driverpayitem_tripid] bigint,\n    [tms_driverpayitem_triprate] int,\n    [tms_driverpayitem_mealrate] int,\n    [tms_driverpayitem_sleepoverrate] int,\n    [tms_driverpayitem_airtimerate] int,\n    [tms_driverpayitem_linkrate] int,\n    [tms_driverpayitem_totalrate] int,\n    [tms_driverpayitem_routeid] bigint,\n    [tms_driverpayitem_routename] nvarchar(4000),\n    [tms_driverpayitem_insdate] datetime2(7),\n    [tms_driverpayitem_moddate] datetime2(7),\n    [tms_driverpayitem_horse] nvarchar(4000),\n    [tms_driverpayitem_trailers] nvarchar(4000),\n    [tms_driverpayitem_linkused] int,\n    [tms_driverpayitem_manualadjustment] int,\n    [tms_driverpayitem_editby] bigint,\n    [tms_driverpayitem_drivername] nvarchar(4000),\n    [tms_driverpayitem_dispatchdate] datetime2(7),\n    [tms_driverpayitem_bookings] nvarchar(4000),\n    [tms_driverpayitem_employeecode] nvarchar(4000),\n    [tms_driverpayitem_originatedfrom] nvarchar(4000),\n    [tms_driverpayitem_reportid] bigint,\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stdriverpayitem.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STDriverPayItem \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STEndorsments')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STEndorsments') )\n    DROP EXTERNAL TABLE dbo.T_STEndorsments\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STEndorsments (\n\t[lms_db_endorsement_id] int,\n\t[lms_db_endorsement_description] nvarchar(4000),\n\t[lms_wbendorsement_id] int,\n\t[lms_wbendorsement_barcode] nvarchar(4000),\n\t[lms_wbendorsement_waybillid] int,\n\t[orv_claim_id] bigint,\n\t[orv_claim_delid] bigint,\n\t[orv_claim_claimtype] nvarchar(4000),\n\t[orv_claim_claimdate] datetime2(7),\n\t[orv_claim_did] bigint,\n\t[orv_claim_parcelid] bigint,\n\t[orv_claim_barcode] nvarchar(4000),\n\t[orv_claim_attachid] bigint,\n\t[orv_claim_note] nvarchar(4000)\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stendorsments.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STEndorsments \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STFinanceData')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STFinanceData') )\n    DROP EXTERNAL TABLE dbo.T_STFinanceData\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STFinanceData (\n    [tms_financedata_id] bigint,\n    [tms_financedata_bookingid] bigint,\n    [tms_financedata_insdate] datetime2(7),\n    [tms_financedata_peaksurchagrebuy] bigint,\n    [tms_financedata_peaksurchagresell] bigint,\n    [tms_financedata_manualentryroadhaulsell] bigint,\n    [tms_financedata_manualentryahocsell] bigint,\n    [tms_financedata_systemfuellevy] bigint,\n    [tms_financedata_systemratefuellevy] bigint,\n    [tms_financedata_systemratefuelexlevy] bigint,\n    [tms_financedata_systemratefuelinclevy] bigint,\n    [tms_financedata_systemsellrate] bigint,\n    [tms_financedata_totalsellrate] bigint,\n    [tms_financedata_moddate] datetime2(7),\n    [tms_financedata_totalbuyrate] bigint,\n    [tms_financedata_rateprofileid] bigint\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stfinancedata.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STFinanceData \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STInstruction')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STInstruction') )\n    DROP EXTERNAL TABLE dbo.T_STInstruction\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STInstruction (\n[tms_instruction_id] bigint,\n[tms_instruction_bookingid] bigint,\n[tms_instruction_addressid] bigint,\n[tms_instruction_instrtype] nvarchar(4000),\n[tms_instruction_onroute] int,\n[tms_instruction_onrouteid] bigint,\n[tms_instruction_sort] int,\n[tms_instruction_onroutestatus] nvarchar(4000),\n[tms_instruction_note] nvarchar(4000),\n[tms_instruction_citybranchid] bigint,\n[tms_instruction_citybranchname] nvarchar(4000),\n[tms_instruction_insdate] datetime2(7),\n[tms_instruction_moddate] datetime2(7),\n[tms_instruction_insby] bigint,\n[tms_instruction_bookingpickupdeliverydate] datetime2(7),\n[orv_lhdelivery_id] bigint,\n[orv_lhdelivery_did] bigint,\n[orv_lhdelivery_lat] float,\n[orv_lhdelivery_lng] float,\n[orv_lhdelivery_actualeta] datetime2(7),\n[orv_lhdelivery_eta] datetime2(7),\n[orv_lhdelivery_tsgeofenceenter] datetime2(7),\n[orv_lhdelivery_tsdocuments] datetime2(7),\n[orv_lhdelivery_customerref1] nvarchar(4000),\n[orv_lhdelivery_customerref2] nvarchar(4000),\n[orv_lhdelivery_trailersize] nvarchar(4000),\n[orv_lhdelivery_cargoweight] float,\n[orv_lhdelivery_cubicvolume] float,\n[orv_lhdelivery_geocodingstatus] nvarchar(4000),\n[orv_lhdelivery_status] nvarchar(4000),\n[orv_lhdelivery_optimizedorder] int,\n[orv_lhdelivery_triporder] int,\n[orv_lhdelivery_sequence] int,\n[orv_lhdelivery_bookingid] bigint,\n[orv_lhdelivery_grv] int,\n[orv_lhdelivery_chepslip] int,\n[orv_lhdelivery_type] nvarchar(4000),\n[orv_lhdelivery_insdate] datetime2(7),\n[orv_lhdelivery_isdirect] int,\n[orv_lhdelivery_notes] nvarchar(4000),\n[orv_lhdelivery_contactperson] nvarchar(4000),\n[orv_lhdelivery_contactnumber] nvarchar(4000),\n[orv_lhdelivery_trailerfleetcode] nvarchar(4000),\n[orv_lhdelivery_primarycustomerid] bigint,\n[orv_lhdelivery_pcustomername] nvarchar(4000),\n[orv_lhdelivery_pcustomeraccountnumber] nvarchar(4000),\n[orv_lhdelivery_pcustomerrevenuecode] nvarchar(4000),\n[orv_lhdelivery_secondarycustomerid] bigint,\n[orv_lhdelivery_scustomername] nvarchar(4000),\n[orv_lhdelivery_scustomeraccountnumber] nvarchar(4000),\n[orv_lhdelivery_scustomerrevenuecode] nvarchar(4000),\n[orv_lhdelivery_actiondate] datetime2(7),\n[orv_lhdelivery_tsgeofenceexit] datetime2(7),\n[orv_lhdelivery_pctmsid] bigint,\n[orv_lhdelivery_sctmsid] bigint,\n[orv_lhdelivery_customorder] int,\n[orv_lhdelivery_skipdate] datetime2(7),\n[orv_lhdelivery_skipreason] nvarchar(4000),\n[orv_lhdelivery_outofgeofencereason] nvarchar(4000),\n[orv_lhdelivery_tsarrivedcustomer] datetime2(7),\n[orv_lhdelivery_tsdroppedoff] datetime2(7),\n[orv_lhdelivery_tsstartoffloading] datetime2(7),\n[orv_lhdelivery_tsstartloading] datetime2(7),\n[orv_lhdelivery_tsloaded] datetime2(7),\n[orv_lhdelivery_tsfinishedoffloading] datetime2(7),\n[orv_lhdelivery_tsdocumnetshanddovedriver] datetime2(7),\n[orv_lhdelivery_tsleavingcustomer] datetime2(7),\n[orv_lhdelivery_actionsubtype] nvarchar(4000),\n[orv_lhdelivery_tsstart] datetime2(7),\n[orv_lhdelivery_signame] nvarchar(4000),\n[orv_lhdelivery_signcomment] nvarchar(4000),\n[orv_lhdelivery_signdate] datetime2(7),\n[orv_lhdelivery_tsendtate] datetime2(7),\n[orv_lhdelivery_tsentergeofenceapp] datetime2(7),\n[orv_lhdelivery_tsexitgeofenceapp] datetime2(7),\n[orv_lhdelivery_tmsid] bigint,\n[orv_lhdelivery_subtype] nvarchar(4000),\n[orv_lhdelivery_needbotrailerver] int,\n[orv_lhdelivery_secondtrailerfleetcode] nvarchar(4000),\n[orv_lhdelivery_trailerverlat] float,\n[orv_lhdelivery_trailerverlng] float,\n[orv_lhdelivery_tstrailerver] bigint,\n[orv_lhdelivery_podlat] float,\n[orv_lhdelivery_podlng] float,\n[orv_lhdelivery_skiplat] float,\n[orv_lhdelivery_skiplng] float,\n[orv_lhdelivery_uncanceldate] datetime2(7),\n[tms_instruction_inputpickupduration] bigint,\n[tms_instruction_loadingduration] bigint,\n[tms_instruction_geopickupduration] bigint,\n[tms_instruction_actionpickupduration] bigint,\n[tms_instruction_inservice] nvarchar(4000),\n[tms_instruction_driverinputservice] nvarchar(4000),\n[tms_instruction_geofenceservice] nvarchar(4000),\n\n\n\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stinstruction.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STInstruction \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STInvoice')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STInvoice') )\n    DROP EXTERNAL TABLE dbo.T_STInvoice\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STInvoice (\n    [tms_invoice_id] bigint,\n    [tms_invoice_customerid] bigint,\n    [tms_invoice_invoicedate] datetime2(7),\n    [tms_invoice_reference] nvarchar(4000),\n    [tms_invoice_status] nvarchar(4000),\n    [tms_invoice_insby] bigint,\n    [tms_invoice_insdate] datetime2(7),\n    [tms_invoice_total] bigint,\n    [tms_invoice_vat] bigint,\n    [tms_invoice_invoicenum] nvarchar(4000),\n    [tms_invoice_opaqueid] nvarchar(4000),\n    [tms_invoice_sapstatus] nvarchar(4000),\n    [tms_invoice_sapid] nvarchar(4000),\n    [tms_invoice_sendsapdate] datetime2(7),\n    [tms_invoice_legacyid] bigint,\n    [tms_invoice_customercode] nvarchar(4000),\n    [tms_invoice_revennuecode] nvarchar(4000),\n    [tms_invoice_depotcode] nvarchar(4000),\n    [tms_invoiceitem_id] bigint,\n    [tms_invoiceitem_invoiceid] bigint,\n    [tms_invoiceitem_bookingid] bigint,\n    [tms_invoiceitem_amount] bigint,\n    [tms_invoiceitem_vat] bigint,\n    [tms_invoiceitem_linetotal] bigint,\n    [tms_invoiceitem_insdate] datetime2(7),\n    [tms_invoiceitem_moddate] datetime2(7),\n    [tms_invoiceitem_insby] bigint,\n    [tms_invoiceitem_linenum] int,\n    [tms_invoiceitem_legacyid] bigint,\n    [tms_invoiceitem_sapid] int,\n    [tms_invoiceitem_vatable] int,\n    [tms_invoiceitem_routeid] bigint,\n    [tms_invoiceitem_routename] nvarchar(4000),\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stinvoice.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STInvoice \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STKMsandLTs')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STKMsandLTs') )\n    DROP EXTERNAL TABLE dbo.T_STKMsandLTs\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STKMsandLTs (\n[excel_kmsandlts_registrationnumber] nvarchar(4000),\n[excel_kmsandlts_fleetcode] nvarchar(4000),\n[excel_kmsandlts_date] date,\n[excel_kmsandlts_time] nvarchar(4000),\n[excel_kmsandlts_fuelcompany] nvarchar(4000),\n[excel_kmsandlts_voucherno] nvarchar(4000),\n[excel_kmsandlts_fuelstation] nvarchar(4000),\n[excel_kmsandlts_previousodo] int,\n[excel_kmsandlts_odo] int,\n[excel_kmsandlts_tripkm] int,\n[excel_kmsandlts_consumptionper100kms] numeric(18,2),\n[excel_kmsandlts_consumptionperunit] numeric(18,2),\n[excel_kmsandlts_ltsloss] numeric(18,2),\n[excel_kmsandlts_randsloss] numeric(18,2),\n[excel_kmsandlts_triplts] float,\n[excel_kmsandlts_priceperunit] numeric(18,2),\n[excel_kmsandlts_fuelamount] numeric(18,2),\n[excel_kmsandlts_pickuptype] nvarchar(4000),\n[excel_kmsandlts_account] nvarchar(4000),\n[excel_kmsandlts_costcentre] nvarchar(4000),\n[excel_kmsandlts_division] nvarchar(4000),\n[excel_kmsandlts_make] nvarchar(4000),\n[excel_kmsandlts_range] nvarchar(4000),\n[excel_kmsandlts_model] nvarchar(4000),\n[excel_kmsandlts_consumptionexpected] numeric(18,2),\n\n)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/stkmsandlts.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t);\n\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STKMsandLTs\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLMSActivityDetail')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STLMSActivityDetail') )\n    DROP EXTERNAL TABLE dbo.T_STLMSActivityDetail\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STLMSActivityDetail (\n[lms_activity_transid] int,\n[lms_activity_date] date,\n[lms_activity_billcustid] int,\n[lms_activity_billcustname] nvarchar(4000),\n[lms_activity_movementtype] nvarchar(4000),\n[lms_activity_linehualbookingid] nvarchar(4000),\n[lms_activity_location] nvarchar(4000),\n[lms_activity_aggrweight] numeric(18,2),\n[lms_activity_aggrchargeweight] numeric(18,2),\n[lms_activity_aggrvolweight] numeric(18,2),\n[lms_activity_aggrvolumiserweight] numeric(18,2),\n[lms_activity_aggrmaxweight] numeric(18,2),\n[lms_activity_aggrnoparcels] bigint,\n[lms_activity_aggrweightexclspecdel] numeric(18,2),\n[lms_activity_aggrchargeweightexclspecdel] numeric(18,2),\n[lms_activity_aggrvolweightexclspecdel] numeric(18,2),\n[lms_activity_aggrvolumiserweightexclspecdel] numeric(18,2),\n[lms_activity_aggrmaxweightexclspecdel] numeric(18,2),\n[lms_activity_aggrnoparcelsexclspecdel] bigint,\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/stactivitydetail.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STLMSActivityDetail \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLMSActivitySummary')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STLMSActivitySummary') )\n    DROP EXTERNAL TABLE dbo.T_STLMSActivitySummary\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STLMSActivitySummary (\n[lms_activity_transidtype] nvarchar(4000),\n[lms_activity_date] date,\n[lms_activity_movementtype] nvarchar(4000),\n[lms_activity_location] nvarchar(4000),\n[lms_activity_aggrweight] numeric(18,2),\n[lms_activity_aggrchargeweight] numeric(18,2),\n[lms_activity_aggrvolweight] numeric(18,2),\n[lms_activity_aggrvolumiserweight] numeric(18,2),\n[lms_activity_aggrmaxweight] numeric(18,2),\n[lms_activity_aggrnoparcels] bigint,\n[lms_activity_aggrweightexclspecdel] numeric(18,2),\n[lms_activity_aggrchargeweightexclspecdel] numeric(18,2),\n[lms_activity_aggrvolweightexclspecdel] numeric(18,2),\n[lms_activity_aggrvolumiserweightexclspecdel] numeric(18,2),\n[lms_activity_aggrmaxweightexclspecdel] numeric(18,2),\n[lms_activity_aggrnoparcelsexclspecdel] bigint,\n[lms_activity_billcustname] nvarchar(4000),\n\n\n)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/stactivitysummary.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t);\n\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STLMSActivitySummary \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLMSTrack')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STLMSTrack') )\n    DROP EXTERNAL TABLE dbo.T_STLMSTrack\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STLMSTrack (\n[lms_track_id] int,\n[lms_track_loadid] int,\n[lms_track_parcelid] int,\n[lms_track_waybillid] int,\n[lms_track_fromlocid] int,\n[lms_track_tolocid] int,\n[lms_track_tracktypeid] int,\n[lms_track_opendt] datetime2(7),\n[lms_track_closedt] datetime2(7),\n[lms_track_specdel] int,\n[lms_track_parcelweight] float,\n[lms_track_parcelchargeweight] numeric(18,2),\n[lms_track_lastmilebranchflag] int\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stlmstrack.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STLMSTrack \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLMSTrack_3MYoY')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STLMSTrack_3MYoY') )\n    DROP EXTERNAL TABLE dbo.T_STLMSTrack_3MYoY\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STLMSTrack_3MYoY (\n[lms_track_id] int,\n[lms_track_loadid] int,\n[lms_track_parcelid] int,\n[lms_track_waybillid] int,\n[lms_track_fromlocid] int,\n[lms_track_tolocid] int,\n[lms_track_tracktypeid] int,\n[lms_track_opendt] datetime2(7),\n[lms_track_closedt] datetime2(7),\n[lms_track_specdel] int,\n[lms_track_parcelweight] float,\n[lms_track_parcelchargeweight] numeric(18,2),\n[lms_track_lastmilebranchflag] int\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stlmstrack3myoy.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STLMSTrack_3MYoY \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLMSTrack_CY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STLMSTrack_CY3Month') )\n    DROP VIEW dbo.T_STLMSTrack_CY3Month\nGO\n\nCREATE VIEW [dbo].[T_STLMSTrack_CY3Month]\n\nAS \n\nWITH CTE AS (\n\nSELECT lms_parcel_id as lms_track_parcelid \nFROM dbo.T_STParcel \nWHERE lms_parcel_pdate >= DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0))\nAND lms_parcel_pdate <= DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7))))\n\nUNION\n\nSELECT lms_track_parcelid\nFROM dbo.T_STLMSTrack \nWHERE lms_track_opendt >= DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0))\nAND lms_track_opendt <= DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7))))\n\n)\n\nSELECT \nT.*\nFROM CTE \nLEFT JOIN dbo.T_STLMSTrack T on T.lms_track_parcelid  = CTE.lms_track_parcelid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLMSTrack_PY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STLMSTrack_PY3Month') )\n    DROP VIEW dbo.T_STLMSTrack_PY3Month\nGO\n\nCREATE VIEW [dbo].[T_STLMSTrack_PY3Month]\n\nAS \n\nWITH CTE AS (\n\nSELECT lms_parcel_id as lms_track_parcelid \nFROM dbo.T_STParcel \nWHERE lms_parcel_pdate >= DATEADD(yy,-1,DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0)))\nAND lms_parcel_pdate <= DATEADD(yy,-1,DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7)))))\n\nUNION\n\nSELECT lms_track_parcelid\nFROM dbo.T_STLMSTrack \nWHERE lms_track_opendt >= DATEADD(yy,-1,DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0)))\nAND lms_track_opendt <= DATEADD(yy,-1,DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7)))))\n\n)\n\nSELECT \nT.*\nFROM CTE \nLEFT JOIN dbo.T_STLMSTrack T on T.lms_track_parcelid  = CTE.lms_track_parcelid\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLoadChild')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STLoadChild') )\n    DROP EXTERNAL TABLE dbo.T_STLoadChild\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STLoadChild (\n[lms_loadchild_id] int,\n[lms_loadchild_routeid] int,\n[lms_loadchild_driverid] int,\n[lms_loadchild_sealno] nvarchar(4000),\n[lms_loadchild_vehicleid] int,\n[lms_loadchild_ttypeid] int,\n[lms_loadchild_userid] int,\n[lms_loadchild_ldate] datetime2(7),\n[lms_loadchild_courierid] nvarchar(4000),\n[lms_loadchild_site] nvarchar(4000),\n[lms_loadchild_fromlocid] int,\n[lms_loadchild_tolocid] int,\n[lms_loadchild_cdate] datetime2(7),\n[lms_loadchild_trailer1] int,\n[lms_loadchild_trailer2] int,\n[lms_loadchild_cref] nvarchar(4000),\n[lms_loadchild_debriefed] int,\n[lms_loadchild_mrpflag] int,\n[lms_loadchild_mrpcflag] int,\n[lms_loadchild_finalflag] int,\n[lms_loadchild_alidaflag] int,\n[lms_loadchild_puibts] int,\n[lms_loadchild_pucols] int,\n[lms_loadchild_planningref] nvarchar(4000),\n[lms_loadchild_interfacedate] datetime2(7),\n[lms_loadchild_nosealsret] int,\n[lms_loadchild_excludeopsi] int,\n[lms_loadchild_dccref] nvarchar(4000),\n[lms_loadchild_srouteid] int,\n[lms_loadchild_fuellitres] numeric(36,8),\n[lms_loadchild_outsourcedcrew] int,\n[lms_loadchild_masterloadid] int,\n[lms_loadchild_securitygatedespatched] datetime2(7),\n[lms_loadchild_securitygateuserid] int,\n[lms_loadchild_securitygatearrived] datetime2(7),\n[lms_loadchild_securitygatearriveduserid] int,\n[lms_loadchild_lastupdate] datetime2(7),\n[lms_loadchild_bayno] nvarchar(4000),\n[lms_loadchild_costs] numeric(36,8),\n[lms_loadchild_estdeparturedatetime] datetime2(7),\n[lms_loadchild_totalweight] numeric(36,8),\n[lms_loadchild_ovrignore] int,\n[lms_loadchild_childloadid] int,\n[lms_loadchild_orvcode] int,\n[lms_loadchild_companyid] int,\n[lms_loadchild_editloaddate] datetime2(7),\n[lms_loadchild_reopeneddate] datetime2(7),\n[lms_loadchild_reopeneduserid] int,\n[lms_loadchild_novehicle] int,\n[lms_loadchild_mobilefeedbackreasonid] int,\n[lms_loadchild_direct] int,\n[lms_loadchild_noofpcls] int,\n[lms_loadchild_debriefdt] datetime2(7),\n[lms_loadchild_httpcode] int,\n[lms_loadchild_parentloadid] int,\n[lms_loadchild_mrpobversion] int,\n[lms_loadchild_aggrweight] numeric(36,8),\n[lms_loadchild_aggrchargeweight] numeric(36,8),\n[lms_loadchild_aggrvolweight] numeric(36,8),\n[lms_loadchild_aggrvolumiserweight] numeric(36,8),\n[lms_loadchild_aggrmaxweight] numeric(36,8),\n[lms_loadchild_aggrnoparcels] bigint,\n[lms_loadchild_aggrweightexclspecdel] numeric(36,8),\n[lms_loadchild_aggrchargeweightexclspecdel] numeric(36,8),\n[lms_loadchild_aggrvolweightexclspecdel] numeric(36,8),\n[lms_loadchild_aggrvolumiserweightexclspecdel] numeric(36,8),\n[lms_loadchild_aggrmaxweightexclspecdel] numeric(36,8),\n[lms_loadchild_aggrnoparcelsexclspecdel] bigint,\n[lms_loadchild_effectiveloaddurationminutes] int,\n[lms_loadchild_effectiveoffloaddurationminutes] int,\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stloadchild.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STLoadChild \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLoadChild_3MYoY')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STLoadChild_3MYoY') )\n    DROP EXTERNAL TABLE dbo.T_STLoadChild_3MYoY\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STLoadChild_3MYoY (\n[lms_loadchild_id] int,\n[lms_loadchild_routeid] int,\n[lms_loadchild_driverid] int,\n[lms_loadchild_sealno] nvarchar(4000),\n[lms_loadchild_vehicleid] int,\n[lms_loadchild_ttypeid] int,\n[lms_loadchild_userid] int,\n[lms_loadchild_ldate] datetime2(7),\n[lms_loadchild_courierid] nvarchar(4000),\n[lms_loadchild_site] nvarchar(4000),\n[lms_loadchild_fromlocid] int,\n[lms_loadchild_tolocid] int,\n[lms_loadchild_cdate] datetime2(7),\n[lms_loadchild_trailer1] int,\n[lms_loadchild_trailer2] int,\n[lms_loadchild_cref] nvarchar(4000),\n[lms_loadchild_debriefed] int,\n[lms_loadchild_mrpflag] int,\n[lms_loadchild_mrpcflag] int,\n[lms_loadchild_finalflag] int,\n[lms_loadchild_alidaflag] int,\n[lms_loadchild_puibts] int,\n[lms_loadchild_pucols] int,\n[lms_loadchild_planningref] nvarchar(4000),\n[lms_loadchild_interfacedate] datetime2(7),\n[lms_loadchild_nosealsret] int,\n[lms_loadchild_excludeopsi] int,\n[lms_loadchild_dccref] nvarchar(4000),\n[lms_loadchild_srouteid] int,\n[lms_loadchild_fuellitres] numeric(36,8),\n[lms_loadchild_outsourcedcrew] int,\n[lms_loadchild_masterloadid] int,\n[lms_loadchild_securitygatedespatched] datetime2(7),\n[lms_loadchild_securitygateuserid] int,\n[lms_loadchild_securitygatearrived] datetime2(7),\n[lms_loadchild_securitygatearriveduserid] int,\n[lms_loadchild_lastupdate] datetime2(7),\n[lms_loadchild_bayno] nvarchar(4000),\n[lms_loadchild_costs] numeric(36,8),\n[lms_loadchild_estdeparturedatetime] datetime2(7),\n[lms_loadchild_totalweight] numeric(36,8),\n[lms_loadchild_ovrignore] int,\n[lms_loadchild_childloadid] int,\n[lms_loadchild_orvcode] int,\n[lms_loadchild_companyid] int,\n[lms_loadchild_editloaddate] datetime2(7),\n[lms_loadchild_reopeneddate] datetime2(7),\n[lms_loadchild_reopeneduserid] int,\n[lms_loadchild_novehicle] int,\n[lms_loadchild_mobilefeedbackreasonid] int,\n[lms_loadchild_direct] int,\n[lms_loadchild_noofpcls] int,\n[lms_loadchild_debriefdt] datetime2(7),\n[lms_loadchild_httpcode] int,\n[lms_loadchild_parentloadid] int,\n[lms_loadchild_mrpobversion] int,\n[lms_loadchild_aggrweight] numeric(36,8),\n[lms_loadchild_aggrchargeweight] numeric(36,8),\n[lms_loadchild_aggrvolweight] numeric(36,8),\n[lms_loadchild_aggrvolumiserweight] numeric(36,8),\n[lms_loadchild_aggrmaxweight] numeric(36,8),\n[lms_loadchild_aggrnoparcels] bigint,\n[lms_loadchild_aggrweightexclspecdel] numeric(36,8),\n[lms_loadchild_aggrchargeweightexclspecdel] numeric(36,8),\n[lms_loadchild_aggrvolweightexclspecdel] numeric(36,8),\n[lms_loadchild_aggrvolumiserweightexclspecdel] numeric(36,8),\n[lms_loadchild_aggrmaxweightexclspecdel] numeric(36,8),\n[lms_loadchild_aggrnoparcelsexclspecdel] bigint,\n[lms_loadchild_effectiveloaddurationminutes] int,\n[lms_loadchild_effectiveoffloaddurationminutes] int,\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stloadchild3myoy.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STLoadChild_3MYoY \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLoadChild_CY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STLoadChild_CY3Month') )\n    DROP VIEW dbo.T_STLoadChild_CY3Month\nGO\n\nCREATE VIEW [dbo].[T_STLoadChild_CY3Month]\n\nAS \n\nWITH CTE AS (\n\nSELECT lms_track_loadid as lms_loadchild_id \nFROM dbo.T_STLMSTrack_CY3Month \n\n\nUNION\n\nSELECT lms_loadchild_id\nFROM dbo.T_STLoadChild \nWHERE lms_loadchild_ldate >= DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0))\nAND lms_loadchild_ldate <= DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7))))\n\n)\n\nSELECT \nLC.*\nFROM CTE \nLEFT JOIN dbo.T_STLoadChild LC on LC.lms_loadchild_id  = CTE.lms_loadchild_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLoadChild_PY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STLoadChild_PY3Month') )\n    DROP VIEW dbo.T_STLoadChild_PY3Month\nGO\n\nCREATE VIEW [dbo].[T_STLoadChild_PY3Month]\n\nAS \n\nWITH CTE AS (\n\nSELECT lms_track_loadid as lms_loadchild_id \nFROM dbo.T_STLMSTrack_PY3Month \n\n\nUNION\n\nSELECT lms_loadchild_id\nFROM dbo.T_STLoadChild \nWHERE lms_loadchild_ldate >= DATEADD(yy,-1,DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0)))\nAND lms_loadchild_ldate <= DATEADD(yy,-1,DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7)))))\n\n)\n\nSELECT \nLC.*\nFROM CTE \nLEFT JOIN dbo.T_STLoadChild LC on LC.lms_loadchild_id  = CTE.lms_loadchild_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLoadParent')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STLoadParent') )\n    DROP EXTERNAL TABLE dbo.T_STLoadParent\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STLoadParent (\n[lms_loadparent_parentloadid] int,\n[lms_loadparent_aggrweight] numeric(36,8),\n[lms_loadparent_aggrchargeweight] numeric(36,8),\n[lms_loadparent_aggrvolweight] numeric(36,8),\n[lms_loadparent_aggrvolumiserweight] numeric(36,8),\n[lms_loadparent_aggrmaxweight] numeric(36,8),\n[lms_loadparent_aggrnoparcels] bigint,\n[lms_loadparent_aggrweightexclspecdel] numeric(36,8),\n[lms_loadparent_aggrchargeweightexclspecdel] numeric(36,8),\n[lms_loadparent_aggrvolweightexclspecdel] numeric(36,8),\n[lms_loadparent_aggrvolumiserweightexclspecdel] numeric(36,8),\n[lms_loadparent_aggrmaxweightexclspecdel] numeric(36,8),\n[lms_loadparent_aggrnoparcelsexclspecdel] bigint,\n[orv_dispatch_id] bigint,\n[orv_dispatch_lmsid] bigint,\n[orv_dispatch_vid] bigint,\n[orv_dispatch_did] bigint,\n[orv_dispatch_status] nvarchar(4000),\n[orv_dispatch_startdate] datetime2(7),\n[orv_dispatch_stopdate] datetime2(7),\n[orv_dispatch_vehicletype] int,\n[orv_dispatch_uid] bigint,\n[orv_dispatch_estdepdate] datetime2(7),\n[orv_dispatch_trailer] bigint,\n[orv_dispatch_trailer2] bigint,\n[orv_dispatch_fromlocid] bigint,\n[orv_dispatch_tolocid] bigint,\n[orv_dispatch_site] nvarchar(4000),\n[orv_dispatch_lastupdate] datetime2(7),\n[orv_dispatch_etastatus] nvarchar(4000),\n[orv_dispatch_startinglat] float,\n[orv_dispatch_startinglng] float,\n[orv_dispatch_endinglat] float,\n[orv_dispatch_endinglng] float,\n[orv_dispatch_startingfrom] nvarchar(4000),\n[orv_dispatch_goingto] nvarchar(4000),\n[orv_dispatch_importissue] nvarchar(4000),\n[orv_dispatch_insdate] datetime2(7),\n[orv_dispatch_estarrdate] datetime2(7),\n[orv_dispatch_duration] bigint,\n[orv_dispatch_distance] bigint,\n[orv_dispatch_cost] bigint,\n[orv_dispatch_stoplat] float,\n[orv_dispatch_stoplng] float,\n[orv_dispatch_stopreason] nvarchar(4000),\n[orv_dispatch_startodo] bigint,\n[orv_dispatch_stopodo] bigint,\n[orv_dispatch_expduration] bigint,\n[orv_dispatch_expdistance] bigint,\n[orv_dispatch_expcost] bigint,\n[orv_dispatch_collectionid] bigint,\n[orv_dispatch_crew] int,\n[orv_dispatch_crewnames] nvarchar(4000),\n[orv_dispatch_bocloseuid] bigint,\n[orv_dispatch_routing] nvarchar(4000),\n[orv_dispatch_swapct] int,\n[orv_dispatch_debriefed] int,\n[orv_dispatch_debriefnotes] nvarchar(4000),\n[orv_dispatch_bopin] nvarchar(4000),\n[orv_dispatch_cpicost] bigint,\n[orv_dispatch_labourcost] bigint,\n[orv_dispatch_maintcost] bigint,\n[orv_dispatch_inscost] bigint,\n[orv_dispatch_tollcost] bigint,\n[orv_dispatch_fuelcost] bigint,\n[orv_dispatch_internal] int,\n[orv_dispatch_childids] nvarchar(4000),\n[orv_dispatch_guid] bigint,\n[orv_dispatch_timedefinite] int,\n[orv_dispatch_orvcode] int,\n[orv_dispatch_tsstopdepoenter] datetime2(7),\n[orv_dispatch_tsstartdepoexit] datetime2(7),\n[orv_dispatch_reroutect] int,\n[orv_dispatch_actualarrdate] datetime2(7),\n[orv_dispatch_physicalstartlat] float,\n[orv_dispatch_physicalstartlng] float,\n[orv_dispatch_tsstartdepoexitapp] datetime2(7),\n[orv_dispatch_tsstopdepoenterapp] datetime2(7),\n[orv_dispatch_uncanceldate] datetime2(7),\n[orv_dispatch_uncancelusername] nvarchar(4000),\n[orv_dispatch_lmsdebrifed] int,\n[orv_dispatch_reviseddebrief] int,\n[orv_dispatch_lhtransporter] nvarchar(4000),\n[orv_dispatch_triptype] nvarchar(4000),\n[orv_dispatch_startreason] nvarchar(4000),\n[orv_dispatch_route] nvarchar(4000),\n[orv_dispatch_tmstraileridentify] nvarchar(4000),\n[orv_dispatch_tmstrailer2identify] nvarchar(4000),\n[orv_dispatch_tmscontroller] nvarchar(4000),\n[orv_dispatch_routekey] nvarchar(4000),\n[orv_dispatch_courierid] bigint,\n[orv_dispatch_originalstartdate] datetime2(7),\n[orv_dispatch_originalextarrival] datetime2(7),\n[orv_dispatch_recomputeoriginals] int,\n[orv_dispatch_originalextdistance] bigint,\n[orv_dispatch_originalextduration] bigint,\n[orv_dispatch_moddate] datetime2(7),\n[orv_dispatch_tmsmode] int,\n[orv_dispatch_driversignature] bigint,\n[orv_dispatch_exitdepot] datetime2(7),\n[orv_dispatch_enterdepot] datetime2(7),\n[orv_dispatch_fdeliverydate] datetime2(7),\n[orv_dispatch_fdeltsgeofenceenter] datetime2(7),\n[orv_dispatch_fdeltsscanningstart] datetime2(7),\n[orv_dispatch_fdeltsscanningstop] datetime2(7),\n[orv_dispatch_fdeltspodsignature] datetime2(7),\n[orv_dispatch_fdelnumprcls] int,\n[orv_dispatch_deliverydate] datetime2(7),\n[orv_dispatch_ldeltsgeofenceenter] datetime2(7),\n[orv_dispatch_ldeltsscanningstart] datetime2(7),\n[orv_dispatch_ldeltsscanningstop] datetime2(7),\n[orv_dispatch_ldeltspodsignature] datetime2(7),\n[orv_dispatch_ldelnumprcls] int,\n[orv_dispatch_fromdelid] bigint,\n[orv_dispatch_todelid] bigint,\n[orv_dispatch_distancemeters] int,\n[orv_dispatch_durationhours] float,\n[orv_dispatch_timeduebackatdepot] datetime2(7),\n[orv_dispatch_lastcanceleddeltodepotime] datetime2(7),\n[orv_dispatch_difstopdatevstimedueback] float,\n[orv_dispatch_completesameday] int,\n\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stloadparent.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STLoadParent \nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLoadParent_3MYoY')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STLoadParent_3MYoY') )\n    DROP EXTERNAL TABLE dbo.T_STLoadParent_3MYoY\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STLoadParent_3MYoY (\n[lms_loadparent_parentloadid] int,\n[lms_loadparent_aggrweight] numeric(36,8),\n[lms_loadparent_aggrchargeweight] numeric(36,8),\n[lms_loadparent_aggrvolweight] numeric(36,8),\n[lms_loadparent_aggrvolumiserweight] numeric(36,8),\n[lms_loadparent_aggrmaxweight] numeric(36,8),\n[lms_loadparent_aggrnoparcels] bigint,\n[lms_loadparent_aggrweightexclspecdel] numeric(36,8),\n[lms_loadparent_aggrchargeweightexclspecdel] numeric(36,8),\n[lms_loadparent_aggrvolweightexclspecdel] numeric(36,8),\n[lms_loadparent_aggrvolumiserweightexclspecdel] numeric(36,8),\n[lms_loadparent_aggrmaxweightexclspecdel] numeric(36,8),\n[lms_loadparent_aggrnoparcelsexclspecdel] bigint,\n[orv_dispatch_id] bigint,\n[orv_dispatch_lmsid] bigint,\n[orv_dispatch_vid] bigint,\n[orv_dispatch_did] bigint,\n[orv_dispatch_status] nvarchar(4000),\n[orv_dispatch_startdate] datetime2(7),\n[orv_dispatch_stopdate] datetime2(7),\n[orv_dispatch_vehicletype] int,\n[orv_dispatch_uid] bigint,\n[orv_dispatch_estdepdate] datetime2(7),\n[orv_dispatch_trailer] bigint,\n[orv_dispatch_trailer2] bigint,\n[orv_dispatch_fromlocid] bigint,\n[orv_dispatch_tolocid] bigint,\n[orv_dispatch_site] nvarchar(4000),\n[orv_dispatch_lastupdate] datetime2(7),\n[orv_dispatch_etastatus] nvarchar(4000),\n[orv_dispatch_startinglat] float,\n[orv_dispatch_startinglng] float,\n[orv_dispatch_endinglat] float,\n[orv_dispatch_endinglng] float,\n[orv_dispatch_startingfrom] nvarchar(4000),\n[orv_dispatch_goingto] nvarchar(4000),\n[orv_dispatch_importissue] nvarchar(4000),\n[orv_dispatch_insdate] datetime2(7),\n[orv_dispatch_estarrdate] datetime2(7),\n[orv_dispatch_duration] bigint,\n[orv_dispatch_distance] bigint,\n[orv_dispatch_cost] bigint,\n[orv_dispatch_stoplat] float,\n[orv_dispatch_stoplng] float,\n[orv_dispatch_stopreason] nvarchar(4000),\n[orv_dispatch_startodo] bigint,\n[orv_dispatch_stopodo] bigint,\n[orv_dispatch_expduration] bigint,\n[orv_dispatch_expdistance] bigint,\n[orv_dispatch_expcost] bigint,\n[orv_dispatch_collectionid] bigint,\n[orv_dispatch_crew] int,\n[orv_dispatch_crewnames] nvarchar(4000),\n[orv_dispatch_bocloseuid] bigint,\n[orv_dispatch_routing] nvarchar(4000),\n[orv_dispatch_swapct] int,\n[orv_dispatch_debriefed] int,\n[orv_dispatch_debriefnotes] nvarchar(4000),\n[orv_dispatch_bopin] nvarchar(4000),\n[orv_dispatch_cpicost] bigint,\n[orv_dispatch_labourcost] bigint,\n[orv_dispatch_maintcost] bigint,\n[orv_dispatch_inscost] bigint,\n[orv_dispatch_tollcost] bigint,\n[orv_dispatch_fuelcost] bigint,\n[orv_dispatch_internal] int,\n[orv_dispatch_childids] nvarchar(4000),\n[orv_dispatch_guid] bigint,\n[orv_dispatch_timedefinite] int,\n[orv_dispatch_orvcode] int,\n[orv_dispatch_tsstopdepoenter] datetime2(7),\n[orv_dispatch_tsstartdepoexit] datetime2(7),\n[orv_dispatch_reroutect] int,\n[orv_dispatch_actualarrdate] datetime2(7),\n[orv_dispatch_physicalstartlat] float,\n[orv_dispatch_physicalstartlng] float,\n[orv_dispatch_tsstartdepoexitapp] datetime2(7),\n[orv_dispatch_tsstopdepoenterapp] datetime2(7),\n[orv_dispatch_uncanceldate] datetime2(7),\n[orv_dispatch_uncancelusername] nvarchar(4000),\n[orv_dispatch_lmsdebrifed] int,\n[orv_dispatch_reviseddebrief] int,\n[orv_dispatch_lhtransporter] nvarchar(4000),\n[orv_dispatch_triptype] nvarchar(4000),\n[orv_dispatch_startreason] nvarchar(4000),\n[orv_dispatch_route] nvarchar(4000),\n[orv_dispatch_tmstraileridentify] nvarchar(4000),\n[orv_dispatch_tmstrailer2identify] nvarchar(4000),\n[orv_dispatch_tmscontroller] nvarchar(4000),\n[orv_dispatch_routekey] nvarchar(4000),\n[orv_dispatch_courierid] bigint,\n[orv_dispatch_originalstartdate] datetime2(7),\n[orv_dispatch_originalextarrival] datetime2(7),\n[orv_dispatch_recomputeoriginals] int,\n[orv_dispatch_originalextdistance] bigint,\n[orv_dispatch_originalextduration] bigint,\n[orv_dispatch_moddate] datetime2(7),\n[orv_dispatch_tmsmode] int,\n[orv_dispatch_driversignature] bigint,\n[orv_dispatch_exitdepot] datetime2(7),\n[orv_dispatch_enterdepot] datetime2(7),\n[orv_dispatch_fdeliverydate] datetime2(7),\n[orv_dispatch_fdeltsgeofenceenter] datetime2(7),\n[orv_dispatch_fdeltsscanningstart] datetime2(7),\n[orv_dispatch_fdeltsscanningstop] datetime2(7),\n[orv_dispatch_fdeltspodsignature] datetime2(7),\n[orv_dispatch_fdelnumprcls] int,\n[orv_dispatch_deliverydate] datetime2(7),\n[orv_dispatch_ldeltsgeofenceenter] datetime2(7),\n[orv_dispatch_ldeltsscanningstart] datetime2(7),\n[orv_dispatch_ldeltsscanningstop] datetime2(7),\n[orv_dispatch_ldeltspodsignature] datetime2(7),\n[orv_dispatch_ldelnumprcls] int,\n[orv_dispatch_fromdelid] bigint,\n[orv_dispatch_todelid] bigint,\n[orv_dispatch_distancemeters] int,\n[orv_dispatch_durationhours] float,\n[orv_dispatch_timeduebackatdepot] datetime2(7),\n[orv_dispatch_lastcanceleddeltodepotime] datetime2(7),\n[orv_dispatch_difstopdatevstimedueback] float,\n[orv_dispatch_completesameday] int,\n\n\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stloadparent3myoy.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STLoadParent_3MYoY \nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLoadParent_CY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STLoadParent_CY3Month') )\n    DROP VIEW dbo.T_STLoadParent_CY3Month\nGO\n\nCREATE VIEW [dbo].[T_STLoadParent_CY3Month]\n\nAS \n\nSELECT \nLP.*\nFROM T_STLoadChild_CY3Month CTE\nLEFT JOIN dbo.T_STLoadParent LP on LP.lms_loadparent_parentloadid  = CTE.lms_loadchild_parentloadid\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STLoadParent_PY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STLoadParent_PY3Month') )\n    DROP VIEW dbo.T_STLoadParent_PY3Month\nGO\n\nCREATE VIEW [dbo].[T_STLoadParent_PY3Month]\n\nAS \n\nSELECT \nLP.*\nFROM T_STLoadChild_PY3Month CTE\nLEFT JOIN dbo.T_STLoadParent LP on LP.lms_loadparent_parentloadid  = CTE.lms_loadchild_parentloadid\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STManualJournals')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STManualJournals') )\n    DROP EXTERNAL TABLE dbo.T_STManualJournals\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STManualJournals (\n\t[sap_manualjournalsheader_postingdate] datetime2(7),\n\t[sap_manualjournalsheader_duedate] datetime2(7),\n\t[sap_manualjournalsheader_doctotal] numeric(18,2),\n\t[sap_manualjournalsheader_doctype] nvarchar(4000),\n\t[sap_manualjournalsheader_transid] int,\n\t[sap_manualjournalsline_linenum] int,\n\t[sap_manualjournalsline_acctcode] nvarchar(4000),\n\t[sap_manualjournalsheader_objtype] nvarchar(4000),\n\t[sap_manualjournalsline_project] nvarchar(4000),\n\t[sap_manualjournalsline_vatgroup] nvarchar(4000),\n\t[sap_manualjournalsline_vatrate] numeric(18,2),\n\t[sap_manualjournalsline_vatamount] numeric(18,2),\n\t[sap_manualjournalsline_description] nvarchar(4000),\n\t[sap_manualjournalsline_jnlref1] nvarchar(4000),\n\t[sap_manualjournalsline_jnlref2] nvarchar(4000),\n\t[sap_manualjournalsline_subdepotcode] nvarchar(4000),\n\t[sap_manualjournalsline_linetotal] numeric(18,2),\n\t[sap_manualjournalsline_doccat] nvarchar(4000),\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/stmanualjournal.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STManualJournals \nGO\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STOrder')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STOrder') )\n    DROP EXTERNAL TABLE dbo.T_STOrder\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STOrder (\n[lms_order_id] int,\n[lms_order_corderno] nvarchar(4000),\n[lms_order_custref] nvarchar(4000),\n[lms_order_pickupcustid] int,\n[lms_order_delivercustid] int,\n[lms_order_billcustid] int,\n[lms_order_weight] numeric(36,8),\n[lms_order_ovalue] numeric(36,8),\n[lms_order_hodate] datetime2(7),\n[lms_order_cservice] nvarchar(4000),\n[lms_order_courierid] nvarchar(4000),\n[lms_order_custservice] nvarchar(4000),\n[lms_order_userid] int,\n[lms_order_appointment] datetime2(7),\n[lms_order_deliverby] datetime2(7),\n[lms_order_dconfirmed] nvarchar(4000),\n[lms_order_dcomment] nvarchar(4000),\n[lms_order_drefno] nvarchar(4000),\n[lms_order_duedate] datetime2(7),\n[lms_order_batchno] int,\n[lms_order_custaccid] int,\n[lms_order_airfreightflag] int,\n[lms_order_specdel] int,\n[lms_parcelbyorder_aggrweight] numeric(36,8),\n[lms_parcelbyorder_aggrchargeweight] numeric(36,8),\n[lms_parcelbyorder_aggrvolweight] numeric(36,8),\n[lms_parcelbyorder_aggrvolumiserweight] numeric(36,8),\n[lms_parcelbyorder_aggrmaxweight] numeric(36,8),\n[lms_parcelbyorder_aggrnoparcels] bigint,\n[lms_parcelbyorder_aggrweightexclspecdel] numeric(36,8),\n[lms_parcelbyorder_aggrchargeweightexclspecdel] numeric(36,8),\n[lms_parcelbyorder_aggrvolweightexclspecdel] numeric(36,8),\n[lms_parcelbyorder_aggrvolumiserweightexclspecdel] numeric(36,8),\n[lms_parcelbyorder_aggrmaxweightexclspecdel] numeric(36,8),\n[lms_parcelbyorder_aggrnoparcelsexclspecdel] bigint,\n[lms_order_maxpoddate] datetime2(7),\n[lms_order_inserviceflag] int,\n[lms_order_actualleaddaysstartdate] datetime2(7),\n[lms_order_actualleaddaysenddate] datetime2(7),\n[lms_order_actualleaddays] float,\n[lms_order_actualleaddaysinclwe] float,\n[lms_order_hodateroundup] datetime2(7),\n[lms_order_age] nvarchar(4000),\n[orderagedifferenceinseconds] int,\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/storder.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STOrder \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STOrder_3MYoY')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STOrder_3MYoY') )\n    DROP EXTERNAL TABLE dbo.T_STOrder_3MYoY\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STOrder_3MYoY (\n[lms_order_id] int,\n[lms_order_corderno] nvarchar(4000),\n[lms_order_custref] nvarchar(4000),\n[lms_order_pickupcustid] int,\n[lms_order_delivercustid] int,\n[lms_order_billcustid] int,\n[lms_order_weight] numeric(36,8),\n[lms_order_ovalue] numeric(36,8),\n[lms_order_hodate] datetime2(7),\n[lms_order_cservice] nvarchar(4000),\n[lms_order_courierid] nvarchar(4000),\n[lms_order_custservice] nvarchar(4000),\n[lms_order_userid] int,\n[lms_order_appointment] datetime2(7),\n[lms_order_deliverby] datetime2(7),\n[lms_order_dconfirmed] nvarchar(4000),\n[lms_order_dcomment] nvarchar(4000),\n[lms_order_drefno] nvarchar(4000),\n[lms_order_duedate] datetime2(7),\n[lms_order_batchno] int,\n[lms_order_custaccid] int,\n[lms_order_airfreightflag] int,\n[lms_order_specdel] int,\n[lms_parcelbyorder_aggrweight] numeric(36,8),\n[lms_parcelbyorder_aggrchargeweight] numeric(36,8),\n[lms_parcelbyorder_aggrvolweight] numeric(36,8),\n[lms_parcelbyorder_aggrvolumiserweight] numeric(36,8),\n[lms_parcelbyorder_aggrmaxweight] numeric(36,8),\n[lms_parcelbyorder_aggrnoparcels] bigint,\n[lms_parcelbyorder_aggrweightexclspecdel] numeric(36,8),\n[lms_parcelbyorder_aggrchargeweightexclspecdel] numeric(36,8),\n[lms_parcelbyorder_aggrvolweightexclspecdel] numeric(36,8),\n[lms_parcelbyorder_aggrvolumiserweightexclspecdel] numeric(36,8),\n[lms_parcelbyorder_aggrmaxweightexclspecdel] numeric(36,8),\n[lms_parcelbyorder_aggrnoparcelsexclspecdel] bigint,\n[lms_order_maxpoddate] datetime2(7),\n[lms_order_inserviceflag] int,\n[lms_order_actualleaddaysstartdate] datetime2(7),\n[lms_order_actualleaddaysenddate] datetime2(7),\n[lms_order_actualleaddays] float,\n[lms_order_actualleaddaysinclwe] float,\n[lms_order_hodateroundup] datetime2(7),\n[lms_order_age] nvarchar(4000),\n[orderagedifferenceinseconds] int,\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/storder3myoy.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STOrder_3MYoY \nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STOrder_CY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STOrder_CY3Month') )\n    DROP VIEW dbo.T_STOrder_CY3Month\nGO\n\nCREATE VIEW [dbo].[T_STOrder_CY3Month]\n\nAS \n\nWITH CTE AS (\n\nSELECT lms_parcel_orderid as lms_order_id \nFROM dbo.T_STParcel \nWHERE lms_parcel_pdate >= DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0))\nAND lms_parcel_pdate <= DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7))))\n\nUNION\n\nSELECT lms_order_id \nFROM dbo.T_STOrder \nWHERE lms_order_hodate >= DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0))\nAND lms_order_hodate <= DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7))))\n\n)\n\nSELECT \nO.*\nFROM CTE \nLEFT JOIN dbo.T_STorder O on O.lms_order_id  = CTE.lms_order_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STOrder_PY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STOrder_PY3Month') )\n    DROP VIEW dbo.T_STOrder_PY3Month\nGO\n\nCREATE VIEW [dbo].[T_STOrder_PY3Month]\n\nAS \n\nWITH CTE AS (\n\nSELECT lms_parcel_orderid as lms_order_id \nFROM dbo.T_STParcel \nWHERE lms_parcel_pdate >= DATEADD(yy,-1,DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0)))\nAND lms_parcel_pdate <= DATEADD(yy,-1,DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7)))))\n\nUNION\n\nSELECT lms_order_id \nFROM dbo.T_STOrder \nWHERE lms_order_hodate >= DATEADD(yy,-1,DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0)))\nAND lms_order_hodate <= DATEADD(yy,-1,DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7)))))\n\n)\n\nSELECT \nO.*\nFROM CTE \nLEFT JOIN dbo.T_STorder O on O.lms_order_id  = CTE.lms_order_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STParcel')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STParcel') )\n    DROP EXTERNAL TABLE dbo.T_STParcel\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STParcel (\n[lms_parcel_id] int,\n[lms_parcel_orderid] int,\n[lms_parcel_consignid] int,\n[lms_parcel_waybillid] int,\n[lms_parcel_locid] int,\n[lms_parcel_totcharge] numeric(36,8),\n[lms_parcel_dimms] float,\n[lms_parcel_noofpcls] int,\n[lms_parcel_pl] numeric(36,8),\n[lms_parcel_pw] numeric(36,8),\n[lms_parcel_ph] numeric(36,8),\n[lms_parcel_pdate] datetime2(7),\n[lms_parcel_acceptancedate] datetime2(7),\n[lms_parcel_barcode] nvarchar(4000),\n[lms_parcel_volweight] float,\n[lms_parcel_weight] float,\n[lms_parcel_chargeweight] numeric(36,8),\n[lms_parcel_pweight] float,\n[lms_parcel_ptype] int,\n[lms_parcel_handoverdate] datetime2(7),\n[lms_parcel_floorstatus] nvarchar(4000),\n[lms_parcel_claimid] int,\n[lms_parcel_datevolumised] datetime2(7),\n[lms_parcel_volumiserweight] numeric(36,8),\n[lms_parcel_volumiserlength] numeric(36,8),\n[lms_parcel_volumiserheight] numeric(36,8),\n[lms_parcel_volumiserwidth] numeric(36,8),\n[lms_parcel_volumiserid] int,\n[lms_parcel_lastupdate] datetime2(7),\n[lms_parcel_orderhodate] datetime2(7),\n[lms_parcel_orderpickupcustid] int,\n[lms_parcel_orderdelivercustid] int,\n[lms_parcel_orderbillcustid] int,\n[lms_parcel_orderspecdel] int,\n[lms_parcel_consignmentcdate] datetime2(7),\n[lms_parcel_consignmentdeliverby] datetime2(7),\n[lms_parcel_waybillpoddate] datetime2(7),\n[lms_parcel_waybilldate] datetime2(7),\n[lms_parcel_parceldetailid] int,\n[lms_parcel_parceldetailinservicestart] datetime2(7),\n[lms_parcel_parceldetaildeliverby] datetime2(7),\n[lms_parcel_parceldetailservicedays] int,\n[lms_parcel_parceldetailservicetime] numeric(36,8),\n[lms_parcel_parceldetailcutofftime] numeric(36,8),\n[lms_parcel_parceldetailappointment] datetime2(7),\n[lms_parcel_parceldetailnddid] int,\n[lms_parcel_parceldetailcustonholdstart] datetime2(7),\n[lms_parcel_parceldetailcustonholdend] datetime2(7),\n[lms_parcel_parceldetailsplitinitial] int,\n[lms_parcel_parceldetailweekendholidays] int,\n[lms_parcel_parceldetailinbound] int,\n[lms_parcel_parceldetailcourierid] nvarchar(4000),\n[lms_parcel_parceldetailserviceid] nvarchar(4000),\n[lms_parcel_parceldetailcustaccid] int,\n[lms_parcel_parceldetailbroutemasterid] int,\n[lms_parcel_parceldetailbroutemasterfromid] int,\n[lms_parcel_parceldetailbroutemastertoid] int,\n[lms_parcel_parceldetailleadtimeid] int,\n[lms_parcel_inserviceflag] int,\n[lms_parcel_actualleaddaysstartdate] datetime2(7),\n[lms_parcel_actualleaddaysenddate] datetime2(7),\n[lms_parcel_actualleaddaysinclwe] float,\n[lms_parcel_actualleaddays] float,\n[orv_parcel_scandate] datetime2(7),\n[orv_parcel_scanstatus] nvarchar(4000),\n[orv_parcel_scanmode] nvarchar(4000),\n[orv_parcel_claimid] bigint,\n[orv_parcel_courierid] bigint,\n[orv_parcel_moddate] datetime2(7),\n[lms_parcel_parceldetaildeliverbyroundup] datetime2(7),\n[lms_parcel_age] nvarchar(4000),\n[lms_track_enddate] datetime2(7),\n[lms_track_floortimeend] datetime2(7),\n[lms_track_fromlocid] int,\n[lms_parcel_pdatetocdate] bigint,\n[lms_parcel_cdatetoenddate] bigint,\n[lms_parcel_startdatetoenddate] bigint,\n[lms_parcel_floortimeedndtoenddate] bigint,\n[lms_parcel_deliveryduration] bigint,\n[parcelagedifferenceinseconds] int\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stparcel.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STParcel \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STParcel_3MYoY')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STParcel_3MYoY') )\n    DROP EXTERNAL TABLE dbo.T_STParcel_3MYoY\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STParcel_3MYoY (\n[lms_parcel_id] int,\n[lms_parcel_orderid] int,\n[lms_parcel_consignid] int,\n[lms_parcel_waybillid] int,\n[lms_parcel_locid] int,\n[lms_parcel_totcharge] numeric(36,8),\n[lms_parcel_dimms] float,\n[lms_parcel_noofpcls] int,\n[lms_parcel_pl] numeric(36,8),\n[lms_parcel_pw] numeric(36,8),\n[lms_parcel_ph] numeric(36,8),\n[lms_parcel_pdate] datetime2(7),\n[lms_parcel_acceptancedate] datetime2(7),\n[lms_parcel_barcode] nvarchar(4000),\n[lms_parcel_volweight] float,\n[lms_parcel_weight] float,\n[lms_parcel_chargeweight] numeric(36,8),\n[lms_parcel_pweight] float,\n[lms_parcel_ptype] int,\n[lms_parcel_handoverdate] datetime2(7),\n[lms_parcel_floorstatus] nvarchar(4000),\n[lms_parcel_claimid] int,\n[lms_parcel_datevolumised] datetime2(7),\n[lms_parcel_volumiserweight] numeric(36,8),\n[lms_parcel_volumiserlength] numeric(36,8),\n[lms_parcel_volumiserheight] numeric(36,8),\n[lms_parcel_volumiserwidth] numeric(36,8),\n[lms_parcel_volumiserid] int,\n[lms_parcel_lastupdate] datetime2(7),\n[lms_parcel_orderhodate] datetime2(7),\n[lms_parcel_orderpickupcustid] int,\n[lms_parcel_orderdelivercustid] int,\n[lms_parcel_orderbillcustid] int,\n[lms_parcel_orderspecdel] int,\n[lms_parcel_consignmentcdate] datetime2(7),\n[lms_parcel_consignmentdeliverby] datetime2(7),\n[lms_parcel_waybillpoddate] datetime2(7),\n[lms_parcel_waybilldate] datetime2(7),\n[lms_parcel_parceldetailid] int,\n[lms_parcel_parceldetailinservicestart] datetime2(7),\n[lms_parcel_parceldetaildeliverby] datetime2(7),\n[lms_parcel_parceldetailservicedays] int,\n[lms_parcel_parceldetailservicetime] numeric(36,8),\n[lms_parcel_parceldetailcutofftime] numeric(36,8),\n[lms_parcel_parceldetailappointment] datetime2(7),\n[lms_parcel_parceldetailnddid] int,\n[lms_parcel_parceldetailcustonholdstart] datetime2(7),\n[lms_parcel_parceldetailcustonholdend] datetime2(7),\n[lms_parcel_parceldetailsplitinitial] int,\n[lms_parcel_parceldetailweekendholidays] int,\n[lms_parcel_parceldetailinbound] int,\n[lms_parcel_parceldetailcourierid] nvarchar(4000),\n[lms_parcel_parceldetailserviceid] nvarchar(4000),\n[lms_parcel_parceldetailcustaccid] int,\n[lms_parcel_parceldetailbroutemasterid] int,\n[lms_parcel_parceldetailbroutemasterfromid] int,\n[lms_parcel_parceldetailbroutemastertoid] int,\n[lms_parcel_parceldetailleadtimeid] int,\n[lms_parcel_inserviceflag] int,\n[lms_parcel_actualleaddaysstartdate] datetime2(7),\n[lms_parcel_actualleaddaysenddate] datetime2(7),\n[lms_parcel_actualleaddaysinclwe] float,\n[lms_parcel_actualleaddays] float,\n[orv_parcel_scandate] datetime2(7),\n[orv_parcel_scanstatus] nvarchar(4000),\n[orv_parcel_scanmode] nvarchar(4000),\n[orv_parcel_claimid] bigint,\n[orv_parcel_courierid] bigint,\n[orv_parcel_moddate] datetime2(7),\n[lms_parcel_parceldetaildeliverbyroundup] datetime2(7),\n[lms_parcel_age] nvarchar(4000),\n[lms_track_enddate] datetime2(7),\n[lms_track_floortimeend] datetime2(7),\n[lms_track_fromlocid] int,\n[lms_parcel_pdatetocdate] bigint,\n[lms_parcel_cdatetoenddate] bigint,\n[lms_parcel_startdatetoenddate] bigint,\n[lms_parcel_floortimeedndtoenddate] bigint,\n[lms_parcel_deliveryduration] bigint,\n[parcelagedifferenceinseconds] int\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stparcel3myoy.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STParcel_3MYoY \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STParcel_CY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STParcel_CY3Month') )\n    DROP VIEW dbo.T_STParcel_CY3Month\nGO\n\nCREATE VIEW [dbo].[T_STParcel_CY3Month]\nAS \n\nSELECT \n* \nFROM dbo.T_STParcel\nWHERE lms_parcel_pdate >= DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0))\nAND lms_parcel_pdate <= DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7))))\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STParcel_PY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STParcel_PY3Month') )\n    DROP VIEW dbo.T_STParcel_PY3Month\nGO\n\nCREATE VIEW [dbo].[T_STParcel_PY3Month]\n\nAS \n\nSELECT \n* \nFROM dbo.T_STParcel\nWHERE lms_parcel_pdate >= DATEADD(yy,-1,DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0)))\nAND lms_parcel_pdate <= DATEADD(yy,-1,DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7)))))\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STStockRevaluations')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STStockRevaluations') )\n    DROP EXTERNAL TABLE dbo.T_STStockRevaluations\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STStockRevaluations (\n\t[sap_stockrevaluationsheader_docentry] int,\n\t[sap_stockrevaluationsheader_transid] int,\n\t[sap_stockrevaluationsheader_docnum] int,\n\t[sap_stockrevaluationsheader_postingdate] datetime2(7),\n\t[sap_stockrevaluationsheader_comments] nvarchar(4000),\n\t[sap_stockrevaluationsheader_objtype] nvarchar(4000),\n\t[sap_stockrevaluationsline_linenum] int,\n\t[sap_stockrevaluationsline_dscription] nvarchar(4000),\n\t[sap_stockrevaluationsline_itemcode] nvarchar(4000),\n\t[sap_stockrevaluationsline_subdepotcode] nvarchar(4000),\n\t[sap_stockrevaluationsline_linetotal] numeric(18,2),\n\t[sap_stockrevaluationsline_acctcode] nvarchar(4000),\n\t[sap_stockrevaluationsline_doccat] nvarchar(4000),\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/ststockrevaluations.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STStockRevaluations \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STStockTransactions')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STStockTransactions') )\n    DROP EXTERNAL TABLE dbo.T_STStockTransactions\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STStockTransactions (\n\t[sap_stocktransactionsheader_docentry] int,\n\t[sap_stocktransactionsheader_docnum] int,\n\t[sap_stocktransactionsheader_doctype] nvarchar(4000),\n\t[sap_stocktransactionsheader_objtype] int,\n\t[sap_stocktransactionsheader_postingdate] datetime2(7),\n\t[sap_stocktransactionsheader_duedate] datetime2(7),\n\t[sap_stocktransactionsheader_cardcode] nvarchar(4000),\n\t[sap_stocktransactionsheader_cardref] nvarchar(4000),\n\t[sap_stocktransactionsheader_discprcnt] numeric(18,2),\n\t[sap_stocktransactionsheader_discsum] numeric(18,2),\n\t[sap_stocktransactionsheader_doctotal] numeric(18,2),\n\t[sap_stocktransactionsheader_comments] nvarchar(4000),\n\t[sap_stocktransactionsheader_transid] int,\n\t[sap_stocktransactionsheader_u_expense_depot] nvarchar(4000),\n\t[sap_stocktransactionsline_linenum] int,\n\t[sap_stocktransactionsline_linestatus] nvarchar(4000),\n\t[sap_stocktransactionsline_itemcode] nvarchar(4000),\n\t[sap_stocktransactionsline_dscription] nvarchar(4000),\n\t[sap_stocktransactionsline_quantity] numeric(18,2),\n\t[sap_stocktransactionsline_openqty] numeric(18,2),\n\t[sap_stocktransactionsline_price] numeric(18,2),\n\t[sap_stocktransactionsline_rate] numeric(18,2),\n\t[sap_stocktransactionsline_discprcnt] numeric(18,2),\n\t[sap_stocktransactionsline_linetotal] numeric(18,2),\n\t[sap_stocktransactionsline_opensum] numeric(18,2),\n\t[sap_stocktransactionsline_pricebefdi] numeric(18,2),\n\t[sap_stocktransactionsline_docdate] datetime2(7),\n\t[sap_stocktransactionsline_project] nvarchar(4000),\n\t[sap_stocktransactionsline_vatprcnt] numeric(18,2),\n\t[sap_stocktransactionsline_vatgroup] nvarchar(4000),\n\t[sap_stocktransactionsline_vatamount] numeric(18,2),\n\t[sap_stocktransactionsline_u_reason] nvarchar(4000),\n\t[sap_stocktransactionsline_u_expenseitem] nvarchar(4000),\n\t[sap_stocktransactionsline_u_fueldate] datetime2(7),\n\t[sap_stocktransactionsline_acctcode] nvarchar(4000),\n\t[sap_stocktransactionsline_doccat] nvarchar(4000),\n\t[sap_stocktransactionsline_subdepotcode] nvarchar(4000),\n\t[sap_stocktransactionsline_discsum] numeric(18,2),\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/ststocktransactions.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STStockTransactions \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STTMSActivityDetail')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STTMSActivityDetail') )\n    DROP EXTERNAL TABLE dbo.T_STTMSActivityDetail\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STTMSActivityDetail (\n[tms_activity_tripid] bigint,\n[tms_activity_tripdriverid] nvarchar(4000),\n[tms_activity_tripdrivername] nvarchar(4000),\n[tms_activity_tripvehicleid] nvarchar(4000),\n[tms_activity_tripvehiclefleetcode] nvarchar(4000),\n[tms_activity_triptrailer1id] nvarchar(4000),\n[tms_activity_triptrailer1fleetcode] nvarchar(4000),\n[tms_activity_triptrailer2id] nvarchar(4000),\n[tms_activity_triptrailer2fleetcode] nvarchar(4000),\n[tms_activity_triptrailersize] nvarchar(4000),\n[tms_activity_tripstatus] nvarchar(4000),\n[tms_activity_tripparenetrouteid] bigint,\n[tms_activity_tripparentroute] nvarchar(4000),\n[tms_activity_tripopsrouteid] bigint,\n[tms_activity_tripopsroute] nvarchar(4000),\n[tms_activity_tripdispatchdate] date,\n[tms_activity_triptransporter] nvarchar(4000),\n[tms_activity_tripsource] nvarchar(4000),\n[tms_activity_bookingid] bigint,\n[tms_activity_bookingtype] nvarchar(4000),\n[tms_activity_bookingtrailersize] nvarchar(4000),\n[tms_activity_bookingcubicvolume] float,\n[tms_activity_directbooking] int,\n[tms_activity_localbooking] int,\n[tms_activity_bookingsource] nvarchar(4000),\n[tms_activity_bookingallocateddate] date,\n[tms_activity_customerid] bigint,\n[tms_activity_primarycustomer] nvarchar(4000),\n[tms_activity_childcustomerid] bigint,\n[tms_activity_secondarycustomer] nvarchar(4000),\n\n)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/sttmsactivitydetail.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t);\n\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STTMSActivityDetail \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STTMSActivitySummary')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STTMSActivitySummary') )\n    DROP EXTERNAL TABLE dbo.T_STTMSActivitySummary\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STTMSActivitySummary (\n[tms_activity_tripid] bigint,\n[tms_activity_bookingid] bigint,\n[tms_activity_tripdrivername] nvarchar(4000),\n[tms_activity_tripstatus] nvarchar(4000),\n[tms_activity_tripopsroute] nvarchar(4000),\n[tms_activity_tripdispatchdate] date,\n[tms_activity_tripsource] nvarchar(4000),\n[tms_activity_directbooking] int,\n[tms_activity_localbooking] int,\n[tms_activity_triptrailersize] nvarchar(4000),\n[tms_activity_triptransporter] nvarchar(4000),\n[tms_activity_bookingtype] nvarchar(4000),\n[tms_activity_aggrbookingcubicvolume] float,\n[tms_activity_aggrbookingid] bigint,\n[tms_activity_bookingallocateddate] date,\n[tms_activity_primarycustomer] nvarchar(4000),\n[tms_activity_secondarycustomer] nvarchar(4000),\n\n)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/sttmsactivitysummary.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t);\n\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STTMSActivitySummary \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STTMSTrack')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STTMSTrack') )\n    DROP EXTERNAL TABLE dbo.T_STTMSTrack\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STTMSTrack (\n    [tms_track_id] bigint,\n    [tms_track_tripid] bigint,\n    [tms_track_source] nvarchar(4000),\n    [tms_track_trackdate] datetime2(7),\n    [tms_track_tracktype] nvarchar(4000),\n    [tms_track_userid] bigint,\n    [tms_track_lat] float,\n    [tms_track_lng] float,\n    [tms_track_address] nvarchar(4000),\n    [tms_track_note] nvarchar(4000),\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/sttmstrack.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STTMSTrack \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STTransactionsDetail')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STTransactionsDetail') )\n    DROP EXTERNAL TABLE dbo.T_STTransactionsDetail\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STTransactionsDetail (\n\t[sap_transactionsline_polookupid] nvarchar(4000),\n\t[sap_transactionsheader_docentry] int,\n\t[sap_transactionsheader_docnum] int,\n\t[sap_transactionsheader_doctype] nvarchar(4000),\n\t[sap_transactionsheader_objtype] nvarchar(4000),\n\t[sap_transactionsheader_postingdate] date,\n\t[sap_transactionsheader_duedate] date,\n\t[sap_transactionsheader_cardcode] nvarchar(4000),\n\t[sap_transactionsheader_cardref] nvarchar(4000),\n\t[sap_transactionsheader_discprcnt] numeric(18,2),\n\t[sap_transactionsheader_discsum] numeric(18,2),\n\t[sap_transactionsheader_doctotal] numeric(18,2),\n\t[sap_transactionsheader_comments] nvarchar(4000),\n\t[sap_transactionsheader_transid] int,\n\t[sap_transactionsheader_u_expense_depot] nvarchar(4000),\n\t[sap_transactionsline_linenum] int,\n\t[sap_transactionsline_linestatus] nvarchar(4000),\n\t[sap_transactionsline_itemcode] nvarchar(4000),\n\t[sap_transactionsline_dscription] nvarchar(4000),\n\t[sap_transactionsline_quantity] numeric(18,2),\n\t[sap_transactionsline_openqty] numeric(18,2),\n\t[sap_transactionsline_price] numeric(18,2),\n\t[sap_transactionsline_rate] numeric(18,2),\n\t[sap_transactionsline_discprcnt] numeric(18,2),\n\t[sap_transactionsline_linetotal] numeric(18,2),\n\t[sap_transactionsline_linetotallessdiscount] numeric(18,2),\n\t[sap_transactionsline_linetotalfinal] numeric(18,2),\n\t[sap_transactionsline_linetotalfinalexclgjpo] numeric(18,2),\n\t[sap_transactionsline_opensum] numeric(18,2),\n\t[sap_transactionsline_pricebefdi] numeric(18,2),\n\t[sap_transactionsline_docdate] date,\n\t[sap_transactionsline_project] nvarchar(4000),\n\t[sap_transactionsline_vatprcnt] numeric(18,2),\n\t[sap_transactionsline_vatgroup] nvarchar(4000),\n\t[sap_transactionsline_vatamount] numeric(18,2),\n\t[sap_transactionsline_u_reason] nvarchar(4000),\n\t[sap_transactionsline_u_expenseitem] nvarchar(4000),\n\t[sap_transactionsline_u_fueldate] date,\n\t[sap_transactionsline_acctcode] nvarchar(4000),\n\t[sap_transactionsline_doccat] nvarchar(4000),\n\t[sap_transactionsline_subdepotcode] nvarchar(4000),\n\t[sap_transactionsline_u_rate] nvarchar(4000),\n\t[sap_transactionsline_u_ir_number] int,\n\t[sap_transactionsline_discsum] numeric(18,2),\n\t[sap_transactionsline_vatrate] numeric(18,2),\n\t[sap_transactionsline_description] nvarchar(4000),\n\t[sap_transactionsline_jnlref1] nvarchar(4000),\n\t[sap_transactionsline_jnlref2] nvarchar(4000),\n\t[sap_transactionsline_invntitem] nvarchar(4000),\n\t[sap_transactionsline_exception] nvarchar(4000)\n\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/sttransactionsdetail.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STTransactionsDetail \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STTransactionsSummary')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Finance"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STTransactionsSummary') )\n    DROP EXTERNAL TABLE dbo.T_STTransactionsSummary\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STTransactionsSummary (\n[sap_transactionsline_acctcode] nvarchar(4000),\n[sap_transactionsheader_postingdate] date,\n[sap_transactionsline_subdepotcode] nvarchar(4000),\n[sap_transactionsline_doccat] nvarchar(4000),\n[sap_transactionsline_linetotal] numeric(18,2),\n[sap_transactionsline_linetotalfinal] numeric(18,2),\n[sap_transactionsline_linetotalfinalexclgjpo] numeric(18,2),\n)\n\tWITH (\n\tLOCATION = 'Structured Data/FINANCE/sttransactionssummary.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t);\n\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STTransactionsSummary \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STTrip')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STTrip') )\n    DROP EXTERNAL TABLE dbo.T_STTrip\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STTrip (\n[tms_trip_id] bigint,\n[tms_trip_driverid] nvarchar(4000),\n[tms_trip_drivername] nvarchar(4000),\n[tms_trip_vehicleid] nvarchar(4000),\n[tms_trip_vehiclefleetcode] nvarchar(4000),\n[tms_trip_trailerid] nvarchar(4000),\n[tms_trip_trailer1fleetcode] nvarchar(4000),\n[tms_trip_sectrailerid] nvarchar(4000),\n[tms_trip_trailer2fleetcode] nvarchar(4000),\n[tms_trip_trailersize] nvarchar(4000),\n[tms_trip_status] nvarchar(4000),\n[tms_trip_routeid] bigint,\n[tms_trip_opsrouteid] bigint,\n[tms_trip_startfromaddress] nvarchar(4000),\n[tms_trip_startfromlat] nvarchar(4000),\n[tms_trip_startfromlng] nvarchar(4000),\n[tms_trip_dispatchdate] datetime2(7),\n[tms_trip_stopaddress] nvarchar(4000),\n[tms_trip_stoplat] nvarchar(4000),\n[tms_trip_stoplng] nvarchar(4000),\n[tms_trip_insdate] datetime2(7),\n[tms_trip_moddate] datetime2(7),\n[tms_trip_insby] bigint,\n[tms_trip_onrouteid] bigint,\n[tms_trip_uuid] nvarchar(4000),\n[tms_trip_insbyuser] nvarchar(4000),\n[tms_trip_thirdpartyid] bigint,\n[tms_trip_timehash] int,\n[tms_trip_onroutestatus] nvarchar(4000),\n[tms_trip_lastupdate] datetime2(7),\n[tms_trip_lastlng] float,\n[tms_trip_lastlat] float,\n[tms_trip_controllerid] bigint,\n[tms_trip_trackstatus] nvarchar(4000),\n[tms_trip_lastrackid] bigint,\n[tms_trip_customer] nvarchar(4000),\n[tms_trip_bookings] nvarchar(4000),\n[tms_trip_controller] nvarchar(4000),\n[tms_trip_transporter] nvarchar(4000),\n[tms_trip_legacyid] bigint,\n[tms_trip_originatedfrom] nvarchar(4000),\n[tms_trip_local] int,\n[tms_trip_startdate] datetime2(7),\n[tms_trip_enddate] datetime2(7),\n[tms_trip_actualdeliverydate] datetime2(7),\n[tms_trip_note] nvarchar(4000),\n[tms_trip_deliverydate] datetime2(7),\n[tms_trip_internalexternal] nvarchar(4000),\n[tms_trip_pickupstartaddress] nvarchar(4000),\n[tms_trip_originaletadate] datetime2(7),\n[tms_trip_currentetadate] datetime2(7),\n[tms_trip_lastetaupdate] datetime2(7),\n[tms_trip_source] nvarchar(4000),\n[orv_dispatch_id] bigint,\n[orv_dispatch_lmsid] bigint,\n[orv_dispatch_vid] bigint,\n[orv_dispatch_did] bigint,\n[orv_dispatch_status] nvarchar(4000),\n[orv_dispatch_startdate] datetime2(7),\n[orv_dispatch_stopdate] datetime2(7),\n[orv_dispatch_vehicletype] int,\n[orv_dispatch_uid] bigint,\n[orv_dispatch_estdepdate] datetime2(7),\n[orv_dispatch_trailer] bigint,\n[orv_dispatch_trailer2] bigint,\n[orv_dispatch_fromlocid] bigint,\n[orv_dispatch_tolocid] bigint,\n[orv_dispatch_site] nvarchar(4000),\n[orv_dispatch_lastupdate] datetime2(7),\n[orv_dispatch_etastatus] nvarchar(4000),\n[orv_dispatch_startinglat] float,\n[orv_dispatch_startinglng] float,\n[orv_dispatch_endinglat] float,\n[orv_dispatch_endinglng] float,\n[orv_dispatch_startingfrom] nvarchar(4000),\n[orv_dispatch_goingto] nvarchar(4000),\n[orv_dispatch_importissue] nvarchar(4000),\n[orv_dispatch_insdate] datetime2(7),\n[orv_dispatch_estarrdate] datetime2(7),\n[orv_dispatch_duration] bigint,\n[orv_dispatch_distance] bigint,\n[orv_dispatch_cost] bigint,\n[orv_dispatch_stoplat] float,\n[orv_dispatch_stoplng] float,\n[orv_dispatch_stopreason] nvarchar(4000),\n[orv_dispatch_startodo] bigint,\n[orv_dispatch_stopodo] bigint,\n[orv_dispatch_expduration] bigint,\n[orv_dispatch_expdistance] bigint,\n[orv_dispatch_expcost] bigint,\n[orv_dispatch_collectionid] bigint,\n[orv_dispatch_crew] int,\n[orv_dispatch_crewnames] nvarchar(4000),\n[orv_dispatch_bocloseuid] bigint,\n[orv_dispatch_routing] nvarchar(4000),\n[orv_dispatch_swapct] int,\n[orv_dispatch_debriefed] int,\n[orv_dispatch_debriefnotes] nvarchar(4000),\n[orv_dispatch_bopin] nvarchar(4000),\n[orv_dispatch_cpicost] bigint,\n[orv_dispatch_labourcost] bigint,\n[orv_dispatch_maintcost] bigint,\n[orv_dispatch_inscost] bigint,\n[orv_dispatch_tollcost] bigint,\n[orv_dispatch_fuelcost] bigint,\n[orv_dispatch_internal] int,\n[orv_dispatch_childids] nvarchar(4000),\n[orv_dispatch_guid] bigint,\n[orv_dispatch_timedefinite] int,\n[orv_dispatch_orvcode] int,\n[orv_dispatch_tsstopdepoenter] datetime2(7),\n[orv_dispatch_tsstartdepoexit] datetime2(7),\n[orv_dispatch_reroutect] int,\n[orv_dispatch_actualarrdate] datetime2(7),\n[orv_dispatch_physicalstartlat] float,\n[orv_dispatch_physicalstartlng] float,\n[orv_dispatch_tsstartdepoexitapp] datetime2(7),\n[orv_dispatch_tsstopdepoenterapp] datetime2(7),\n[orv_dispatch_uncanceldate] datetime2(7),\n[orv_dispatch_uncancelusername] nvarchar(4000),\n[orv_dispatch_lmsdebrifed] int,\n[orv_dispatch_reviseddebrief] int,\n[orv_dispatch_lhtransporter] nvarchar(4000),\n[orv_dispatch_triptype] nvarchar(4000),\n[orv_dispatch_startreason] nvarchar(4000),\n[orv_dispatch_route] nvarchar(4000),\n[orv_dispatch_tmstraileridentify] nvarchar(4000),\n[orv_dispatch_tmstrailer2identify] nvarchar(4000),\n[orv_dispatch_tmscontroller] nvarchar(4000),\n[orv_dispatch_routekey] nvarchar(4000),\n[orv_dispatch_courierid] bigint,\n[orv_dispatch_originalstartdate] datetime2(7),\n[orv_dispatch_originalextarrival] datetime2(7),\n[orv_dispatch_recomputeoriginals] int,\n[orv_dispatch_originalextdistance] bigint,\n[orv_dispatch_originalextduration] bigint,\n[orv_dispatch_moddate] datetime2(7),\n[orv_dispatch_tmsmode] int,\n[orv_dispatch_driversignature] bigint,\n[tms_trip_appduration] bigint,\n[tms_trip_driverduration] bigint,\n[tms_trip_controlroomduration] bigint,\n[tms_trip_arrivedontime] nvarchar(4000),\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/sttrip.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STTrip \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STTripTrackingHistory')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Linehaul"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STTripTrackingHistory') )\n    DROP EXTERNAL TABLE dbo.T_STTripTrackingHistory\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STTripTrackingHistory (\n    [tms_triptrackinghistory_id] bigint,\n    [tms_triptrackinghistory_tripid] bigint,\n    [tms_triptrackinghistory_controllerid] bigint,\n    [tms_triptrackinghistory_fromdate] datetime2(7),\n    [tms_triptrackinghistory_todate] datetime2(7),\n    [tms_triptrackinghistory_actionedby] bigint,\n    [tms_triptrackinghistory_controllername] nvarchar(4000),\n    [tms_triptrackinghistory_actionedbyname] nvarchar(4000),\n\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/sttriptrackinghistory.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STTripTrackingHistory \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STWaybill')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STWaybill') )\n    DROP EXTERNAL TABLE dbo.T_STWaybill\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STWaybill (\n[lms_waybill_id] int,\n[lms_waybill_date] datetime2(7),\n[lms_waybill_customerid] int,\n[lms_waybill_bservice] nvarchar(4000),\n[lms_waybill_cservice] nvarchar(4000),\n[lms_waybill_originid] nvarchar(4000),\n[lms_waybill_defuser] nvarchar(4000),\n[lms_waybill_distance] float,\n[lms_waybill_courierid] nvarchar(4000),\n[lms_waybill_courierwbno] nvarchar(4000),\n[lms_waybill_billtype] int,\n[lms_waybill_capdate] datetime2(7),\n[lms_waybill_ordertype] int,\n[lms_waybill_billcust] int,\n[lms_waybill_pickupcustid] int,\n[lms_waybill_delivercustid] int,\n[lms_waybill_billto] nvarchar(4000),\n[lms_waybill_claimable] int,\n[lms_waybill_override] int,\n[lms_waybill_vehiclecapacity] int,\n[lms_waybill_poddate] datetime2(7),\n[lms_waybill_signee] nvarchar(4000),\n[lms_waybill_grvno] nvarchar(4000),\n[lms_waybill_endorsements] nvarchar(4000),\n[lms_waybill_loadid] int,\n[lms_waybill_routeid] int,\n[lms_waybill_mrpflag] int,\n[lms_waybill_printed] int,\n[lms_waybill_sreasonid] int,\n[lms_waybill_hasprinted] nvarchar(4000),\n[lms_waybill_site] nvarchar(4000),\n[lms_waybill_deliveryno] int,\n[lms_waybill_custaccid] int,\n[lms_waybill_scanned] int,\n[lms_waybill_userid] int,\n[lms_waybill_autoprinted] int,\n[lms_waybill_cref] nvarchar(4000),\n[lms_waybill_ushort] int,\n[lms_waybill_delays] nvarchar(4000),\n[lms_waybill_debriefed] int,\n[lms_waybill_debriefdt] datetime2(7),\n[lms_waybill_dbctnsret] int,\n[lms_waybill_uploaded] int,\n[lms_waybill_serviceexclude] int,\n[lms_waybill_failed] int,\n[lms_waybill_delayreasonid] int,\n[lms_waybill_notdebrievreasonid] int,\n[lms_waybill_deliverystatid] int,\n[lms_waybill_reasongroupid] int,\n[lms_waybill_emailcust] int,\n[lms_waybill_mobileissuereportedid] int,\n[lms_waybill_ismobile] int,\n[lms_waybill_custcomment] nvarchar(4000),\n[lms_waybill_custfeedback] int,\n[lms_waybill_reasondetailid] int,\n[lms_waybill_mobilecomments] nvarchar(4000),\n[lms_waybill_inservicereasonid] int,\n[lms_waybill_notdebrievcom] nvarchar(4000),\n[lms_waybill_lastupdate] datetime2(7),\n[lms_waybill_dropsequence] int,\n[lms_waybill_noofparcelssreturned] int,\n[lms_parcelbywaybill_aggrweight] numeric(36,8),\n[lms_parcelbywaybill_aggrchargeweight] numeric(36,8),\n[lms_parcelbywaybill_aggrvolweight] numeric(36,8),\n[lms_parcelbywaybill_aggrvolumiserweight] numeric(36,8),\n[lms_parcelbywaybill_aggrmaxweight] numeric(36,8),\n[lms_parcelbywaybill_aggrnoparcels] bigint,\n[lms_parcelbywaybill_aggrweightexclspecdel] numeric(36,8),\n[lms_parcelbywaybill_aggrchargeweightexclspecdel] numeric(36,8),\n[lms_parcelbywaybill_aggrvolweightexclspecdel] numeric(36,8),\n[lms_parcelbywaybill_aggrvolumiserweightexclspecdel] numeric(36,8),\n[lms_parcelbywaybill_aggrmaxweightexclspecdel] numeric(36,8),\n[lms_parcelbywaybill_aggrnoparcelsexclspecdel] bigint,\n[orv_delivery_id] bigint,\n[orv_delivery_did] bigint,\n[orv_delivery_waybillid] bigint,\n[orv_delivery_address] nvarchar(4000),\n[orv_delivery_town] nvarchar(4000),\n[orv_delivery_province] nvarchar(4000),\n[orv_delivery_country] nvarchar(4000),\n[orv_delivery_lat] float,\n[orv_delivery_lng] float,\n[orv_delivery_placeid] nvarchar(4000),\n[orv_delivery_what3words] nvarchar(4000),\n[orv_delivery_zipcode] nvarchar(4000),\n[orv_delivery_eta] datetime2(7),\n[orv_delivery_actualeta] datetime2(7),\n[orv_delivery_deliverydate] datetime2(7),\n[orv_delivery_deliverby] datetime2(7),\n[orv_delivery_deliveryorder] int,\n[orv_delivery_tsgeofenceenter] datetime2(7),\n[orv_delivery_tsscanningstart] datetime2(7),\n[orv_delivery_tsscanningstop] datetime2(7),\n[orv_delivery_tspodsignature] datetime2(7),\n[orv_delivery_aid] bigint,\n[orv_delivery_numprcls] int,\n[orv_delivery_geocodingstatus] nvarchar(4000),\n[orv_delivery_skipdate] datetime2(7),\n[orv_delivery_skipreason] nvarchar(4000),\n[orv_delivery_status] nvarchar(4000),\n[orv_delivery_partialmatch] int,\n[orv_delivery_approximated] int,\n[orv_delivery_lmsorder] int,\n[orv_delivery_optimizedorder] int,\n[orv_delivery_seal] nvarchar(4000),\n[orv_delivery_customerinvoice] int,\n[orv_delivery_customerdn] int,\n[orv_delivery_grv] nvarchar(4000),\n[orv_delivery_chepslip] int,\n[orv_delivery_cleandelivery] int,\n[orv_delivery_trackingcode] nvarchar(4000),\n[orv_delivery_mode] nvarchar(4000),\n[orv_delivery_customorder] int,\n[orv_delivery_verified] int,\n[orv_delivery_altered] int,\n[orv_delivery_orderid] int,\n[orv_delivery_mergeid] bigint,\n[orv_delivery_orderref] nvarchar(4000),\n[orv_delivery_drivernote] nvarchar(4000),\n[orv_delivery_guid] bigint,\n[orv_delivery_timedefinite] int,\n[orv_delivery_orvcode] int,\n[orv_delivery_vaid] bigint,\n[orv_delivery_delegatedate] datetime2(7),\n[orv_delivery_delegatemode] nvarchar(4000),\n[orv_delivery_debriefmode] nvarchar(4000),\n[orv_delivery_debriefed] int,\n[orv_delivery_insdate] datetime2(7),\n[orv_delivery_reviseddebrief] int,\n[orv_delivery_lmsdebriefed] int,\n[orv_delivery_uncanceldate] datetime2(7),\n[orv_delivery_podlaterdate] datetime2(7),\n[orv_delivery_podmanualdate] datetime2(7),\n[orv_delivery_manualdebriefreason] nvarchar(4000),\n[orv_delivery_submanualdebriefreason] nvarchar(4000),\n[orv_delivery_outofgeofencereason] nvarchar(4000),\n[orv_delivery_tsentergeofenceapp] datetime2(7),\n[orv_delivery_tsexitgeofenceapp] datetime2(7),\n[orv_delivery_comebacklater] bigint,\n[orv_delivery_uncancelusername] nvarchar(4000),\n[orv_delivery_cref] int,\n[orv_delivery_division] int,\n[orv_delivery_descriptionofgoods] nvarchar(4000),\n[orv_delivery_skiplng] float,\n[orv_delivery_skiplat] float,\n[orv_delivery_courierid] bigint,\n[orv_delivery_posreason] nvarchar(4000),\n[orv_delivery_moddate] datetime2(7),\n[orv_delivery_mallid] int,\n[orv_delivery_mallgid] bigint,\n[orv_delivery_lmsidskipreason] bigint,\n[orv_delivery_deleteforimport] int,\n[orv_delivery_podoutofgeofence] int,\n[orv_delivery_originalcustomerid] bigint,\n[orv_pod_id] bigint,\n[orv_pod_name] nvarchar(4000),\n[orv_pod_poddate] datetime2(7),\n[orv_pod_lat] float,\n[orv_pod_lng] float,\n[orv_pod_customerrating] int,\n[orv_pod_customerfeedback] nvarchar(4000),\n[orv_delivery_poddistancefromdeliverypoint] float,\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stwaybill.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STWaybill \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STWaybill_3MYoY')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Schema on Read/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.external_tables WHERE object_id = OBJECT_ID('dbo.T_STWaybill_3MYoY') )\n    DROP EXTERNAL TABLE dbo.T_STWaybill_3MYoY\nGO\n\nCREATE EXTERNAL TABLE dbo.T_STWaybill_3MYoY (\n [lms_waybill_id] int,\n[lms_waybill_date] datetime2(7),\n[lms_waybill_customerid] int,\n[lms_waybill_bservice] nvarchar(4000),\n[lms_waybill_cservice] nvarchar(4000),\n[lms_waybill_originid] nvarchar(4000),\n[lms_waybill_defuser] nvarchar(4000),\n[lms_waybill_distance] float,\n[lms_waybill_courierid] nvarchar(4000),\n[lms_waybill_courierwbno] nvarchar(4000),\n[lms_waybill_billtype] int,\n[lms_waybill_capdate] datetime2(7),\n[lms_waybill_ordertype] int,\n[lms_waybill_billcust] int,\n[lms_waybill_pickupcustid] int,\n[lms_waybill_delivercustid] int,\n[lms_waybill_billto] nvarchar(4000),\n[lms_waybill_claimable] int,\n[lms_waybill_override] int,\n[lms_waybill_vehiclecapacity] int,\n[lms_waybill_poddate] datetime2(7),\n[lms_waybill_signee] nvarchar(4000),\n[lms_waybill_grvno] nvarchar(4000),\n[lms_waybill_endorsements] nvarchar(4000),\n[lms_waybill_loadid] int,\n[lms_waybill_routeid] int,\n[lms_waybill_mrpflag] int,\n[lms_waybill_printed] int,\n[lms_waybill_sreasonid] int,\n[lms_waybill_hasprinted] nvarchar(4000),\n[lms_waybill_site] nvarchar(4000),\n[lms_waybill_deliveryno] int,\n[lms_waybill_custaccid] int,\n[lms_waybill_scanned] int,\n[lms_waybill_userid] int,\n[lms_waybill_autoprinted] int,\n[lms_waybill_cref] nvarchar(4000),\n[lms_waybill_ushort] int,\n[lms_waybill_delays] nvarchar(4000),\n[lms_waybill_debriefed] int,\n[lms_waybill_debriefdt] datetime2(7),\n[lms_waybill_dbctnsret] int,\n[lms_waybill_uploaded] int,\n[lms_waybill_serviceexclude] int,\n[lms_waybill_failed] int,\n[lms_waybill_delayreasonid] int,\n[lms_waybill_notdebrievreasonid] int,\n[lms_waybill_deliverystatid] int,\n[lms_waybill_reasongroupid] int,\n[lms_waybill_emailcust] int,\n[lms_waybill_mobileissuereportedid] int,\n[lms_waybill_ismobile] int,\n[lms_waybill_custcomment] nvarchar(4000),\n[lms_waybill_custfeedback] int,\n[lms_waybill_reasondetailid] int,\n[lms_waybill_mobilecomments] nvarchar(4000),\n[lms_waybill_inservicereasonid] int,\n[lms_waybill_notdebrievcom] nvarchar(4000),\n[lms_waybill_lastupdate] datetime2(7),\n[lms_waybill_dropsequence] int,\n[lms_waybill_noofparcelssreturned] int,\n[lms_parcelbywaybill_aggrweight] numeric(36,8),\n[lms_parcelbywaybill_aggrchargeweight] numeric(36,8),\n[lms_parcelbywaybill_aggrvolweight] numeric(36,8),\n[lms_parcelbywaybill_aggrvolumiserweight] numeric(36,8),\n[lms_parcelbywaybill_aggrmaxweight] numeric(36,8),\n[lms_parcelbywaybill_aggrnoparcels] bigint,\n[lms_parcelbywaybill_aggrweightexclspecdel] numeric(36,8),\n[lms_parcelbywaybill_aggrchargeweightexclspecdel] numeric(36,8),\n[lms_parcelbywaybill_aggrvolweightexclspecdel] numeric(36,8),\n[lms_parcelbywaybill_aggrvolumiserweightexclspecdel] numeric(36,8),\n[lms_parcelbywaybill_aggrmaxweightexclspecdel] numeric(36,8),\n[lms_parcelbywaybill_aggrnoparcelsexclspecdel] bigint,\n[orv_delivery_id] bigint,\n[orv_delivery_did] bigint,\n[orv_delivery_waybillid] bigint,\n[orv_delivery_address] nvarchar(4000),\n[orv_delivery_town] nvarchar(4000),\n[orv_delivery_province] nvarchar(4000),\n[orv_delivery_country] nvarchar(4000),\n[orv_delivery_lat] float,\n[orv_delivery_lng] float,\n[orv_delivery_placeid] nvarchar(4000),\n[orv_delivery_what3words] nvarchar(4000),\n[orv_delivery_zipcode] nvarchar(4000),\n[orv_delivery_eta] datetime2(7),\n[orv_delivery_actualeta] datetime2(7),\n[orv_delivery_deliverydate] datetime2(7),\n[orv_delivery_deliverby] datetime2(7),\n[orv_delivery_deliveryorder] int,\n[orv_delivery_tsgeofenceenter] datetime2(7),\n[orv_delivery_tsscanningstart] datetime2(7),\n[orv_delivery_tsscanningstop] datetime2(7),\n[orv_delivery_tspodsignature] datetime2(7),\n[orv_delivery_aid] bigint,\n[orv_delivery_numprcls] int,\n[orv_delivery_geocodingstatus] nvarchar(4000),\n[orv_delivery_skipdate] datetime2(7),\n[orv_delivery_skipreason] nvarchar(4000),\n[orv_delivery_status] nvarchar(4000),\n[orv_delivery_partialmatch] int,\n[orv_delivery_approximated] int,\n[orv_delivery_lmsorder] int,\n[orv_delivery_optimizedorder] int,\n[orv_delivery_seal] nvarchar(4000),\n[orv_delivery_customerinvoice] int,\n[orv_delivery_customerdn] int,\n[orv_delivery_grv] nvarchar(4000),\n[orv_delivery_chepslip] int,\n[orv_delivery_cleandelivery] int,\n[orv_delivery_trackingcode] nvarchar(4000),\n[orv_delivery_mode] nvarchar(4000),\n[orv_delivery_customorder] int,\n[orv_delivery_verified] int,\n[orv_delivery_altered] int,\n[orv_delivery_orderid] int,\n[orv_delivery_mergeid] bigint,\n[orv_delivery_orderref] nvarchar(4000),\n[orv_delivery_drivernote] nvarchar(4000),\n[orv_delivery_guid] bigint,\n[orv_delivery_timedefinite] int,\n[orv_delivery_orvcode] int,\n[orv_delivery_vaid] bigint,\n[orv_delivery_delegatedate] datetime2(7),\n[orv_delivery_delegatemode] nvarchar(4000),\n[orv_delivery_debriefmode] nvarchar(4000),\n[orv_delivery_debriefed] int,\n[orv_delivery_insdate] datetime2(7),\n[orv_delivery_reviseddebrief] int,\n[orv_delivery_lmsdebriefed] int,\n[orv_delivery_uncanceldate] datetime2(7),\n[orv_delivery_podlaterdate] datetime2(7),\n[orv_delivery_podmanualdate] datetime2(7),\n[orv_delivery_manualdebriefreason] nvarchar(4000),\n[orv_delivery_submanualdebriefreason] nvarchar(4000),\n[orv_delivery_outofgeofencereason] nvarchar(4000),\n[orv_delivery_tsentergeofenceapp] datetime2(7),\n[orv_delivery_tsexitgeofenceapp] datetime2(7),\n[orv_delivery_comebacklater] bigint,\n[orv_delivery_uncancelusername] nvarchar(4000),\n[orv_delivery_cref] int,\n[orv_delivery_division] int,\n[orv_delivery_descriptionofgoods] nvarchar(4000),\n[orv_delivery_skiplng] float,\n[orv_delivery_skiplat] float,\n[orv_delivery_courierid] bigint,\n[orv_delivery_posreason] nvarchar(4000),\n[orv_delivery_moddate] datetime2(7),\n[orv_delivery_mallid] int,\n[orv_delivery_mallgid] bigint,\n[orv_delivery_lmsidskipreason] bigint,\n[orv_delivery_deleteforimport] int,\n[orv_delivery_podoutofgeofence] int,\n[orv_delivery_originalcustomerid] bigint,\n[orv_pod_id] bigint,\n[orv_pod_name] nvarchar(4000),\n[orv_pod_poddate] datetime2(7),\n[orv_pod_lat] float,\n[orv_pod_lng] float,\n[orv_pod_customerrating] int,\n[orv_pod_customerfeedback] nvarchar(4000),\n[orv_delivery_poddistancefromdeliverypoint] float,\n\n\n\n\t)\n\tWITH (\n\tLOCATION = 'Structured Data/OPS/stwaybill3myoy.parquet',\n\tDATA_SOURCE = [synapse_citylogisticsstorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.T_STWaybill_3MYoY \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STWaybill_CY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STWaybill_CY3Month') )\n    DROP VIEW dbo.T_STWaybill_CY3Month\nGO\n\nCREATE VIEW [dbo].[T_STWaybill_CY3Month]\n\nAS \n\nWITH CTE AS (\n\nSELECT lms_parcel_waybillid as lms_waybill_id \nFROM dbo.T_STParcel \nWHERE lms_parcel_pdate >= DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0))\nAND lms_parcel_pdate <= DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7))))\n\nUNION\n\nSELECT lms_waybill_id \nFROM dbo.T_STWaybill \nWHERE lms_waybill_date >= DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0))\nAND lms_waybill_date <= DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7))))\n)\n\nSELECT \nWB.*\nFROM CTE \nLEFT JOIN dbo.T_STWaybill WB on WB.lms_waybill_id  = CTE.lms_waybill_id\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/T_STWaybill_PY3Month')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Structured Views/Ops/Distribution"
				},
				"content": {
					"query": "IF EXISTS ( SELECT * FROM sys.views WHERE object_id = OBJECT_ID('dbo.T_STWaybill_PY3Month') )\n    DROP VIEW dbo.T_STWaybill_PY3Month\nGO\n\nCREATE VIEW [dbo].[T_STWaybill_PY3Month]\n\nAS \n\nWITH CTE AS (\n\nSELECT lms_parcel_waybillid as lms_waybill_id \nFROM dbo.T_STParcel \nWHERE lms_parcel_pdate >= DATEADD(yy,-1,DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0)))\nAND lms_parcel_pdate <= DATEADD(yy,-1,DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7)))))\n\nUNION\n\nSELECT lms_waybill_id \nFROM dbo.T_STWaybill \nWHERE lms_waybill_date >= DATEADD(yy,-1,DATEADD(m,-3, DATEADD(mm, DATEDIFF(m,0,GETDATE()),0)))\nAND lms_waybill_date <= DATEADD(yy,-1,DATEADD(nanosecond,-50,DATEADD(d,1,CAST(CAST(GETDATE() AS DATE) AS DATETIME2(7)))))\n\n)\n\nSELECT \nWB.*\nFROM CTE \nLEFT JOIN dbo.T_STWaybill WB on WB.lms_waybill_id  = CTE.lms_waybill_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STOPS",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/User Management - DB lvl Access')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT * FROM sys.database_scoped_credentials;\n\nCREATE USER [michelledb@citylogistics.co.za] FROM LOGIN [michelledb@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER  [michelledb@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [michelledb@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [michelledb@citylogistics.co.za];\n\nCREATE USER [nerakshab@citylogistics.co.za] FROM LOGIN [nerakshab@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER [nerakshab@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [nerakshab@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [nerakshab@citylogistics.co.za];\n\nCREATE USER [Carlyd@citylogistics.co.za] FROM LOGIN [Carlyd@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER [Carlyd@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [Carlyd@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [Carlyd@citylogistics.co.za];\n\nCREATE USER [riaans@citylogistics.co.za] FROM LOGIN [riaans@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER [riaans@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [riaans@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [riaans@citylogistics.co.za];\n\nCREATE USER [brianv@citylogistics.co.za] FROM LOGIN [brianv@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER [brianv@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [brianv@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [brianv@citylogistics.co.za];\n\nCREATE USER [ryang@citylogistics.co.za] FROM LOGIN [ryang@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER [ryang@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [ryang@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [ryang@citylogistics.co.za];\n\nCREATE USER [lucaa@citytech.co.za] FROM LOGIN [lucaa@citytech.co.za];\nALTER ROLE db_datareader ADD MEMBER [lucaa@citytech.co.za];\nGRANT VIEW DEFINITION TO [lucaa@citytech.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [lucaa@citytech.co.za];\n\nCREATE USER [kevinm@citylogistics.co.za] FROM LOGIN [kevinm@citylogistics.co.za];\nALTER ROLE db_datareader ADD MEMBER [kevinm@citylogistics.co.za];\nGRANT VIEW DEFINITION TO [kevinm@citylogistics.co.za];\nGRANT CONTROL ON DATABASE SCOPED CREDENTIAL :: SynapseUser to [kevinm@citylogistics.co.za];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "STSAP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UserManagement - Master Logins')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE LOGIN [michelledb@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [nerakshab@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [markb@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [Carlyd@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [riaans@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [brianv@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [ryang@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [lucaa@citytech.co.za] FROM EXTERNAL PROVIDER;\nCREATE LOGIN [kevinm@citylogistics.co.za] FROM EXTERNAL PROVIDER;\nDROP LOGIN [marks@citylogistics.co.za];\nDROP LOGIN [markb@citylogistics.co.za];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/00_STSAP_RunOrder')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6bcda762-5ade-4aef-aa12-963dafcc5fd7"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import os\r\n",
							"import pandas as pd\r\n",
							"import numpy as np\r\n",
							"from pyspark.sql.types import StructType, StructField, DoubleType, StringType, DecimalType\r\n",
							"from pyspark.sql.functions import col, to_timestamp"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#COA\r\n",
							"#Create DataFrame for the dboOACT SAP Table\r\n",
							"dboOACT = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbooact.parquet', format='parquet')\r\n",
							"dboOACT.createOrReplaceTempView(\"dboOACT\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Finance/01_STChartOfAccounts"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stchartofaccounts.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stchartofaccounts.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Item\r\n",
							"# #Create DataFrame for the dboOITM SAP Table \r\n",
							"dboOITM = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbooitm.parquet', format='parquet')\r\n",
							"dboOITM.createOrReplaceTempView(\"dboOITM\")\r\n",
							"\r\n",
							"#Item Group\r\n",
							"# #Create DataFrame for the dboOITB SAP Table\r\n",
							"dboOITB = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbooitb.parquet', format='parquet')\r\n",
							"dboOITB.createOrReplaceTempView(\"dboOITB\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Finance/02_STItems"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stitems.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stitems.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Business Partner\r\n",
							"#Create DataFrame for the dboOCRD SAP Table\r\n",
							"dboOCRD = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboocrd.parquet', format='parquet')\r\n",
							"dboOCRD.createOrReplaceTempView(\"dboOCRD\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Finance/03_STBusinessPartners"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbusinnesspartner.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stbusinnesspartner.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Sales Invoice Header\r\n",
							"#Create DataFrame for the dboOINV SAP Table\r\n",
							"dboOINV = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbooinv.parquet', format='parquet')\r\n",
							"dboOINV.createOrReplaceTempView(\"dboOINV\")\r\n",
							"\r\n",
							"#Sales Invoice Line\r\n",
							"#Create DataFrame for the dboINV1 SAP Table\r\n",
							"dboINV1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboinv1.parquet', format='parquet')\r\n",
							"dboINV1.createOrReplaceTempView(\"dboINV1\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Finance/04_STSalesInvoices"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsalesinvoice.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stsalesinvoice.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Stocck Revaluation Line\r\n",
							"#Create DataFrame for the dboOMRV SAP Table\r\n",
							"dboOMRV = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboomrv.parquet', format='parquet')\r\n",
							"dboOMRV.createOrReplaceTempView(\"dboOMRV\")\r\n",
							"\r\n",
							"#Stocck Revaluation Line 1\r\n",
							"#Create DataFrame for the dboMRV1 SAP Table\r\n",
							"dboMRV1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbomrv1.parquet', format='parquet')\r\n",
							"dboMRV1.createOrReplaceTempView(\"dboMRV1\")\r\n",
							"\r\n",
							"#Stocck Revaluation Line 2\r\n",
							"#Create DataFrame for the dboMRV2 SAP Table\r\n",
							"dboMRV2 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbomrv2.parquet', format='parquet')\r\n",
							"dboMRV2.createOrReplaceTempView(\"dboMRV2\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Finance/05_STStockRevaluations"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ststockrevaluations.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/ststockrevaluations.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Stock\r\n",
							"#Create DataFrame for the dboOINM \r\n",
							"dboOINM = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbooinm.parquet', format='parquet')\r\n",
							"dboOINM.createOrReplaceTempView(\"dboOINM\")\r\n",
							"\r\n",
							"#Goods Issue Header\r\n",
							"#Create DataFrame for the dboOIGE \r\n",
							"dboOIGE = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbooige.parquet', format='parquet')\r\n",
							"dboOIGE.createOrReplaceTempView(\"dboOIGE\")\r\n",
							"\r\n",
							"#Goods Issue Line\r\n",
							"#Create DataFrame for the dboIGE1 SAP LINE Table\r\n",
							"dboIGE1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboige1.parquet', format='parquet')\r\n",
							"dboIGE1.createOrReplaceTempView(\"dboIGE1\")\r\n",
							"\r\n",
							"#Goods Receipt Header\r\n",
							"#Create DataFrame for the dboOIGN \r\n",
							"dboOIGN = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbooign.parquet', format='parquet')\r\n",
							"dboOIGN.createOrReplaceTempView(\"dboOIGN\")\r\n",
							"\r\n",
							"#Goods Receipt Line\r\n",
							"#Create DataFrame for the dboIGN1 SAP LINE Table\r\n",
							"dboIGN1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboign1.parquet', format='parquet')\r\n",
							"dboIGN1.createOrReplaceTempView(\"dboIGN1\")"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Finance/06_STStockTransactions"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ststocktransactions.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/ststocktransactions.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Sales Credit Header\r\n",
							"#Create DataFrame for the dboORIN \r\n",
							"dboORIN = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboorin.parquet', format='parquet')\r\n",
							"dboORIN.createOrReplaceTempView(\"dboORIN\")\r\n",
							"\r\n",
							"#Sales Credit Line\r\n",
							"#Create DataFrame for the dboRIN1 SAP LINE Table\r\n",
							"dboRIN1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dborin1.parquet', format='parquet')\r\n",
							"dboRIN1.createOrReplaceTempView(\"dboRIN1\")\r\n",
							"\r\n",
							"#Purchase Invoice Header\r\n",
							"#Create DataFrame for the dboOPCH \r\n",
							"dboOPCH = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboopch.parquet', format='parquet')\r\n",
							"dboOPCH.createOrReplaceTempView(\"dboOPCH\")\r\n",
							"\r\n",
							"#Purchase Invoice Line\r\n",
							"#Create DataFrame for the dboPCH1 SAP LINE Table\r\n",
							"dboPCH1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbopch1.parquet', format='parquet')\r\n",
							"dboPCH1.createOrReplaceTempView(\"dboPCH1\")\r\n",
							"\r\n",
							"#Purchase Credit Header\r\n",
							"#Create DataFrame for the dboORPC \r\n",
							"dboORPC = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboorpc.parquet', format='parquet')\r\n",
							"dboORPC.createOrReplaceTempView(\"dboORPC\")\r\n",
							"\r\n",
							"#Purchase Credit Line\r\n",
							"#Create DataFrame for the dboRPC1 SAP LINE Table\r\n",
							"dboRPC1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dborpc1.parquet', format='parquet')\r\n",
							"dboRPC1.createOrReplaceTempView(\"dboRPC1\")\r\n",
							"\r\n",
							"#Goods Receipt Note Header\r\n",
							"#Create DataFrame for the dboOPDN \r\n",
							"dboOPDN = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboopdn.parquet', format='parquet')\r\n",
							"dboOPDN.createOrReplaceTempView(\"dboOPDN\")\r\n",
							"\r\n",
							"#Goods Receipt Note Line\r\n",
							"#Create DataFrame for the dboPDN1 SAP LINE Table\r\n",
							"dboPDN1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbopdn1.parquet', format='parquet')\r\n",
							"dboPDN1.createOrReplaceTempView(\"dboPDN1\")\r\n",
							"\r\n",
							"#Goods Return Header\r\n",
							"#Create DataFrame for the dboORPD \r\n",
							"dboORPD = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboorpd.parquet', format='parquet')\r\n",
							"dboORPD.createOrReplaceTempView(\"dboORPD\")\r\n",
							"\r\n",
							"#Goods Return Line\r\n",
							"#Create DataFrame for the dboRPD1 SAP LINE Table\r\n",
							"dboRPD1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dborpd1.parquet', format='parquet')\r\n",
							"dboRPD1.createOrReplaceTempView(\"dboRPD1\")\r\n",
							"\r\n",
							"#Goods Issue Header\r\n",
							"#Create DataFrame for the dboOIGE \r\n",
							"dboOIGE = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbooige.parquet', format='parquet')\r\n",
							"dboOIGE.createOrReplaceTempView(\"dboOIGE\")\r\n",
							"\r\n",
							"#Goods Issue Line\r\n",
							"#Create DataFrame for the dboIGE1 SAP LINE Table\r\n",
							"dboIGE1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboige1.parquet', format='parquet')\r\n",
							"dboIGE1.createOrReplaceTempView(\"dboIGE1\")\r\n",
							"\r\n",
							"#Purchase Orders Header\r\n",
							"#Create DataFrame for the dboOPOR \r\n",
							"dboOPOR = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboopor.parquet', format='parquet')\r\n",
							"dboOPOR.createOrReplaceTempView(\"dboOPOR\")\r\n",
							"\r\n",
							"#Purchase Orders Line\r\n",
							"#Create DataFrame for the dboPOR1 SAP LINE Table\r\n",
							"dboPOR1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbopor1.parquet', format='parquet')\r\n",
							"dboPOR1.createOrReplaceTempView(\"dboPOR1\")"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Finance/07_STDocuments"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdocuments.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stdocuments.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Journal Header\r\n",
							"#Create DataFrame for the dboOJDT SAP Table\r\n",
							"dboOJDT = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboojdt.parquet', format='parquet')\r\n",
							"dboOJDT.createOrReplaceTempView(\"dboOJDT\")\r\n",
							"\r\n",
							"#Journal Line\r\n",
							"#Create DataFrame for the dboJDT1 SAP Table\r\n",
							"dboJDT1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dbojdt1.parquet', format='parquet')\r\n",
							"dboJDT1.createOrReplaceTempView(\"dboJDT1\")\r\n",
							"\r\n",
							"#Create DataFrame for the stchartofaccounts SAP Table\r\n",
							"stchartofaccounts = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stchartofaccounts.parquet', format='parquet')\r\n",
							"stchartofaccounts.createOrReplaceTempView(\"stchartofaccounts\")\r\n",
							"\r\n",
							"#Create DataFrame for the stsalesinvoice SAP Table\r\n",
							"stsalesinvoice = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stsalesinvoice.parquet', format='parquet')\r\n",
							"stsalesinvoice.createOrReplaceTempView(\"stsalesinvoice\")\r\n",
							"\r\n",
							"#Create DataFrame for the stitem SAP Table\r\n",
							"stitems = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stitems.parquet', format='parquet')\r\n",
							"stitems.createOrReplaceTempView(\"stitem\")"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Finance/08_STManualJournals"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpurchasepricevariance.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stpurchasepricevariance.parquet', mode = \"overwrite\")\r\n",
							"stcostofgoods.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stcostofgoods.parquet', mode = \"overwrite\")\r\n",
							"stsalesinvoiceinventory.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stsalesinvoiceinventory.parquet', mode = \"overwrite\")\r\n",
							"stdiscountjournal.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stdiscountjournal.parquet', mode = \"overwrite\")\r\n",
							"stmanualjournal.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stmanualjournal.parquet', mode = \"overwrite\")\r\n",
							"stdirectposting.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stdirectposting.parquet', mode = \"overwrite\")\r\n",
							"stgeneraljournal.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stgeneraljournal.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"#Create DataFrame for the stdocuments SAP Table\r\n",
							"stdocuments = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stdocuments.parquet', format='parquet')\r\n",
							"stdocuments.createOrReplaceTempView(\"stdocuments\")\r\n",
							"\r\n",
							"######################################################################## UNION\r\n",
							"\r\n",
							"#Create DataFrame for the stmanualjournal SAP Table\r\n",
							"stmanualjournal = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stmanualjournal.parquet', format='parquet')\r\n",
							"stmanualjournal.createOrReplaceTempView(\"stmanualjournal\")\r\n",
							"\r\n",
							"#Create DataFrame for the stdirectposting SAP Table\r\n",
							"stdirectposting = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stdirectposting.parquet', format='parquet')\r\n",
							"stdirectposting.createOrReplaceTempView(\"stdirectposting\")\r\n",
							"\r\n",
							"######################################################################## UNION\r\n",
							"\r\n",
							"#Create DataFrame for the stgeneraljournal SAP Table\r\n",
							"stgeneraljournal = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stgeneraljournal.parquet', format='parquet')\r\n",
							"stgeneraljournal.createOrReplaceTempView(\"stgeneraljournal\")\r\n",
							"\r\n",
							"######################################################################## UNION\r\n",
							"\r\n",
							"#Create DataFrame for the ststocktransactions SAP Table\r\n",
							"ststocktransactions = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/ststocktransactions.parquet', format='parquet')\r\n",
							"ststocktransactions.createOrReplaceTempView(\"ststocktransactions\")\r\n",
							"\r\n",
							"#Create DataFrame for the stdiscountjournal SAP Table\r\n",
							"stdiscountjournal = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stdiscountjournal.parquet', format='parquet')\r\n",
							"stdiscountjournal.createOrReplaceTempView(\"stdiscountjournal\")\r\n",
							"\r\n",
							"#Create DataFrame for the stsalesinvoiceinventory SAP Table\r\n",
							"stsalesinvoiceinventory = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stsalesinvoiceinventory.parquet', format='parquet')\r\n",
							"stsalesinvoiceinventory.createOrReplaceTempView(\"stsalesinvoiceinventory\")\r\n",
							"\r\n",
							"#Create DataFrame for the ststockrevaluations SAP Table\r\n",
							"ststockrevaluations = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/ststockrevaluations.parquet', format='parquet')\r\n",
							"ststockrevaluations.createOrReplaceTempView(\"ststockrevaluations\")\r\n",
							"\r\n",
							"######################################################################## UNION\r\n",
							"\r\n",
							"#Create DataFrame for the stpurchasepricevariance SAP Table\r\n",
							"stpurchasepricevariance = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stpurchasepricevariance.parquet', format='parquet')\r\n",
							"stpurchasepricevariance.createOrReplaceTempView(\"stpurchasepricevariance\")\r\n",
							"\r\n",
							"#Create DataFrame for the stcostofgoods SAP Table\r\n",
							"stcostofgoods = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stcostofgoods.parquet', format='parquet')\r\n",
							"stcostofgoods.createOrReplaceTempView(\"stcostofgoods\")\r\n",
							"\r\n",
							"######################################################################## LEFT JOIN\r\n",
							"\r\n",
							"#Create DataFrame for the stchartofaccounts SAP Table\r\n",
							"stchartofaccounts = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stchartofaccounts.parquet', format='parquet')\r\n",
							"stchartofaccounts.createOrReplaceTempView(\"stchartofaccounts\")\r\n",
							"\r\n",
							"#Create DataFrame for the stitems SAP Table\r\n",
							"stitems = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stitems.parquet', format='parquet')\r\n",
							"stitems.createOrReplaceTempView(\"stitems\")"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"exceptions = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Finance and Operations Mapping Sources/SAP_Transactions_Exceptions.csv', format='csv'\r\n",
							", header=True\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Finance/09_STTransactions"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttransactionsdetail.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/sttransactionsdetail.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttransactionssummary.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/sttransactionssummary.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Finance/10_STFinanceDates"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stfinancedates.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stfinancedates.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the sttransactionssummary SAP Table\r\n",
							"sttransactionssummary = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/sttransactionssummary.parquet', format='parquet')\r\n",
							"sttransactionssummary.createOrReplaceTempView(\"sttransactionssummary\")"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Finance/11_STDocumentTypes"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdocumentcategories.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stdocumentcategories.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the stconsignment LMS Table\r\n",
							"stconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stconsignment.parquet', format='parquet')\r\n",
							"stconsignment.createOrReplaceTempView(\"stconsignment\")\r\n",
							"\r\n",
							"#Create DataFrame for the stlocation LMS Table\r\n",
							"stlocation = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet', format='parquet')\r\n",
							"stlocation.createOrReplaceTempView(\"stlocation\")\r\n",
							"\r\n",
							"#Create DataFrame for the stzone LMS Table\r\n",
							"stzone = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stzone.parquet', format='parquet')\r\n",
							"stzone.createOrReplaceTempView(\"stzone\")\r\n",
							"\r\n",
							"#Create DataFrame for the stsroute LMS Table\r\n",
							"stsroute = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stsroute.parquet', format='parquet')\r\n",
							"stsroute.createOrReplaceTempView(\"stsroute\")\r\n",
							"\r\n",
							"#Create DataFrame for the stbillcustomer LMS Table\r\n",
							"stbillcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stbillcustomer.parquet', format='parquet')\r\n",
							"stbillcustomer.createOrReplaceTempView(\"stbillcustomer\")\r\n",
							"\r\n",
							"#Create DataFrame for the stdeliverypickupcustomer LMS Table\r\n",
							"stdeliverypickupcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet', format='parquet')\r\n",
							"stdeliverypickupcustomer.createOrReplaceTempView(\"stdeliverypickupcustomer\")\r\n",
							"\r\n",
							"#Create DataFrame for the stlmstrack LMS Table\r\n",
							"stlmstrack = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet', format='parquet')\r\n",
							"stlmstrack.createOrReplaceTempView(\"stlmstrack\")\r\n",
							"\r\n",
							"#Create DataFrame for the stloadchild LMS Table\r\n",
							"stloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadchild.parquet', format='parquet')\r\n",
							"stloadchild.createOrReplaceTempView(\"stloadchild\")\r\n",
							"\r\n",
							"#Create DataFrame for the storder LMS Table\r\n",
							"storder = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/storder.parquet', format='parquet')\r\n",
							"storder.createOrReplaceTempView(\"storder\")\r\n",
							"\r\n",
							"#Create DataFrame for the stparcel LMS Table\r\n",
							"stparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet', format='parquet')\r\n",
							"stparcel.createOrReplaceTempView(\"stparcel\")\r\n",
							"\r\n",
							"#Create DataFrame for the sttrip LMS Table\r\n",
							"sttrip = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/sttrip.parquet', format='parquet')\r\n",
							"sttrip.createOrReplaceTempView(\"sttrip\")\r\n",
							"\r\n",
							"#Create DataFrame for the sttrip LMS Table\r\n",
							"sttrip = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/sttrip.parquet', format='parquet')\r\n",
							"sttrip.createOrReplaceTempView(\"sttrip\")\r\n",
							"\r\n",
							"#Create DataFrame for the stbooking LMS Table\r\n",
							"stbooking = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stbooking.parquet', format='parquet')\r\n",
							"stbooking.createOrReplaceTempView(\"stbooking\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehiclebasic MD Table\r\n",
							"dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbopeoplebasic MD Table\r\n",
							"dbopeoplebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeoplebasic.parquet', format='parquet')\r\n",
							"dbopeoplebasic.createOrReplaceTempView(\"dbopeoplebasic\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehicle LMS Table\r\n",
							"dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodriver LMS Table\r\n",
							"dbodriver = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodriver.parquet', format='parquet')\r\n",
							"dbodriver.createOrReplaceTempView(\"dbodriver\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolhroutes LMS Table\r\n",
							"dbolhroutes = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_routes.parquet', format='parquet')\r\n",
							"dbolhroutes.createOrReplaceTempView(\"dbolhroutes\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicroute LMS Table\r\n",
							"publicroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicroute.parquet', format='parquet')\r\n",
							"publicroute.createOrReplaceTempView(\"publicroute\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicthirdparty TMS Table\r\n",
							"publicthirdparty = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicthirdparty.parquet', format='parquet')\r\n",
							"publicthirdparty.createOrReplaceTempView(\"publicthirdparty\")\r\n",
							"\r\n",
							"#Create DataFrame for the publiccustomer TMS Table\r\n",
							"publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiccustomer.parquet', format='parquet')\r\n",
							"publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Variables\r\n",
							"var_File_Path = 'abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Avis_Files/AvisUsage.xlsx'\r\n",
							"var_File_Page = \"AvisUsage\"\r\n",
							"\r\n",
							"# Processing\r\n",
							"excel_file = pd.ExcelFile(var_File_Path)\r\n",
							"excel_file_page = pd.read_excel(excel_file, var_File_Page,  engine='openpyxl')"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Finance/12_STActivity"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stkmsandlts.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stkmsandlts.parquet', mode = \"overwrite\")\r\n",
							"sttmsactivitydetail.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/sttmsactivitydetail.parquet', mode = \"overwrite\")\r\n",
							"sttmsactivitysummary.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/sttmsactivitysummary.parquet', mode = \"overwrite\")\r\n",
							"stactivitydetail.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stactivitydetail.parquet', mode = \"overwrite\")\r\n",
							"stactivitysummary.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stactivitysummary.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"stdepotmap_tmp = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Finance and Operations Mapping Sources/SAP_DepotLocation_Map.csv', format='csv'\r\n",
							", header=True\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Finance/13_STDepotMap"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdepotmap.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stdepotmap.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 44
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_DIST_STDimensions')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f5bb692e-5387-47d9-b668-12f5eed32ceb"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 109
					},
					{
						"cell_type": "code",
						"source": [
							"# #create dataframe for the publicdispatchsegment orv table\r\n",
							"# publicdispatchsegment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatchsegment.parquet', format='parquet')\r\n",
							"# publicdispatchsegment.createOrReplaceTempView(\"publicdispatchsegment\")\r\n",
							"\r\n",
							"# #create dataframe for the publicorvuser orv table\r\n",
							"# publicorvuser = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicorvuser.parquet', format='parquet')\r\n",
							"# publicorvuser.createOrReplaceTempView(\"publicorvuser\")\r\n",
							"\r\n",
							"# #create dataframe for the publicvehicle orv table\r\n",
							"# publicvehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicvehicle.parquet', format='parquet')\r\n",
							"# publicvehicle.createOrReplaceTempView(\"publicvehicle\")\r\n",
							"\r\n",
							"# #create dataframe for the publicdepot orv table\r\n",
							"# publicdepot = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdepo.parquet', format='parquet')\r\n",
							"# publicdepot.createOrReplaceTempView(\"publicdepot\")\r\n",
							"\r\n",
							"# #create dataframe for the publiccustomer orv table\r\n",
							"# publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiccustomer.parquet', format='parquet')\r\n",
							"# publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"\r\n",
							"# #create dataframe for the dbocustomer lms table\r\n",
							"# dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"# dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"\r\n",
							"# #create dataframe for the dbozone lms table\r\n",
							"# dbozone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbozone.parquet', format='parquet')\r\n",
							"# dbozone.createOrReplaceTempView(\"dbozone\")\r\n",
							"\r\n",
							"# #create dataframe for the dbosroute lms table\r\n",
							"# dbosroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbosroute.parquet', format='parquet')\r\n",
							"# dbosroute.createOrReplaceTempView(\"dbosroute\")\r\n",
							"\r\n",
							"# #create dataframe for the dbobillzoneroute lms table\r\n",
							"# dbobillzoneroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zoneroute.parquet', format='parquet')\r\n",
							"# dbobillzoneroute.createOrReplaceTempView(\"dbobillzoneroute\")\r\n",
							"\r\n",
							"# #create dataframe for the dbobillzone lms table\r\n",
							"# dbobillzone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zone.parquet', format='parquet')\r\n",
							"# dbobillzone.createOrReplaceTempView(\"dbobillzone\")\r\n",
							"\r\n",
							"# #create dataframe for the dbobillbillcustomersr  lms table\r\n",
							"# dbobillbillcustomersr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_billcustomersr.parquet', format='parquet')\r\n",
							"# dbobillbillcustomersr.createOrReplaceTempView(\"dbobillbillcustomersr\")\r\n",
							"\r\n",
							"# #create dataframe for the dbobillcustomergroups  lms table\r\n",
							"# dbobillcustomergroups  = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_customergroups.parquet', format='parquet')\r\n",
							"# dbobillcustomergroups.createOrReplaceTempView(\"dbobillcustomergroups\")\r\n",
							"\r\n",
							"# #create dataframe for the dbobillcustomergrouptypes  lms table\r\n",
							"# dbobillcustomergrouptypes  = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_customergrouptypes.parquet', format='parquet')\r\n",
							"# dbobillcustomergrouptypes.createOrReplaceTempView(\"dbobillcustomergrouptypes\")\r\n",
							"\r\n",
							"# #create dataframe for the dbolocation  lms table\r\n",
							"# dbolocation  = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"# dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodepot LMS Table\r\n",
							"# dbodepot = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbodepot.parquet', format='parquet')\r\n",
							"# dbodepot.createOrReplaceTempView(\"dbodepot\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehicle LMS Table\r\n",
							"# dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"# dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_reasongroup LMS Table\r\n",
							"# dbodb_reasongroup = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_reasongroup.parquet', format='parquet')\r\n",
							"# dbodb_reasongroup.createOrReplaceTempView(\"dbodb_reasongroup\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_inservicereason LMS Table\r\n",
							"# dbodb_inservicereason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_inservicereason.parquet', format='parquet')\r\n",
							"# dbodb_inservicereason.createOrReplaceTempView(\"dbodb_inservicereason\")\r\n",
							"\r\n",
							"# #create dataframe for the publicpod orv table\r\n",
							"# publicpod = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicpod.parquet', format='parquet')\r\n",
							"# publicpod.createOrReplaceTempView(\"publicpod\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_reasondetail LMS Table\r\n",
							"# dbodb_reasondetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_reasondetail.parquet', format='parquet')\r\n",
							"# dbodb_reasondetail.createOrReplaceTempView(\"dbodb_reasondetail\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_delayreason LMS Table\r\n",
							"# dbodb_delayreason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_delayreason.parquet', format='parquet')\r\n",
							"# dbodb_delayreason.createOrReplaceTempView(\"dbodb_delayreason\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_notdbreason LMS Table\r\n",
							"# dbodb_notdbreason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_notdbreason.parquet', format='parquet')\r\n",
							"# dbodb_notdbreason.createOrReplaceTempView(\"dbodb_notdbreason\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_deliverystatus LMS Table\r\n",
							"# dbodb_deliverystatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_deliverystatus.parquet', format='parquet')\r\n",
							"# dbodb_deliverystatus.createOrReplaceTempView(\"dbodb_deliverystatus\")\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 110
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stpod\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    p.id as orv_pod_id\r\n",
							"    ,p.did as orv_pod_did\r\n",
							"\t,p.name as orv_pod_name\r\n",
							"\t,to_timestamp(p.poddate) as orv_pod_poddate\r\n",
							"\t,p.lat as orv_pod_lat\r\n",
							"\t,p.lng as orv_pod_lng\r\n",
							"\t,p.customerrating as orv_pod_customerrating\r\n",
							"\t,p.customerfeedback as orv_pod_customerfeedback\r\n",
							"FROM publicpod p"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpod = spark.sql(\"SELECT * FROM stpod\")"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stpod.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stpod.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stinservicereasons\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    isr.ID as lms_inservicereason_id\r\n",
							"\t,isr.ReasonGroupID as lms_inservicereason_reasongroupid\r\n",
							"\t,rg.Description as lms_reasongroup_description\r\n",
							"    ,isr.Reason as lms_inservicereason_reason\r\n",
							"    ,isr.Valid as lms_inservicereason_valid\r\n",
							"FROM dbodb_inservicereason isr\r\n",
							"LEFT JOIN dbodb_reasongroup rg on rg.id = isr.ReasonGroupID;"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stinservicereasons = spark.sql(\"SELECT * FROM stinservicereasons\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stinservicereasons.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stinservicereasons.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdispatchsegment\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    d.id as orv_dispatchsegment_id\r\n",
							"    ,d.fromdelid as orv_dispatchsegment_fromdelid\r\n",
							"    ,d.todelid as orv_dispatchsegment_todelid\r\n",
							"    ,d.distance as orv_dispatchsegment_distance\r\n",
							"    ,d.duration as orv_dispatchsegment_duration\r\n",
							"    ,d.encodedpolyline as orv_dispatchsegment_encodedpolyline\r\n",
							"    ,d.did as orv_dispatchsegment_did\r\n",
							"    ,d.tollcost as orv_dispatchsegment_tollcost\r\n",
							"    ,d.fuelcost as orv_dispatchsegment_fuelcost\r\n",
							"    ,d.inscost as orv_dispatchsegment_inscost\r\n",
							"    ,d.labourcost as orv_dispatchsegment_labourcost\r\n",
							"    ,d.maintcost as orv_dispatchsegment_maintcost\r\n",
							"    ,d.cpicost as orv_dispatchsegment_cpicost\r\n",
							"    ,d.vehicleclass as orv_dispatchsegment_vehicleclass\r\n",
							"    ,d.fromlat as orv_dispatchsegment_fromlat\r\n",
							"    ,d.fromlng as orv_dispatchsegment_fromlng\r\n",
							"    ,d.tolat as orv_dispatchsegment_tolat\r\n",
							"    ,d.tolng as orv_dispatchsegment_tolng\r\n",
							"    ,to_timestamp(d.departuredate) as orv_dispatchsegment_departuredate\r\n",
							"    ,to_timestamp(d.arrivaldate) as orv_dispatchsegment_arrivaldate\r\n",
							"    ,to_timestamp(d.debriefeddate) as orv_dispatchsegment_debriefeddate\r\n",
							"    ,d.optimized as orv_dispatchsegment_optimized\r\n",
							"    ,d.segmentorder as orv_dispatchsegment_segmentorder\r\n",
							"    ,d.customized as orv_dispatchsegment_customized\r\n",
							"    ,d.parcelct as orv_dispatchsegment_parcelct\r\n",
							"\r\n",
							"FROM publicdispatchsegment d\r\n",
							"    "
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdispatchsegment = spark.sql(\"SELECT * FROM stdispatchsegment\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stdispatchsegment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdispatchsegment.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storvuser\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    o.id as orv_orvuser_id\r\n",
							"    ,o.username as orv_orvuser_username\r\n",
							"    ,o.fname as orv_orvuser_fname\r\n",
							"    ,o.lname as orv_orvuser_lname\r\n",
							"    ,o.empcode as orv_orvuser_empcode\r\n",
							"    ,o.aka as orv_orvuser_aka\r\n",
							"    ,o.gender as orv_orvuser_gender\r\n",
							"    ,o.rsaid as orv_orvuser_rsaid\r\n",
							"    ,o.passportno as orv_orvuser_passportno\r\n",
							"    ,o.idpassportno as orv_orvuser_idpassportno\r\n",
							"    ,o.nationality as orv_orvuser_nationality\r\n",
							"    ,to_timestamp(o.termindate) as orv_orvuser_termindate\r\n",
							"    ,o.status as orv_orvuser_status\r\n",
							"    ,o.depot as orv_orvuser_depot\r\n",
							"    ,o.jobcategory as orv_orvuser_jobcategory\r\n",
							"    ,o.lmsid as orv_orvuser_lmsid\r\n",
							"    ,o.vipid as orv_orvuser_vipid\r\n",
							"    ,o.crewlmsid as orv_orvuser_crewlmsid\r\n",
							"    ,o.courierid as orv_orvuser_courierid\r\n",
							"\r\n",
							"    FROM publicorvuser o\r\n",
							"    \r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"storvuser = spark.sql(\"SELECT * FROM storvuser\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# storvuser.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/storvuser.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stvehicle\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    v.id as lms_vehicle_id\r\n",
							"    ,v.FleetNo as lms_vehicle_fleetno\r\n",
							"    ,v.RegNo as lms_vehicle_regno\r\n",
							"    ,v.UID as lms_vehicle_uid\r\n",
							"    ,v2.id as orv_vehicle_id\r\n",
							"    ,v2.tollclass as orv_vehicle_tollclass\r\n",
							"    ,v2.sapcode as orv_vehicle_sapcode\r\n",
							"    ,v2.lmsid as orv_vehicle_lmsid\r\n",
							"\r\n",
							"FROM dbovehicle v\r\n",
							"LEFT JOIN publicvehicle v2 on v2.lmsid = v.id\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stvehicle = spark.sql(\"SELECT * FROM stvehicle\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stvehicle.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stvehicle.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdepotorv\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    d.id as orv_depot_id\r\n",
							"    ,d.name as orv_depot_name\r\n",
							"    ,d.depcode as orv_depot_depcode\r\n",
							"    ,d.address as orv_depot_address\r\n",
							"    ,d.suburb as orv_depot_suburb\r\n",
							"    ,d.city as orv_depot_city\r\n",
							"    ,d.zipcode as orv_depot_zipcode\r\n",
							"    ,d.region as orv_depot_region\r\n",
							"    ,d.lat as orv_depot_lat\r\n",
							"    ,d.lng as orv_depot_lng\r\n",
							"    ,d.placeid as orv_depot_placeid\r\n",
							"    ,d.w3w as orv_depot_w3w\r\n",
							"    ,to_timestamp(d.insdate) as orv_depot_insdate\r\n",
							"    ,to_timestamp(d.update) as orv_depot_update\r\n",
							"    ,d.lmsid as orv_depot_lmsid\r\n",
							"    ,d.country as orv_depot_country\r\n",
							"    ,d.status as orv_depot_status\r\n",
							"\r\n",
							"FROM publicdepot d\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdepotorv = spark.sql(\"SELECT * FROM stdepotorv\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stdepotorv.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdepotorv.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdepot\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    d.id as md_depot_id\r\n",
							"    ,d.itemlabel as md_depot_itemlabel\r\n",
							"    ,d.itemvalue as md_depot_itemvalue\r\n",
							"    ,d.depotname as md_depot_depotname\r\n",
							"    ,d.parentdepotcode as md_depot_parentdepotcode\r\n",
							"    ,d.division as md_depot_division\r\n",
							"    ,d.address as md_depot_address\r\n",
							"    ,d.latitude as md_depot_latitude\r\n",
							"    ,d.longitude as md_depot_longitude\r\n",
							"    ,d.sapdepreciationaccountcode as md_depot_sapdepreciationaccountcode\r\n",
							"    ,d.mfrauthoriser as md_depot_mfrauthoriser\r\n",
							"    ,d.mfrapplicationflag as md_depot_mfrapplicationflag\r\n",
							"    ,d.activeflag as md_depot_activeflag\r\n",
							"    ,d.operationsmanager as md_depot_operationsmanager\r\n",
							"    ,d.branchmanager as md_depot_branchmanager\r\n",
							"    ,d.fleetmanager as md_depot_fleetmanager\r\n",
							"\r\n",
							"\r\n",
							"FROM dbodepot d\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdepot = spark.sql(\"SELECT * FROM stdepot\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stdepot.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdepot.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stbillcustomer \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lc.id as lms_customer_id\r\n",
							"    ,lc.ActiveFlag as lms_customer_activeflag\r\n",
							"    ,lc.Adres1 as lms_customer_adres1\r\n",
							"    ,lc.Adres2 as lms_customer_adres2\r\n",
							"    ,lc.Appointment as lms_customer_appointment\r\n",
							"    ,lc.AreaDesc as lms_customer_areadesc\r\n",
							"    ,lc.AutoEmailFlag as lms_customer_autoemailflag\r\n",
							"    ,lc.Bill_RouteID as lms_customer_bill_routeid\r\n",
							"    ,lc.Bill_ServiceTypeID as lms_customer_bill_servicetypeid\r\n",
							"    ,lc.Bill_ZoneRouteID as lms_customer_bill_zonerouteid\r\n",
							"    ,lc.brouteid as lms_customer_brouteid\r\n",
							"    ,lc.BType as lms_customer_btype\r\n",
							"    ,lc.ccDepot as lms_customer_ccdepot\r\n",
							"    ,lc.ccRoute as lms_customer_ccroute\r\n",
							"    ,lc.ChainStoreFlag as lms_customer_chainstoreflag\r\n",
							"    ,lc.CONSPerORD as lms_customer_consperord\r\n",
							"    ,lc.ContactPerson as lms_customer_contactperson\r\n",
							"    ,lc.CountryCode as lms_customer_countrycode\r\n",
							"    ,lc.CRef as lms_customer_cref\r\n",
							"    ,lc.CREF2 as lms_customer_cref2\r\n",
							"    ,lc.CRouteID as lms_customer_crouteid\r\n",
							"    ,lc.CType as lms_customer_ctype\r\n",
							"    ,lc.CustAccID as lms_customer_custaccid\r\n",
							"    ,lc.CustGroupID as lms_customer_custgroupid\r\n",
							"    ,lc.CustMainID as lms_customer_custmainid\r\n",
							"    ,lc.CustRateid as lms_customer_custrateid\r\n",
							"    ,lc.CustRouteGroupID as lms_customer_custroutegroupid\r\n",
							"    ,lc.CustServiceDays as lms_customer_custservicedays\r\n",
							"    ,lc.CustServiceTime as lms_customer_custservicetime\r\n",
							"    ,lc.DC as lms_customer_dc\r\n",
							"    ,lc.DefDelPCode as lms_customer_defdelpcode\r\n",
							"    ,lc.DeliveryDepotID as lms_customer_deliverydepotid\r\n",
							"    ,lc.DeliveryType as lms_customer_deliverytype\r\n",
							"    ,lc.DestinationLocationCode as lms_customer_destinationlocationcode\r\n",
							"    ,lc.DualBillCourier as lms_customer_dualbillcourier\r\n",
							"    ,lc.Email as lms_customer_email\r\n",
							"    ,lc.FaxNo as lms_customer_faxno\r\n",
							"    ,lc.FCType as lms_customer_fctype\r\n",
							"    ,lc.FLevy as lms_customer_flevy\r\n",
							"    ,lc.InCompleteOrderChkFlag as lms_customer_incompleteorderchkflag\r\n",
							"    ,lc.InsertDate as lms_customer_insertdate\r\n",
							"    ,lc.IsBillTo as lms_customer_isbillto\r\n",
							"    ,lc.isBooking as lms_customer_isbooking\r\n",
							"    ,lc.isHighVolume as lms_customer_ishighvolume\r\n",
							"    ,lc.IsManual as lms_customer_ismanual\r\n",
							"    ,lc.LastUpdate as lms_customer_lastupdate\r\n",
							"    ,lc.LocationTypeCode as lms_customer_locationtypecode\r\n",
							"    ,lc.MaxCartons as lms_customer_maxcartons\r\n",
							"    ,lc.Name as lms_customer_name\r\n",
							"    ,lc.NDDID as lms_customer_nddid\r\n",
							"    ,lc.OnHoldID as lms_customer_onholdid\r\n",
							"    ,lc.PCode as lms_customer_pcode\r\n",
							"    ,lc.PCodeID as lms_customer_pcodeid\r\n",
							"    ,lc.ServRouteID as lms_customer_servrouteid\r\n",
							"    ,lc.SRouteID as lms_customer_srouteid\r\n",
							"    ,lc.StoreID as lms_customer_storeid\r\n",
							"    ,lc.Suburb as lms_customer_suburb\r\n",
							"    ,lc.TelNo as lms_customer_telno\r\n",
							"    ,lc.Town as lms_customer_town\r\n",
							"    ,lc.VolFact as lms_customer_volfact\r\n",
							"    ,lc.WType as lms_customer_wtype\r\n",
							"    ,oc.id as orv_customer_id\r\n",
							"    ,oc.name as orv_customer_name\r\n",
							"    ,oc.contact as orv_customer_contact\r\n",
							"    ,oc.email as orv_customer_email\r\n",
							"    ,oc.mobileno as orv_customer_mobileno\r\n",
							"    ,oc.landline as orv_customer_landline\r\n",
							"    ,oc.ctype as orv_customer_ctype\r\n",
							"    ,oc.parent as orv_customer_parent\r\n",
							"    ,to_timestamp(oc.lastupdate) as orv_customer_lastupdate\r\n",
							"    ,oc.lmsid as orv_customer_lmsid\r\n",
							"    ,oc.srouteid as orv_customer_srouteid\r\n",
							"    ,oc.verified as orv_customer_verified\r\n",
							"    ,oc.defaultmaildomain as orv_customer_defaultmaildomain\r\n",
							"    ,oc.autoassignticketid as orv_customer_autoassignticketid\r\n",
							"    ,oc.sendinfodel as orv_customer_sendinfodel\r\n",
							"    ,oc.anonemailcustsupportemail as orv_customer_anonemailcustsupportemail\r\n",
							"    ,oc.anonemailcustsupporttel as orv_customer_anonemailcustsupporttel\r\n",
							"    ,oc.cref as orv_customer_cref\r\n",
							"    ,oc.division as orv_customer_division\r\n",
							"    ,oc.ecomm as orv_customer_ecomm\r\n",
							"    ,oc.preverifiedaddid as orv_customer_preverifiedaddid\r\n",
							"    ,oc.mallname as orv_customer_mallname\r\n",
							"    ,oc.mallid as orv_customer_mallid\r\n",
							"    ,oc.mallflag as orv_customer_mallflag\r\n",
							"    ,oc.malllmsid as orv_customer_malllmsid\r\n",
							"    ,oc.highvolume as orv_customer_highvolume\r\n",
							"    ,oc.custreference as orv_customer_custreference\r\n",
							"    ,oc.unverdate as orv_customer_unverdate\r\n",
							"    ,oc.verdate as orv_customer_verdate\r\n",
							"    ,oc.groupid as orv_customer_groupid\r\n",
							"    ,oc.postalcodecustgroupid as orv_customer_postalcodecustgroupid\r\n",
							"    ,oc.webhookauthcredential as orv_customer_webhookauthcredential\r\n",
							"    ,oc.mergedinto as orv_customer_mergedinto\r\n",
							"    ,oc.cusmergedate as orv_customer_cusmergedate\r\n",
							"    ,oc.customerref as orv_customer_customerref\r\n",
							"    ,oc.routemaint as orv_customer_routemaint\r\n",
							"    ,bcr.id as lms_customer_billcustid\r\n",
							"    ,bcr.billcustid as lms_customer_billcustbillcustid\r\n",
							"    ,bcr.incovalue as lms_customer_billcustincovalue\r\n",
							"    ,bcr.daterangelimit as lms_customer_billcustdaterangelimit\r\n",
							"    ,bcr.status as lms_customer_billcuststatus\r\n",
							"    ,bcr.note as lms_customer_billcustnote\r\n",
							"    ,bcr.custgroupid as lms_customer_billcustcustgroupid\r\n",
							"    ,bcr.activeflag as lms_customer_billcustactiveflag\r\n",
							"    ,bcr.routerateeffectivedate as lms_customer_billcustrouterateeffectivedate\r\n",
							"    ,bcr.ratesaddedflag as lms_customer_billcustratesaddedflag\r\n",
							"    ,bcr.ibtratesflag as lms_customer_billcustibtratesflag\r\n",
							"    ,bcr.slidingscaleflag as lms_customer_billcustslidingscaleflag\r\n",
							"    ,bcr.sapflag as lms_customer_billcustsapflag\r\n",
							"    ,bcr.sapcode as lms_customer_billcustsapcode\r\n",
							"    ,bcr.sapcustname as lms_customer_billcustsapcustname\r\n",
							"    ,bcr.averagepclrateflag as lms_customer_billcustaveragepclrateflag\r\n",
							"    ,bcr.averagepclkg as lms_customer_billcustaveragepclkg\r\n",
							"    ,bcr.billdatestart as lms_customer_billcustbilldatestart\r\n",
							"    ,bcr.itemcode as lms_customer_billcustitemcode\r\n",
							"    ,bcr.servicetypeflag as lms_customer_billcustservicetypeflag\r\n",
							"    ,bcr.returnreverserateflag as lms_customer_billcustreturnreverserateflag\r\n",
							"    ,bcr.minnoofpcls as lms_customer_billcustminnoofpcls\r\n",
							"    ,bcr.productcategoryid as lms_customer_billcustproductcategoryid\r\n",
							"    ,bcr.samedayconsolidation as lms_customer_billcustsamedayconsolidation\r\n",
							"    ,bcr.rategroupid as lms_customer_billcustrategroupid\r\n",
							"    ,bcr.risksurchargeflag as lms_customer_billcustrisksurchargeflag\r\n",
							"    ,bcr.applyavgvolweight as lms_customer_billcustapplyavgvolweight\r\n",
							"    ,bcr.avgvolweight as lms_customer_billcustavgvolweight\r\n",
							"    ,bcr.ecommcustomerflag as lms_customer_billcustecommcustomerflag\r\n",
							"    ,bcr.leadtimestructureid as lms_customer_billcustleadtimestructureid\r\n",
							"    ,bcr.recalcinprogress as lms_customer_billcustrecalcinprogress\r\n",
							"    ,bcr.recalcuserid as lms_customer_billcustrecalcuserid\r\n",
							"    ,bcr.needwebhook as lms_customer_billcustneedwebhook\r\n",
							"    ,bcr.routemaint as lms_customer_billcustroutemaint\r\n",
							"    ,bcr.lhdistrflag as lms_customer_billcustlhdistrflag\r\n",
							"    ,bcg.id as lms_customer_billcustgroupid\r\n",
							"    ,bcg.description as lms_customer_billcustgroupdescription\r\n",
							"    ,bcg.grouptypeid as lms_customer_billcustgroupgrouptypeid\r\n",
							"    ,bcgt.id as lms_customer_billcustgrouptypeid\r\n",
							"    ,bcgt.description as lms_customer_billcustgrouptypedescription\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"FROM dbocustomer lc\r\n",
							"LEFT JOIN publiccustomer oc on oc.lmsid = lc.id\r\n",
							"LEFT JOIN dbobillbillcustomersr bcr on bcr.billcustid = lc.id \r\n",
							"LEFT JOIN dbobillcustomergroups bcg  on bcg.id = bcr.custgroupid\r\n",
							"LEFT JOIN dbobillcustomergrouptypes bcgt on bcgt.id = bcg.grouptypeid\r\n",
							"\r\n",
							"WHERE lc.isbillto = 1"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbillcustomer = spark.sql(\"SELECT * FROM stbillcustomer\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stbillcustomer.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stbillcustomer.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdeliverypickupcustomer \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lc.id as lms_customer_id\r\n",
							"    ,lc.ActiveFlag as lms_customer_activeflag\r\n",
							"    ,lc.Adres1 as lms_customer_adres1\r\n",
							"    ,lc.Adres2 as lms_customer_adres2\r\n",
							"    ,lc.Appointment as lms_customer_appointment\r\n",
							"    ,lc.AreaDesc as lms_customer_areadesc\r\n",
							"    ,lc.AutoEmailFlag as lms_customer_autoemailflag\r\n",
							"    ,lc.Bill_RouteID as lms_customer_bill_routeid\r\n",
							"    ,lc.Bill_ServiceTypeID as lms_customer_bill_servicetypeid\r\n",
							"    ,lc.Bill_ZoneRouteID as lms_customer_bill_zonerouteid\r\n",
							"    ,lc.brouteid as lms_customer_brouteid\r\n",
							"    ,lc.BType as lms_customer_btype\r\n",
							"    ,lc.ccDepot as lms_customer_ccdepot\r\n",
							"    ,lc.ccRoute as lms_customer_ccroute\r\n",
							"    ,lc.ChainStoreFlag as lms_customer_chainstoreflag\r\n",
							"    ,lc.CONSPerORD as lms_customer_consperord\r\n",
							"    ,lc.ContactPerson as lms_customer_contactperson\r\n",
							"    ,lc.CountryCode as lms_customer_countrycode\r\n",
							"    ,lc.CRef as lms_customer_cref\r\n",
							"    ,lc.CREF2 as lms_customer_cref2\r\n",
							"    ,lc.CRouteID as lms_customer_crouteid\r\n",
							"    ,lc.CType as lms_customer_ctype\r\n",
							"    ,lc.CustAccID as lms_customer_custaccid\r\n",
							"    ,lc.CustGroupID as lms_customer_custgroupid\r\n",
							"    ,lc.CustMainID as lms_customer_custmainid\r\n",
							"    ,lc.CustRateid as lms_customer_custrateid\r\n",
							"    ,lc.CustRouteGroupID as lms_customer_custroutegroupid\r\n",
							"    ,lc.CustServiceDays as lms_customer_custservicedays\r\n",
							"    ,lc.CustServiceTime as lms_customer_custservicetime\r\n",
							"    ,lc.DC as lms_customer_dc\r\n",
							"    ,lc.DefDelPCode as lms_customer_defdelpcode\r\n",
							"    ,lc.DeliveryDepotID as lms_customer_deliverydepotid\r\n",
							"    ,lc.DeliveryType as lms_customer_deliverytype\r\n",
							"    ,lc.DestinationLocationCode as lms_customer_destinationlocationcode\r\n",
							"    ,lc.DualBillCourier as lms_customer_dualbillcourier\r\n",
							"    ,lc.Email as lms_customer_email\r\n",
							"    ,lc.FaxNo as lms_customer_faxno\r\n",
							"    ,lc.FCType as lms_customer_fctype\r\n",
							"    ,lc.FLevy as lms_customer_flevy\r\n",
							"    ,lc.InCompleteOrderChkFlag as lms_customer_incompleteorderchkflag\r\n",
							"    ,lc.InsertDate as lms_customer_insertdate\r\n",
							"    ,lc.IsBillTo as lms_customer_isbillto\r\n",
							"    ,lc.isBooking as lms_customer_isbooking\r\n",
							"    ,lc.isHighVolume as lms_customer_ishighvolume\r\n",
							"    ,lc.IsManual as lms_customer_ismanual\r\n",
							"    ,lc.LastUpdate as lms_customer_lastupdate\r\n",
							"    ,lc.LocationTypeCode as lms_customer_locationtypecode\r\n",
							"    ,lc.MaxCartons as lms_customer_maxcartons\r\n",
							"    ,lc.Name as lms_customer_name\r\n",
							"    ,lc.NDDID as lms_customer_nddid\r\n",
							"    ,lc.OnHoldID as lms_customer_onholdid\r\n",
							"    ,lc.PCode as lms_customer_pcode\r\n",
							"    ,lc.PCodeID as lms_customer_pcodeid\r\n",
							"    ,lc.ServRouteID as lms_customer_servrouteid\r\n",
							"    ,lc.SRouteID as lms_customer_srouteid\r\n",
							"    ,lc.StoreID as lms_customer_storeid\r\n",
							"    ,lc.Suburb as lms_customer_suburb\r\n",
							"    ,lc.TelNo as lms_customer_telno\r\n",
							"    ,lc.Town as lms_customer_town\r\n",
							"    ,lc.VolFact as lms_customer_volfact\r\n",
							"    ,lc.WType as lms_customer_wtype\r\n",
							"    ,oc.id as orv_customer_id\r\n",
							"    ,oc.name as orv_customer_name\r\n",
							"    ,oc.contact as orv_customer_contact\r\n",
							"    ,oc.email as orv_customer_email\r\n",
							"    ,oc.mobileno as orv_customer_mobileno\r\n",
							"    ,oc.landline as orv_customer_landline\r\n",
							"    ,oc.ctype as orv_customer_ctype\r\n",
							"    ,oc.parent as orv_customer_parent\r\n",
							"    ,to_timestamp(oc.lastupdate) as orv_customer_lastupdate\r\n",
							"    ,oc.lmsid as orv_customer_lmsid\r\n",
							"    ,oc.srouteid as orv_customer_srouteid\r\n",
							"    ,oc.verified as orv_customer_verified\r\n",
							"    ,oc.defaultmaildomain as orv_customer_defaultmaildomain\r\n",
							"    ,oc.autoassignticketid as orv_customer_autoassignticketid\r\n",
							"    ,oc.sendinfodel as orv_customer_sendinfodel\r\n",
							"    ,oc.anonemailcustsupportemail as orv_customer_anonemailcustsupportemail\r\n",
							"    ,oc.anonemailcustsupporttel as orv_customer_anonemailcustsupporttel\r\n",
							"    ,oc.cref as orv_customer_cref\r\n",
							"    ,oc.division as orv_customer_division\r\n",
							"    ,oc.ecomm as orv_customer_ecomm\r\n",
							"    ,oc.preverifiedaddid as orv_customer_preverifiedaddid\r\n",
							"    ,oc.mallname as orv_customer_mallname\r\n",
							"    ,oc.mallid as orv_customer_mallid\r\n",
							"    ,oc.mallflag as orv_customer_mallflag\r\n",
							"    ,oc.malllmsid as orv_customer_malllmsid\r\n",
							"    ,oc.highvolume as orv_customer_highvolume\r\n",
							"    ,oc.custreference as orv_customer_custreference\r\n",
							"    ,oc.unverdate as orv_customer_unverdate\r\n",
							"    ,oc.verdate as orv_customer_verdate\r\n",
							"    ,oc.groupid as orv_customer_groupid\r\n",
							"    ,oc.postalcodecustgroupid as orv_customer_postalcodecustgroupid\r\n",
							"    ,oc.webhookauthcredential as orv_customer_webhookauthcredential\r\n",
							"    ,oc.mergedinto as orv_customer_mergedinto\r\n",
							"    ,oc.cusmergedate as orv_customer_cusmergedate\r\n",
							"    ,oc.customerref as orv_customer_customerref\r\n",
							"    ,oc.routemaint as orv_customer_routemaint\r\n",
							"    ,bcr.id as lms_customer_billcustid\r\n",
							"    ,bcr.billcustid as lms_customer_billcustbillcustid\r\n",
							"    ,bcr.incovalue as lms_customer_billcustincovalue\r\n",
							"    ,bcr.daterangelimit as lms_customer_billcustdaterangelimit\r\n",
							"    ,bcr.status as lms_customer_billcuststatus\r\n",
							"    ,bcr.note as lms_customer_billcustnote\r\n",
							"    ,bcr.custgroupid as lms_customer_billcustcustgroupid\r\n",
							"    ,bcr.activeflag as lms_customer_billcustactiveflag\r\n",
							"    ,bcr.routerateeffectivedate as lms_customer_billcustrouterateeffectivedate\r\n",
							"    ,bcr.ratesaddedflag as lms_customer_billcustratesaddedflag\r\n",
							"    ,bcr.ibtratesflag as lms_customer_billcustibtratesflag\r\n",
							"    ,bcr.slidingscaleflag as lms_customer_billcustslidingscaleflag\r\n",
							"    ,bcr.sapflag as lms_customer_billcustsapflag\r\n",
							"    ,bcr.sapcode as lms_customer_billcustsapcode\r\n",
							"    ,bcr.sapcustname as lms_customer_billcustsapcustname\r\n",
							"    ,bcr.averagepclrateflag as lms_customer_billcustaveragepclrateflag\r\n",
							"    ,bcr.averagepclkg as lms_customer_billcustaveragepclkg\r\n",
							"    ,bcr.billdatestart as lms_customer_billcustbilldatestart\r\n",
							"    ,bcr.itemcode as lms_customer_billcustitemcode\r\n",
							"    ,bcr.servicetypeflag as lms_customer_billcustservicetypeflag\r\n",
							"    ,bcr.returnreverserateflag as lms_customer_billcustreturnreverserateflag\r\n",
							"    ,bcr.minnoofpcls as lms_customer_billcustminnoofpcls\r\n",
							"    ,bcr.productcategoryid as lms_customer_billcustproductcategoryid\r\n",
							"    ,bcr.samedayconsolidation as lms_customer_billcustsamedayconsolidation\r\n",
							"    ,bcr.rategroupid as lms_customer_billcustrategroupid\r\n",
							"    ,bcr.risksurchargeflag as lms_customer_billcustrisksurchargeflag\r\n",
							"    ,bcr.applyavgvolweight as lms_customer_billcustapplyavgvolweight\r\n",
							"    ,bcr.avgvolweight as lms_customer_billcustavgvolweight\r\n",
							"    ,bcr.ecommcustomerflag as lms_customer_billcustecommcustomerflag\r\n",
							"    ,bcr.leadtimestructureid as lms_customer_billcustleadtimestructureid\r\n",
							"    ,bcr.recalcinprogress as lms_customer_billcustrecalcinprogress\r\n",
							"    ,bcr.recalcuserid as lms_customer_billcustrecalcuserid\r\n",
							"    ,bcr.needwebhook as lms_customer_billcustneedwebhook\r\n",
							"    ,bcr.routemaint as lms_customer_billcustroutemaint\r\n",
							"    ,bcr.lhdistrflag as lms_customer_billcustlhdistrflag\r\n",
							"    ,bcg.id as lms_customer_billcustgroupid\r\n",
							"    ,bcg.description as lms_customer_billcustgroupdescription\r\n",
							"    ,bcg.grouptypeid as lms_customer_billcustgroupgrouptypeid\r\n",
							"    ,bcgt.id as lms_customer_billcustgrouptypeid\r\n",
							"    ,bcgt.description as lms_customer_billcustgrouptypedescription\r\n",
							"\r\n",
							"\r\n",
							"FROM dbocustomer lc\r\n",
							"LEFT JOIN publiccustomer oc on oc.lmsid = lc.id\r\n",
							"LEFT JOIN dbobillbillcustomersr bcr on bcr.billcustid = lc.id \r\n",
							"LEFT JOIN dbobillcustomergroups bcg  on bcg.id = bcr.custgroupid\r\n",
							"LEFT JOIN dbobillcustomergrouptypes bcgt on bcgt.id = bcg.grouptypeid\r\n",
							"\r\n",
							"WHERE isbillto <> 1\r\n",
							"AND oc.id not in (499396,499395,545232,548268,551378,552083,553680,604150) --Manual fix to remove some duplicates lmsids in orv customer table  "
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdeliverypickupcustomer = spark.sql(\"SELECT * FROM stdeliverypickupcustomer\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stdeliverypickupcustomer.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stzone \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    z.Id as lms_zone_id\r\n",
							"    ,z.Code as lms_zone_code\r\n",
							"    ,z.Description as lms_zone_description\r\n",
							"    ,z.ISOCode as lms_zone_isocode\r\n",
							"    ,z.LocID as lms_zone_locid\r\n",
							"    ,z.ZoneMasterID as lms_zone_zonemasterid\r\n",
							"FROM dbozone z\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stzone = spark.sql(\"SELECT * FROM stzone\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stzone.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stzone.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stsroute \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    sr.ID as lms_sroute_id\r\n",
							"    ,sr.BillCustID as lms_sroute_billcustid\r\n",
							"    ,sr.CourierID as lms_sroute_courierid\r\n",
							"    ,sr.Description as lms_sroute_description\r\n",
							"    ,sr.Code as lms_sroute_code\r\n",
							"    ,sr.id2 as lms_sroute_id2\r\n",
							"    ,sr.SRouteGroupID as lms_sroute_sroutegroupid\r\n",
							"    ,sr.ZoneID as lms_sroute_zoneid\r\n",
							"    ,sr.broutemasterID as lms_sroute_broutemasterid\r\n",
							"    ,sr.LocalFlag as lms_sroute_localflag\r\n",
							"    ,sr.Area as lms_sroute_area\r\n",
							"    ,sr.HighVolume as lms_sroute_highvolume\r\n",
							"FROM dbosroute sr\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsroute = spark.sql(\"SELECT * FROM stsroute\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stsroute.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stsroute.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stbillzoneroute \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    bzr.ID as lms_billzoneroute_id\r\n",
							"    ,bzr.Description as lms_billzoneroute_description\r\n",
							"    ,bzr.ZoneID as lms_billzoneroute_zoneid\r\n",
							"    ,bzr.ZRSCode as lms_billzoneroute_zrscode\r\n",
							"    ,bzr.ZoneRouteOrder as lms_billzoneroute_zonerouteorder\r\n",
							"    ,bzr.ZoneType as lms_billzoneroute_zonetype\r\n",
							"    ,bzr.BRouteMasterID as lms_billzoneroute_broutemasterid\r\n",
							"    ,bzr.BrouteCode as lms_billzoneroute_broutecode\r\n",
							"\r\n",
							"FROM dbobillzoneroute bzr\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbillzoneroute = spark.sql(\"SELECT * FROM stbillzoneroute\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stbillzoneroute.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stbillzoneroute.parquet', mode = \"overwrite\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stbillzone \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    bz.ID as lms_customer_id\r\n",
							"    ,bz.Description as lms_billzone_description\r\n",
							"    ,bz.ZoneMasterID as lms_billzone_zonemasterid\r\n",
							"    ,bz.CountryID as lms_billzone_countryid\r\n",
							"FROM dbobillzone bz\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbillzone = spark.sql(\"SELECT * FROM stbillzone\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stbillzone.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stbillzone.parquet', mode = \"overwrite\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stlocation \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    l.id as lms_location_id\r\n",
							"    ,l.description as lms_location_description\r\n",
							"    ,l.code as lms_location_code\r\n",
							"    ,l.collect as lms_location_collect\r\n",
							"    ,l.pcode as lms_location_pcode\r\n",
							"    ,l.custid as lms_location_custid\r\n",
							"    ,l.retail as lms_location_retail\r\n",
							"    ,l.scale as lms_location_scale\r\n",
							"    ,l.custcode as lms_location_custcode\r\n",
							"    ,l.captureonly as lms_location_captureonly\r\n",
							"    ,l.zoneid as lms_location_zoneid\r\n",
							"    ,l.scantype as lms_location_scantype\r\n",
							"    ,l.billcustid as lms_location_billcustid\r\n",
							"    ,l.latitude as lms_location_latitude\r\n",
							"    ,l.longitude as lms_location_longitude\r\n",
							"    ,l.holdlocid as lms_location_holdlocid\r\n",
							"    ,l.branchmanageruserid as lms_location_branchmanageruserid\r\n",
							"    ,l.fwcostcentre as lms_location_fwcostcentre\r\n",
							"    ,l.fwuserid as lms_location_fwuserid\r\n",
							"    ,l.fwmultibusinessid as lms_location_fwmultibusinessid\r\n",
							"    ,l.glcode as lms_location_glcode\r\n",
							"    ,l.hubcode as lms_location_hubcode\r\n",
							"    ,l.fwapikey as lms_location_fwapikey\r\n",
							"    ,l.geolocationgroupid as lms_location_geolocationgroupid\r\n",
							"    ,l.geolocationflag as lms_location_geolocationflag\r\n",
							"    ,l.orvactive as lms_location_orvactive\r\n",
							"    ,l.cref as lms_location_cref\r\n",
							"    ,l.tempcol as lms_location_tempcol\r\n",
							"    ,l.holdlocparentlocid as lms_location_holdlocparentlocid\r\n",
							"    ,l.floorsize as lms_location_floorsize\r\n",
							"    ,l.isstationidenabled as lms_location_isstationidenabled\r\n",
							"    ,l.activeflag as lms_location_activeflag\r\n",
							"    ,l.masterlocid as lms_location_masterlocid\r\n",
							"    ,l.locationtypeid as lms_location_locationtypeid\r\n",
							"    ,l.locationcode as lms_location_locationcode\r\n",
							"\r\n",
							"\r\n",
							"FROM dbolocation l"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlocation = spark.sql(\"SELECT * FROM stlocation\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stlocation.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet', mode = \"overwrite\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stendorsmentreason \r\n",
							"AS\r\n",
							"SELECT \t\r\n",
							"    rd.id as lmds_db_reasondetail_id\r\n",
							"\t,rd.description as lmds_db_reasondetail_description\r\n",
							"\t,rd.db_reasongroupid  as lmds_db_reasondetail_reasongroupid\r\n",
							"\t,rd.orv_type as lmds_db_reasondetail_orv_type\r\n",
							"\t,rd.active as lmds_db_reasondetail_active\r\n",
							"\t,rd.actionid as lmds_db_reasondetail_actionid\r\n",
							"\t,rd.cancelreason as lmds_db_reasondetail_cancelreason\r\n",
							"\t,rd.lmsreasonrule as lmds_db_reasondetail_lmsreasonrule\r\n",
							"\t,rg.description as lmds_db_reasongroup_description\r\n",
							"FROM dbodb_reasondetail rd\r\n",
							"LEFT JOIN dbodb_reasongroup rg on rg.id = rd.db_reasongroupid"
						],
						"outputs": [],
						"execution_count": 111
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stendorsmentreason = spark.sql(\"SELECT * FROM stendorsmentreason\")"
						],
						"outputs": [],
						"execution_count": 112
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stendorsmentreason.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stendorsmentreason.parquet', mode = \"overwrite\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stwaybilldelayreasons\r\n",
							"AS\r\n",
							"SELECT \t\r\n",
							"\tid AS lms_delayreason_id\r\n",
							"\t,description AS lms_delayreason_description\r\n",
							"\r\n",
							"FROM dbodb_delayreason\r\n",
							"WHERE description is not NULL or description <> \"\""
						],
						"outputs": [],
						"execution_count": 113
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stwaybillnotdbreasons\r\n",
							"AS\r\n",
							"SELECT \t\r\n",
							"\tid AS lms_notdbreason_id\r\n",
							"\t,description AS lms_notdbreason_description\r\n",
							"\r\n",
							"FROM dbodb_notdbreason\r\n",
							"WHERE description is not NULL or description <> \"\""
						],
						"outputs": [],
						"execution_count": 114
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stwaybilldeliverystatusreasons\r\n",
							"AS\r\n",
							"SELECT \t\r\n",
							"\tid AS lms_deliverystatus_id\r\n",
							"\t,description AS lms_deliverystatus_description\r\n",
							"\r\n",
							"FROM dbodb_deliverystatus\r\n",
							"WHERE description is not NULL or description <> \"\""
						],
						"outputs": [],
						"execution_count": 115
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stwaybillreasondetails\r\n",
							"AS\r\n",
							"SELECT \t\r\n",
							"\trd.id AS lms_reasondetail_id\r\n",
							"\t,rd.description AS lms_reasondetail_description\r\n",
							"\t,rg.description AS lms_reasondetail_group\r\n",
							"\r\n",
							"FROM dbodb_reasondetail rd\r\n",
							"LEFT JOIN dbodb_reasongroup rg on rg.id = rd.db_reasongroupid\r\n",
							"WHERE rd.description is not NULL or rd.description <> \"\""
						],
						"outputs": [],
						"execution_count": 128
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stwaybillinservicereasons\r\n",
							"AS\r\n",
							"SELECT \t\r\n",
							"\tisr.id AS lms_inservicereason_id\r\n",
							"\t,isr.reason AS lms_inservicereason_description\r\n",
							"\t,rg.description AS lms_inservicereason_group\r\n",
							"\r\n",
							"FROM dbodb_inservicereason isr\r\n",
							"LEFT JOIN dbodb_reasongroup rg on rg.id = isr.reasongroupid\r\n",
							"WHERE isr.reason is not NULL or isr.reason <> \"\""
						],
						"outputs": [],
						"execution_count": 117
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stwaybilldelayreasons = spark.sql(\"SELECT * FROM stwaybilldelayreasons\")\r\n",
							"stwaybillnotdbreasons = spark.sql(\"SELECT * FROM stwaybillnotdbreasons\")\r\n",
							"stwaybilldeliverystatusreasons = spark.sql(\"SELECT * FROM stwaybilldeliverystatusreasons\")\r\n",
							"stwaybillreasondetails = spark.sql(\"SELECT * FROM stwaybillreasondetails\")\r\n",
							"stwaybillinservicereasons = spark.sql(\"SELECT * FROM stwaybillinservicereasons\")"
						],
						"outputs": [],
						"execution_count": 118
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							" spark.sql(\"SELECT * FROM stwaybilldelayreasons\")"
						],
						"outputs": [],
						"execution_count": 124
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stwaybilldelayreasons.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybilldelayreasons.parquet', mode = \"overwrite\")\r\n",
							"# stwaybillnotdbreasons.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybillnotdbreasons.parquet', mode = \"overwrite\")\r\n",
							"# stwaybilldeliverystatusreasons.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybilldeliverystatusreasons.parquet', mode = \"overwrite\")\r\n",
							"# stwaybillreasondetails.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybillreasondetails.parquet', mode = \"overwrite\")\r\n",
							"# stwaybillinservicereasons.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybillinservicereasons.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 127
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_LH_STBooking')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9137e3b7-69d4-4438-9b2d-040301bcdc63"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
						"name": "DevSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the publicbooking TMS Table\r\n",
							"# publicbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicbooking.parquet', format='parquet')\r\n",
							"# publicbooking.createOrReplaceTempView(\"publicbooking\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicnonbooking TMS Table\r\n",
							"# publicnonbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicnonbooking.parquet', format='parquet')\r\n",
							"# publicnonbooking.createOrReplaceTempView(\"publicnonbooking\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publictrip TMS Table\r\n",
							"# publictrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrip.parquet', format='parquet')\r\n",
							"# publictrip.createOrReplaceTempView(\"publictrip\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolhbooking TMS Table\r\n",
							"# dboLHBooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_booking.parquet', format='parquet')\r\n",
							"# dboLHBooking.createOrReplaceTempView(\"dboLHBooking\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolhroutes TMS Table\r\n",
							"# dbolhroutes = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_routes.parquet', format='parquet')\r\n",
							"# dbolhroutes.createOrReplaceTempView(\"dbolhroutes\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolhbookingspertrip TMS Table\r\n",
							"# dbolhbookingspertrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_bookingspertrip.parquet', format='parquet')\r\n",
							"# dbolhbookingspertrip.createOrReplaceTempView(\"dbolhbookingspertrip\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stbooking_tms\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    b.id as tms_booking_id\r\n",
							"    ,b.allocatedby as tms_booking_allocatedby\r\n",
							"    ,to_timestamp(b.allocateddate) as tms_booking_allocateddate\r\n",
							"    ,to_timestamp(b.assetreleasedate) as tms_booking_assetreleasedate\r\n",
							"    ,b.billingmethod as tms_booking_billingmethod\r\n",
							"    ,b.billingstatus as tms_booking_billingstatus\r\n",
							"    ,null as tms_booking_convertedbookingid\r\n",
							"    ,b.cargoweight as tms_booking_cargoweight\r\n",
							"    ,b.customerid as tms_booking_customerid\r\n",
							"    ,b.childcustomerid as tms_booking_childcustomerid\r\n",
							"    ,b.createdby as tms_booking_insby\r\n",
							"    ,b.createdbyname as tms_booking_insbyname\r\n",
							"    ,b.cref1 as tms_booking_cref1\r\n",
							"    ,b.cref2 as tms_booking_cref2\r\n",
							"    ,b.cubicvolume as tms_booking_cubicvolume\r\n",
							"    ,b.customeragreedrate as tms_booking_customeragreedrate\r\n",
							"    ,b.customerrate as tms_booking_customerrate\r\n",
							"    ,to_timestamp(b.deliverydate) as tms_booking_deliverydate\r\n",
							"    ,b.directbooking as tms_booking_directbooking\r\n",
							"    ,to_timestamp(b.dispatchdate) as tms_booking_dispatchdate\r\n",
							"    ,to_timestamp(b.docdate) as tms_booking_docdate\r\n",
							"    ,b.docstatus as tms_booking_docstatus\r\n",
							"    ,b.emailrequester as tms_booking_emailrequester\r\n",
							"    ,b.frombranch as tms_booking_frombranch\r\n",
							"    ,b.frombranchid as tms_booking_frombranchid\r\n",
							"    ,to_timestamp(b.insdate) as tms_booking_insdate\r\n",
							"    ,to_timestamp(b.invoiceddate) as tms_booking_invoiceddate\r\n",
							"    ,b.invoiceid as tms_booking_invoiceid\r\n",
							"    ,b.legacyid as tms_booking_legacyid\r\n",
							"    ,b.local as tms_booking_local\r\n",
							"    ,b.manifests as tms_booking_manifests\r\n",
							"    ,to_timestamp(b.moddate) as tms_booking_moddate\r\n",
							"    ,b.note as tms_booking_note\r\n",
							"    ,b.opsrouteid as tms_booking_opsrouteid\r\n",
							"    ,b.opsroutename as tms_booking_opsroutename\r\n",
							"    ,b.originalpod as tms_booking_originalpod\r\n",
							"    ,to_timestamp(b.pickupdate) as tms_booking_pickupdate\r\n",
							"    ,b.ponumber as tms_booking_ponumber\r\n",
							"    ,b.routeid as tms_booking_routeid\r\n",
							"    ,b.routename as tms_booking_routename\r\n",
							"    ,b.status as tms_booking_status\r\n",
							"    ,b.thirdpartyagreedrate as tms_booking_thirdpartyagreedrate\r\n",
							"    ,b.thirdpartydriverflag as tms_booking_thirdpartydriverflag\r\n",
							"    ,b.thirdpartyid as tms_booking_thirdpartyid\r\n",
							"    ,b.thirdpartyrate as tms_booking_thirdpartyrate\r\n",
							"    ,b.thirdpartyreason as tms_booking_thirdpartyreason\r\n",
							"    ,b.thirdpartytrailerflag as tms_booking_thirdpartytrailerflag\r\n",
							"    ,b.thirdpartyvehicleflag as tms_booking_thirdpartyvehicleflag\r\n",
							"    ,b.tobranch as tms_booking_tobranch\r\n",
							"    ,b.tobranchid as tms_booking_tobranchid\r\n",
							"    ,b.trailersize as tms_booking_trailersize\r\n",
							"    ,b.trailertype as tms_booking_trailertype\r\n",
							"    ,b.transporter as tms_booking_transporter\r\n",
							"    ,b.tripid as tms_booking_tripid\r\n",
							"    ,null as tms_booking_reason\r\n",
							"    ,'v2' as tms_booking_source\r\n",
							"    ,'booking' as tms_booking_type\r\n",
							"\r\n",
							"FROM publicbooking b\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbooking_tms = spark.sql(\"SELECT * FROM stbooking_tms\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stnonbooking_tms\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    b.id as tms_booking_id\r\n",
							"    ,null as tms_booking_allocatedby\r\n",
							"    ,to_timestamp(t.dispatchdate) as tms_booking_allocateddate\r\n",
							"    ,to_timestamp(b.assetreleasedate) as tms_booking_assetreleasedate\r\n",
							"    ,null as tms_booking_billingmethod\r\n",
							"    ,b.billingstatus as tms_booking_billingstatus\r\n",
							"    ,b.convertedbookingid as tms_booking_convertedbookingid\r\n",
							"    ,null as tms_booking_cargoweight \r\n",
							"    ,null as tms_booking_customerid\r\n",
							"    ,null as tms_booking_childcustomerid\r\n",
							"    ,b.insby as tms_booking_insby\r\n",
							"    ,b.insbyname as tms_booking_insbyname\r\n",
							"    ,null as tms_booking_cref1\r\n",
							"    ,null as tms_booking_cref2\r\n",
							"    ,null as tms_booking_cubicvolume\r\n",
							"    ,null as tms_booking_customeragreedrate\r\n",
							"    ,null as tms_booking_customerrate\r\n",
							"    ,to_timestamp(b.deliverydate) as tms_booking_deliverydate\r\n",
							"    ,null as tms_booking_directbooking\r\n",
							"    ,to_timestamp(b.dispatchdate) as tms_booking_dispatchdate\r\n",
							"    ,null as tms_booking_docdate\r\n",
							"    ,null as tms_booking_docstatus\r\n",
							"    ,null as tms_booking_emailrequester\r\n",
							"    ,b.frombranch as tms_booking_frombranch\r\n",
							"    ,b.frombranchid as tms_booking_frombranchid\r\n",
							"    ,to_timestamp(b.insdate) as tms_booking_insdate\r\n",
							"    ,null as tms_booking_invoiceddate\r\n",
							"    ,null as tms_booking_invoiceid\r\n",
							"    ,b.legacyid as tms_booking_legacyid\r\n",
							"    ,b.local as tms_booking_local\r\n",
							"    ,null as tms_booking_manifests\r\n",
							"    ,to_timestamp(b.moddate) as tms_booking_moddate\r\n",
							"    ,b.note as tms_booking_note\r\n",
							"    ,b.routeid as tms_booking_opsrouteid\r\n",
							"    ,b.routename as tms_booking_opsroutename\r\n",
							"    ,null as tms_booking_originalpod\r\n",
							"    ,null as tms_booking_pickupdate\r\n",
							"    ,null as tms_booking_ponumber\r\n",
							"    ,null as tms_booking_routeid\r\n",
							"    ,null as tms_booking_routename\r\n",
							"    ,b.status as tms_booking_status\r\n",
							"    ,null as tms_booking_thirdpartyagreedrate\r\n",
							"    ,null as tms_booking_thirdpartydriverflag\r\n",
							"    ,null as tms_booking_thirdpartyid\r\n",
							"    ,null as tms_booking_thirdpartyrate\r\n",
							"    ,null as tms_booking_thirdpartyreason\r\n",
							"    ,null as tms_booking_thirdpartytrailerflag\r\n",
							"    ,null as tms_booking_thirdpartyvehicleflag\r\n",
							"    ,null as tms_booking_tobranch\r\n",
							"    ,null as tms_booking_tobranchid\r\n",
							"    ,b.trailersize as tms_booking_trailersize\r\n",
							"    ,null as tms_booking_trailertype\r\n",
							"    ,null as tms_booking_transporter\r\n",
							"    ,b.tripid as tms_booking_tripid\r\n",
							"    ,b.reason as tms_booking_reason\r\n",
							"    ,'v2' as tms_booking_source\r\n",
							"    ,'nonbooking' as tms_booking_type\r\n",
							"\r\n",
							"FROM publicnonbooking b\r\n",
							"LEFT JOIN publictrip t on t.id = b.tripid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stnonbooking_tms = spark.sql(\"SELECT * FROM stnonbooking_tms\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stbooking_lms\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    (b.id)*-1 as tms_booking_id\r\n",
							"    ,(b.allocationuserid)*-1 as tms_booking_allocatedby\r\n",
							"    ,to_timestamp(b.AllocationDate) as tms_booking_allocateddate\r\n",
							"    ,null as tms_booking_assetreleasedate\r\n",
							"    ,null as tms_booking_billingmethod\r\n",
							"    ,null as tms_booking_billingstatus\r\n",
							"    ,null as tms_booking_convertedbookingid\r\n",
							"    ,b.cargoweight as tms_booking_cargoweight\r\n",
							"    ,(b.primaryaccountid)*-1 as tms_booking_customerid\r\n",
							"    ,(b.secondaryaccountid)*-1 as tms_booking_childcustomerid\r\n",
							"    ,(b.userid)*-1 as tms_booking_insby\r\n",
							"    ,null as tms_booking_insbyname\r\n",
							"    ,b.customerreference1 as tms_booking_cref1\r\n",
							"    ,b.customerreference2 as tms_booking_cref2\r\n",
							"    ,b.cubicvolume as tms_booking_cubicvolume\r\n",
							"    ,null as tms_booking_customeragreedrate\r\n",
							"    ,null as tms_booking_customerrate\r\n",
							"    ,b.deliverydate as tms_booking_deliverydate\r\n",
							"    ,b.isdirect as tms_booking_directbooking\r\n",
							"    ,b.dispatchdate as tms_booking_dispatchdate\r\n",
							"    ,null as tms_booking_docdate\r\n",
							"    ,null as tms_booking_docstatus\r\n",
							"    ,null as tms_booking_emailrequester\r\n",
							"    ,null as tms_booking_frombranch\r\n",
							"    ,null as tms_booking_frombranchid\r\n",
							"    ,b.createddate as tms_booking_insdate\r\n",
							"    ,null as tms_booking_invoiceddate\r\n",
							"    ,null as tms_booking_invoiceid\r\n",
							"    ,null as tms_booking_legacyid\r\n",
							"    ,b.islocal as tms_booking_local\r\n",
							"    ,null as tms_booking_manifests\r\n",
							"    ,null as tms_booking_moddate\r\n",
							"    ,b.notes as tms_booking_note\r\n",
							"    ,(b.routeid)*-1 as tms_booking_opsrouteid\r\n",
							"    ,r.description as tms_booking_opsroutename\r\n",
							"    ,null as tms_booking_originalpod\r\n",
							"    -- ,b.orginalpodreceiveddate as tms_booking_originalpod\r\n",
							"    ,b.pickupdate as tms_booking_pickupdate\r\n",
							"    ,null as tms_booking_ponumber\r\n",
							"    ,null as tms_booking_routeid\r\n",
							"    ,null as tms_booking_routename\r\n",
							"    ,CASE \r\n",
							"        WHEN b.statusid =1  THEN 'created'\r\n",
							"        WHEN b.statusid = 2 THEN 'allocated'\r\n",
							"        WHEN b.statusid in (3,6) THEN 'active'\r\n",
							"        WHEN b.statusid in (4,8) THEN 'completed'\r\n",
							"        WHEN b.statusid in (5,7) THEN 'cancelled'  \r\n",
							"    END as tms_booking_status\r\n",
							"    ,null as tms_booking_thirdpartyagreedrate\r\n",
							"    ,null as tms_booking_thirdpartydriverflag\r\n",
							"    ,(b.3pl_accountid)*-1 as tms_booking_thirdpartyid\r\n",
							"    ,null as tms_booking_thirdpartyrate\r\n",
							"    ,b.3pl_reason as tms_booking_thirdpartyreason\r\n",
							"    ,null as tms_booking_thirdpartytrailerflag\r\n",
							"    ,null as tms_booking_thirdpartyvehicleflag\r\n",
							"    ,null as tms_booking_tobranch\r\n",
							"    ,null as tms_booking_tobranchid\r\n",
							"    ,CASE\t\r\n",
							"        WHEN b.trailersizeid = 1 THEN '12 METER'\r\n",
							"        WHEN b.trailersizeid = 2 THEN '4 METER'\r\n",
							"        WHEN b.trailersizeid = 3 THEN '6 METER'\r\n",
							"        WHEN b.trailersizeid = 4 THEN '18 METER'\r\n",
							"        WHEN b.trailersizeid = 5 THEN '15 METER'\r\n",
							"    END\tas tms_booking_trailersize\r\n",
							"\r\n",
							"    ,CASE\t\r\n",
							"        WHEN b.trailertypeid = 1 THEN 'RIGID'\r\n",
							"        WHEN b.trailertypeid = 2 THEN 'SUPERLINK PANTECH'\r\n",
							"        WHEN b.trailertypeid = 3 THEN 'TRI-AXLE'\r\n",
							"        WHEN b.trailertypeid = 4 THEN 'BELLYPAN'\r\n",
							"        WHEN b.trailertypeid = 5 THEN 'SUPERLINK TAUTLINER'\r\n",
							"        WHEN b.trailertypeid = 6 THEN 'CONTAINER'\r\n",
							"        WHEN b.trailertypeid = 7 THEN 'PANTECH'\r\n",
							"        WHEN b.trailertypeid = 8 THEN 'TAUTLINER'\r\n",
							"    END\tas tms_booking_trailertype\r\n",
							"    ,null as tms_booking_transporter\r\n",
							"    ,(bpt.tripid)*-1 as tms_booking_tripid \r\n",
							"    ,b.nonbookingreasonid as tms_booking_reason\r\n",
							"    ,'v1' as tms_booking_source\r\n",
							"    ,CASE\r\n",
							"        WHEN  b.bookingtypeid = 1 THEN 'booking'\r\n",
							"        WHEN  b.bookingtypeid = 3 THEN 'nonbooking'\r\n",
							"    END as tms_booking_type\r\n",
							"\r\n",
							"FROM dbolhbooking b\r\n",
							"LEFT JOIN dbolhroutes r on r.id = b.routeid\r\n",
							"LEFT JOIN dbolhbookingspertrip bpt on bpt.bookingid = b.id\r\n",
							"WHERE b.allocationdate > '2020-08-31 23:59:59.999'\r\n",
							"AND b.bookingtypeid in (1,3)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbooking_lms = spark.sql(\"SELECT * FROM stbooking_lms\")"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbooking_tmp = stbooking_tms.unionByName(stnonbooking_tms, allowMissingColumns = True)\r\n",
							"stbooking_tmp.createOrReplaceTempView(\"stbooking_tmp\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbooking = stbooking_tmp.unionByName(stbooking_lms, allowMissingColumns = True)\r\n",
							"stbooking.createOrReplaceTempView(\"stbooking\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stbooking.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stbooking.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 19
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_STChartOfAccounts')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b4357899-bd1a-4c44-a5a8-bdb27b829bdf"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dboOACT SAP Table\r\n",
							"# dboOACT = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOACT.parquet', format='parquet')\r\n",
							"# dboOACT.createOrReplaceTempView(\"dboOACT\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import col\r\n",
							"import pyspark.sql.functions as F\r\n",
							"x = dboOACT.withColumn('trimacctnames', F.trim('acctname'))\r\n",
							"y = x.withColumn('acctnamesplitlength', F.length('trimacctnames') - F.length(F.substring_index('trimacctnames', \"(\", -1)))\r\n",
							"z = y.withColumn('accttype', F.col('trimacctnames').substr(F.lit(0), col('acctnamesplitlength') - F.lit(2)))\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"z.createOrReplaceTempView(\"dboOACT\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stchartofaccounts_step1\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    oact.acctcode as sap_account_acctcode \r\n",
							"    ,oact.acctname as sap_account_acctname \r\n",
							"    ,oact.accttype as sap_account_accttype \r\n",
							"    ,oact.segment_0  as sap_account_segment_0 \r\n",
							"    ,oact.segment_1  as sap_account_segment_1 \r\n",
							"    ,oact.segment_2  as sap_account_segment_2 \r\n",
							"    ,oact.groupmask as sap_account_groupmask\r\n",
							"    ,oact.fathernum as sap_account_fathernum\r\n",
							"    ,oact.frozenfor as sap_account_frozenfor\r\n",
							"    ,oact.postable as sap_account_postable\r\n",
							"\r\n",
							"FROM dboOACT oact\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stchartofaccounts\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     s1.*\r\n",
							"    ,Upper(s2.acctname) as sap_account_level5name \r\n",
							"\r\n",
							"    ,Upper(s3.acctname) as sap_account_level4name \r\n",
							"    ,s3.fathernum as sap_account_fathernum2\r\n",
							"    \r\n",
							"    ,Upper(s4.acctname) as sap_account_level3name \r\n",
							"    ,s4.fathernum as sap_account_fathernum3\r\n",
							"\r\n",
							"    ,Upper(s5.acctname) as sap_account_level2name \r\n",
							"    ,s5.fathernum as sap_account_fathernum4\r\n",
							"\r\n",
							"    ,Upper(s6.acctname) as sap_account_level1name \r\n",
							"    ,s6.fathernum as sap_account_fathernum5\r\n",
							"   \r\n",
							"\r\n",
							"FROM stchartofaccounts_step1 s1\r\n",
							"LEFT JOIN dboOACT s2 on s2.acctcode = s1.sap_account_acctcode and s2.fathernum = s1.sap_account_fathernum and s2.levels = 5\r\n",
							"LEFT JOIN dboOACT s3 on s3.acctcode = s2.fathernum and s3.levels = 4\r\n",
							"LEFT JOIN dboOACT s4 on s4.acctcode = s3.fathernum and s4.levels = 3\r\n",
							"LEFT JOIN dboOACT s5 on s5.acctcode = s4.fathernum and s5.levels = 2\r\n",
							"LEFT JOIN dboOACT s6 on s6.acctcode = s5.fathernum and s6.levels = 1\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stchartofaccounts = spark.sql(\"SELECT * FROM stchartofaccounts\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stchartofaccounts.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stchartofaccounts.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_DIST_STLMSTrack')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "80afa726-38de-4bb9-a3da-6094a8363063"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the ssttrackunion LMS Table\r\n",
							"# ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"# ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstwaybillsperparcel LMS Table\r\n",
							"# sstwaybillsperparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstwaybillsperparcel.parquet', format='parquet')\r\n",
							"# sstwaybillsperparcel.createOrReplaceTempView(\"sstwaybillsperparcel\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolocation LMS Table\r\n",
							"# dbolocation = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"# dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstparcelunion LMS Table\r\n",
							"# sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"# sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# from pyspark.sql import Window\r\n",
							"# from pyspark.sql.functions import lag    "
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"windowSpec  = Window.partitionBy(\"parcelid\").orderBy(\"parcelid\",\"id\")\r\n",
							"ssttrackunion = ssttrackunion.withColumn(\"lag\",lag(\"parcelid\",1).over(windowSpec))"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stlmstrack\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"t.ID as lms_track_id,\r\n",
							"t.LoadID as lms_track_loadid,\r\n",
							"t.ParcelID as lms_track_parcelid,\r\n",
							"w.lms_waybillsperparcel_waybillid as lms_track_waybillid,\r\n",
							"t.fromlocid as lms_track_fromlocid,\r\n",
							"t.tolocid as lms_track_tolocid,\r\n",
							"t.TrackTypeID as lms_track_tracktypeid,\r\n",
							"t.OpenDt as lms_track_opendt,\r\n",
							"t.CloseDt as lms_track_closedt,\r\n",
							"t.specdel as lms_track_specdel,\r\n",
							"p.weight as lms_track_parcelweight,\r\n",
							"p.chargeweight as lms_track_parcelchargeweight\r\n",
							"\r\n",
							",CASE \r\n",
							"    WHEN t.ParcelID <> t.lag THEN 1\r\n",
							"    ELSE  0\r\n",
							"END as lms_track_lastmilebranchflag\r\n",
							"\r\n",
							"FROM ssttrackunion t\r\n",
							"LEFT JOIN sstwaybillsperparcel w on w.lms_waybillsperparcel_loadid = t.loadid and w.lms_waybillsperparcel_parcelid = t.parcelid\r\n",
							"LEFT JOIN sstparcelunion p on p.id = t.parcelid"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmstrack = spark.sql(\"SELECT * FROM stlmstrack\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stlmstrack.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stvsmparcel_tmp1\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"     t.lms_track_parcelid\r\n",
							"FROM stlmstrack t"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stvsmparcel_tmp1 = spark.sql(\"SELECT * FROM stvsmparcel_tmp1\")"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stvsmparcel_tmp2\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"     t.lms_track_parcelid\r\n",
							"    ,max(t.lms_track_closedt) as lms_track_enddate\r\n",
							"\r\n",
							"FROM stlmstrack t\r\n",
							"WHERE t.lms_track_tracktypeid = 2\r\n",
							"GROUP BY t.lms_track_parcelid"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stvsmparcel_tmp2 = spark.sql(\"SELECT * FROM stvsmparcel_tmp2\")"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stvsmparcel_tmp3\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"     t.lms_track_parcelid\r\n",
							"    ,max(t.lms_track_opendt) as lms_track_floortimeend\r\n",
							"\r\n",
							"FROM stlmstrack t\r\n",
							"WHERE t.lms_track_tracktypeid = 6\r\n",
							"GROUP BY t.lms_track_parcelid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stvsmparcel_tmp3 = spark.sql(\"SELECT * FROM stvsmparcel_tmp3\")"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stvsmparcel_tmp4\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"     t.lms_track_parcelid\r\n",
							"    ,max(t.lms_track_opendt) as lms_track_opendt\r\n",
							"\r\n",
							"FROM stlmstrack t\r\n",
							"WHERE t.lms_track_closedt IS NULL and t.lms_track_tracktypeid = 6\r\n",
							"GROUP BY t.lms_track_parcelid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stvsmparcel_tmp4 = spark.sql(\"SELECT * FROM stvsmparcel_tmp4\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stvsmparcel_tmp5\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"     t.lms_track_parcelid\r\n",
							"    ,t.lms_track_opendt\r\n",
							"    ,t2.lms_track_fromlocid\r\n",
							"\r\n",
							"FROM  stvsmparcel_tmp4 t\r\n",
							"LEFT JOIN stlmstrack t2 on t2.lms_track_parcelid = t.lms_track_parcelid AND t2.lms_track_opendt = t.lms_track_opendt\r\n",
							"WHERE t2.lms_track_closedt IS NULL and t2.lms_track_tracktypeid = 6\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stvsmparcel_tmp5 = spark.sql(\"SELECT * FROM stvsmparcel_tmp5\")"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stvsmparcel\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    t1.lms_track_parcelid\r\n",
							"    ,t2.lms_track_enddate\r\n",
							"    ,t3.lms_track_floortimeend\r\n",
							"    ,t5.lms_track_fromlocid\r\n",
							"FROM stvsmparcel_tmp1 t1 \r\n",
							"LEFT JOIN stvsmparcel_tmp2 t2 ON t2.lms_track_parcelid =t1.lms_track_parcelid \r\n",
							"LEFT JOIN stvsmparcel_tmp3 t3 ON t3.lms_track_parcelid =t1.lms_track_parcelid \r\n",
							"LEFT JOIN stvsmparcel_tmp5 t5 ON t5.lms_track_parcelid =t1.lms_track_parcelid \r\n",
							""
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stvsmparcel = spark.sql(\"SELECT * FROM stvsmparcel\")"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stvsmparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stvsmparcel.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 36
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_LH_STDriverPayItem')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8c330900-4715-4771-b5e1-f46810069947"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						}
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the publicdriverpayitem TMS Table\r\n",
							"# publicdriverpayitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpayitem.parquet', format='parquet')\r\n",
							"# publicdriverpayitem.createOrReplaceTempView(\"publicdriverpayitem\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdriverpayitem\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    d.id as tms_driverpayitem_id\r\n",
							"    ,d.driverid as tms_driverpayitem_driverid\r\n",
							"    ,d.tripid as tms_driverpayitem_tripid\r\n",
							"    ,d.triprate as tms_driverpayitem_triprate\r\n",
							"    ,d.mealrate as tms_driverpayitem_mealrate\r\n",
							"    ,d.sleepoverrate as tms_driverpayitem_sleepoverrate\r\n",
							"    ,d.airtimerate as tms_driverpayitem_airtimerate\r\n",
							"    ,d.linkrate as tms_driverpayitem_linkrate\r\n",
							"    ,d.totalrate as tms_driverpayitem_totalrate\r\n",
							"    ,d.routeid as tms_driverpayitem_routeid\r\n",
							"    ,d.routename as tms_driverpayitem_routename\r\n",
							"    ,to_timestamp(d.insdate) as tms_driverpayitem_insdate\r\n",
							"    ,to_timestamp(d.moddate) as tms_driverpayitem_moddate\r\n",
							"    ,d.horse as tms_driverpayitem_horse\r\n",
							"    ,d.trailers as tms_driverpayitem_trailers\r\n",
							"    ,d.linkused as tms_driverpayitem_linkused\r\n",
							"    ,d.manualadjustment as tms_driverpayitem_manualadjustment\r\n",
							"    ,d.editby as tms_driverpayitem_editby\r\n",
							"    ,d.drivername as tms_driverpayitem_drivername\r\n",
							"    ,to_timestamp(d.dispatchdate) as tms_driverpayitem_dispatchdate\r\n",
							"    ,d.bookings as tms_driverpayitem_bookings\r\n",
							"    ,d.employeecode as tms_driverpayitem_employeecode\r\n",
							"    ,d.originatedfrom as tms_driverpayitem_originatedfrom\r\n",
							"    ,d.reportid as tms_driverpayitem_reportid\r\n",
							"\r\n",
							"FROM publicdriverpayitem d\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdriverpayitem = spark.sql(\"SELECT * FROM stdriverpayitem\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stdriverpayitem.write.parquet('abfss://synapse' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdriverpayitem.parquet', mode = \"overwrite\")\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_STItems')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f24c8088-6258-4f62-9528-5d649e76c45f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dboOITM SAP Table ITEM\r\n",
							"# dboOITM = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOITM.parquet', format='parquet')\r\n",
							"# dboOITM.createOrReplaceTempView(\"dboOITM\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboOITB SAP Table ITEM GROUP\r\n",
							"# dboOITB = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOITB.parquet', format='parquet')\r\n",
							"# dboOITB.createOrReplaceTempView(\"dboOITB\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stitems\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    oitb.itmsgrpcod as sap_itemgroup_itmsgrpcod\r\n",
							"    ,oitb.itmsgrpnam as sap_itemgroup_itmsgrpnam\r\n",
							"    ,oitm.itemcode as sap_item_itemcode\r\n",
							"    ,oitm.itemname as sap_item_itemname\r\n",
							"    ,oitm.cstgrpcode as sap_item_cstgrpcode\r\n",
							"    ,oitm.vatgourpsa as sap_item_vatgourpsa\r\n",
							"    ,oitm.codebars as sap_item_codebars\r\n",
							"    ,oitm.prchseitem as sap_item_prchseitem\r\n",
							"    ,oitm.sellitem as sap_item_sellitem\r\n",
							"    ,oitm.cardcode as sap_item_cardcode\r\n",
							"    ,oitm.suppcatnum as sap_item_suppcatnum\r\n",
							"    ,oitm.invntitem as sap_item_invntitem\r\n",
							"    ,oitm.u_boy_tb_0 as sap_item_u_boy_tb_0\r\n",
							"    ,oitm.u_svctype as sap_item_u_svctype\r\n",
							"    ,oitm.u_depot as sap_item_u_depot\r\n",
							"\r\n",
							"FROM dboOITM oitm\r\n",
							"LEFT JOIN dboOITB oitb on oitb.itmsgrpcod = oitm.itmsgrpcod\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stitems = spark.sql(\"SELECT * FROM stitems\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stitems.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stitems.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_DIST_STParcel')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "1.Need to add a field for \"finalparcelweight\" applying the customer Billing matrix principle",
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "60305175-4a1e-4fd1-9f97-51e572fb1779"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the sstparcelunion LMS Table\r\n",
							"# sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"# sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboorder LMS Table\r\n",
							"# dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"# dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstconsignmentunion LMS Table\r\n",
							"# sstconsignmentunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"# sstconsignmentunion.createOrReplaceTempView(\"sstconsignmentunion\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbowaybill LMS Table\r\n",
							"# dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"# dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboparceldetail LMS Table\r\n",
							"# dboparceldetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparceldetail.parquet', format='parquet')\r\n",
							"# dboparceldetail.createOrReplaceTempView(\"dboparceldetail\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicparcel LMS Table\r\n",
							"# publicparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicparcel.parquet', format='parquet')\r\n",
							"# publicparcel.createOrReplaceTempView(\"publicparcel\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdelivery ORV Table\r\n",
							"# publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"# publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stvsmparcel LMS Table\r\n",
							"# stvsmparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stvsmparcel.parquet', format='parquet')\r\n",
							"# stvsmparcel.createOrReplaceTempView(\"stvsmparcel\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboweekendholiday LMS Table\r\n",
							"# dboweekendholiday = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboweekendholiday.parquet', format='parquet')\r\n",
							"# dboweekendholiday.createOrReplaceTempView(\"dboweekendholiday\")"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparcel_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    p.id \r\n",
							"    ,p.lmsid \r\n",
							"    ,p.did \r\n",
							"    ,to_timestamp(p.scandate) as orv_parcel_scandate\r\n",
							"    ,p.scanstatus as orv_parcel_scanstatus\r\n",
							"\t,p.scanmode as orv_parcel_scanmode\r\n",
							"\t,p.claimid as orv_parcel_claimid\r\n",
							"\t,p.courierid as orv_parcel_courierid\r\n",
							"    ,to_timestamp(p.moddate) as orv_parcel_moddate\r\n",
							"    ,d.waybillid\r\n",
							"\r\n",
							"FROM publicparcel p\r\n",
							"LEFT JOIN publicdelivery d ON d.did = p.id\r\n",
							"WHERE d.mode ='deliver' and D.skipreason != 'Fix wrong data manipulation by the company'\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparcel_tmp2\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    p.id as lms_parcel_id\r\n",
							"    ,p.OrderID as lms_parcel_orderid\r\n",
							"    ,p.ConsignID as lms_parcel_consignid\r\n",
							"    ,p.WaybillID as lms_parcel_waybillid\r\n",
							"    ,p.LocID as lms_parcel_locid\r\n",
							"    ,p.TotCharge as lms_parcel_totcharge\r\n",
							"    ,p.DIMMS as lms_parcel_dimms\r\n",
							"    ,p.NoOfPcls as lms_parcel_noofpcls\r\n",
							"    ,p.PL as lms_parcel_pl\r\n",
							"    ,p.PW as lms_parcel_pw\r\n",
							"    ,p.PH as lms_parcel_ph\r\n",
							"    ,coalesce(p.acceptanceDate,p.handoverdate) as lms_parcel_pdate\r\n",
							"    ,p.AcceptanceDate as lms_parcel_acceptancedate\r\n",
							"    ,p.Barcode as lms_parcel_barcode\r\n",
							"    ,p.VolWeight as lms_parcel_volweight\r\n",
							"    ,p.Weight as lms_parcel_weight\r\n",
							"    ,p.ChargeWeight as lms_parcel_chargeweight\r\n",
							"    ,CASE \r\n",
							"        WHEN (p.ChargeWeight = 0 OR p.ChargeWeight is null) THEN GREATEST((p.weight),(p.VolWeight))\r\n",
							"        ELSE p.ChargeWeight \r\n",
							"    END as lms_parcel_pweight\r\n",
							"    ,p.PType as lms_parcel_ptype\r\n",
							"    ,p.HandOverDate as lms_parcel_handoverdate\r\n",
							"    ,p.FloorStatus as lms_parcel_floorstatus\r\n",
							"    ,p.ClaimID as lms_parcel_claimid\r\n",
							"    ,p.DateVolumised as lms_parcel_datevolumised\r\n",
							"    ,p.VolumiserWeight as lms_parcel_volumiserweight\r\n",
							"    ,p.VolumiserLength as lms_parcel_volumiserlength\r\n",
							"    ,p.VolumiserHeight as lms_parcel_volumiserheight\r\n",
							"    ,p.VolumiserWidth as lms_parcel_volumiserwidth\r\n",
							"    ,p.Volumiserid as lms_parcel_volumiserid\r\n",
							"    ,p.LastUpdate as lms_parcel_lastupdate\r\n",
							"    ,o.HODate as lms_parcel_orderhodate\r\n",
							"    ,o.PickUpCustID as lms_parcel_orderpickupcustid\r\n",
							"    ,o.DeliverCustID as lms_parcel_orderdelivercustid\r\n",
							"    ,o.BillCustID as lms_parcel_orderbillcustid\r\n",
							"    ,o.specdel as lms_parcel_orderspecdel\r\n",
							"    ,c.CDate as lms_parcel_consignmentcdate\r\n",
							"    ,c.DeliverBy as lms_parcel_consignmentdeliverby\r\n",
							"    ,w.PODDate  as lms_parcel_waybillpoddate \r\n",
							"    ,w.Date as lms_parcel_waybilldate\r\n",
							"    ,pd.id as lms_parcel_parceldetailid\r\n",
							"    ,pd.InServiceStart as lms_parcel_parceldetailinservicestart\r\n",
							"    ,pd.DeliverBy as lms_parcel_parceldetaildeliverby\r\n",
							"    ,pd.ServiceDays as lms_parcel_parceldetailservicedays\r\n",
							"    ,pd.ServiceTime as lms_parcel_parceldetailservicetime\r\n",
							"    ,pd.Cutofftime as lms_parcel_parceldetailcutofftime\r\n",
							"    ,pd.Appointment as lms_parcel_parceldetailappointment\r\n",
							"    ,pd.NDDID as lms_parcel_parceldetailnddid\r\n",
							"    ,pd.CustOnholdStart as lms_parcel_parceldetailcustonholdstart\r\n",
							"    ,pd.CustOnholdEnd as lms_parcel_parceldetailcustonholdend\r\n",
							"    ,pd.SplitInitial as lms_parcel_parceldetailsplitinitial\r\n",
							"    ,pd.WeekendHolidays as lms_parcel_parceldetailweekendholidays\r\n",
							"    ,pd.Inbound as lms_parcel_parceldetailinbound\r\n",
							"    ,pd.CourierID as lms_parcel_parceldetailcourierid\r\n",
							"    ,pd.ServiceID as lms_parcel_parceldetailserviceid\r\n",
							"    ,pd.CustAccID as lms_parcel_parceldetailcustaccid\r\n",
							"    ,pd.BrouteMasterID as lms_parcel_parceldetailbroutemasterid\r\n",
							"    ,pd.BrouteMasterFromID as lms_parcel_parceldetailbroutemasterfromid\r\n",
							"    ,pd.BrouteMasterToID as lms_parcel_parceldetailbroutemastertoid\r\n",
							"    ,pd.LeadTimeID as lms_parcel_parceldetailleadtimeid\r\n",
							"    ,CASE \r\n",
							"        WHEN pd.id is null and (coalesce(w.PODDate,CURRENT_TIMESTAMP) > c.DeliverBy) then 0 \r\n",
							"        WHEN coalesce(w.PODDate,CURRENT_TIMESTAMP) > pd.DeliverBy then 0 \r\n",
							"        ELSE 1 \r\n",
							"    END as lms_parcel_inserviceflag\r\n",
							"   ,CASE \r\n",
							"        WHEN pd.id is null then (date(coalesce(c.cdate,coalesce(p.acceptanceDate,p.handoverdate)) + interval '86399 seconds'))\r\n",
							"        ELSE (pd.InServiceStart)\r\n",
							"    END AS lms_parcel_actualleaddaysstartdate\r\n",
							"    ,coalesce(w.PODDate,CURRENT_TIMESTAMP) AS lms_parcel_actualleaddaysenddate\r\n",
							"    ,CASE\r\n",
							"        WHEN pd.id is null then ((to_unix_timestamp(coalesce(w.PODDate,CURRENT_TIMESTAMP))) - (to_unix_timestamp(date(coalesce(c.cdate,coalesce(p.acceptanceDate,p.handoverdate))) + interval '86399 seconds')))/86400 \r\n",
							"        ELSE ((to_unix_timestamp(coalesce(w.PODDate,CURRENT_TIMESTAMP))) - (to_unix_timestamp(pd.InServiceStart)))/86400 \r\n",
							"    END as lms_parcel_actualleaddaysinclwe\r\n",
							"    ,pt.orv_parcel_scandate\r\n",
							"    ,pt.orv_parcel_scanstatus\r\n",
							"\t,pt.orv_parcel_scanmode\r\n",
							"\t,pt.orv_parcel_claimid\r\n",
							"\t,pt.orv_parcel_courierid\r\n",
							"    ,pt.orv_parcel_moddate\r\n",
							"    ,CASE\r\n",
							"        WHEN pd.id is null then to_timestamp((cast(to_date(c.DeliverBy,'yyyy-MM-dd') as string)||' 23:59:59.999'))\r\n",
							"        ELSE to_timestamp((cast(to_date(pd.DeliverBy,'yyyy-MM-dd') as string)||' 23:59:59.999'))\r\n",
							"    END as lms_parcel_parceldetaildeliverbyroundup\r\n",
							"    ,CASE\r\n",
							"        WHEN pd.id is null then (to_unix_timestamp(coalesce(w.PODDate,CURRENT_TIMESTAMP)) - to_unix_timestamp(to_timestamp((cast(to_date(c.DeliverBy,'yyyy-MM-dd') as string)||' 23:59:59.999')))) \r\n",
							"        ELSE (to_unix_timestamp(coalesce(w.PODDate,CURRENT_TIMESTAMP)) - to_unix_timestamp(to_timestamp((cast(to_date(pd.DeliverBy,'yyyy-MM-dd') as string)||' 23:59:59.999')))) \r\n",
							"    END as parcelagedifferenceinseconds\r\n",
							"    \r\n",
							"FROM sstparcelunion p\r\n",
							"LEFT JOIN stparcel_tmp pt on pt.lmsid = p.id AND pt.waybillid = p.waybillid\r\n",
							"LEFT JOIN dboorder o on p.orderid = o.id\r\n",
							"LEFT JOIN sstconsignmentunion c on p.consignid = c.id\r\n",
							"LEFT JOIN dbowaybill w on p.waybillid = w.ID\r\n",
							"LEFT JOIN dboparceldetail pd on p.id = pd.parcelid\r\n",
							"WHERE  coalesce(p.acceptanceDate,p.handoverdate) IS NOT NULL\r\n",
							"AND p.locid NOT IN (163,110,213,27)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparcel_tmp3\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    p.lms_parcel_id\r\n",
							"    ,sum(holiday)*86400 as holidays\r\n",
							"FROM stparcel_tmp2 p\r\n",
							"INNER JOIN dboweekendholiday h on (date(h.DateHoliday) >=  date(lms_parcel_actualleaddaysstartdate) and date(h.DateHoliday) <= date(lms_parcel_actualleaddaysenddate)) and Holiday = 1\r\n",
							"GROUP BY p.lms_parcel_id\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparcel_tmp4\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    p.*\r\n",
							"    ,(to_unix_timestamp(p.lms_parcel_actualleaddaysenddate) - to_unix_timestamp(p.lms_parcel_actualleaddaysstartdate) - p1.holidays)/86400 as lms_parcel_actualleaddays\r\n",
							"FROM stparcel_tmp2 p\r\n",
							"LEFT JOIN stparcel_tmp3 p1 on p1.lms_parcel_id = p.lms_parcel_id"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparcel_tmp5\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    *\r\n",
							"    ,CASE \r\n",
							"        WHEN lms_parcel_parceldetaildeliverby is null THEN 'Not Consigned'\r\n",
							"        WHEN lms_parcel_waybillpoddate is null THEN 'Not Delivered'\r\n",
							"        WHEN (parcelagedifferenceinseconds/3600) < 12 THEN '< 12 hrs'\r\n",
							"        WHEN (parcelagedifferenceinseconds/3600) < 24 THEN '< 24 hrs'\r\n",
							"        WHEN (parcelagedifferenceinseconds/3600) < 48 THEN '< 2 days'\r\n",
							"        WHEN (parcelagedifferenceinseconds/3600) < 72 THEN '< 3 days'\r\n",
							"        WHEN (parcelagedifferenceinseconds/3600) < 96 THEN '< 4 days'\r\n",
							"        WHEN (parcelagedifferenceinseconds/3600) < 120 THEN '< 5 days'\r\n",
							"        WHEN (parcelagedifferenceinseconds/3600) < 144 THEN '< 6 days'\r\n",
							"        WHEN (parcelagedifferenceinseconds/3600) < 168 THEN '< 7 days'\r\n",
							"        WHEN (parcelagedifferenceinseconds/3600) > 168 THEN '> 7 days'\r\n",
							"        ELSE NULL\r\n",
							"    END as lms_parcel_age\r\n",
							"\r\n",
							"FROM stparcel_tmp4\r\n",
							""
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparcel\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     p.*\r\n",
							"    ,v.lms_track_enddate\r\n",
							"    ,v.lms_track_floortimeend\r\n",
							"    ,v.lms_track_fromlocid\r\n",
							"    ,(to_unix_timestamp(p.lms_parcel_consignmentcdate)-to_unix_timestamp(p.lms_parcel_pdate)) as lms_parcel_pdatetocdate\r\n",
							"    ,(to_unix_timestamp(v.lms_track_enddate)-to_unix_timestamp(p.lms_parcel_consignmentcdate)) as lms_parcel_cdatetoenddate\r\n",
							"    ,(to_unix_timestamp(v.lms_track_enddate)-to_unix_timestamp(p.lms_parcel_pdate)) as lms_parcel_startdatetoenddate\r\n",
							"    ,(to_unix_timestamp(v.lms_track_floortimeend)-to_unix_timestamp(v.lms_track_enddate)) as lms_parcel_floortimeedndtoenddate\r\n",
							"    ,(to_unix_timestamp(p.lms_parcel_waybillpoddate)-to_unix_timestamp(v.lms_track_floortimeend)) as lms_parcel_deliveryduration\r\n",
							"    \r\n",
							"  \r\n",
							"FROM stparcel_tmp5 p\r\n",
							"LEFT JOIN stvsmparcel v ON v.lms_track_parcelid = p.lms_parcel_id"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stparcel = spark.sql(\"SELECT * FROM stparcel\")"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_LH_STFinanceData')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "71de3fcd-10b2-42f5-8b92-1dab8c16aa0e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						}
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the publicfinancedata TMS Table\r\n",
							"# publicfinancedata = spark.read.load('abfss://synapse' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfinancedata.parquet', format='parquet')\r\n",
							"# publicfinancedata.createOrReplaceTempView(\"publicfinancedata\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stfinancedata\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    f.id as tms_financedata_id\r\n",
							"    ,f.bookingid as tms_financedata_bookingid\r\n",
							"    ,to_timestamp(f.insdate) as tms_financedata_insdate\r\n",
							"    ,f.peaksurchagrebuy as tms_financedata_peaksurchagrebuy\r\n",
							"    ,f.peaksurchagresell as tms_financedata_peaksurchagresell\r\n",
							"    ,f.manualentryroadhaulsell as tms_financedata_manualentryroadhaulsell\r\n",
							"    ,f.manualentryahocsell as tms_financedata_manualentryahocsell\r\n",
							"    ,f.systemfuellevy as tms_financedata_systemfuellevy\r\n",
							"    ,f.systemratefuellevy as tms_financedata_systemratefuellevy\r\n",
							"    ,f.systemratefuelexlevy as tms_financedata_systemratefuelexlevy\r\n",
							"    ,f.systemratefuelinclevy as tms_financedata_systemratefuelinclevy\r\n",
							"    ,f.systemsellrate as tms_financedata_systemsellrate\r\n",
							"    ,f.totalsellrate as tms_financedata_totalsellrate\r\n",
							"    ,to_timestamp(f.moddate) as tms_financedata_moddate\r\n",
							"    ,f.totalbuyrate as tms_financedata_totalbuyrate\r\n",
							"    ,f.rateprofileid as tms_financedata_rateprofileid\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"FROM publicfinancedata f\r\n",
							""
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stfinancedata = spark.sql(\"SELECT * FROM stfinancedata\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stfinancedata.write.parquet('abfss://synapse' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfinancedata.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_STBusinessPartners')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "630acbb2-df76-454b-9cd2-bf4104b52a73"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dboOCRD SAP Table\r\n",
							"# dboOCRD = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOCRD.parquet', format='parquet')\r\n",
							"# dboOCRD.createOrReplaceTempView(\"dboOCRD\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stbusinnesspartner\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    ocrd.cardcode as sap_businesspartners_cardcode\r\n",
							"    ,ocrd.cardname  as sap_businesspartners_cardname \r\n",
							"    ,ocrd.cardtype as sap_businesspartners_cardtype\r\n",
							"    ,ocrd.groupcode as sap_businesspartners_groupcode\r\n",
							"    ,ocrd.cmpprivate as sap_businesspartners_cmpprivate\r\n",
							"    ,ocrd.groupnum as sap_businesspartners_groupnum\r\n",
							"    ,ocrd.creditline as sap_businesspartners_creditline\r\n",
							"    ,ocrd.debtline as sap_businesspartners_debtline\r\n",
							"    ,ocrd.discount as sap_businesspartners_discount\r\n",
							"    ,ocrd.vatstatus as sap_businesspartners_vatstatus\r\n",
							"    ,ocrd.lictradnum as sap_businesspartners_lictradnum\r\n",
							"    ,ocrd.city as sap_businesspartners_city\r\n",
							"    ,ocrd.u_boy_tb_0 as sap_businesspartners_u_boy_tb_0\r\n",
							"    ,ocrd.u_creditapp as sap_businesspartners_u_creditapp\r\n",
							"    ,ocrd.u_creditref as sap_businesspartners_u_creditref\r\n",
							"    ,ocrd.u_creditcontract as sap_businesspartners_u_creditcontract\r\n",
							"    ,ocrd.u_bee as sap_businesspartners_u_bee\r\n",
							"    ,ocrd.u_depotmanager as sap_businesspartners_u_depotmanager\r\n",
							"    ,ocrd.u_branchmanager as sap_businesspartners_u_branchmanager\r\n",
							"    ,ocrd.u_petty_cash as sap_businesspartners_u_petty_cash\r\n",
							"\r\n",
							"FROM dboOCRD ocrd\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbusinnesspartner = spark.sql(\"SELECT * FROM stbusinnesspartner\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stbusinnesspartner.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stbusinnesspartner.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_DIST_STOrder')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e76bb4d0-f464-4fca-9630-f978bf0c06ab"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"#Create DataFrame for the dboorder LMS Table\r\n",
							"dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelbyorder LMS Table\r\n",
							"sstparcelbyorder = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyorder.parquet', format='parquet')\r\n",
							"sstparcelbyorder.createOrReplaceTempView(\"sstparcelbyorder\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbowaybill LMS Table\r\n",
							"dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelunion LMS \r\n",
							"sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstconsignmentunion LMS Table\r\n",
							"sstconsignmentunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"sstconsignmentunion.createOrReplaceTempView(\"sstconsignmentunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboweekendholiday LMS Table\r\n",
							"dboweekendholiday = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboweekendholiday.parquet', format='parquet')\r\n",
							"dboweekendholiday.createOrReplaceTempView(\"dboweekendholiday\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storder_tmp1\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    o.id as lms_order_id\r\n",
							"    ,o.COrderNo as lms_order_corderno\r\n",
							"    ,o.CustRef as lms_order_custref\r\n",
							"    ,o.PickUpCustID as lms_order_pickupcustid\r\n",
							"    ,o.DeliverCustID as lms_order_delivercustid\r\n",
							"    ,o.BillCustID as lms_order_billcustid\r\n",
							"    ,o.Weight as lms_order_weight\r\n",
							"    ,o.OValue as lms_order_ovalue\r\n",
							"    ,o.HODate as lms_order_hodate\r\n",
							"    ,o.CService as lms_order_cservice\r\n",
							"    ,o.CourierID as lms_order_courierid\r\n",
							"    ,o.CustService as lms_order_custservice\r\n",
							"    ,o.UserID as lms_order_userid\r\n",
							"    ,o.Appointment as lms_order_appointment\r\n",
							"    ,o.DeliverBy as lms_order_deliverby\r\n",
							"    ,o.DConfirmed as lms_order_dconfirmed\r\n",
							"    ,o.DComment as lms_order_dcomment\r\n",
							"    ,o.DRefNo as lms_order_drefno\r\n",
							"    ,o.DueDate as lms_order_duedate\r\n",
							"    ,o.BatchNo as lms_order_batchno\r\n",
							"    ,o.CustAccID as lms_order_custaccid\r\n",
							"    ,o.Airfreightflag as lms_order_airfreightflag\r\n",
							"    ,o.SpecDel as lms_order_specdel\r\n",
							"    ,pbo.lms_parcelbyorder_aggrweight\r\n",
							"    ,pbo.lms_parcelbyorder_aggrchargeweight\r\n",
							"    ,pbo.lms_parcelbyorder_aggrvolweight\r\n",
							"    ,pbo.lms_parcelbyorder_aggrvolumiserweight\r\n",
							"    ,pbo.lms_parcelbyorder_aggrmaxweight\r\n",
							"    ,pbo.lms_parcelbyorder_aggrnoparcels\r\n",
							"    ,pbo.lms_parcelbyorder_aggrweightexclspecdel\r\n",
							"    ,pbo.lms_parcelbyorder_aggrchargeweightexclspecdel\r\n",
							"    ,pbo.lms_parcelbyorder_aggrvolweightexclspecdel\r\n",
							"    ,pbo.lms_parcelbyorder_aggrvolumiserweightexclspecdel\r\n",
							"    ,pbo.lms_parcelbyorder_aggrmaxweightexclspecdel\r\n",
							"    ,pbo.lms_parcelbyorder_aggrnoparcelsexclspecdel\r\n",
							"\r\n",
							"FROM dboorder o\r\n",
							"LEFT JOIN sstparcelbyorder pbo on pbo.lms_parcelbyorder_orderid =  o.id\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storder_tmp2\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"\r\n",
							"p.orderid,\r\n",
							"max(w.poddate) as lms_order_maxpoddate,\r\n",
							"min(c.deliverby) as lms_order_mindeliverby\r\n",
							"\r\n",
							"FROM  sstparcelunion p\r\n",
							"LEFT JOIN dbowaybill w on w.id = p.waybillid\r\n",
							"LEFT JOIN sstconsignmentunion c on c.id = p.consignid\r\n",
							"WHERE p.orderid is not null and p.consignid is not null\r\n",
							"GROUP BY p.orderid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storder_tmp3\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    o.*\r\n",
							"    ,o2.lms_order_maxpoddate\r\n",
							"    ,CASE \r\n",
							"\t    WHEN (coalesce(o2.lms_order_maxpoddate,CURRENT_TIMESTAMP)) <= (date(o2.lms_order_mindeliverby) + interval '86399 seconds') THEN 1\r\n",
							"\t    ELSE 0\r\n",
							"    END lms_order_inserviceflag\r\n",
							"    ,to_timestamp((cast(to_date(o.lms_order_hodate,'yyyy-MM-dd') as string)||' 23:59:59.999')) as  lms_order_actualleaddaysstartdate\r\n",
							"    ,coalesce(o2.lms_order_maxpoddate,CURRENT_TIMESTAMP) AS lms_order_actualleaddaysenddate\r\n",
							"    ,(to_unix_timestamp(coalesce(o2.lms_order_maxpoddate,CURRENT_TIMESTAMP)) - (to_unix_timestamp(to_timestamp((cast(to_date(o.lms_order_hodate,'yyyy-MM-dd') as string)||' 23:59:59.999')))))/86400 as lms_order_actualleaddaysinclwe\r\n",
							"    ,to_timestamp((cast(to_date(o.lms_order_hodate,'yyyy-MM-dd') as string)||' 23:59:59.999')) lms_order_hodateroundup\r\n",
							"    ,(to_unix_timestamp(coalesce(o2.lms_order_maxpoddate,CURRENT_TIMESTAMP)) - to_unix_timestamp(to_timestamp((cast(to_date(o.lms_order_hodate,'yyyy-MM-dd') as string)||' 23:59:59.999')))) as orderagedifferenceinseconds\r\n",
							"\r\n",
							"FROM storder_tmp1 o\r\n",
							"LEFT JOIN storder_tmp2 o2 ON o2.orderid = o.lms_order_id"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storder_tmp4\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    o.lms_order_id\r\n",
							"    ,sum(holiday)*86400 as holidays\r\n",
							"FROM storder_tmp3 o\r\n",
							"INNER JOIN dboweekendholiday h on (date(h.DateHoliday) >=  date(lms_order_actualleaddaysstartdate) and date(h.DateHoliday) <= date(lms_order_actualleaddaysenddate)) and Holiday = 1\r\n",
							"GROUP BY o.lms_order_id"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storder_tmp5\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    o.*\r\n",
							"    ,(to_unix_timestamp(o.lms_order_actualleaddaysenddate) - to_unix_timestamp(o.lms_order_actualleaddaysstartdate) - o1.holidays)/86400  as lms_order_actualleaddays\r\n",
							"FROM storder_tmp3 o\r\n",
							"LEFT JOIN storder_tmp4 o1 on o1.lms_order_id = o.lms_order_id"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storder\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    *\r\n",
							"    ,CASE \r\n",
							"        WHEN lms_order_hodate is null THEN 'Not Ordered'\r\n",
							"        WHEN lms_order_maxpoddate is null THEN 'Not Delivered'\r\n",
							"        WHEN (orderagedifferenceinseconds/3600) < 12 THEN '< 12 hrs'\r\n",
							"        WHEN (orderagedifferenceinseconds/3600) < 24 THEN '< 24 hrs'\r\n",
							"        WHEN (orderagedifferenceinseconds/3600) < 48 THEN '< 2 days'\r\n",
							"        WHEN (orderagedifferenceinseconds/3600) < 72 THEN '< 3 days'\r\n",
							"        WHEN (orderagedifferenceinseconds/3600) < 96 THEN '< 4 days'\r\n",
							"        WHEN (orderagedifferenceinseconds/3600) < 120 THEN '< 5 days'\r\n",
							"        WHEN (orderagedifferenceinseconds/3600) < 144 THEN '< 6 days'\r\n",
							"        WHEN (orderagedifferenceinseconds/3600) < 168 THEN '< 7 days'\r\n",
							"        WHEN (orderagedifferenceinseconds/3600) > 168 THEN '> 7 days'\r\n",
							"        ELSE NULL\r\n",
							"    END as lms_order_age\r\n",
							"\r\n",
							"FROM storder_tmp5\r\n",
							""
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"storder = spark.sql(\"SELECT * FROM storder\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# storder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/storder.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 14
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_LH_STInstruction')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "15c7b37e-f97b-41b5-a946-4d894e570388"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						}
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the publicInstruction TMS Table\r\n",
							"# publicInstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinstruction.parquet', format='parquet')\r\n",
							"# publicInstruction.createOrReplaceTempView(\"publicInstruction\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboLHInstruction LMS Table\r\n",
							"# dboLHInstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_instruction.parquet', format='parquet')\r\n",
							"# dboLHInstruction.createOrReplaceTempView(\"dboLHInstruction\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicLHInstruction LMS Table\r\n",
							"# publicLHInstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiclhdelivery.parquet', format='parquet')\r\n",
							"# publicLHInstruction.createOrReplaceTempView(\"publicLHInstruction\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stbooking TMSLMS combine Table\r\n",
							"# stbooking = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stbooking.parquet', format='parquet')\r\n",
							"# stbooking.createOrReplaceTempView(\"stbooking\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stinstruction_tms\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    i.id as tms_instruction_id\r\n",
							"    ,i.bookingid as tms_instruction_bookingid\r\n",
							"    ,i.addressid as tms_instruction_addressid\r\n",
							"    ,i.instrtype as tms_instruction_instrtype\r\n",
							"    ,i.onroute as tms_instruction_onroute\r\n",
							"    ,i.onrouteid as tms_instruction_onrouteid\r\n",
							"    ,i.sort as tms_instruction_sort\r\n",
							"    ,i.onroutestatus as tms_instruction_onroutestatus\r\n",
							"    ,i.note as tms_instruction_note\r\n",
							"    ,i.citybranchid as tms_instruction_citybranchid\r\n",
							"    ,i.citybranchname as tms_instruction_citybranchname\r\n",
							"    ,to_timestamp(i.insdate) as tms_instruction_insdate\r\n",
							"    ,to_timestamp(i.moddate) as tms_instruction_moddate\r\n",
							"    ,i.insby as tms_instruction_insby\r\n",
							"    ,CASE \r\n",
							"        WHEN i.instrtype = \"pickup\" THEN tms_booking_pickupdate\r\n",
							"        WHEN i.instrtype = \"delivery\" THEN tms_booking_deliverydate\r\n",
							"    END as tms_instruction_bookingpickupdeliverydate\r\n",
							"\r\n",
							"FROM publicinstruction i\r\n",
							"LEFT JOIN stbooking b on b.tms_booking_id = i.bookingid\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stinstruction_tms = spark.sql(\"SELECT * FROM stinstruction_tms\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stinstruction_lms \r\n",
							"AS\r\n",
							"\r\n",
							"SELECT    \r\n",
							"    CAST(CONCAT('-',CAST(i.id as string)) as int) as tms_instruction_id\r\n",
							"    ,CAST(CONCAT('-',CAST(i.bookingid as string)) as int) as tms_instruction_bookingid\r\n",
							"    ,CAST(CONCAT('-',CAST(i.addressid as string)) as int) as tms_instruction_addressid\r\n",
							"    ,CASE\r\n",
							"        WHEN i.instructiontypeid = 1 THEN 'pickup'\r\n",
							"        ELSE 'delivery'    \r\n",
							"    END as tms_instruction_instrtype\r\n",
							"    ,null as tms_instruction_onroute\r\n",
							"    ,null as tms_instruction_onrouteid\r\n",
							"    ,i.sequence as tms_instruction_sort\r\n",
							"    ,null as tms_instruction_onroutestatus\r\n",
							"    ,null as tms_instruction_note\r\n",
							"    ,null as tms_instruction_citybranchid\r\n",
							"    ,null as tms_instruction_citybranchname\r\n",
							"    ,i.createddate as tms_instruction_insdate\r\n",
							"    ,i.createddate as tms_instruction_moddate\r\n",
							"    ,CAST(CONCAT('-',CAST(i.userid as string)) as int) as tms_instruction_insby\r\n",
							"    ,CASE \r\n",
							"        WHEN i.instructiontypeid = 1 THEN tms_booking_pickupdate\r\n",
							"        ELSE tms_booking_deliverydate\r\n",
							"    END as tms_instruction_bookingpickupdeliverydate\r\n",
							"\r\n",
							"FROM dbolhinstruction i\r\n",
							"LEFT JOIN stbooking b on b.tms_booking_id = CAST(CONCAT('-',CAST(i.bookingid as string)) as int)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stinstruction_lms = spark.sql(\"SELECT * FROM stinstruction_lms\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stinstruction_tmp = stinstruction_lms.unionByName(stinstruction_tms, allowMissingColumns = True)\r\n",
							"stinstruction_tmp.createOrReplaceTempView(\"stinstruction_tmp\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stinstruction_tmp2\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    si.tms_instruction_id\r\n",
							"    ,si.tms_instruction_bookingid\r\n",
							"    ,si.tms_instruction_addressid\r\n",
							"    ,si.tms_instruction_instrtype\r\n",
							"    ,si.tms_instruction_onroute\r\n",
							"    ,si.tms_instruction_onrouteid\r\n",
							"    ,si.tms_instruction_sort\r\n",
							"    ,si.tms_instruction_onroutestatus\r\n",
							"    ,si.tms_instruction_note\r\n",
							"    ,si.tms_instruction_citybranchid\r\n",
							"    ,si.tms_instruction_citybranchname\r\n",
							"    ,si.tms_instruction_insdate\r\n",
							"    ,si.tms_instruction_moddate\r\n",
							"    ,si.tms_instruction_insby\r\n",
							"    ,to_timestamp(si.tms_instruction_bookingpickupdeliverydate) as tms_instruction_bookingpickupdeliverydate\r\n",
							"    ,i.id as orv_lhdelivery_id\r\n",
							"    ,i.did as orv_lhdelivery_did\r\n",
							"    ,i.lat as orv_lhdelivery_lat\r\n",
							"    ,i.lng as orv_lhdelivery_lng\r\n",
							"    ,to_timestamp(i.actualeta) as orv_lhdelivery_actualeta\r\n",
							"    ,to_timestamp(i.eta) as orv_lhdelivery_eta\r\n",
							"    ,to_timestamp(i.tsgeofenceenter) as orv_lhdelivery_tsgeofenceenter\r\n",
							"    ,to_timestamp(i.tsdocuments) as orv_lhdelivery_tsdocuments\r\n",
							"    ,i.customerref1 as orv_lhdelivery_customerref1\r\n",
							"    ,i.customerref2 as orv_lhdelivery_customerref2\r\n",
							"    ,i.trailersize as orv_lhdelivery_trailersize\r\n",
							"    ,i.cargoweight as orv_lhdelivery_cargoweight\r\n",
							"    ,i.cubicvolume as orv_lhdelivery_cubicvolume\r\n",
							"    ,i.geocodingstatus as orv_lhdelivery_geocodingstatus\r\n",
							"    ,i.status as orv_lhdelivery_status\r\n",
							"    ,i.optimizedorder as orv_lhdelivery_optimizedorder\r\n",
							"    ,i.triporder as orv_lhdelivery_triporder\r\n",
							"    ,i.sequence as orv_lhdelivery_sequence\r\n",
							"    ,i.bookingid as orv_lhdelivery_bookingid\r\n",
							"    ,i.grv as orv_lhdelivery_grv\r\n",
							"    ,i.chepslip as orv_lhdelivery_chepslip\r\n",
							"    ,i.type as orv_lhdelivery_type\r\n",
							"    ,to_timestamp(i.insdate) as orv_lhdelivery_insdate\r\n",
							"    ,i.isdirect as orv_lhdelivery_isdirect\r\n",
							"    ,i.notes as orv_lhdelivery_notes\r\n",
							"    ,i.contactperson as orv_lhdelivery_contactperson\r\n",
							"    ,i.contactnumber as orv_lhdelivery_contactnumber\r\n",
							"    ,i.trailerfleetcode as orv_lhdelivery_trailerfleetcode\r\n",
							"    ,i.primarycustomerid as orv_lhdelivery_primarycustomerid\r\n",
							"    ,i.pcustomername as orv_lhdelivery_pcustomername\r\n",
							"    ,i.pcustomeraccountnumber as orv_lhdelivery_pcustomeraccountnumber\r\n",
							"    ,i.pcustomerrevenuecode as orv_lhdelivery_pcustomerrevenuecode\r\n",
							"    ,i.secondarycustomerid as orv_lhdelivery_secondarycustomerid\r\n",
							"    ,i.scustomername as orv_lhdelivery_scustomername\r\n",
							"    ,i.scustomeraccountnumber as orv_lhdelivery_scustomeraccountnumber\r\n",
							"    ,i.scustomerrevenuecode as orv_lhdelivery_scustomerrevenuecode\r\n",
							"    ,to_timestamp(i.actiondate) as orv_lhdelivery_actiondate\r\n",
							"    ,to_timestamp(i.tsgeofenceexit) as orv_lhdelivery_tsgeofenceexit\r\n",
							"    ,i.pctmsid as orv_lhdelivery_pctmsid\r\n",
							"    ,i.sctmsid as orv_lhdelivery_sctmsid\r\n",
							"    ,i.customorder as orv_lhdelivery_customorder\r\n",
							"    ,to_timestamp(i.skipdate) as orv_lhdelivery_skipdate\r\n",
							"    ,i.skipreason as orv_lhdelivery_skipreason\r\n",
							"    ,i.outofgeofencereason as orv_lhdelivery_outofgeofencereason\r\n",
							"    ,to_timestamp(i.tsarrivedcustomer) as orv_lhdelivery_tsarrivedcustomer\r\n",
							"    ,to_timestamp(i.tsdroppedoff) as orv_lhdelivery_tsdroppedoff\r\n",
							"    ,to_timestamp(i.tsstartoffloading) as orv_lhdelivery_tsstartoffloading\r\n",
							"    ,to_timestamp(i.tsstartloading) as orv_lhdelivery_tsstartloading\r\n",
							"    ,to_timestamp(i.tsloaded) as orv_lhdelivery_tsloaded\r\n",
							"    ,to_timestamp(i.tsfinishedoffloading) as orv_lhdelivery_tsfinishedoffloading\r\n",
							"    ,to_timestamp(i.tsdocumnetshanddovedriver) as orv_lhdelivery_tsdocumnetshanddovedriver\r\n",
							"    ,to_timestamp(i.tsleavingcustomer) as orv_lhdelivery_tsleavingcustomer\r\n",
							"    ,i.actionsubtype as orv_lhdelivery_actionsubtype\r\n",
							"    ,to_timestamp(i.tsstart) as orv_lhdelivery_tsstart\r\n",
							"    ,i.signame as orv_lhdelivery_signame\r\n",
							"    ,i.signcomment as orv_lhdelivery_signcomment\r\n",
							"    ,to_timestamp(i.signdate) as orv_lhdelivery_signdate\r\n",
							"    ,to_timestamp(i.tsendtate) as orv_lhdelivery_tsendtate\r\n",
							"    ,to_timestamp(i.tsentergeofenceapp) as orv_lhdelivery_tsentergeofenceapp\r\n",
							"    ,to_timestamp(i.tsexitgeofenceapp) as orv_lhdelivery_tsexitgeofenceapp\r\n",
							"    ,i.tmsid as orv_lhdelivery_tmsid\r\n",
							"    ,i.subtype as orv_lhdelivery_subtype\r\n",
							"    ,i.needbotrailerver as orv_lhdelivery_needbotrailerver\r\n",
							"    ,i.secondtrailerfleetcode as orv_lhdelivery_secondtrailerfleetcode\r\n",
							"    ,i.trailerverlat as orv_lhdelivery_trailerverlat\r\n",
							"    ,i.trailerverlng as orv_lhdelivery_trailerverlng\r\n",
							"    ,i.tstrailerver as orv_lhdelivery_tstrailerver\r\n",
							"    ,i.podlat as orv_lhdelivery_podlat\r\n",
							"    ,i.podlng as orv_lhdelivery_podlng\r\n",
							"    ,i.skiplat as orv_lhdelivery_skiplat\r\n",
							"    ,i.skiplng as orv_lhdelivery_skiplng\r\n",
							"    ,to_timestamp(i.uncanceldate) as orv_lhdelivery_uncanceldate\r\n",
							"    --,i.citybranchname as orv_lhdelivery_citybranchname\r\n",
							"\r\n",
							"FROM stinstruction_tmp si\r\n",
							"LEFT JOIN publiclhinstruction i on i.tmsid = si.tms_instruction_id\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stinstruction_tmp2 = spark.sql(\"SELECT * FROM stinstruction_tmp2\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stinstruction\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"*\r\n",
							",(to_unix_timestamp(orv_lhdelivery_tsleavingcustomer)-to_unix_timestamp(orv_lhdelivery_tsarrivedcustomer)) as tms_instruction_inputpickupduration\r\n",
							",(to_unix_timestamp(orv_lhdelivery_tsloaded)-to_unix_timestamp(orv_lhdelivery_tsstartloading)) as tms_instruction_loadingduration\r\n",
							",(to_unix_timestamp(orv_lhdelivery_tsgeofenceexit)-to_unix_timestamp(orv_lhdelivery_tsgeofenceenter)) as tms_instruction_geopickupduration\r\n",
							",(to_unix_timestamp(orv_lhdelivery_tsendtate)-to_unix_timestamp(tms_instruction_insdate)) as tms_instruction_actionpickupduration\r\n",
							",CASE \r\n",
							"    WHEN orv_lhdelivery_tsarrivedcustomer is null THEN 'unknown'\r\n",
							"    WHEN orv_lhdelivery_tsarrivedcustomer < tms_instruction_bookingpickupdeliverydate THEN 'inservice'\r\n",
							"    ELSE 'outofservice'\r\n",
							"END tms_instruction_driverinputservice        \r\n",
							",CASE\r\n",
							"    WHEN orv_lhdelivery_tsentergeofenceapp is null THEN 'unknown'\r\n",
							"    WHEN orv_lhdelivery_tsentergeofenceapp < tms_instruction_bookingpickupdeliverydate THEN 'inservice'\r\n",
							"    ELSE 'outofservice'   \r\n",
							"END tms_instruction_geofenceservice\r\n",
							"\r\n",
							"FROM stinstruction_tmp2\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stinstruction = spark.sql(\"SELECT * FROM stinstruction\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stinstruction.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stinstruction.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/04_STSalesInvoices')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5aa9e80b-ecaa-48ca-81bc-28d767b5733f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dboOINV SAP Table\r\n",
							"# dboOINV = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOINV.parquet', format='parquet')\r\n",
							"# dboOINV.createOrReplaceTempView(\"dboOINV\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboINV1 SAP Table\r\n",
							"# dboINV1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboINV1.parquet', format='parquet')\r\n",
							"# dboINV1.createOrReplaceTempView(\"dboINV1\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stsalesinvoice\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    oinv.docentry as sap_salesinvoiceheader_docentry\r\n",
							"    ,oinv.docnum as sap_salesinvoiceheader_docnum\r\n",
							"    ,oinv.doctype as sap_salesinvoiceheader_doctype\r\n",
							"    ,oinv.canceled as sap_salesinvoiceheader_canceled\r\n",
							"    ,oinv.objtype as sap_salesinvoiceheader_objtype\r\n",
							"    ,oinv.docdate as sap_salesinvoiceheader_docdate\r\n",
							"    ,oinv.docduedate as sap_salesinvoiceheader_docduedate\r\n",
							"    ,oinv.cardcode as sap_salesinvoiceheader_cardcode\r\n",
							"    ,oinv.cardname as sap_salesinvoiceheader_cardname\r\n",
							"    ,oinv.numatcard as sap_salesinvoiceheader_numatcard\r\n",
							"    ,oinv.discprcnt as sap_salesinvoiceheader_discprcnt\r\n",
							"    ,oinv.vatsum as sap_salesinvoiceheader_vatsum\r\n",
							"    ,oinv.discsum as sap_salesinvoiceheader_discsum\r\n",
							"    ,oinv.doctotal as sap_salesinvoiceheader_doctotal\r\n",
							"    ,oinv.comments as sap_salesinvoiceheader_comments\r\n",
							"    ,oinv.transid as sap_salesinvoiceheader_transid\r\n",
							"    ,oinv.usersign as sap_salesinvoiceheader_usersign\r\n",
							"    ,oinv.u_depot as sap_salesinvoiceheader_u_depot\r\n",
							"    ,oinv.u_usercode as sap_salesinvoiceheader_u_usercode\r\n",
							"    ,oinv.u_expense_depot as sap_salesinvoiceheader_u_expense_depot\r\n",
							"    ,oinv.u_transaction_date as sap_salesinvoiceheader_u_transaction_date\r\n",
							"    ,oinv.rounddif as sap_salesinvoiceheader_rounddif\r\n",
							"    ,oinv.rounding as sap_salesinvoiceheader_rounding\r\n",
							"    ,inv1.linenum as sap_salesinvoiceline_linenum\r\n",
							"    ,inv1.linestatus as sap_salesinvoiceline_linestatus\r\n",
							"    ,inv1.itemcode as sap_salesinvoiceline_itemcode\r\n",
							"    ,inv1.dscription as sap_salesinvoiceline_dscription\r\n",
							"    ,inv1.quantity as sap_salesinvoiceline_quantity\r\n",
							"    ,inv1.openqty as sap_salesinvoiceline_openqty\r\n",
							"    ,inv1.price as sap_salesinvoiceline_price\r\n",
							"    ,inv1.rate as sap_salesinvoiceline_rate\r\n",
							"    ,inv1.discprcnt as sap_salesinvoiceline_discprcnt\r\n",
							"    ,inv1.linetotal as sap_salesinvoiceline_linetotal\r\n",
							"    ,inv1.opensum as sap_salesinvoiceline_opensum\r\n",
							"    ,inv1.pricebefdi as sap_salesinvoiceline_pricebefdi\r\n",
							"    ,inv1.docdate as sap_salesinvoiceline_docdate\r\n",
							"    ,inv1.project as sap_salesinvoiceline_project\r\n",
							"    ,inv1.vatprcnt as sap_salesinvoiceline_vatprcnt\r\n",
							"    ,inv1.volume as sap_salesinvoiceline_volume\r\n",
							"    ,inv1.vatgroup as sap_salesinvoiceline_vatgroup\r\n",
							"    ,inv1.vatsum as sap_salesinvoiceline_vatsum\r\n",
							"    ,inv1.grssprofit as sap_salesinvoiceline_grssprofit\r\n",
							"    ,inv1.u_reason as sap_salesinvoiceline_u_reason\r\n",
							"    ,inv1.u_lane as sap_salesinvoiceline_u_lane\r\n",
							"    ,inv1.u_expenseitem as sap_salesinvoiceline_u_expenseitem\r\n",
							"    ,inv1.u_fueldate as sap_salesinvoiceline_u_fueldate\r\n",
							"    ,inv1.acctcode as sap_salesinvoiceline_acctcode\r\n",
							"\r\n",
							"\r\n",
							"FROM dboOINV oinv\r\n",
							"LEFT JOIN  dboINV1 inv1 on inv1.docentry = oinv.docentry"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsalesinvoice = spark.sql(\"SELECT * FROM stsalesinvoice\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stsalesinvoice.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stsalesinvoice.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05_DIST_STConsignment')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "80dcd9af-e146-4542-aa49-4ddcc82e7421"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"#create dataframe for the sstconsignemntunion lms table\r\n",
							"sstconsignemntunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet/', format='parquet')\r\n",
							"sstconsignemntunion.createOrReplaceTempView(\"sstconsignemntunion\")\r\n",
							"\r\n",
							"#create dataframe for the sstparcelbyconsignment lms table\r\n",
							"sstparcelbyconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyconsignment.parquet', format='parquet')\r\n",
							"sstparcelbyconsignment.createOrReplaceTempView(\"sstparcelbyconsignment\")\r\n",
							"\r\n",
							"#create dataframe for the dbobill_consignmentr lms table\r\n",
							"dbobill_consignmentr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_consignmentr.parquet', format='parquet')\r\n",
							"dbobill_consignmentr.createOrReplaceTempView(\"dbobill_consignmentr\")\r\n",
							"\r\n",
							"#create dataframe for the sstparcelunion lms table\r\n",
							"sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"#create dataframe for the dbowaybill lms table\r\n",
							"dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboweekendholiday LMS Table\r\n",
							"dboweekendholiday = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboweekendholiday.parquet', format='parquet')\r\n",
							"dboweekendholiday.createOrReplaceTempView(\"dboweekendholiday\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stconsignment_tmp1\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    c.id as lms_consignment_id\r\n",
							"    ,c.CRef as lms_consignment_cref\r\n",
							"    ,c.CDate as lms_consignment_cdate\r\n",
							"    ,c.UserID as lms_consignment_userid\r\n",
							"    ,c.Appointment as lms_consignment_appointment\r\n",
							"    ,c.DeliverBy as lms_consignment_deliverby\r\n",
							"    ,c.DeliverByOriginal as lms_consignment_deliverbyoriginal\r\n",
							"    ,c.CustAccID as lms_consignment_custaccid\r\n",
							"    ,c.BillCust as lms_consignment_billcust\r\n",
							"    ,c.DeliverCustID as lms_consignment_delivercustid\r\n",
							"    ,c.InServiceReasonID as lms_consignment_inservicereasonid\r\n",
							"    ,c.InServiceComment as lms_consignment_inservicecomment\r\n",
							"    ,c.LastUpdate as lms_consignment_lastupdate\r\n",
							"    ,c.CollectID as lms_consignment_collectid\r\n",
							"    ,c.DeliverTypeID as lms_consignment_delivertypeid\r\n",
							"    ,c.BillTypeID as lms_consignment_billtypeid\r\n",
							"    ,c.LoadID as lms_consignment_loadid\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrchargeweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrvolweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrvolumiserweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrmaxweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrnoparcels\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrweightexclspecdel\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrchargeweightexclspecdel\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrvolweightexclspecdel\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrvolumiserweightexclspecdel\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrmaxweightexclspecdel\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrnoparcelsexclspecdel\r\n",
							"    ,bcr.id as lms_billconsignmentr_id\r\n",
							"    ,bcr.ConsignID as lms_billconsignmentr_consignid\r\n",
							"    ,bcr.UpdateDate as lms_billconsignmentr_updatedate\r\n",
							"    ,bcr.PickUpRouteID as lms_billconsignmentr_pickuprouteid\r\n",
							"    ,bcr.DeliverRouteID as lms_billconsignmentr_deliverrouteid\r\n",
							"    ,bcr.ChargeWeight as lms_billconsignmentr_chargeweight\r\n",
							"    ,bcr.NoOfParcels as lms_billconsignmentr_noofparcels\r\n",
							"    ,bcr.TripDistance as lms_billconsignmentr_tripdistance\r\n",
							"    ,bcr.ConsignmentValue as lms_billconsignmentr_consignmentvalue\r\n",
							"    ,bcr.BillCust as lms_billconsignmentr_billcust\r\n",
							"    ,bcr.RedFlag as lms_billconsignmentr_redflag\r\n",
							"    ,bcr.UpdInd as lms_billconsignmentr_updind\r\n",
							"    ,bcr.ServiceTypeID as lms_billconsignmentr_servicetypeid\r\n",
							"    ,bcr.RouteMissingInd as lms_billconsignmentr_routemissingind\r\n",
							"    ,bcr.ChargesCalcInd as lms_billconsignmentr_chargescalcind\r\n",
							"    ,bcr.CDate1 as lms_billconsignmentr_cdate1\r\n",
							"    ,bcr.InvalidPCode as lms_billconsignmentr_invalidpcode\r\n",
							"    ,bcr.ProgramNo as lms_billconsignmentr_programno\r\n",
							"    ,bcr.TotRate as lms_billconsignmentr_totrate\r\n",
							"    ,bcr.RouteCharge as lms_billconsignmentr_routecharge\r\n",
							"    ,bcr.MinWeight as lms_billconsignmentr_minweight\r\n",
							"    ,bcr.MinRate as lms_billconsignmentr_minrate\r\n",
							"    ,bcr.COrderNo as lms_billconsignmentr_corderno\r\n",
							"    ,bcr.CustRef as lms_billconsignmentr_custref\r\n",
							"    ,bcr.ManualUpdateFlag as lms_billconsignmentr_manualupdateflag\r\n",
							"    ,bcr.PrevBillCustID as lms_billconsignmentr_prevbillcustid\r\n",
							"    ,bcr.SpecDelVehicleID as lms_billconsignmentr_specdelvehicleid\r\n",
							"    ,bcr.SpecDelMissingRouteFlag as lms_billconsignmentr_specdelmissingrouteflag\r\n",
							"    ,bcr.OverBorderFlag as lms_billconsignmentr_overborderflag\r\n",
							"    ,bcr.SameDeliverID as lms_billconsignmentr_samedeliverid\r\n",
							"    ,bcr.CombineRouteCharge as lms_billconsignmentr_combineroutecharge\r\n",
							"    ,bcr.WaybillID as lms_billconsignmentr_waybillid\r\n",
							"    ,bcr.RouteLineCount as lms_billconsignmentr_routelinecount\r\n",
							"    ,bcr.SameDelCount as lms_billconsignmentr_samedelcount\r\n",
							"    ,bcr.AWeight as lms_billconsignmentr_aweight\r\n",
							"    ,bcr.VWeight as lms_billconsignmentr_vweight\r\n",
							"    ,bcr.CustRef3 as lms_billconsignmentr_custref3\r\n",
							"    ,bcr.Units as lms_billconsignmentr_units\r\n",
							"    ,bcr.TotSurcharges as lms_billconsignmentr_totsurcharges\r\n",
							"    ,bcr.NoOfPallets as lms_billconsignmentr_noofpallets\r\n",
							"    ,bcr.InvalidPUDel as lms_billconsignmentr_invalidpudel\r\n",
							"    ,bcr.SharikaFlag as lms_billconsignmentr_sharikaflag\r\n",
							"    ,bcr.SapID as lms_billconsignmentr_sapid\r\n",
							"    ,bcr.TotFuelSurcharge as lms_billconsignmentr_totfuelsurcharge\r\n",
							"    ,bcr.TotDocSurcharge as lms_billconsignmentr_totdocsurcharge\r\n",
							"    ,bcr.TotOtherSurcharge as lms_billconsignmentr_totothersurcharge\r\n",
							"    ,bcr.SpecDel as lms_billconsignmentr_specdel\r\n",
							"    ,bcr.QuoteFlag as lms_billconsignmentr_quoteflag\r\n",
							"    ,bcr.BillPeriod as lms_billconsignmentr_billperiod\r\n",
							"    ,bcr.BillWeekR as lms_billconsignmentr_billweekr\r\n",
							"    ,bcr.BillPeriodFlag as lms_billconsignmentr_billperiodflag\r\n",
							"    ,bcr.SurhargeFlag as lms_billconsignmentr_surhargeflag\r\n",
							"    ,bcr.RecalcFlag as lms_billconsignmentr_recalcflag\r\n",
							"    ,bcr.QuoteMissingFlag as lms_billconsignmentr_quotemissingflag\r\n",
							"    ,bcr.DeliverTypeID as lms_billconsignmentr_delivertypeid\r\n",
							"    ,bcr.TotCovidSurcharge as lms_billconsignmentr_totcovidsurcharge\r\n",
							"\r\n",
							"FROM\r\n",
							"sstconsignemntunion c\r\n",
							"LEFT JOIN sstparcelbyconsignment pbc on c.id= pbc.lms_parcelbyconsignment_consignid\r\n",
							"LEFT JOIN dbobill_consignmentr bcr on c.id= bcr.consignid\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stconsignment_tmp2\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"\r\n",
							"p.consignid,\r\n",
							"max(w.poddate) as lms_consignment_maxpoddate\r\n",
							"\r\n",
							"FROM  sstparcelunion p\r\n",
							"LEFT JOIN dbowaybill w on w.id = p.waybillid\r\n",
							"WHERE p.consignid is not null\r\n",
							"GROUP BY p.consignid"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stconsignment_tmp3\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    c.*\r\n",
							"    ,c2.lms_consignment_maxpoddate\r\n",
							"    ,CASE \r\n",
							"\t    WHEN (coalesce(c2.lms_consignment_maxpoddate,CURRENT_TIMESTAMP)) <= (date(c.lms_consignment_deliverby) + interval '86399 seconds') THEN 1\r\n",
							"\t    ELSE 0\r\n",
							"    END lms_consignment_inserviceflag\r\n",
							"    ,to_timestamp((cast(to_date(c.lms_consignment_cdate,'yyyy-MM-dd') as string)||' 23:59:59.999')) as  lms_consignment_actualleaddaysstartdate\r\n",
							"    ,coalesce(c2.lms_consignment_maxpoddate,CURRENT_TIMESTAMP) AS lms_consignment_actualleaddaysenddate\r\n",
							"    ,(to_unix_timestamp(coalesce(c2.lms_consignment_maxpoddate,CURRENT_TIMESTAMP)) - (to_unix_timestamp(to_timestamp((cast(to_date(c.lms_consignment_cdate,'yyyy-MM-dd') as string)||' 23:59:59.999')))))/86400 as lms_consignment_actualleaddaysinclwe\r\n",
							"    ,to_timestamp((cast(to_date(c.lms_consignment_cdate,'yyyy-MM-dd') as string)||' 23:59:59.999')) lms_consignment_cdateroundup\r\n",
							"    ,(to_unix_timestamp(coalesce(c2.lms_consignment_maxpoddate,CURRENT_TIMESTAMP)) - to_unix_timestamp(to_timestamp((cast(to_date(c.lms_consignment_cdate,'yyyy-MM-dd') as string)||' 23:59:59.999')))) as consignagedifferenceinseconds\r\n",
							"FROM stconsignment_tmp1 c\r\n",
							"LEFT JOIN stconsignment_Tmp2 c2 ON c2.consignid = c.lms_consignment_id"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stconsignment_tmp4\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    c.lms_consignment_id\r\n",
							"    ,sum(holiday)*86400 as holidays\r\n",
							"FROM stconsignment_tmp3 c\r\n",
							"INNER JOIN dboweekendholiday h on (date(h.DateHoliday) >=  date(lms_consignment_actualleaddaysstartdate) and date(h.DateHoliday) <= date(lms_consignment_actualleaddaysenddate)) and Holiday = 1\r\n",
							"GROUP BY c.lms_consignment_id"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stconsignment_tmp5\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    c.*\r\n",
							"    ,(to_unix_timestamp(c.lms_consignment_actualleaddaysenddate) - to_unix_timestamp(c.lms_consignment_actualleaddaysstartdate) - c1.holidays)/86400  as lms_consignment_actualleaddays\r\n",
							"FROM stconsignment_tmp3 c\r\n",
							"LEFT JOIN stconsignment_tmp4 c1 on c1.lms_consignment_id = c.lms_consignment_id"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stconsignment\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    *\r\n",
							"    ,CASE \r\n",
							"        WHEN lms_consignment_cdate is null THEN 'Not Consigned'\r\n",
							"        WHEN lms_consignment_maxpoddate is null THEN 'Not Delivered'\r\n",
							"        WHEN (consignagedifferenceinseconds/3600) < 12 THEN '< 12 hrs'\r\n",
							"        WHEN (consignagedifferenceinseconds/3600) < 24 THEN '< 24 hrs'\r\n",
							"        WHEN (consignagedifferenceinseconds/3600) < 48 THEN '< 2 days'\r\n",
							"        WHEN (consignagedifferenceinseconds/3600) < 72 THEN '< 3 days'\r\n",
							"        WHEN (consignagedifferenceinseconds/3600) < 96 THEN '< 4 days'\r\n",
							"        WHEN (consignagedifferenceinseconds/3600) < 120 THEN '< 5 days'\r\n",
							"        WHEN (consignagedifferenceinseconds/3600) < 144 THEN '< 6 days'\r\n",
							"        WHEN (consignagedifferenceinseconds/3600) < 168 THEN '< 7 days'\r\n",
							"        WHEN (consignagedifferenceinseconds/3600) > 168 THEN '> 7 days'\r\n",
							"        ELSE NULL\r\n",
							"    END as lms_consignment_age\r\n",
							"\r\n",
							"FROM stconsignment_tmp5\r\n",
							""
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stconsignment = spark.sql(\"SELECT * FROM stconsignment\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stconsignment.parquet', mode = \"overwrite\")\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05_LH_STInvoice')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0728c68c-fa2c-439f-b103-89890d772558"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						}
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the publicinvoice TMS Table\r\n",
							"# publicinvoice = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinvoice.parquet', format='parquet')\r\n",
							"# publicinvoice.createOrReplaceTempView(\"publicinvoice\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicinvoiceitem TMS Table\r\n",
							"# publicinvoiceitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinvoiceitem.parquet', format='parquet')\r\n",
							"# publicinvoiceitem.createOrReplaceTempView(\"publicinvoiceitem\")"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stinvoice\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    i.id as tms_invoice_id\r\n",
							"    ,i.customerid as tms_invoice_customerid\r\n",
							"    ,to_timestamp(i.invoicedate) as tms_invoice_invoicedate\r\n",
							"    ,i.reference as tms_invoice_reference\r\n",
							"    ,i.status as tms_invoice_status\r\n",
							"    ,i.insby as tms_invoice_insby\r\n",
							"    ,to_timestamp(i.insdate) as tms_invoice_insdate\r\n",
							"    ,i.total as tms_invoice_total\r\n",
							"    ,i.vat as tms_invoice_vat\r\n",
							"    ,i.invoicenum as tms_invoice_invoicenum\r\n",
							"    ,i.opaqueid as tms_invoice_opaqueid\r\n",
							"    ,i.sapstatus as tms_invoice_sapstatus\r\n",
							"    ,i.sapid as tms_invoice_sapid\r\n",
							"    ,to_timestamp(i.sendsapdate) as tms_invoice_sendsapdate\r\n",
							"    ,i.legacyid as tms_invoice_legacyid\r\n",
							"    ,i.customercode as tms_invoice_customercode\r\n",
							"    ,i.revennuecode as tms_invoice_revennuecode\r\n",
							"    ,i.depotcode  as tms_invoice_depotcode \r\n",
							"    ,i2.id as tms_invoiceitem_id\r\n",
							"    ,i2.invoiceid as tms_invoiceitem_invoiceid\r\n",
							"    ,i2.bookingid as tms_invoiceitem_bookingid\r\n",
							"    ,i2.amount as tms_invoiceitem_amount\r\n",
							"    ,i2.vat as tms_invoiceitem_vat\r\n",
							"    ,i2.linetotal as tms_invoiceitem_linetotal\r\n",
							"    ,to_timestamp(i2.insdate) as tms_invoiceitem_insdate\r\n",
							"    ,to_timestamp(i2.moddate) as tms_invoiceitem_moddate\r\n",
							"    ,i2.insby as tms_invoiceitem_insby\r\n",
							"    ,i2.linenum as tms_invoiceitem_linenum\r\n",
							"    ,i2.legacyid as tms_invoiceitem_legacyid\r\n",
							"    ,i2.sapid as tms_invoiceitem_sapid\r\n",
							"    ,i2.vatable as tms_invoiceitem_vatable\r\n",
							"    ,i2.routeid as tms_invoiceitem_routeid\r\n",
							"    ,i2.routename as tms_invoiceitem_routename\r\n",
							"FROM publicinvoice i\r\n",
							"LEFT JOIN publicinvoiceitem i2 on i2.invoiceid = i.id"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stinvoice = spark.sql(\"SELECT * FROM stinvoice\")"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stinvoice.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stinvoice.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/05_STStockRevaluations')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2c81efad-8eec-46ed-b11b-37db9147fb8b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dboOMRV SAP Table\r\n",
							"# dboOMRV = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOMRV.parquet', format='parquet')\r\n",
							"# dboOMRV.createOrReplaceTempView(\"dboOMRV\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboMRV1 SAP Table\r\n",
							"# dboMRV1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboMRV1.parquet', format='parquet')\r\n",
							"# dboMRV1.createOrReplaceTempView(\"dboMRV1\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboMRV2 SAP Table\r\n",
							"# dboMRV2 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboMRV2.parquet', format='parquet')\r\n",
							"# dboMRV2.createOrReplaceTempView(\"dboMRV2\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"ststockrevaluations\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"     omrv.docentry as sap_stockrevaluationsheader_docentry\r\n",
							"     ,omrv.transid as sap_stockrevaluationsheader_transid\r\n",
							"     ,omrv.docnum as sap_stockrevaluationsheader_docnum\r\n",
							"     ,omrv.docdate as sap_stockrevaluationsheader_postingdate\r\n",
							"     ,omrv.comments as sap_stockrevaluationsheader_comments\r\n",
							"     ,omrv.objtype as sap_stockrevaluationsheader_objtype\r\n",
							"     -- ,omrv.usersign as sap_stockrevaluationsheader_usersign\r\n",
							"     ,mrv1.linenum as sap_stockrevaluationsline_linenum\r\n",
							"     ,mrv1.dscription as sap_stockrevaluationsline_dscription\r\n",
							"     -- ,mrv1.objtype as sap_stockrevaluationsline_objtype\r\n",
							"     ,mrv1.itemcode as sap_stockrevaluationsline_itemcode\r\n",
							"     ,Right(Left(mrv1.itemcode,5),3) as sap_stockrevaluationsline_subdepotcode\r\n",
							"     ,mrv2.rtostock as sap_stockrevaluationsline_linetotal\r\n",
							"     ,mrv1.rincmacct as sap_stockrevaluationsline_acctcode\r\n",
							"     --,mrv2.baseline as sap_stockrevaluationsline_baseline\r\n",
							"     ,'stockrevaluation' as sap_stockrevaluationsline_doccat\r\n",
							"\r\n",
							"FROM dboOMRV omrv\r\n",
							"LEFT JOIN dboMRV1 mrv1 on mrv1.docentry = omrv.docentry\r\n",
							"LEFT JOIN dboMRV2 mrv2 on mrv2.docentry = omrv.docentry and mrv2.baseline = mrv1.linenum\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ststockrevaluations = spark.sql(\"SELECT * FROM ststockrevaluations\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ststockrevaluations.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/ststockrevaluations.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 12
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/06_DIST_STWaybill')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "173eb93b-92af-4c4a-9bac-5f01e9a7272e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
						"name": "DevSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dbowaybill LMS Table\r\n",
							"# dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"# dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstparcelbywaybill LMS Table\r\n",
							"# sstparcelbywaybill = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbywaybill.parquet', format='parquet')\r\n",
							"# sstparcelbywaybill.createOrReplaceTempView(\"sstparcelbywaybill\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdelivery ORV Table\r\n",
							"# publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"# publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdispatch ORV Table\r\n",
							"# publicdispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
							"# publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
							"\r\n",
							"# #create dataframe for the publicpod orv table\r\n",
							"# publicpod = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicpod.parquet', format='parquet')\r\n",
							"# publicpod.createOrReplaceTempView(\"publicpod\")\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# from pyspark.sql.functions import *\r\n",
							"# from pyspark.sql.window import Window\r\n",
							"# from pyspark.sql.types import IntegralType"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"partitionfirst=Window.partitionBy(\"did\").orderBy(col(\"did\").asc())"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"pod_tmp = publicpod.withColumn(\"row_num\",row_number().over(partitionfirst))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"pod_tmp.createOrReplaceTempView(\"pod_tmp\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"dbowaybill_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"     wb.*\r\n",
							"    ,dis.id as dispatchid\r\n",
							"FROM dbowaybill wb\r\n",
							"LEFT JOIN publicdispatch dis on dis.lmsid = wb.loadid\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dbowaybill_tmp = spark.sql(\"SELECT * FROM dbowaybill_tmp\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stwaybill_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    w.ID as lms_waybill_id\r\n",
							"    ,w.date as lms_waybill_date\r\n",
							"    ,w.CustomerID as lms_waybill_customerid\r\n",
							"    ,w.BService as lms_waybill_bservice\r\n",
							"    ,w.CService as lms_waybill_cservice\r\n",
							"    ,w.OriginID as lms_waybill_originid\r\n",
							"    ,w.DefUser as lms_waybill_defuser\r\n",
							"    ,w.Distance as lms_waybill_distance\r\n",
							"    ,w.CourierID as lms_waybill_courierid\r\n",
							"    ,w.CourierWBNo as lms_waybill_courierwbno\r\n",
							"    ,w.BillType as lms_waybill_billtype\r\n",
							"    ,w.CapDate as lms_waybill_capdate\r\n",
							"    ,w.OrderType as lms_waybill_ordertype\r\n",
							"    ,w.BillCust as lms_waybill_billcust\r\n",
							"    ,w.PickupCustID as lms_waybill_pickupcustid\r\n",
							"    ,w.DeliverCustID as lms_waybill_delivercustid\r\n",
							"    ,w.BillTo as lms_waybill_billto\r\n",
							"    ,w.Claimable as lms_waybill_claimable\r\n",
							"    ,w.Override as lms_waybill_override\r\n",
							"    ,w.VehicleCapacity as lms_waybill_vehiclecapacity\r\n",
							"    ,w.PODDate as lms_waybill_poddate\r\n",
							"    ,w.Signee as lms_waybill_signee\r\n",
							"    ,w.GRVNo as lms_waybill_grvno\r\n",
							"    ,w.Endorsements as lms_waybill_endorsements\r\n",
							"    ,w.LoadID as lms_waybill_loadid\r\n",
							"    ,w.RouteID as lms_waybill_routeid\r\n",
							"    ,w.mrpFlag as lms_waybill_mrpflag\r\n",
							"    ,w.Printed as lms_waybill_printed\r\n",
							"    ,w.SReasonID as lms_waybill_sreasonid\r\n",
							"    ,w.HasPrinted as lms_waybill_hasprinted\r\n",
							"    ,w.Site as lms_waybill_site\r\n",
							"    ,w.DeliveryNo as lms_waybill_deliveryno\r\n",
							"    ,w.CustAccID as lms_waybill_custaccid\r\n",
							"    ,w.Scanned as lms_waybill_scanned\r\n",
							"    ,w.UserID as lms_waybill_userid\r\n",
							"    ,w.Autoprinted as lms_waybill_autoprinted\r\n",
							"    ,w.cref as lms_waybill_cref\r\n",
							"    ,w.UShort as lms_waybill_ushort\r\n",
							"    ,w.Delays as lms_waybill_delays\r\n",
							"    ,w.DeBriefed as lms_waybill_debriefed\r\n",
							"    ,w.DeBriefDt as lms_waybill_debriefdt\r\n",
							"    ,w.DBCtnsRet as lms_waybill_dbctnsret\r\n",
							"    ,w.Uploaded as lms_waybill_uploaded\r\n",
							"    ,w.ServiceExclude as lms_waybill_serviceexclude\r\n",
							"    ,w.Failed as lms_waybill_failed\r\n",
							"    ,w.DelayReasonID as lms_waybill_delayreasonid\r\n",
							"    ,w.NotDebrievReasonID as lms_waybill_notdebrievreasonid\r\n",
							"    ,w.DeliveryStatID as lms_waybill_deliverystatid\r\n",
							"    ,w.ReasonGroupID as lms_waybill_reasongroupid\r\n",
							"    ,w.eMailCust as lms_waybill_emailcust\r\n",
							"    ,w.MobileIssueReportedID as lms_waybill_mobileissuereportedid\r\n",
							"    ,w.isMobile as lms_waybill_ismobile\r\n",
							"    ,w.CustComment as lms_waybill_custcomment\r\n",
							"    ,w.CustFeedback as lms_waybill_custfeedback\r\n",
							"    ,w.ReasonDetailID as lms_waybill_reasondetailid\r\n",
							"    ,w.MobileComments as lms_waybill_mobilecomments\r\n",
							"    ,w.InServiceReasonID as lms_waybill_inservicereasonid\r\n",
							"    ,w.NotDebrievCom as lms_waybill_notdebrievcom\r\n",
							"    ,w.LastUpdate as lms_waybill_lastupdate\r\n",
							"    ,w.Dropsequence as lms_waybill_dropsequence\r\n",
							"    ,w.Noofparcelssreturned as lms_waybill_noofparcelssreturned\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrchargeweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrvolweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrvolumiserweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrmaxweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrnoparcels\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrweightexclspecdel\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrchargeweightexclspecdel\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrvolweightexclspecdel\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrvolumiserweightexclspecdel\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrmaxweightexclspecdel\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrnoparcelsexclspecdel\r\n",
							"    ,d.id as orv_delivery_id\r\n",
							"    ,d.did as orv_delivery_did\r\n",
							"    ,d.waybillid as orv_delivery_waybillid\r\n",
							"    ,d.address as orv_delivery_address\r\n",
							"    ,d.town as orv_delivery_town\r\n",
							"    ,d.province as orv_delivery_province\r\n",
							"    ,d.country as orv_delivery_country\r\n",
							"    ,d.lat as orv_delivery_lat\r\n",
							"    ,d.lng as orv_delivery_lng\r\n",
							"    ,d.placeid as orv_delivery_placeid\r\n",
							"    ,d.what3words as orv_delivery_what3words\r\n",
							"    ,d.zipcode as orv_delivery_zipcode\r\n",
							"    ,to_timestamp(d.eta) as orv_delivery_eta\r\n",
							"    ,to_timestamp(d.actualeta) as orv_delivery_actualeta\r\n",
							"    ,to_timestamp(d.deliverydate) as orv_delivery_deliverydate\r\n",
							"    ,to_timestamp(d.deliverby) as orv_delivery_deliverby\r\n",
							"    ,d.deliveryorder as orv_delivery_deliveryorder\r\n",
							"    ,to_timestamp(d.tsgeofenceenter) as orv_delivery_tsgeofenceenter\r\n",
							"    ,to_timestamp(d.tsscanningstart) as orv_delivery_tsscanningstart\r\n",
							"    ,to_timestamp(d.tsscanningstop) as orv_delivery_tsscanningstop\r\n",
							"    ,to_timestamp(d.tspodsignature) as orv_delivery_tspodsignature\r\n",
							"    ,d.aid as orv_delivery_aid\r\n",
							"    ,d.numprcls as orv_delivery_numprcls\r\n",
							"    ,d.geocodingstatus as orv_delivery_geocodingstatus\r\n",
							"    ,to_timestamp(d.skipdate) as orv_delivery_skipdate\r\n",
							"    ,d.skipreason as orv_delivery_skipreason\r\n",
							"    ,d.status as orv_delivery_status\r\n",
							"    ,d.partialmatch as orv_delivery_partialmatch\r\n",
							"    ,d.approximated as orv_delivery_approximated\r\n",
							"    ,d.lmsorder as orv_delivery_lmsorder\r\n",
							"    ,d.optimizedorder as orv_delivery_optimizedorder\r\n",
							"    ,d.seal as orv_delivery_seal\r\n",
							"    ,d.customerinvoice as orv_delivery_customerinvoice\r\n",
							"    ,d.customerdn as orv_delivery_customerdn\r\n",
							"    ,d.grv as orv_delivery_grv\r\n",
							"    ,d.chepslip as orv_delivery_chepslip\r\n",
							"    ,d.cleandelivery as orv_delivery_cleandelivery\r\n",
							"    ,d.trackingcode as orv_delivery_trackingcode\r\n",
							"    ,d.mode as orv_delivery_mode\r\n",
							"    ,d.customorder as orv_delivery_customorder\r\n",
							"    ,d.verified as orv_delivery_verified\r\n",
							"    ,d.altered as orv_delivery_altered\r\n",
							"    ,d.orderid as orv_delivery_orderid\r\n",
							"    ,d.mergeid as orv_delivery_mergeid\r\n",
							"    ,d.orderref as orv_delivery_orderref\r\n",
							"    ,d.drivernote as orv_delivery_drivernote\r\n",
							"    ,d.guid as orv_delivery_guid\r\n",
							"    ,d.timedefinite as orv_delivery_timedefinite\r\n",
							"    ,d.orvcode as orv_delivery_orvcode\r\n",
							"    ,d.vaid as orv_delivery_vaid\r\n",
							"    ,to_timestamp(d.delegatedate) as orv_delivery_delegatedate\r\n",
							"    ,d.delegatemode as orv_delivery_delegatemode\r\n",
							"    ,d.debriefmode as orv_delivery_debriefmode\r\n",
							"    ,d.debriefed as orv_delivery_debriefed\r\n",
							"    ,to_timestamp(d.insdate) as orv_delivery_insdate\r\n",
							"    ,d.reviseddebrief as orv_delivery_reviseddebrief\r\n",
							"    ,d.lmsdebriefed as orv_delivery_lmsdebriefed\r\n",
							"    ,to_timestamp(d.uncanceldate) as orv_delivery_uncanceldate\r\n",
							"    ,to_timestamp(d.podlaterdate) as orv_delivery_podlaterdate\r\n",
							"    ,to_timestamp(d.podmanualdate) as orv_delivery_podmanualdate\r\n",
							"    ,d.manualdebriefreason as orv_delivery_manualdebriefreason\r\n",
							"    ,d.submanualdebriefreason as orv_delivery_submanualdebriefreason\r\n",
							"    ,d.outofgeofencereason as orv_delivery_outofgeofencereason\r\n",
							"    ,to_timestamp(d.tsentergeofenceapp) as orv_delivery_tsentergeofenceapp\r\n",
							"    ,to_timestamp(d.tsexitgeofenceapp) as orv_delivery_tsexitgeofenceapp\r\n",
							"    ,d.comebacklater as orv_delivery_comebacklater\r\n",
							"    ,d.uncancelusername as orv_delivery_uncancelusername\r\n",
							"    ,d.cref as orv_delivery_cref\r\n",
							"    ,d.division as orv_delivery_division\r\n",
							"    ,d.descriptionofgoods as orv_delivery_descriptionofgoods\r\n",
							"    ,d.skiplng as orv_delivery_skiplng\r\n",
							"    ,d.skiplat as orv_delivery_skiplat\r\n",
							"    ,d.courierid as orv_delivery_courierid\r\n",
							"    ,d.posreason as orv_delivery_posreason\r\n",
							"    ,to_timestamp(d.moddate) as orv_delivery_moddate\r\n",
							"    ,d.mallid as orv_delivery_mallid\r\n",
							"    ,d.mallgid as orv_delivery_mallgid\r\n",
							"    ,d.lmsidskipreason as orv_delivery_lmsidskipreason\r\n",
							"    ,d.deleteforimport as orv_delivery_deleteforimport\r\n",
							"    ,d.podoutofgeofence as orv_delivery_podoutofgeofence\r\n",
							"    ,d.originalcustomerid as orv_delivery_originalcustomerid\r\n",
							"    ,p.id as orv_pod_id\r\n",
							"\t,p.name as orv_pod_name\r\n",
							"\t,to_timestamp(p.poddate) as orv_pod_poddate\r\n",
							"\t,p.lat as orv_pod_lat\r\n",
							"\t,p.lng as orv_pod_lng\r\n",
							"\t,p.customerrating as orv_pod_customerrating\r\n",
							"\t,p.customerfeedback as orv_pod_customerfeedback\r\n",
							"    --,2.00 * 3961.00 * asin(sqrt((sin(radians((p.lat - d.lat) / 2.00))) ^ 2.00 + cos(radians(d.lat)) * cos(radians(p.lat)) * (sin(radians((p.lng - d.lng ) / 2.00))) ^ 2.00))*1.60934 as orv_delivery_poddistancefromdeliverypoint\r\n",
							"\r\n",
							"\r\n",
							"FROM dbowaybill_tmp w\r\n",
							"LEFT JOIN sstparcelbywaybill pbw on pbw.lms_parcelbywaybill_waybillid =  w.id\r\n",
							"LEFT JOIN publicdelivery d on d.waybillid =  w.id and d.did = w.dispatchid\r\n",
							"LEFT JOIN pod_tmp p on p.did = d.id and row_num = 1\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stwaybill_tmp = spark.sql(\"SELECT * FROM stwaybill_tmp\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stwaybill_tmp = stwaybill_tmp.withColumn(\"a\", pow(sin(radians (col(\"orv_pod_lat\") - col(\"orv_delivery_lat\")) / 2), 2) + cos(radians (\"orv_delivery_lat\")) * cos(radians (col(\"orv_pod_lat\"))) * pow(sin(radians (col(\"orv_pod_lng\") - col(\"orv_delivery_lng\")) / 2), 2)).withColumn(\"orv_delivery_poddistancefromdeliverypoint\", atan2(sqrt(col(\"a\")), sqrt(-col(\"a\") + 1)) * 2 * 6371)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stwaybill_tmp.createOrReplaceTempView(\"stwaybill_tmp\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stwaybill = spark.sql(\"SELECT * FROM stwaybill_tmp\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stwaybill.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 14
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/06_LH_STLinehaulDimensions')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a1f8e156-f77e-48c0-a056-44a510256e56"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the publiccustomer TMS Table\r\n",
							"# publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiccustomer.parquet', format='parquet')\r\n",
							"# publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicthirdparty TMS Table\r\n",
							"# publicthirdparty = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicthirdparty.parquet', format='parquet')\r\n",
							"# publicthirdparty.createOrReplaceTempView(\"publicthirdparty\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicroute TMS Table\r\n",
							"# publicroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicroute.parquet', format='parquet')\r\n",
							"# publicroute.createOrReplaceTempView(\"publicroute\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolh_routes TMS Table\r\n",
							"# dbolh_routes = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_routes.parquet', format='parquet')\r\n",
							"# dbolh_routes.createOrReplaceTempView(\"dbolh_routes\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicaddress TMS Table\r\n",
							"# publicaddress = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicaddress.parquet', format='parquet')\r\n",
							"# publicaddress.createOrReplaceTempView(\"publicaddress\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicfuelcard TMS Table\r\n",
							"# publicfuelcard = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfuelcard.parquet', format='parquet')\r\n",
							"# publicfuelcard.createOrReplaceTempView(\"publicfuelcard\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicfuelzone TMS Table\r\n",
							"# publicfuelzone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfuelzone.parquet', format='parquet')\r\n",
							"# publicfuelzone.createOrReplaceTempView(\"publicfuelzone\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicfuelzonehistory TMS Table\r\n",
							"# publicfuelzonehistory = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfuelzonehistory.parquet', format='parquet')\r\n",
							"# publicfuelzonehistory.createOrReplaceTempView(\"publicfuelzonehistory\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicratecomponent TMS Table\r\n",
							"# publicratecomponent = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicratecomponent.parquet', format='parquet')\r\n",
							"# publicratecomponent.createOrReplaceTempView(\"publicratecomponent\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicrateprofile TMS Table\r\n",
							"# publicrateprofile = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicrateprofile.parquet', format='parquet')\r\n",
							"# publicrateprofile.createOrReplaceTempView(\"publicrateprofile\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicselist TMS Table\r\n",
							"# publicselist = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicselist.parquet', format='parquet')\r\n",
							"# publicselist.createOrReplaceTempView(\"publicselist\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicselistitem TMS Table\r\n",
							"# publicselistitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicselistitem.parquet', format='parquet')\r\n",
							"# publicselistitem.createOrReplaceTempView(\"publicselistitem\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdriverpay TMS Table\r\n",
							"# publicdriverpay = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpay.parquet', format='parquet')\r\n",
							"# publicdriverpay.createOrReplaceTempView(\"publicdriverpay\")\r\n",
							"\r\n",
							"# #Create DataFrame for the ssttrackunion LMS Table\r\n",
							"# ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"# ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboloads LMS Table\r\n",
							"# dboloads = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboloads.parquet', format='parquet')\r\n",
							"# dboloads.createOrReplaceTempView(\"dboloads\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdispatchactionlog LMS Table\r\n",
							"# publicdispatchactionlog = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatchactionlog.parquet', format='parquet')\r\n",
							"# publicdispatchactionlog.createOrReplaceTempView(\"publicdispatchactionlog\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publiclmsdata LMS Table\r\n",
							"# publiclmsdata = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiclmsdata.parquet', format='parquet')\r\n",
							"# publiclmsdata.createOrReplaceTempView(\"publiclmsdata\")\r\n",
							"\r\n",
							"# #create dataframe for the dbocustomer lms table\r\n",
							"# dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"# dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# from pyspark.sql.functions import *\r\n",
							"# from pyspark.sql.window import Window"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"partitionfirst=Window.partitionBy(\"LoadID\").orderBy(col(\"ID\").asc())"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"partitionlast=Window.partitionBy(\"LoadID\").orderBy(col(\"ID\").desc())"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrackunion = ssttrackunion.withColumn(\"lms_track_firstscan\",row_number().over(partitionfirst))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrackunion = ssttrackunion.withColumn(\"lms_track_lastscan\",row_number().over(partitionlast))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stlmstrackfirstscan\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"LoadID as lms_track_loadid\r\n",
							",OpenDt as lms_track_firstscan\r\n",
							",l.masterloadid as lms_loads_masterloadid\r\n",
							"\r\n",
							"FROM ssttrackunion t\r\n",
							"LEFT JOIN dboloads l on l.id = t.LoadID\r\n",
							"WHERE t.TrackTypeID = 2\r\n",
							"AND lms_track_firstscan = 1\r\n",
							"AND l.masterloadid IS NOT NULL\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmstrackfirstscan = spark.sql(\"SELECT * FROM stlmstrackfirstscan\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stlmstracklastscan\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"LoadID as lms_track_loadid\r\n",
							", OpenDt as lms_track_lastscan\r\n",
							"\r\n",
							"FROM ssttrackunion t\r\n",
							"LEFT JOIN dboloads l on l.id = t.LoadID\r\n",
							"WHERE t.TrackTypeID = 2\r\n",
							"AND lms_track_lastscan = 1\r\n",
							"AND l.masterloadid IS NOT NULL\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmstracklastscan = spark.sql(\"SELECT * FROM stlmstracklastscan\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stlmstrackscantime\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"t1.lms_track_loadid\r\n",
							",t1.lms_loads_masterloadid\r\n",
							",t1.lms_track_firstscan\r\n",
							",t2.lms_track_lastscan\r\n",
							",(to_unix_timestamp(t2.lms_track_lastscan)-to_unix_timestamp(t1.lms_track_firstscan)) as lms_track_loadtime\r\n",
							"\r\n",
							"FROM stlmstrackfirstscan t1\r\n",
							"LEFT JOIN stlmstracklastscan t2 on t2.lms_track_loadid = t1.lms_track_loadid"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmstrackscantime = spark.sql(\"SELECT * FROM stlmstrackscantime\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stlmstrackscantime.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmstrackscantime.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdriverpay\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    d.id as tms_driverpay_id\r\n",
							"    ,d.routeid as tms_driverpay_routeid\r\n",
							"    ,d.triprate as tms_driverpay_triprate\r\n",
							"    ,d.mealrate as tms_driverpay_mealrate\r\n",
							"    ,d.linkrate as tms_driverpay_linkrate\r\n",
							"    ,d.sleepoverrate as tms_driverpay_sleepoverrate\r\n",
							"    ,d.numsleepover as tms_driverpay_numsleepover\r\n",
							"    ,d.nummeal as tms_driverpay_nummeal\r\n",
							"    ,to_timestamp(d.validfromdate) as tms_driverpay_validfromdate\r\n",
							"    ,to_timestamp(d.validtodate) as tms_driverpay_validtodate\r\n",
							"    ,to_timestamp(d.insdate) as tms_driverpay_insdate\r\n",
							"    ,to_timestamp(d.moddate) as tms_driverpay_moddate\r\n",
							"    ,d.insby as tms_driverpay_insby\r\n",
							"    ,d.airtimerate as tms_driverpay_airtimerate\r\n",
							"    ,d.status as tms_driverpay_status\r\n",
							"    ,d.legacyid as tms_driverpay_legacyid\r\n",
							"FROM publicdriverpay d\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdriverpay = spark.sql(\"SELECT * FROM stdriverpay\")"
						],
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stdriverpay.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stdriverpay.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stfuelcard\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    f.id as tms_fuelcard_id\r\n",
							"    ,f.eid as tms_fuelcard_eid\r\n",
							"    ,f.entity as tms_fuelcard_entity\r\n",
							"    ,f.baseprice as tms_fuelcard_baseprice\r\n",
							"    ,f.routeid as tms_fuelcard_routeid\r\n",
							"    ,f.operatingpercentage as tms_fuelcard_operatingpercentage\r\n",
							"    ,to_timestamp(f.insdate) as tms_fuelcard_insdate\r\n",
							"    ,to_timestamp(f.activefromdate) as tms_fuelcard_activefromdate\r\n",
							"    ,to_timestamp(f.activetodate) as tms_fuelcard_activetodate\r\n",
							"    ,to_timestamp(f.moddate) as tms_fuelcard_moddate\r\n",
							"    ,f.status as tms_fuelcard_status\r\n",
							"    ,f.insby as tms_fuelcard_insby\r\n",
							"    ,f.zoneid as tms_fuelcard_zoneid\r\n",
							"    ,f.legacyid as tms_fuelcard_legacyid\r\n",
							"\r\n",
							"FROM publicfuelcard f"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"stfuelcard = spark.sql(\"SELECT * FROM stfuelcard\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"# stfuelcard.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stfuelcard.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stfuelzone\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    f.id as tms_fuelzone_id\r\n",
							"    ,f.zonename as tms_fuelzone_zonename\r\n",
							"    ,f.rulingprice as tms_fuelzone_rulingprice\r\n",
							"    ,to_timestamp(f.insdate) as tms_fuelzone_insdate\r\n",
							"    ,to_timestamp(f.moddate) as tms_fuelzone_moddate\r\n",
							"    ,f.insby as tms_fuelzone_insby\r\n",
							"    ,f.lastrulingprice as tms_fuelzone_lastrulingprice\r\n",
							"    ,f.legacyid as tms_fuelzone_legacyid\r\n",
							"\r\n",
							"FROM publicfuelzone f\r\n",
							""
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"stfuelzone = spark.sql(\"SELECT * FROM stfuelzone\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"# stfuelzone.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stfuelzone.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stfuelzonehistory\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    f.id as tms_fuelzonehistory_id\r\n",
							"    ,f.zoneid as tms_fuelzonehistory_zoneid\r\n",
							"    ,f.rulingprice as tms_fuelzonehistory_rulingprice\r\n",
							"    ,f.validfromdate as tms_fuelzonehistory_validfromdate\r\n",
							"    ,f.validtodate as tms_fuelzonehistory_validtodate\r\n",
							"    ,f.editby as tms_fuelzonehistory_editby\r\n",
							"    ,to_timestamp(f.insdate) as tms_fuelzonehistory_insdate\r\n",
							"    ,to_timestamp(f.moddate) as tms_fuelzonehistory_moddate\r\n",
							"\r\n",
							"\r\n",
							"FROM publicfuelzonehistory f\r\n",
							""
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stfuelzonehistory = spark.sql(\"SELECT * FROM stfuelzonehistory\")"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stfuelzonehistory.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stfuelzonehistory.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stratecomponent\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    r.id as tms_ratecomponent_id\r\n",
							"    ,r.profileid as tms_ratecomponent_profileid\r\n",
							"    ,r.ratetype as tms_ratecomponent_ratetype\r\n",
							"    ,r.amount as tms_ratecomponent_amount\r\n",
							"    ,r.applyfuellevy as tms_ratecomponent_applyfuellevy\r\n",
							"    ,r.note as tms_ratecomponent_note\r\n",
							"    ,to_timestamp(r.insdate) as tms_ratecomponent_insdate\r\n",
							"    ,to_timestamp(r.moddate) as tms_ratecomponent_moddate\r\n",
							"    ,r.insby as tms_ratecomponent_insby\r\n",
							"    ,r.legacyid as tms_ratecomponent_legacyid\r\n",
							"\r\n",
							"\r\n",
							"FROM publicratecomponent r"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stratecomponent = spark.sql(\"SELECT * FROM stratecomponent\")"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stratecomponent.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stratecomponent.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"strateprofile\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    r.id as tms_rateprofile_id\r\n",
							"    ,r.eid as tms_rateprofile_eid\r\n",
							"    ,r.entity as tms_rateprofile_entity\r\n",
							"    ,r.trailersize as tms_rateprofile_trailersize\r\n",
							"    ,r.routeid as tms_rateprofile_routeid\r\n",
							"    ,r.profiletype as tms_rateprofile_profiletype\r\n",
							"    ,to_timestamp(r.fromdate) as tms_rateprofile_fromdate\r\n",
							"    ,to_timestamp(r.todate) as tms_rateprofile_todate\r\n",
							"    ,r.insby as tms_rateprofile_insby\r\n",
							"    ,r.status as tms_rateprofile_status\r\n",
							"    ,to_timestamp(r.insdate) as tms_rateprofile_insdate\r\n",
							"    ,to_timestamp(r.moddate) as tms_rateprofile_moddate\r\n",
							"    ,r.note as tms_rateprofile_note\r\n",
							"    ,r.legacyid as tms_rateprofile_legacyid\r\n",
							"    ,r.usedfuelprice as tms_rateprofile_usedfuelprice\r\n",
							"\r\n",
							"FROM publicrateprofile r\r\n",
							""
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"strateprofile = spark.sql(\"SELECT * FROM strateprofile\")"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# strateprofile.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/strateprofile.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttmslist\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    s.id as tms_list_id\r\n",
							"    ,s.slug as tms_list_slug\r\n",
							"    ,s.valuetype as tms_list_valuetype\r\n",
							"    ,s.descr as tms_list_descr\r\n",
							"    ,to_timestamp(s.insdate) as tms_list_insdate\r\n",
							"    ,to_timestamp(s.moddate) as tms_list_moddate\r\n",
							"    ,s.refcols as tms_list_refcols\r\n",
							"    ,s.editable  as tms_list_editable \r\n",
							"    ,s2.id as tms_listitem_id\r\n",
							"    ,s2.lid as tms_listitem_lid\r\n",
							"    ,s2.itemlabel as tms_listitem_itemlabel\r\n",
							"    ,s2.itemvalue as tms_listitem_itemvalue\r\n",
							"    ,s2.sort as tms_listitem_sort\r\n",
							"    ,s2.mdid as tms_listitem_mdid\r\n",
							"\r\n",
							"FROM publicselist s\r\n",
							"LEFT JOIN publicselistitem s2 on s2.lid = s.id\r\n",
							""
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttmslist = spark.sql(\"SELECT * FROM sttmslist\")"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sttmslist.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/sttmslist.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stprimarycustomer\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    c.id as tms_customer_id\r\n",
							"    ,c.status as tms_customer_status\r\n",
							"    ,c.name as tms_customer_name\r\n",
							"    ,c.parentid as tms_customer_parentid\r\n",
							"    ,c.accountnumber as tms_customer_accountnumber\r\n",
							"    ,c.revenuecode as tms_customer_revenuecode\r\n",
							"    ,to_timestamp(c.insdate) as tms_customer_insdate\r\n",
							"    ,to_timestamp(c.moddate) as tms_customer_moddate\r\n",
							"    ,c.insby as tms_customer_insby\r\n",
							"    ,c.opaqueid as tms_customer_opaqueid\r\n",
							"    ,c.email as tms_customer_email\r\n",
							"    ,c.areacode as tms_customer_areacode\r\n",
							"    ,c.mobilenum as tms_customer_mobilenum\r\n",
							"    ,c.legacyid as tms_customer_legacyid\r\n",
							"    ,c.billingmethod as tms_customer_billingmethod\r\n",
							"    ,c.adjustmetric as tms_customer_adjustmetric\r\n",
							"    ,c.adjustvalue as tms_customer_adjustvalue\r\n",
							"    ,c.adjustnegativeallowed as tms_customer_adjustnegativeallowed\r\n",
							"    ,c.adjustvalueusingprevmonth as tms_customer_adjustvalueusingprevmonth\r\n",
							"    ,c.excludefromnotinvoicedreport as tms_customer_excludefromnotinvoicedreport\r\n",
							"    ,c.logictype as tms_customer_logictype\r\n",
							"    ,c.minliability as tms_customer_minliability\r\n",
							" \r\n",
							"FROM publiccustomer c\r\n",
							"WHERE c.parentid is null\r\n",
							""
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stprimarycustomer = spark.sql(\"SELECT * FROM stprimarycustomer\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stprimarycustomer.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stprimarycustomer.parquet', mode = \"overwrite\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stsecondarycustomer\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    c.id as tms_customer_id\r\n",
							"    ,c.status as tms_customer_status\r\n",
							"    ,c.name as tms_customer_name\r\n",
							"    ,c.parentid as tms_customer_parentid\r\n",
							"    ,c.accountnumber as tms_customer_accountnumber\r\n",
							"    ,c.revenuecode as tms_customer_revenuecode\r\n",
							"    ,to_timestamp(c.insdate) as tms_customer_insdate\r\n",
							"    ,to_timestamp(c.moddate) as tms_customer_moddate\r\n",
							"    ,c.insby as tms_customer_insby\r\n",
							"    ,c.opaqueid as tms_customer_opaqueid\r\n",
							"    ,c.email as tms_customer_email\r\n",
							"    ,c.areacode as tms_customer_areacode\r\n",
							"    ,c.mobilenum as tms_customer_mobilenum\r\n",
							"    ,c.legacyid as tms_customer_legacyid\r\n",
							"    ,c.billingmethod as tms_customer_billingmethod\r\n",
							"    ,c.adjustmetric as tms_customer_adjustmetric\r\n",
							"    ,c.adjustvalue as tms_customer_adjustvalue\r\n",
							"    ,c.adjustnegativeallowed as tms_customer_adjustnegativeallowed\r\n",
							"    ,c.adjustvalueusingprevmonth as tms_customer_adjustvalueusingprevmonth\r\n",
							"    ,c.excludefromnotinvoicedreport as tms_customer_excludefromnotinvoicedreport\r\n",
							"    ,c.logictype as tms_customer_logictype\r\n",
							"    ,c.minliability as tms_customer_minliability\r\n",
							" \r\n",
							"FROM publiccustomer c\r\n",
							"WHERE c.parentid is not null\r\n",
							""
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsecondarycustomer = spark.sql(\"SELECT * FROM stsecondarycustomer\")"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stsecondarycustomer.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stsecondarycustomer.parquet', mode = \"overwrite\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stthirdparty\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    t.id as tms_thirdparty_id\r\n",
							"    ,t.name as tms_thirdparty_name\r\n",
							"    ,t.areacode as tms_thirdparty_areacode\r\n",
							"    ,t.telnumber as tms_thirdparty_telnumber\r\n",
							"    ,t.mobareacode as tms_thirdparty_mobareacode\r\n",
							"    ,t.mobnumer as tms_thirdparty_mobnumer\r\n",
							"    ,t.contact as tms_thirdparty_contact\r\n",
							"    ,t.address as tms_thirdparty_address\r\n",
							"    ,t.streetno as tms_thirdparty_streetno\r\n",
							"    ,t.zipcode as tms_thirdparty_zipcode\r\n",
							"    ,t.city as tms_thirdparty_city\r\n",
							"    ,t.province as tms_thirdparty_province\r\n",
							"    ,t.status as tms_thirdparty_status\r\n",
							"    ,t.mdvoid as tms_thirdparty_mdvoid\r\n",
							"    ,t.registration as tms_thirdparty_registration\r\n",
							"    ,t.email as tms_thirdparty_email\r\n",
							"    ,t.accnumber as tms_thirdparty_accnumber\r\n",
							"    ,to_timestamp(t.insdate) as tms_thirdparty_insdate\r\n",
							"    ,to_timestamp(t.moddate) as tms_thirdparty_moddate\r\n",
							"    ,t.gitstatus as tms_thirdparty_gitstatus\r\n",
							"    ,t.legacyid as tms_thirdparty_legacyid\r\n",
							"    ,t.lat as tms_thirdparty_lat\r\n",
							"    ,t.lng as tms_thirdparty_lng\r\n",
							"    ,t.note as tms_thirdparty_note\r\n",
							"    ,t.revenuecode as tms_thirdparty_revenuecode\r\n",
							"    ,t.country as tms_thirdparty_country\r\n",
							"\r\n",
							"FROM publicthirdparty t"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stthirdparty = spark.sql(\"SELECT * FROM stthirdparty\")"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stthirdparty.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stthirdparty.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparentroute\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    r.id as tms_parentroute_id\r\n",
							"    ,r.name as tms_parentroute_name\r\n",
							"    ,r.slug as tms_parentroute_slug\r\n",
							"    ,r.parentroute as tms_parentroute_parentroute\r\n",
							"    ,to_timestamp(r.insdate) as tms_parentroute_insdate\r\n",
							"    ,to_timestamp(r.moddate) as tms_parentroute_moddate\r\n",
							"    ,r.insby as tms_parentroute_insby\r\n",
							"    ,r.status as tms_parentroute_status\r\n",
							"    ,r.crossborder as tms_parentroute_crossborder\r\n",
							"    ,r.roundtripdays as tms_parentroute_roundtripdays\r\n",
							"    ,r.distance as tms_parentroute_distance\r\n",
							"    ,r.duration as tms_parentroute_duration\r\n",
							"    ,r.numofuse as tms_parentroute_numofuse\r\n",
							"    ,r.legacyid as tms_parentroute_legacyid\r\n",
							"    ,r.local as tms_parentroute_local\r\n",
							"\r\n",
							"FROM publicroute r\r\n",
							"WHERE r.parentroute is null\r\n",
							""
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stparentroute = spark.sql(\"SELECT * FROM stparentroute\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stparentroute.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stparentroute.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stopsroute_tmp1\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    r.id as tms_opsroute_id\r\n",
							"    ,r.name as tms_opsroute_name\r\n",
							"    ,r.slug as tms_opsroute_slug\r\n",
							"    ,r.parentroute as tms_opsroute_parentroute\r\n",
							"    ,to_timestamp(r.insdate) as tms_opsroute_insdate\r\n",
							"    ,to_timestamp(r.moddate) as tms_opsroute_moddate\r\n",
							"    ,r.insby as tms_opsroute_insby\r\n",
							"    ,r.status as tms_opsroute_status\r\n",
							"    ,r.crossborder as tms_opsroute_crossborder\r\n",
							"    ,r.roundtripdays as tms_opsroute_roundtripdays\r\n",
							"    ,r.distance as tms_opsroute_distance\r\n",
							"    ,r.duration as tms_opsroute_duration\r\n",
							"    ,r.numofuse as tms_opsroute_numofuse\r\n",
							"    ,r.legacyid as tms_opsroute_legacyid\r\n",
							"    ,r.local as tms_opsroute_local\r\n",
							"\r\n",
							"FROM publicroute r\r\n",
							"WHERE r.parentroute is not null\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stopsroute_tmp1 = spark.sql(\"SELECT * FROM stopsroute_tmp1\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stopsroute_tmp2\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    (r.id)*-1 as tms_opsroute_id\r\n",
							"    ,upper(r.description) as tms_opsroute_name\r\n",
							"\r\n",
							"FROM dbolh_routes r\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stopsroute_tmp2 = spark.sql(\"SELECT * FROM stopsroute_tmp2\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stopsroute = stopsroute_tmp1.unionByName(stopsroute_tmp2, allowMissingColumns = True)\r\n",
							"stopsroute.createOrReplaceTempView(\"stopsroute\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stopsroute = spark.sql(\"SELECT * FROM stopsroute\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stopsroute.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/stopsroute.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdispatchactionlog\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    id AS orv_dispatchactionlog_id,\r\n",
							"\tlat AS orv_dispatchactionlog_lat ,\r\n",
							"\tlng AS orv_dispatchactionlog_lng,\r\n",
							"\treason AS orv_dispatchactionlog_reason,\r\n",
							"\tmode AS orv_dispatchactionlog_mode,\r\n",
							"\tto_timestamp(insdate) AS orv_dispatchactionlog_insdate,\r\n",
							"\tdid AS orv_dispatchactionlog_did,\r\n",
							"\taction  AS orv_dispatchactionlog_action,\r\n",
							"\tuid  AS orv_dispatchactionlog_uid\r\n",
							"\r\n",
							"\t\r\n",
							"FROM publicdispatchactionlog"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdispatchactionlog = spark.sql(\"SELECT * FROM stdispatchactionlog\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stdispatchactionlog.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdispatchactionlog.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stlmsparcelweights\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"     l.bookingid AS tms_lmsparcelweights_bookingid\r\n",
							"    ,l.loadid AS tms_lmsparcelweights_loadid\r\n",
							"    ,t.parcelid AS tms_lmsparcelweights_parcelid\r\n",
							"    ,t.weight AS tms_lmsparcelweights_weight\r\n",
							"    ,t.chargeweight AS tms_lmsparcelweights_chargeweight\r\n",
							"    ,t.volweight AS tms_lmsparcel_volweight\r\n",
							"    ,t.volumiserweight AS tms_lmsparcelweights_volumiserweight\r\n",
							"    ,c.name AS tms_lmsparcelweights_billbustomer\r\n",
							"\r\n",
							"FROM publiclmsdata l\r\n",
							"LEFT JOIN ssttrackunion t ON t.loadid = l.loadid\r\n",
							"LEFT JOIN dbocustomer c ON c.id = t.BillCustID"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmsparcelweights = spark.sql(\"SELECT * FROM stlmsparcelweights\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stlmsparcelweights.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmsparcelweights.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stlmsbookingweights\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"     l.bookingid AS tms_lmsbookingweights_bookingid\r\n",
							"    ,l.loadid AS tms_lmsbookingweights_loadid\r\n",
							"    ,l.numprcls AS tms_lmsbookingweights_numprcls\r\n",
							"    ,l.totalweight AS tms_lmsbookingweights_totalweight\r\n",
							"\r\n",
							"FROM publiclmsdata l\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmsbookingweights = spark.sql(\"SELECT * FROM stlmsbookingweights\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stlmsbookingweights.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmsbookingweights.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/06_STStockTransactions')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "773ad6be-f59b-4fb2-b7ad-20a5b1b8684e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"# #Stock\r\n",
							"# #Create DataFrame for the dboOINM SAP HEADER Table\r\n",
							"# dboOINM = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOINM.parquet', format='parquet')\r\n",
							"# dboOINM.createOrReplaceTempView(\"dboOINM\")\r\n",
							"\r\n",
							"# #Goods Issue\r\n",
							"# #Create DataFrame for the dboOIGE SAP HEADER Table\r\n",
							"# dboOIGE = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOIGE.parquet', format='parquet')\r\n",
							"# dboOIGE.createOrReplaceTempView(\"dboOIGE\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboIGE1 SAP LINE Table\r\n",
							"# dboIGE1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboIGE1.parquet', format='parquet')\r\n",
							"# dboIGE1.createOrReplaceTempView(\"dboIGE1\")\r\n",
							"\r\n",
							"# #Goods Receipt\r\n",
							"# #Create DataFrame for the dboOIGN SAP HEADER Table\r\n",
							"# dboOIGN = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOIGN.parquet', format='parquet')\r\n",
							"# dboOIGN.createOrReplaceTempView(\"dboOIGN\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboIGN1 SAP LINE Table\r\n",
							"# dboIGN1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboIGN1.parquet', format='parquet')\r\n",
							"# dboIGN1.createOrReplaceTempView(\"dboIGN1\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"ststocktransactions_gr\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    oinm.transnum as sap_stocktransactions_transid\r\n",
							"    ,oinm.transtype as sap_stocktransactions_objtype\r\n",
							"    ,'I' as sap_stocktransactions_doctype\r\n",
							"    ,oinm.createdby as sap_stocktransactions_createdby\r\n",
							"    ,CAST(TRIM(oinm.base_ref) AS INT) as sap_stocktransactions_docnum\r\n",
							"    ,oinm.doclinenum as sap_stocktransactions_doclinenum\r\n",
							"    ,oinm.docdate as sap_stocktransactions_postingdate\r\n",
							"    ,oinm.docduedate as sap_stocktransactions_duedate\r\n",
							"    ,oinm.cardcode as sap_stocktransactions_cardcode\r\n",
							"    ,oinm.cardname as sap_stocktransactions_cardname\r\n",
							"    ,oinm.itemcode as sap_stocktransactions_itemcode\r\n",
							"    ,oinm.dscription as sap_stocktransactions_dscription\r\n",
							"    ,oinm.vendornum as sap_stocktransactions_vendornum\r\n",
							"    ,oinm.warehouse as sap_stocktransactions_warehouse\r\n",
							"    ,oinm.prjcode as sap_stocktransactions_project\r\n",
							"    ,oinm.calcprice as sap_stocktransactions_calcprice\r\n",
							"    ,oinm.transvalue as sap_stocktransactions_linetotal\r\n",
							"    ,oinm.invntact as sap_stocktransactions_invntact\r\n",
							"    -- ,oinm.doffdecacc as sap_stocktransactions_doffdecacc\r\n",
							"    ,oinm.ioffincacc as sap_stocktransactions_acctcode\r\n",
							"    ,sum(oinm.inqty) as sap_stocktransactions_inqty\r\n",
							"    ,sum(oinm.outqty) as sap_stocktransactions_outqty\r\n",
							"    ,(sum(oinm.inqty)-sum(oinm.outqty)) as sap_stocktransactions_qty\r\n",
							"\r\n",
							"\r\n",
							"FROM dboOINM oinm\r\n",
							"WHERE oinm.transtype = 59\r\n",
							"GROUP BY\r\n",
							"    oinm.transnum \r\n",
							"    ,oinm.transtype\r\n",
							"    ,oinm.createdby\r\n",
							"    ,oinm.base_ref \r\n",
							"    ,oinm.doclinenum\r\n",
							"    ,oinm.docdate \r\n",
							"    ,oinm.docduedate\r\n",
							"    ,oinm.cardcode \r\n",
							"    ,oinm.cardname \r\n",
							"    ,oinm.itemcode \r\n",
							"    ,oinm.dscription\r\n",
							"    ,oinm.vendornum\r\n",
							"    ,oinm.warehouse \r\n",
							"    ,oinm.prjcode \r\n",
							"    ,oinm.calcprice \r\n",
							"    ,oinm.transvalue\r\n",
							"    ,oinm.invntact\r\n",
							"    ,oinm.doffdecacc\r\n",
							"    ,oinm.ioffincacc\r\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ststocktransactions_gr = spark.sql(\"SELECT * FROM ststocktransactions_gr\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stgoodsreceipt_tmp2\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    oign.docnum\r\n",
							"    ,(oign.discsum*-1)/COUNT(ign1.linenum) as discsum\r\n",
							"\r\n",
							"FROM dboOIGN oign\r\n",
							"LEFT JOIN dboIGN1 ign1 on ign1.docentry = oign.docentry\r\n",
							"GROUP BY oign.docnum, oign.discsum"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stgoodsreceipt_tmp2 = spark.sql(\"SELECT * FROM stgoodsreceipt_tmp2\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stgoodsreceipt_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    oign.docentry as sap_goodsreceiptheader_docentry\r\n",
							"    ,oign.docnum as sap_goodsreceiptheader_docnum\r\n",
							"    ,oign.doctype as sap_goodsreceiptheader_doctype\r\n",
							"    -- ,oign.canceled as sap_goodsreceiptheader_canceled\r\n",
							"    ,oign.objtype as sap_goodsreceiptheader_objtype\r\n",
							"    ,oign.docdate as sap_goodsreceiptheader_postingdate\r\n",
							"    ,oign.docduedate as sap_goodsreceiptheader_duedate\r\n",
							"    ,oign.cardcode as sap_goodsreceiptheader_cardcode\r\n",
							"    -- ,oign.cardname as sap_goodsreceiptheader_cardname\r\n",
							"    ,oign.numatcard as sap_goodsreceiptheader_cardref\r\n",
							"    ,oign.discprcnt as sap_goodsreceiptheader_discprcnt\r\n",
							"    ,oign.discsum as sap_goodsreceiptheader_discsum\r\n",
							"    ,oign.doctotal as sap_goodsreceiptheader_doctotal\r\n",
							"    ,oign.comments as sap_goodsreceiptheader_comments\r\n",
							"    ,oign.transid as sap_goodsreceiptheader_transid\r\n",
							"    -- ,oign.usersign as sap_goodsreceiptheader_usersign\r\n",
							"    -- ,oign.u_depot as sap_goodsreceiptheader_u_depot\r\n",
							"    -- ,oign.u_usercode as sap_goodsreceiptheader_u_usercode\r\n",
							"    ,oign.u_expense_depot as sap_goodsreceiptheader_u_expense_depot\r\n",
							"    -- ,oign.u_transaction_date as sap_goodsreceiptheader_u_transaction_date\r\n",
							"    -- ,oign.rounddif as sap_goodsreceiptheader_rounddif\r\n",
							"    -- ,oign.rounding as sap_goodsreceiptheader_rounding\r\n",
							"    -- ,ign1.docentry as sap_goodsreceiptline_docentry\r\n",
							"    ,ign1.linenum as sap_goodsreceiptline_linenum\r\n",
							"    ,ign1.linestatus as sap_goodsreceiptline_linestatus\r\n",
							"    ,ign1.itemcode as sap_goodsreceiptline_itemcode\r\n",
							"    ,ign1.dscription as sap_goodsreceiptline_dscription\r\n",
							"    ,ign1.quantity as sap_goodsreceiptline_quantity\r\n",
							"    ,ign1.openqty as sap_goodsreceiptline_openqty\r\n",
							"    ,ign1.price as sap_goodsreceiptline_price\r\n",
							"    ,ign1.rate as sap_goodsreceiptline_rate\r\n",
							"    ,ign1.discprcnt as sap_goodsreceiptline_discprcnt\r\n",
							"    ,ign1.linetotal as sap_goodsreceiptline_linetotal\r\n",
							"    ,ign1.opensum as sap_goodsreceiptline_opensum\r\n",
							"    ,ign1.pricebefdi as sap_goodsreceiptline_pricebefdi\r\n",
							"    ,ign1.docdate as sap_goodsreceiptline_docdate\r\n",
							"    ,ign1.project as sap_goodsreceiptline_project\r\n",
							"    ,ign1.vatprcnt as sap_goodsreceiptline_vatprcnt\r\n",
							"    -- ,ign1.volume as sap_goodsreceiptline_volume\r\n",
							"    ,ign1.vatgroup as sap_goodsreceiptline_vatgroup\r\n",
							"    ,ign1.vatsum as sap_goodsreceiptline_vatamount\r\n",
							"    -- ,ign1.grssprofit as sap_goodsreceiptline_grssprofit\r\n",
							"    ,ign1.u_reason as sap_goodsreceiptline_u_reason\r\n",
							"    -- ,ign1.u_lane as sap_goodsreceiptline_u_lane\r\n",
							"    ,ign1.u_expenseitem as sap_goodsreceiptline_u_expenseitem\r\n",
							"    ,ign1.u_fueldate as sap_goodsreceiptline_u_fueldate\r\n",
							"    ,ign1.acctcode as sap_goodsreceiptline_acctcode\r\n",
							"    ,'goodsreceipt' as sap_goodsreceiptline_doccat\r\n",
							"    ,Right(LEFT(ign1.u_expenseitem,5),3) as sap_goodsreceiptline_subdepotcode\r\n",
							"    ,t.discsum as sap_goodsreceiptline_discsum\r\n",
							"\r\n",
							"FROM dboOIGN oign\r\n",
							"LEFT JOIN dboIGN1 ign1 on ign1.docentry = oign.docentry\r\n",
							"LEFT JOIN stgoodsreceipt_tmp2 t on t.docnum = oign.docnum\r\n",
							""
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stgoodsreceipt_tmp = spark.sql(\"SELECT * FROM stgoodsreceipt_tmp\")"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"ststocktransactions_gr2\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    gr.sap_goodsreceiptheader_docentry as sap_stocktransactionsheader_docentry\r\n",
							"    ,sgr.sap_stocktransactions_docnum as sap_stocktransactionsheader_docnum\r\n",
							"    ,sgr.sap_stocktransactions_doctype as sap_stocktransactionsheader_doctype\r\n",
							"    -- ,gr.sap_goodsreceiptheader_canceled as sap_stocktransactionsheader_canceled\r\n",
							"    ,sgr.sap_stocktransactions_objtype as sap_stocktransactionsheader_objtype\r\n",
							"    ,sgr.sap_stocktransactions_postingdate as sap_stocktransactionsheader_postingdate\r\n",
							"    ,sgr.sap_stocktransactions_duedate as sap_stocktransactionsheader_duedate\r\n",
							"    ,sgr.sap_stocktransactions_cardcode as sap_stocktransactionsheader_cardcode\r\n",
							"    -- ,sgr.sap_stocktransactions_cardname as sap_stocktransactionsheader_cardname\r\n",
							"    ,gr.sap_goodsreceiptheader_cardref as sap_stocktransactionsheader_cardref\r\n",
							"    ,gr.sap_goodsreceiptheader_discprcnt as sap_stocktransactionsheader_discprcnt\r\n",
							"    ,gr.sap_goodsreceiptheader_discsum as sap_stocktransactionsheader_discsum\r\n",
							"    ,gr.sap_goodsreceiptheader_doctotal as sap_stocktransactionsheader_doctotal\r\n",
							"    ,gr.sap_goodsreceiptheader_comments as sap_stocktransactionsheader_comments\r\n",
							"    ,sgr.sap_stocktransactions_transid as sap_stocktransactionsheader_transid\r\n",
							"    -- ,gr.sap_goodsreceiptheader_usersign as sap_stocktransactionsheader_usersign\r\n",
							"    -- ,gr.sap_goodsreceiptheader_u_depot as sap_stocktransactionsheader_u_depot\r\n",
							"    -- ,gr.sap_goodsreceiptheader_u_usercode as sap_stocktransactionsheader_u_usercode\r\n",
							"    ,gr.sap_goodsreceiptheader_u_expense_depot as sap_stocktransactionsheader_u_expense_depot\r\n",
							"    -- ,gr.sap_goodsreceiptheader_u_transaction_date as sap_stocktransactionsheader_u_transaction_date\r\n",
							"    -- ,gr.sap_goodsreceiptheader_rounddif as sap_stocktransactionsheader_rounddif\r\n",
							"    -- ,gr.sap_goodsreceiptheader_rounding as sap_stocktransactionsheader_rounding\r\n",
							"    -- ,gr.sap_goodsreceiptline_docentry as sap_stocktransactionsline_docentry\r\n",
							"    ,gr.sap_goodsreceiptline_linenum as sap_stocktransactionsline_linenum\r\n",
							"    ,gr.sap_goodsreceiptline_linestatus as sap_stocktransactionsline_linestatus\r\n",
							"    ,sgr.sap_stocktransactions_itemcode as sap_stocktransactionsline_itemcode\r\n",
							"    ,sgr.sap_stocktransactions_dscription as sap_stocktransactionsline_dscription\r\n",
							"    ,gr.sap_goodsreceiptline_quantity as sap_stocktransactionsline_quantity\r\n",
							"    ,gr.sap_goodsreceiptline_openqty as sap_stocktransactionsline_openqty\r\n",
							"    ,gr.sap_goodsreceiptline_price as sap_stocktransactionsline_price\r\n",
							"    ,gr.sap_goodsreceiptline_rate as sap_stocktransactionsline_rate\r\n",
							"    ,gr.sap_goodsreceiptline_discprcnt as sap_stocktransactionsline_discprcnt\r\n",
							"    ,sgr.sap_stocktransactions_linetotal as sap_stocktransactionsline_linetotal\r\n",
							"    ,gr.sap_goodsreceiptline_opensum as sap_stocktransactionsline_opensum\r\n",
							"    ,gr.sap_goodsreceiptline_pricebefdi as sap_stocktransactionsline_pricebefdi\r\n",
							"    ,gr.sap_goodsreceiptline_docdate as sap_stocktransactionsline_docdate\r\n",
							"    ,sgr.sap_stocktransactions_project as sap_stocktransactionsline_project\r\n",
							"    ,gr.sap_goodsreceiptline_vatprcnt as sap_stocktransactionsline_vatprcnt\r\n",
							"    -- ,gr.sap_goodsreceiptline_volume as sap_stocktransactionsline_volume\r\n",
							"    ,gr.sap_goodsreceiptline_vatgroup as sap_stocktransactionsline_vatgroup\r\n",
							"    ,gr.sap_goodsreceiptline_vatamount as sap_stocktransactionsline_vatamount\r\n",
							"    -- ,gr.sap_goodsreceiptline_grssprofit as sap_stocktransactionsline_grssprofit\r\n",
							"    ,gr.sap_goodsreceiptline_u_reason as sap_stocktransactionsline_u_reason\r\n",
							"    -- ,gr.sap_goodsreceiptline_u_lane as sap_stocktransactionsline_u_lane\r\n",
							"    ,gr.sap_goodsreceiptline_u_expenseitem as sap_stocktransactionsline_u_expenseitem\r\n",
							"    ,gr.sap_goodsreceiptline_u_fueldate as sap_stocktransactionsline_u_fueldate\r\n",
							"    ,sgr.sap_stocktransactions_acctcode as sap_stocktransactionsline_acctcode\r\n",
							"    ,gr.sap_goodsreceiptline_doccat as sap_stocktransactionsline_doccat\r\n",
							"    ,gr.sap_goodsreceiptline_subdepotcode as sap_stocktransactionsline_subdepotcode\r\n",
							"    ,gr.sap_goodsreceiptline_discsum as sap_stocktransactionsline_discsum\r\n",
							"\r\n",
							"FROM ststocktransactions_gr sgr\r\n",
							"LEFT JOIN stgoodsreceipt_tmp gr on gr.sap_goodsreceiptheader_docnum = sgr.sap_stocktransactions_docnum\r\n",
							"AND gr.sap_goodsreceiptline_linenum = sgr.sap_stocktransactions_doclinenum\r\n",
							""
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ststocktransactions_gr2 = spark.sql(\"SELECT * FROM ststocktransactions_gr2\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"ststocktransactions_gi\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    oinm.transnum as sap_stocktransactions_transid\r\n",
							"    ,oinm.transtype as sap_stocktransactions_objtype\r\n",
							"    ,'I' as sap_stocktransactions_doctype\r\n",
							"    ,oinm.createdby as sap_stocktransactions_createdby\r\n",
							"    ,CAST(TRIM(oinm.base_ref) AS INT) as sap_stocktransactions_docnum\r\n",
							"    ,oinm.doclinenum as sap_stocktransactions_doclinenum\r\n",
							"    ,oinm.docdate as sap_stocktransactions_postingdate\r\n",
							"    ,oinm.docduedate as sap_stocktransactions_duedate\r\n",
							"    ,oinm.cardcode as sap_stocktransactions_cardcode\r\n",
							"    ,oinm.cardname as sap_stocktransactions_cardname\r\n",
							"    ,oinm.itemcode as sap_stocktransactions_itemcode\r\n",
							"    ,oinm.dscription as sap_stocktransactions_dscription\r\n",
							"    ,oinm.vendornum as sap_stocktransactions_vendornum\r\n",
							"    ,oinm.warehouse as sap_stocktransactions_warehouse\r\n",
							"    ,oinm.prjcode as sap_stocktransactions_project\r\n",
							"    ,oinm.calcprice as sap_stocktransactions_calcprice\r\n",
							"    ,oinm.transvalue as sap_stocktransactions_linetotal\r\n",
							"    ,oinm.invntact as sap_stocktransactions_invntact\r\n",
							"    ,oinm.doffdecacc as sap_stocktransactions_acctcode\r\n",
							"    -- ,oinm.ioffincacc as sap_stocktransactions_ioffincacc\r\n",
							"    ,sum(oinm.inqty) as sap_stocktransactions_inqty\r\n",
							"    ,sum(oinm.outqty) as sap_stocktransactions_outqty\r\n",
							"    ,(sum(oinm.outqty)-sum(oinm.inqty)) as sap_stocktransactions_qty\r\n",
							"\r\n",
							"\r\n",
							"FROM dboOINM oinm\r\n",
							"WHERE oinm.transtype = 60\r\n",
							"GROUP BY\r\n",
							"    oinm.transnum \r\n",
							"    ,oinm.transtype\r\n",
							"    ,oinm.createdby\r\n",
							"    ,oinm.base_ref \r\n",
							"    ,oinm.doclinenum\r\n",
							"    ,oinm.docdate \r\n",
							"    ,oinm.docduedate\r\n",
							"    ,oinm.cardcode \r\n",
							"    ,oinm.cardname \r\n",
							"    ,oinm.itemcode \r\n",
							"    ,oinm.dscription\r\n",
							"    ,oinm.vendornum\r\n",
							"    ,oinm.warehouse \r\n",
							"    ,oinm.prjcode \r\n",
							"    ,oinm.calcprice \r\n",
							"    ,oinm.transvalue\r\n",
							"    ,oinm.invntact\r\n",
							"    ,oinm.doffdecacc\r\n",
							"    ,oinm.ioffincacc\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ststocktransactions_gi = spark.sql(\"SELECT * FROM ststocktransactions_gi\")"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stgoodsissue_tmp2\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    oige.docnum\r\n",
							"    ,(oige.discsum)/COUNT(ige1.linenum) as discsum\r\n",
							"FROM dboOIGE oige\r\n",
							"LEFT JOIN dboIGE1 ige1 on ige1.docentry = oige.docentry\r\n",
							"GROUP BY oige.docnum, oige.discsum"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stgoodsissue_tmp2 = spark.sql(\"SELECT * FROM stgoodsissue_tmp2\")"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stgoodsissue_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    oige.docentry as sap_goodsissueheader_docentry\r\n",
							"    ,oige.docnum as sap_goodsissueheader_docnum\r\n",
							"    ,oige.doctype as sap_goodsissueheader_doctype\r\n",
							"    -- ,oige.canceled as sap_goodsissueheader_canceled\r\n",
							"    ,oige.objtype as sap_goodsissueheader_objtype\r\n",
							"    ,oige.docdate as sap_goodsissueheader_postingdate\r\n",
							"    ,oige.docduedate as sap_goodsissueheader_duedate\r\n",
							"    ,oige.cardcode as sap_goodsissueheader_cardcode\r\n",
							"    -- ,oige.cardname as sap_goodsissueheader_cardname\r\n",
							"    ,oige.numatcard as sap_goodsissueheader_cardref\r\n",
							"    ,oige.discprcnt as sap_goodsissueheader_discprcnt\r\n",
							"    ,oige.discsum as sap_goodsissueheader_discsum\r\n",
							"    ,oige.doctotal as sap_goodsissueheader_doctotal\r\n",
							"    ,oige.comments as sap_goodsissueheader_comments\r\n",
							"    ,oige.transid as sap_goodsissueheader_transid\r\n",
							"    -- ,oige.usersign as sap_goodsissueheader_usersign\r\n",
							"    -- ,oige.u_depot as sap_goodsissueheader_u_depot\r\n",
							"    -- ,oige.u_usercode as sap_goodsissueheader_u_usercode\r\n",
							"    ,oige.u_expense_depot as sap_goodsissueheader_u_expense_depot\r\n",
							"    -- ,oige.u_transaction_date as sap_goodsissueheader_u_transaction_date\r\n",
							"    -- ,oige.rounddif as sap_goodsissueheader_rounddif\r\n",
							"    -- ,oige.rounding as sap_goodsissueheader_rounding\r\n",
							"    -- ,ige1.docentry as sap_goodsissueline_docentry\r\n",
							"    ,ige1.linenum as sap_goodsissueline_linenum\r\n",
							"    ,ige1.linestatus as sap_goodsissueline_linestatus\r\n",
							"    ,ige1.itemcode as sap_goodsissueline_itemcode\r\n",
							"    ,ige1.dscription as sap_goodsissueline_dscription\r\n",
							"    ,ige1.quantity as sap_goodsissueline_quantity\r\n",
							"    ,ige1.openqty as sap_goodsissueline_openqty\r\n",
							"    ,ige1.price as sap_goodsissueline_price\r\n",
							"    ,ige1.rate as sap_goodsissueline_rate\r\n",
							"    ,ige1.discprcnt as sap_goodsissueline_discprcnt\r\n",
							"    ,ige1.linetotal as sap_goodsissueline_linetotal\r\n",
							"    ,ige1.opensum as sap_goodsissueline_opensum\r\n",
							"    ,ige1.pricebefdi as sap_goodsissueline_pricebefdi\r\n",
							"    ,ige1.docdate as sap_goodsissueline_docdate\r\n",
							"    ,ige1.project as sap_goodsissueline_project\r\n",
							"    ,ige1.vatprcnt as sap_goodsissueline_vatprcnt\r\n",
							"    -- ,ige1.volume as sap_goodsissueline_volume\r\n",
							"    ,ige1.vatgroup as sap_goodsissueline_vatgroup\r\n",
							"    ,ige1.vatsum as sap_goodsissueline_vatamount\r\n",
							"    -- ,ige1.grssprofit as sap_goodsissueline_grssprofit\r\n",
							"    ,ige1.u_reason as sap_goodsissueline_u_reason\r\n",
							"    -- ,ige1.u_lane as sap_goodsissueline_u_lane\r\n",
							"    ,ige1.u_expenseitem as sap_goodsissueline_u_expenseitem\r\n",
							"    ,ige1.u_fueldate as sap_goodsissueline_u_fueldate\r\n",
							"    ,ige1.acctcode as sap_goodsissueline_acctcode\r\n",
							"    ,'goodsissue' as sap_goodsissueline_doccat\r\n",
							"    ,Right(LEFT(ige1.u_expenseitem,5),3) as sap_goodsissueline_subdepotcode\r\n",
							"    ,t.discsum as sap_goodsissueline_discsum\r\n",
							"\r\n",
							"\r\n",
							"FROM dboOIGE oige\r\n",
							"LEFT JOIN dboIGE1 ige1 on ige1.docentry = oige.docentry\r\n",
							"LEFT JOIN stgoodsissue_tmp2 t on t.docnum = oige.docnum\r\n",
							""
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stgoodsissue_tmp = spark.sql(\"SELECT * FROM stgoodsissue_tmp\")"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"ststocktransactions_gi2\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    gi.sap_goodsissueheader_docentry as sap_stocktransactionsheader_docentry\r\n",
							"    ,sgi.sap_stocktransactions_docnum as sap_stocktransactionsheader_docnum\r\n",
							"    ,gi.sap_goodsissueheader_doctype as sap_stocktransactionsheader_doctype\r\n",
							"    -- ,gi.sap_goodsissueheader_canceled as sap_stocktransactionsheader_canceled\r\n",
							"    ,sgi.sap_stocktransactions_objtype as sap_stocktransactionsheader_objtype\r\n",
							"    ,sgi.sap_stocktransactions_postingdate as sap_stocktransactionsheader_postingdate\r\n",
							"    ,sgi.sap_stocktransactions_duedate as sap_stocktransactionsheader_duedate\r\n",
							"    ,sgi.sap_stocktransactions_cardcode as sap_stocktransactionsheader_cardcode\r\n",
							"    -- ,sgi.sap_stocktransactions_cardname as sap_stocktransactionsheader_cardname\r\n",
							"    ,gi.sap_goodsissueheader_cardref as sap_stocktransactionsheader_cardref\r\n",
							"    ,gi.sap_goodsissueheader_discprcnt as sap_stocktransactionsheader_discprcnt\r\n",
							"    ,gi.sap_goodsissueheader_discsum as sap_stocktransactionsheader_discsum\r\n",
							"    ,gi.sap_goodsissueheader_doctotal as sap_stocktransactionsheader_doctotal\r\n",
							"    ,gi.sap_goodsissueheader_comments as sap_stocktransactionsheader_comments\r\n",
							"    ,sgi.sap_stocktransactions_transid as sap_stocktransactionsheader_transid\r\n",
							"    -- ,gi.sap_goodsissueheader_usersign as sap_stocktransactionsheader_usersign\r\n",
							"    -- ,gi.sap_goodsissueheader_u_depot as sap_stocktransactionsheader_u_depot\r\n",
							"    -- ,gi.sap_goodsissueheader_u_usercode as sap_stocktransactionsheader_u_usercode\r\n",
							"    ,gi.sap_goodsissueheader_u_expense_depot as sap_stocktransactionsheader_u_expense_depot\r\n",
							"    -- ,gi.sap_goodsissueheader_u_transaction_date as sap_stocktransactionsheader_u_transaction_date\r\n",
							"    -- ,gi.sap_goodsissueheader_rounddif as sap_stocktransactionsheader_rounddif\r\n",
							"    -- ,gi.sap_goodsissueheader_rounding as sap_stocktransactionsheader_rounding\r\n",
							"    -- ,gi.sap_goodsissueline_docentry as sap_stocktransactionsline_docentry\r\n",
							"    ,gi.sap_goodsissueline_linenum as sap_stocktransactionsline_linenum\r\n",
							"    ,gi.sap_goodsissueline_linestatus as sap_stocktransactionsline_linestatus\r\n",
							"    ,sgi.sap_stocktransactions_itemcode as sap_stocktransactionsline_itemcode\r\n",
							"    ,sgi.sap_stocktransactions_dscription as sap_stocktransactionsline_dscription\r\n",
							"    ,gi.sap_goodsissueline_quantity as sap_stocktransactionsline_quantity\r\n",
							"    ,gi.sap_goodsissueline_openqty as sap_stocktransactionsline_openqty\r\n",
							"    ,gi.sap_goodsissueline_price as sap_stocktransactionsline_price\r\n",
							"    ,gi.sap_goodsissueline_rate as sap_stocktransactionsline_rate\r\n",
							"    ,gi.sap_goodsissueline_discprcnt as sap_stocktransactionsline_discprcnt\r\n",
							"    ,sgi.sap_stocktransactions_linetotal as sap_stocktransactionsline_linetotal\r\n",
							"    ,gi.sap_goodsissueline_opensum as sap_stocktransactionsline_opensum\r\n",
							"    ,gi.sap_goodsissueline_pricebefdi as sap_stocktransactionsline_pricebefdi\r\n",
							"    ,gi.sap_goodsissueline_docdate as sap_stocktransactionsline_docdate\r\n",
							"    ,sgi.sap_stocktransactions_project as sap_stocktransactionsline_project\r\n",
							"    ,gi.sap_goodsissueline_vatprcnt as sap_stocktransactionsline_vatprcnt\r\n",
							"    -- ,gi.sap_goodsissueline_volume as sap_stocktransactionsline_volume\r\n",
							"    ,gi.sap_goodsissueline_vatgroup as sap_stocktransactionsline_vatgroup\r\n",
							"    ,gi.sap_goodsissueline_vatamount as sap_stocktransactionsline_vatamount\r\n",
							"    -- ,gi.sap_goodsissueline_grssprofit as sap_stocktransactionsline_grssprofit\r\n",
							"    ,gi.sap_goodsissueline_u_reason as sap_stocktransactionsline_u_reason\r\n",
							"    -- ,gi.sap_goodsissueline_u_lane as sap_stocktransactionsline_u_lane\r\n",
							"    ,gi.sap_goodsissueline_u_expenseitem as sap_stocktransactionsline_u_expenseitem\r\n",
							"    ,gi.sap_goodsissueline_u_fueldate as sap_stocktransactionsline_u_fueldate\r\n",
							"    ,sgi.sap_stocktransactions_acctcode as sap_stocktransactionsline_acctcode\r\n",
							"    ,gi.sap_goodsissueline_doccat as sap_stocktransactionsline_doccat\r\n",
							"    ,gi.sap_goodsissueline_subdepotcode as sap_stocktransactionsline_subdepotcode\r\n",
							"    ,gi.sap_goodsissueline_discsum as sap_stocktransactionsline_discsum\r\n",
							"\r\n",
							"FROM ststocktransactions_gi sgi\r\n",
							"LEFT JOIN stgoodsissue_tmp gi on gi.sap_goodsissueheader_docnum = sgi.sap_stocktransactions_docnum\r\n",
							"AND gi.sap_goodsissueline_linenum = sgi.sap_stocktransactions_doclinenum\r\n",
							""
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ststocktransactions_gi2 = spark.sql(\"SELECT * FROM ststocktransactions_gi2\")"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stocktransactions = ststocktransactions_gi2.unionByName(ststocktransactions_gr2, allowMissingColumns = True)\r\n",
							"stocktransactions.createOrReplaceTempView(\"stocktransactions\")"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"ststocktransactions\r\n",
							"AS\r\n",
							"SELECT * \r\n",
							"FROM stocktransactions"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ststocktransactions = spark.sql(\"SELECT * FROM ststocktransactions\")"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ststocktransactions.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/ststocktransactions.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/07_DIST_STLoadChild')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ce0557d6-4ce0-4cb9-9771-9f8bfcc3408a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dboloads LMS Table\r\n",
							"# dboloads = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboloads.parquet', format='parquet')\r\n",
							"# dboloads.createOrReplaceTempView(\"dboloads\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstparcelbyload LMS Table\r\n",
							"# sstparcelbyload = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyload.parquet', format='parquet')\r\n",
							"# sstparcelbyload.createOrReplaceTempView(\"sstparcelbyload\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stloadchild\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    l.id as lms_loadchild_id\r\n",
							"    ,l.routeid as lms_loadchild_routeid\r\n",
							"    ,l.driverid as lms_loadchild_driverid\r\n",
							"    ,l.sealno as lms_loadchild_sealno\r\n",
							"    ,l.vehicleid as lms_loadchild_vehicleid\r\n",
							"    ,l.ttypeid as lms_loadchild_ttypeid\r\n",
							"    ,l.userid as lms_loadchild_userid\r\n",
							"    ,l.ldate as lms_loadchild_ldate\r\n",
							"    ,l.courierid as lms_loadchild_courierid\r\n",
							"    ,l.site as lms_loadchild_site\r\n",
							"    ,l.fromlocid as lms_loadchild_fromlocid\r\n",
							"    ,l.tolocid as lms_loadchild_tolocid\r\n",
							"    ,l.cdate as lms_loadchild_cdate\r\n",
							"    ,l.trailer1 as lms_loadchild_trailer1\r\n",
							"    ,l.trailer2 as lms_loadchild_trailer2\r\n",
							"    ,l.cref as lms_loadchild_cref\r\n",
							"    ,l.debriefed as lms_loadchild_debriefed\r\n",
							"    ,l.mrpflag as lms_loadchild_mrpflag\r\n",
							"    ,l.mrpcflag as lms_loadchild_mrpcflag\r\n",
							"    ,l.finalflag as lms_loadchild_finalflag\r\n",
							"    ,l.alidaflag as lms_loadchild_alidaflag\r\n",
							"    ,l.puibts as lms_loadchild_puibts\r\n",
							"    ,l.pucols as lms_loadchild_pucols\r\n",
							"    ,l.planningref as lms_loadchild_planningref\r\n",
							"    ,l.interfacedate as lms_loadchild_interfacedate\r\n",
							"    ,l.nosealsret as lms_loadchild_nosealsret\r\n",
							"    ,l.excludeopsi as lms_loadchild_excludeopsi\r\n",
							"    ,l.dccref as lms_loadchild_dccref\r\n",
							"    ,l.srouteid as lms_loadchild_srouteid\r\n",
							"    ,l.fuellitres as lms_loadchild_fuellitres\r\n",
							"    ,l.outsourcedcrew as lms_loadchild_outsourcedcrew\r\n",
							"    ,l.masterloadid as lms_loadchild_masterloadid\r\n",
							"    ,l.securitygatedespatched as lms_loadchild_securitygatedespatched\r\n",
							"    ,l.securitygateuserid as lms_loadchild_securitygateuserid\r\n",
							"    ,l.securitygatearrived as lms_loadchild_securitygatearrived\r\n",
							"    ,l.securitygatearriveduserid as lms_loadchild_securitygatearriveduserid\r\n",
							"    ,l.lastupdate as lms_loadchild_lastupdate\r\n",
							"    ,l.bayno as lms_loadchild_bayno\r\n",
							"    ,l.costs as lms_loadchild_costs\r\n",
							"    ,l.estdeparturedatetime as lms_loadchild_estdeparturedatetime\r\n",
							"    ,l.totalweight as lms_loadchild_totalweight\r\n",
							"    ,l.ovrignore as lms_loadchild_ovrignore\r\n",
							"    ,l.childloadid as lms_loadchild_childloadid\r\n",
							"    ,l.orvcode as lms_loadchild_orvcode\r\n",
							"    ,l.companyid as lms_loadchild_companyid\r\n",
							"    ,l.editloaddate as lms_loadchild_editloaddate\r\n",
							"    ,l.reopeneddate as lms_loadchild_reopeneddate\r\n",
							"    ,l.reopeneduserid as lms_loadchild_reopeneduserid\r\n",
							"    ,l.novehicle as lms_loadchild_novehicle\r\n",
							"    ,l.mobilefeedbackreasonid as lms_loadchild_mobilefeedbackreasonid\r\n",
							"    ,l.direct as lms_loadchild_direct\r\n",
							"    ,l.noofpcls as lms_loadchild_noofpcls\r\n",
							"    ,l.debriefdt as lms_loadchild_debriefdt\r\n",
							"    ,l.httpcode as lms_loadchild_httpcode\r\n",
							"    ,l.parentloadid as lms_loadchild_parentloadid\r\n",
							"    ,l.mrpobversion as lms_loadchild_mrpobversion\r\n",
							"    ,l.EffectiveLoadDurationMinutes as lms_loadchild_effectiveloaddurationminutes\r\n",
							"    ,l.EffectiveOffLoadDurationMinutes as lms_loadchild_effectiveoffloaddurationminutes\r\n",
							"    ,pbl.lms_parcelbyload_loadid as lms_loadchild_loadid\r\n",
							"    ,pbl.lms_parcelbyload_aggrweight as lms_loadchild_aggrweight\r\n",
							"    ,pbl.lms_parcelbyload_aggrchargeweight as lms_loadchild_aggrchargeweight\r\n",
							"    ,pbl.lms_parcelbyload_aggrvolweight as lms_loadchild_aggrvolweight\r\n",
							"    ,pbl.lms_parcelbyload_aggrvolumiserweight as lms_loadchild_aggrvolumiserweight\r\n",
							"    ,pbl.lms_parcelbyload_aggrmaxweight as lms_loadchild_aggrmaxweight\r\n",
							"    ,pbl.lms_parcelbyload_aggrnoparcels as lms_loadchild_aggrnoparcels\r\n",
							"    ,pbl.lms_parcelbyload_aggrweight as lms_loadchild_aggrweightexclspecdel\r\n",
							"    ,pbl.lms_parcelbyload_aggrchargeweight as lms_loadchild_aggrchargeweightexclspecdel\r\n",
							"    ,pbl.lms_parcelbyload_aggrvolweight as lms_loadchild_aggrvolweightexclspecdel\r\n",
							"    ,pbl.lms_parcelbyload_aggrvolumiserweight as lms_loadchild_aggrvolumiserweightexclspecdel\r\n",
							"    ,pbl.lms_parcelbyload_aggrmaxweight as lms_loadchild_aggrmaxweightexclspecdel\r\n",
							"    ,pbl.lms_parcelbyload_aggrnoparcels as lms_loadchild_aggrnoparcelsexclspecdel\r\n",
							"\r\n",
							"FROM dboloads l\r\n",
							"LEFT JOIN sstparcelbyload pbl on pbl.lms_parcelbyload_loadid = l.id"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadchild = spark.sql(\"SELECT * FROM stloadchild\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stloadchild.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stloadchild.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/07_LH_STTMSTrack')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "73cc84ae-d501-43c3-a6ca-f318b4b94f3d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						}
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the publictrack TMS Table\r\n",
							"# publictrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrack.parquet', format='parquet')\r\n",
							"# publictrack.createOrReplaceTempView(\"publictrack\")"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttmstrack\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    t.id as tms_track_id\r\n",
							"    ,t.tripid as tms_track_tripid\r\n",
							"    ,t.source as tms_track_source\r\n",
							"    ,to_timestamp(t.trackdate) as tms_track_trackdate\r\n",
							"    ,t.tracktype as tms_track_tracktype\r\n",
							"    ,t.userid as tms_track_userid\r\n",
							"    ,t.lat as tms_track_lat\r\n",
							"    ,t.lng as tms_track_lng\r\n",
							"    ,t.address as tms_track_address\r\n",
							"    ,t.note as tms_track_note\r\n",
							"\r\n",
							"FROM publictrack t\r\n",
							""
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttmstrack = spark.sql(\"SELECT * FROM sttmstrack\")"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sttmstrack.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/sttmstrack.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/07_STDocuments')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7518f9a5-349e-4d9b-af4b-13f4213d52b4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 114
					},
					{
						"cell_type": "code",
						"source": [
							"# #Sales Invoice\r\n",
							"# #Create DataFrame for the dboOINV SAP HEADER Table\r\n",
							"# dboOINV = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOINV.parquet', format='parquet')\r\n",
							"# dboOINV.createOrReplaceTempView(\"dboOINV\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboINV1 SAP LINE Table\r\n",
							"# dboINV1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboINV1.parquet', format='parquet')\r\n",
							"# dboINV1.createOrReplaceTempView(\"dboINV1\")\r\n",
							"\r\n",
							"# #Sales Credit\r\n",
							"# #Create DataFrame for the dboORIN SAP HEADER Table\r\n",
							"# dboORIN = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboORIN.parquet', format='parquet')\r\n",
							"# dboORIN.createOrReplaceTempView(\"dboORIN\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboRIN1 SAP LINE Table\r\n",
							"# dboRIN1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboRIN1.parquet', format='parquet')\r\n",
							"# dboRIN1.createOrReplaceTempView(\"dboRIN1\")\r\n",
							"\r\n",
							"# #Purchase Invoice\r\n",
							"# #Create DataFrame for the dboOPCH SAP HEADER Table\r\n",
							"# dboOPCH = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOPCH.parquet', format='parquet')\r\n",
							"# dboOPCH.createOrReplaceTempView(\"dboOPCH\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboPCH1 SAP LINE Table\r\n",
							"# dboPCH1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboPCH1.parquet', format='parquet')\r\n",
							"# dboPCH1.createOrReplaceTempView(\"dboPCH1\")\r\n",
							"\r\n",
							"# #Purchase Credit\r\n",
							"# #Create DataFrame for the dboORPC SAP HEADER Table\r\n",
							"# dboORPC = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboORPC.parquet', format='parquet')\r\n",
							"# dboORPC.createOrReplaceTempView(\"dboORPC\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboRPC1 SAP LINE Table\r\n",
							"# dboRPC1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboRPC1.parquet', format='parquet')\r\n",
							"# dboRPC1.createOrReplaceTempView(\"dboRPC1\")\r\n",
							"\r\n",
							"# #Goods Receipt Note\r\n",
							"# #Create DataFrame for the dboOPDN SAP HEADER Table\r\n",
							"# dboOPDN = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOPDN.parquet', format='parquet')\r\n",
							"# dboOPDN.createOrReplaceTempView(\"dboOPDN\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboPDN1 SAP LINE Table\r\n",
							"# dboPDN1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboPDN1.parquet', format='parquet')\r\n",
							"# dboPDN1.createOrReplaceTempView(\"dboPDN1\")\r\n",
							"\r\n",
							"# #Goods Return\r\n",
							"# #Create DataFrame for the dboORPD SAP HEADER Table\r\n",
							"# dboORPD = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboORPD.parquet', format='parquet')\r\n",
							"# dboORPD.createOrReplaceTempView(\"dboORPD\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboRPD1 SAP LINE Table\r\n",
							"# dboRPD1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboRPD1.parquet', format='parquet')\r\n",
							"# dboRPD1.createOrReplaceTempView(\"dboRPD1\")\r\n",
							"\r\n",
							"# #Goods Issue\r\n",
							"# #Create DataFrame for the dboOIGE SAP HEADER Table\r\n",
							"# dboOIGE = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOIGE.parquet', format='parquet')\r\n",
							"# dboOIGE.createOrReplaceTempView(\"dboOIGE\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboIGE1 SAP LINE Table\r\n",
							"# dboIGE1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboIGE1.parquet', format='parquet')\r\n",
							"# dboIGE1.createOrReplaceTempView(\"dboIGE1\")\r\n",
							"\r\n",
							"# #Purchase Orders\r\n",
							"# #Create DataFrame for the dboOPOR SAP HEADER Table\r\n",
							"# dboOPOR = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOPOR.parquet', format='parquet')\r\n",
							"# dboOPOR.createOrReplaceTempView(\"dboOPOR\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboPOR1 SAP LINE Table\r\n",
							"# dboPOR1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboPOR1.parquet', format='parquet')\r\n",
							"# dboPOR1.createOrReplaceTempView(\"dboPOR1\")"
						],
						"outputs": [],
						"execution_count": 115
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--NEGETIVE VALUES\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stpurchaseorder\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    '' as sap_purchaseorderline_polookupid\r\n",
							"    ,opor.docentry as sap_purchaseorderheader_docentry\r\n",
							"    ,opor.docnum as sap_purchaseorderheader_docnum\r\n",
							"    ,opor.doctype as sap_purchaseorderheader_doctype\r\n",
							"    -- ,opor.canceled as sap_purchaseorderheader_canceled\r\n",
							"    ,opor.objtype as sap_purchaseorderheader_objtype\r\n",
							"    ,opor.docdate as sap_purchaseorderheader_postingdate\r\n",
							"    ,opor.docduedate as sap_purchaseorderheader_duedate\r\n",
							"    ,opor.cardcode as sap_purchaseorderheader_cardcode\r\n",
							"    -- ,opor.cardname as sap_purchaseorderheader_cardname\r\n",
							"    ,opor.numatcard as sap_purchaseorderheader_cardref\r\n",
							"    ,opor.discprcnt as sap_purchaseorderheader_discprcnt\r\n",
							"    ,(opor.discsum *-1) as sap_purchaseorderheader_discsum\r\n",
							"    ,(opor.doctotal*-1) as sap_purchaseorderheader_doctotal\r\n",
							"    ,opor.comments as sap_purchaseorderheader_comments\r\n",
							"    ,opor.transid as sap_purchaseorderheader_transid\r\n",
							"    -- ,opor.usersign as sap_purchaseorderheader_usersign\r\n",
							"    -- ,opor.u_depot as sap_purchaseorderheader_u_depot\r\n",
							"    -- ,opor.u_usercode as sap_purchaseorderheader_u_usercode\r\n",
							"    ,opor.u_expense_depot as sap_purchaseorderheader_u_expense_depot\r\n",
							"    -- ,opor.u_transaction_date as sap_purchaseorderheader_u_transaction_date\r\n",
							"    -- ,(opor.rounddif*-1) as sap_purchaseorderheader_rounddif\r\n",
							"    -- ,opor.rounding as sap_purchaseorderheader_rounding\r\n",
							"    -- ,por1.docentry as sap_purchaseorderline_docentry\r\n",
							"    ,por1.linenum as sap_purchaseorderline_linenum\r\n",
							"    ,por1.linestatus as sap_purchaseorderline_linestatus\r\n",
							"    ,por1.itemcode as sap_purchaseorderline_itemcode\r\n",
							"    ,por1.dscription as sap_purchaseorderline_dscription\r\n",
							"    ,(por1.quantity*-1) as sap_purchaseorderline_quantity\r\n",
							"    ,(por1.openqty*-1) as sap_purchaseorderline_openqty\r\n",
							"    ,por1.price as sap_purchaseorderline_price\r\n",
							"    ,(por1.rate*-1) as sap_purchaseorderline_rate\r\n",
							"    ,por1.discprcnt as sap_purchaseorderline_discprcnt\r\n",
							"    ,(por1.linetotal*-1) as sap_purchaseorderline_linetotal\r\n",
							"    ,(por1.opensum*-1) as sap_purchaseorderline_opensum\r\n",
							"    ,por1.pricebefdi as sap_purchaseorderline_pricebefdi\r\n",
							"    ,por1.docdate as sap_purchaseorderline_docdate\r\n",
							"    ,por1.project as sap_purchaseorderline_project\r\n",
							"    ,por1.vatprcnt as sap_purchaseorderline_vatprcnt\r\n",
							"    -- ,(por1.volume*-1) as sap_purchaseorderline_volume\r\n",
							"    ,por1.vatgroup as sap_purchaseorderline_vatgroup\r\n",
							"    ,(por1.vatsum*-1) as sap_purchaseorderline_vatamount\r\n",
							"    -- ,(por1.grssprofit*-1) as sap_purchaseorderline_grssprofit\r\n",
							"    ,por1.u_reason as sap_purchaseorderline_u_reason\r\n",
							"    -- ,por1.u_lane as sap_purchaseorderline_u_lane\r\n",
							"    ,por1.u_expenseitem as sap_purchaseorderline_u_expenseitem\r\n",
							"    ,por1.u_fueldate as sap_purchaseorderline_u_fueldate\r\n",
							"    ,por1.acctcode as sap_purchaseorderline_acctcode\r\n",
							"    ,'purchaseorder' as sap_purchaseorderline_doccat\r\n",
							"    ,RIGHT(LEFT(por1.itemcode,5),3) as sap_purchaseorderline_subdepotcode\r\n",
							"    ,por1.u_rate as sap_purchaseorderline_u_rate\r\n",
							"    ,por1.u_ir_number as sap_purchaseorderline_u_ir_number\r\n",
							"    ,0 as sap_purchaseorderline_discsum\r\n",
							"\r\n",
							"\r\n",
							"FROM dboOPOR opor\r\n",
							"LEFT JOIN dboPOR1 por1 on por1.docentry = opor.docentry\r\n",
							"WHERE opor.canceled = 'N'"
						],
						"outputs": [],
						"execution_count": 116
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpurchaseorder = spark.sql(\"SELECT * FROM stpurchaseorder\")\r\n",
							"stpurchaseorder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stpurchaseorder.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 117
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stsalesinvoice_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    oinv.docnum\r\n",
							"    ,(oinv.discsum*-1)/COUNT(inv1.linenum) as discsum\r\n",
							"\r\n",
							"FROM dboOINV oinv\r\n",
							"LEFT JOIN dboINV1 inv1 on inv1.docentry = oinv.docentry\r\n",
							"\r\n",
							"GROUP BY oinv.docnum, oinv.discsum\r\n",
							""
						],
						"outputs": [],
						"execution_count": 118
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsalesinvoice_tmp = spark.sql(\"SELECT * FROM stsalesinvoice_tmp\")"
						],
						"outputs": [],
						"execution_count": 119
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stsalesinvoice\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    '' as sap_salesinvoiceline_polookupid\r\n",
							"    ,oinv.docentry as sap_salesinvoiceheader_docentry\r\n",
							"    ,oinv.docnum as sap_salesinvoiceheader_docnum\r\n",
							"    ,oinv.doctype as sap_salesinvoiceheader_doctype\r\n",
							"    -- ,oinv.canceled as sap_salesinvoiceheader_canceled\r\n",
							"    ,oinv.objtype as sap_salesinvoiceheader_objtype\r\n",
							"    ,oinv.docdate as sap_salesinvoiceheader_postingdate\r\n",
							"    ,oinv.docduedate as sap_salesinvoiceheader_duedate\r\n",
							"    ,oinv.cardcode as sap_salesinvoiceheader_cardcode\r\n",
							"    -- ,oinv.cardname as sap_salesinvoiceheader_cardname\r\n",
							"    ,oinv.numatcard as sap_salesinvoiceheader_cardref\r\n",
							"    ,oinv.discprcnt as sap_salesinvoiceheader_discprcnt\r\n",
							"    ,oinv.discsum as sap_salesinvoiceheader_discsum\r\n",
							"    ,oinv.doctotal as sap_salesinvoiceheader_doctotal\r\n",
							"    ,oinv.comments as sap_salesinvoiceheader_comments\r\n",
							"    ,oinv.transid as sap_salesinvoiceheader_transid\r\n",
							"    -- ,oinv.usersign as sap_salesinvoiceheader_usersign\r\n",
							"    -- ,oinv.u_depot as sap_salesinvoiceheader_u_depot\r\n",
							"    -- ,oinv.u_usercode as sap_salesinvoiceheader_u_usercode\r\n",
							"    ,oinv.u_expense_depot as sap_salesinvoiceheader_u_expense_depot\r\n",
							"    -- ,oinv.u_transaction_date as sap_salesinvoiceheader_u_transaction_date\r\n",
							"    -- ,oinv.rounddif as sap_salesinvoiceheader_rounddif\r\n",
							"    -- ,oinv.rounding as sap_salesinvoiceheader_rounding\r\n",
							"    -- ,inv1.docentry as sap_salesinvoiceline_docentry\r\n",
							"    ,inv1.linenum as sap_salesinvoiceline_linenum\r\n",
							"    ,inv1.linestatus as sap_salesinvoiceline_linestatus\r\n",
							"    ,inv1.itemcode as sap_salesinvoiceline_itemcode\r\n",
							"    ,inv1.dscription as sap_salesinvoiceline_dscription\r\n",
							"    ,inv1.quantity as sap_salesinvoiceline_quantity\r\n",
							"    ,inv1.openqty as sap_salesinvoiceline_openqty\r\n",
							"    ,inv1.price as sap_salesinvoiceline_price\r\n",
							"    ,inv1.rate as sap_salesinvoiceline_rate\r\n",
							"    ,inv1.discprcnt as sap_salesinvoiceline_discprcnt\r\n",
							"    ,inv1.linetotal as sap_salesinvoiceline_linetotal\r\n",
							"    ,inv1.opensum as sap_salesinvoiceline_opensum\r\n",
							"    ,inv1.pricebefdi as sap_salesinvoiceline_pricebefdi\r\n",
							"    ,inv1.docdate as sap_salesinvoiceline_docdate\r\n",
							"    ,inv1.project as sap_salesinvoiceline_project\r\n",
							"    ,inv1.vatprcnt as sap_salesinvoiceline_vatprcnt\r\n",
							"    -- ,inv1.volume as sap_salesinvoiceline_volume\r\n",
							"    ,inv1.vatgroup as sap_salesinvoiceline_vatgroup\r\n",
							"    ,inv1.vatsum as sap_salesinvoiceline_vatamount\r\n",
							"    -- ,inv1.grssprofit as sap_salesinvoiceline_grssprofit\r\n",
							"    ,inv1.u_reason as sap_salesinvoiceline_u_reason\r\n",
							"    -- ,inv1.u_lane as sap_salesinvoiceline_u_lane\r\n",
							"    ,inv1.u_expenseitem as sap_salesinvoiceline_u_expenseitem\r\n",
							"    ,inv1.u_fueldate as sap_salesinvoiceline_u_fueldate\r\n",
							"    ,inv1.acctcode as sap_salesinvoiceline_acctcode\r\n",
							"    ,'salesinvoice' as sap_salesinvoiceline_doccat\r\n",
							"    ,RIGHT(LEFT(inv1.itemcode,5),3) as sap_salesinvoiceline_subdepotcode\r\n",
							"    ,inv1.u_rate as sap_salesinvoiceline_u_rate\r\n",
							"    ,inv1.u_ir_number as sap_salesinvoiceline_u_ir_number\r\n",
							"    ,t.discsum as sap_salesinvoiceline_discsum\r\n",
							"\r\n",
							"FROM dboOINV oinv\r\n",
							"LEFT JOIN dboINV1 inv1 on inv1.docentry = oinv.docentry\r\n",
							"LEFT JOIN stsalesinvoice_tmp t on t.docnum = oinv.docnum\r\n",
							"WHERE oinv.canceled = 'N'"
						],
						"outputs": [],
						"execution_count": 120
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsalesinvoice = spark.sql(\"SELECT * FROM stsalesinvoice\")\r\n",
							"stsalesinvoice.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stsalesinvoice.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 121
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stsalescredit_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    orin.docnum\r\n",
							"    ,(orin.discsum)/COUNT(rin1.linenum) as discsum\r\n",
							"\r\n",
							"FROM dboORIN orin\r\n",
							"LEFT JOIN dboRIN1 rin1 on rin1.docentry = orin.docentry\r\n",
							"\r\n",
							"GROUP BY orin.docnum, orin.discsum"
						],
						"outputs": [],
						"execution_count": 122
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsalescredit_tmp = spark.sql(\"SELECT * FROM stsalescredit_tmp\")"
						],
						"outputs": [],
						"execution_count": 123
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--NEGETIVE VALUES\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stsalescredit\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    '' as sap_salescreditline_polookupid\r\n",
							"    ,orin.docentry as sap_salescreditheader_docentry\r\n",
							"    ,orin.docnum as sap_salescreditheader_docnum\r\n",
							"    ,orin.doctype as sap_salescreditheader_doctype\r\n",
							"    -- ,orin.canceled as sap_salescreditheader_canceled\r\n",
							"    ,orin.objtype as sap_salescreditheader_objtype\r\n",
							"    ,orin.docdate as sap_salescreditheader_postingdate\r\n",
							"    ,orin.docduedate as sap_salescreditheader_duedate\r\n",
							"    ,orin.cardcode as sap_salescreditheader_cardcode\r\n",
							"    -- ,orin.cardname as sap_salescreditheader_cardname\r\n",
							"    ,orin.numatcard as sap_salescreditheader_cardref\r\n",
							"    ,orin.discprcnt as sap_salescreditheader_discprcnt\r\n",
							"    ,(orin.discsum*-1) as sap_salescreditheader_discsum\r\n",
							"    ,(orin.doctotal*-1) as sap_salescreditheader_doctotal\r\n",
							"    ,orin.comments as sap_salescreditheader_comments\r\n",
							"    ,orin.transid as sap_salescreditheader_transid\r\n",
							"    -- ,orin.usersign as sap_salescreditheader_usersign\r\n",
							"    -- ,orin.u_depot as sap_salescreditheader_u_depot\r\n",
							"    -- ,orin.u_usercode as sap_salescreditheader_u_usercode\r\n",
							"    ,orin.u_expense_depot as sap_salescreditheader_u_expense_depot\r\n",
							"    -- ,orin.u_transaction_date as sap_salescreditheader_u_transaction_date\r\n",
							"    -- ,orin.rounddif as sap_salescreditheader_rounddif\r\n",
							"    -- ,orin.rounding as sap_salescreditheader_rounding\r\n",
							"    -- ,rin1.docentry as sap_salescreditline_docentry\r\n",
							"    ,rin1.linenum as sap_salescreditline_linenum\r\n",
							"    ,rin1.linestatus as sap_salescreditline_linestatus\r\n",
							"    ,rin1.itemcode as sap_salescreditline_itemcode\r\n",
							"    ,rin1.dscription as sap_salescreditline_dscription\r\n",
							"    ,(rin1.quantity*-1) as sap_salescreditline_quantity\r\n",
							"    ,(rin1.openqty*-1) as sap_salescreditline_openqty\r\n",
							"    ,rin1.price as sap_salescreditline_price\r\n",
							"    ,(rin1.rate*-1) as sap_salescreditline_rate\r\n",
							"    ,rin1.discprcnt as sap_salescreditline_discprcnt\r\n",
							"    ,(rin1.linetotal*-1) as sap_salescreditline_linetotal\r\n",
							"    ,(rin1.opensum*-1) as sap_salescreditline_opensum\r\n",
							"    ,rin1.pricebefdi as sap_salescreditline_pricebefdi\r\n",
							"    ,rin1.docdate as sap_salescreditline_docdate\r\n",
							"    ,rin1.project as sap_salescreditline_project\r\n",
							"    ,rin1.vatprcnt as sap_salescreditline_vatprcnt\r\n",
							"    -- ,(rin1.volume*-1) as sap_salescreditline_volume\r\n",
							"    ,rin1.vatgroup as sap_salescreditline_vatgroup\r\n",
							"    ,(rin1.vatsum*-1) as sap_salescreditline_vatamount\r\n",
							"    -- ,(rin1.grssprofit*-1) as sap_salescreditline_grssprofit\r\n",
							"    ,rin1.u_reason as sap_salescreditline_u_reason\r\n",
							"    -- ,rin1.u_lane as sap_salescreditline_u_lane\r\n",
							"    ,rin1.u_expenseitem as sap_salescreditline_u_expenseitem\r\n",
							"    ,rin1.u_fueldate as sap_salescreditline_u_fueldate\r\n",
							"    ,rin1.acctcode as sap_salescreditline_acctcode\r\n",
							"    ,'salescredit' as sap_salescreditline_doccat\r\n",
							"    ,Right(LEFT(rin1.itemcode,5),3) as sap_salescreditline_subdepotcode\r\n",
							"    ,rin1.u_rate as sap_salescreditline_u_rate\r\n",
							"    ,rin1.u_ir_number as sap_salescreditline_u_ir_number\r\n",
							"    ,t.discsum as sap_salescreditline_discsum\r\n",
							"\r\n",
							"FROM dboORIN orin\r\n",
							"LEFT JOIN dboRIN1 rin1 on rin1.docentry = orin.docentry\r\n",
							"LEFT JOIN stsalescredit_tmp t on t.docnum = orin.docnum\r\n",
							"WHERE orin.canceled = 'N'"
						],
						"outputs": [],
						"execution_count": 124
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsalescredit = spark.sql(\"SELECT * FROM stsalescredit\")\r\n",
							"stsalescredit.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stsalescredit.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 125
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stpurchaseinvoice_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    opch.docnum\r\n",
							"    ,(opch.discsum)/COUNT(pch1.linenum) as discsum\r\n",
							"\r\n",
							"FROM dboOPCH opch\r\n",
							"LEFT JOIN dboPCH1 pch1 on pch1.docentry = opch.docentry\r\n",
							"GROUP BY opch.docnum, opch.discsum"
						],
						"outputs": [],
						"execution_count": 126
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpurchaseinvoice_tmp = spark.sql(\"SELECT * FROM stpurchaseinvoice_tmp\")"
						],
						"outputs": [],
						"execution_count": 127
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--NEGETIVE VALUES\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stpurchaseinvoice\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    pch1.baseline||'_'||pch1.baseref  as sap_purchaseinvoiceline_polookupid\r\n",
							"    ,opch.docentry as sap_purchaseinvoiceheader_docentry\r\n",
							"    ,opch.docnum as sap_purchaseinvoiceheader_docnum\r\n",
							"    ,opch.doctype as sap_purchaseinvoiceheader_doctype\r\n",
							"    -- ,opch.canceled as sap_purchaseinvoiceheader_canceled\r\n",
							"    ,opch.objtype as sap_purchaseinvoiceheader_objtype\r\n",
							"    ,opch.docdate as sap_purchaseinvoiceheader_postingdate\r\n",
							"    ,opch.docduedate as sap_purchaseinvoiceheader_duedate\r\n",
							"    ,opch.cardcode as sap_purchaseinvoiceheader_cardcode\r\n",
							"    -- ,opch.cardname as sap_purchaseinvoiceheader_cardname\r\n",
							"    ,opch.numatcard as sap_purchaseinvoiceheader_cardref\r\n",
							"    ,opch.discprcnt as sap_purchaseinvoiceheader_discprcnt\r\n",
							"    ,(opch.discsum*-1) as sap_purchaseinvoiceheader_discsum\r\n",
							"    ,(opch.doctotal*-1) as sap_purchaseinvoiceheader_doctotal\r\n",
							"    ,opch.comments as sap_purchaseinvoiceheader_comments\r\n",
							"    ,opch.transid as sap_purchaseinvoiceheader_transid\r\n",
							"    -- ,opch.usersign as sap_purchaseinvoiceheader_usersign\r\n",
							"    -- ,opch.u_depot as sap_purchaseinvoiceheader_u_depot\r\n",
							"    -- ,opch.u_usercode as sap_purchaseinvoiceheader_u_usercode\r\n",
							"    ,opch.u_expense_depot as sap_purchaseinvoiceheader_u_expense_depot\r\n",
							"    -- ,opch.u_transaction_date as sap_purchaseinvoiceheader_u_transaction_date\r\n",
							"    -- ,opch.rounddif as sap_purchaseinvoiceheader_rounddif\r\n",
							"    -- ,opch.rounding as sap_purchaseinvoiceheader_rounding\r\n",
							"    -- ,pch1.docentry as sap_purchaseinvoiceline_docentry\r\n",
							"    ,pch1.linenum as sap_purchaseinvoiceline_linenum\r\n",
							"    ,pch1.linestatus as sap_purchaseinvoiceline_linestatus\r\n",
							"    ,pch1.itemcode as sap_purchaseinvoiceline_itemcode\r\n",
							"    ,pch1.dscription as sap_purchaseinvoiceline_dscription\r\n",
							"    ,(pch1.quantity*-1) as sap_purchaseinvoiceline_quantity\r\n",
							"    ,(pch1.openqty*-1) as sap_purchaseinvoiceline_openqty\r\n",
							"    ,pch1.price as sap_purchaseinvoiceline_price\r\n",
							"    ,(pch1.rate*-1) as sap_purchaseinvoiceline_rate\r\n",
							"    ,pch1.discprcnt as sap_purchaseinvoiceline_discprcnt\r\n",
							"    ,(pch1.linetotal*-1) as sap_purchaseinvoiceline_linetotal\r\n",
							"    ,(pch1.opensum*-1) as sap_purchaseinvoiceline_opensum\r\n",
							"    ,pch1.pricebefdi as sap_purchaseinvoiceline_pricebefdi\r\n",
							"    ,pch1.docdate as sap_purchaseinvoiceline_docdate\r\n",
							"    ,pch1.project as sap_purchaseinvoiceline_project\r\n",
							"    ,pch1.vatprcnt as sap_purchaseinvoiceline_vatprcnt\r\n",
							"    -- ,(pch1.volume*-1) as sap_purchaseinvoiceline_volume\r\n",
							"    ,pch1.vatgroup as sap_purchaseinvoiceline_vatgroup\r\n",
							"    ,(pch1.vatsum*-1) as sap_purchaseinvoiceline_vatamount\r\n",
							"    -- ,(pch1.grssprofit*-1) as sap_purchaseinvoiceline_grssprofit\r\n",
							"    ,pch1.u_reason as sap_purchaseinvoiceline_u_reason\r\n",
							"    -- ,pch1.u_lane as sap_purchaseinvoiceline_u_lane\r\n",
							"    ,pch1.u_expenseitem as sap_purchaseinvoiceline_u_expenseitem\r\n",
							"    ,pch1.u_fueldate as sap_purchaseinvoiceline_u_fueldate\r\n",
							"    ,pch1.acctcode as sap_purchaseinvoiceline_acctcode\r\n",
							"    ,'purchaseinvoice' as sap_purchaseinvoiceline_doccat\r\n",
							"    ,Right(LEFT(pch1.itemcode,5),3) as sap_purchaseinvoiceline_subdepotcode\r\n",
							"    ,pch1.u_rate as sap_purchaseinvoiceline_u_rate\r\n",
							"    ,pch1.u_ir_number as sap_purchaseinvoiceline_u_ir_number\r\n",
							"    ,t.discsum as sap_purchaseinvoiceline_discsum\r\n",
							"    \r\n",
							"FROM dboOPCH opch\r\n",
							"LEFT JOIN dboPCH1 pch1 on pch1.docentry = opch.docentry\r\n",
							"LEFT JOIN stpurchaseinvoice_tmp t on t.docnum = opch.docnum\r\n",
							"WHERE opch.canceled = 'N'"
						],
						"outputs": [],
						"execution_count": 128
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpurchaseinvoice = spark.sql(\"SELECT * FROM stpurchaseinvoice\")\r\n",
							"stpurchaseinvoice.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stpurchaseinvoice.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 129
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stpurchasecredit_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    orpc.docnum\r\n",
							"    ,(orpc.discsum*-1)/COUNT(rpc1.linenum) as discsum\r\n",
							"\r\n",
							"FROM dboORPC orpc\r\n",
							"LEFT JOIN dboRPC1 rpc1 on rpc1.docentry = orpc.docentry\r\n",
							"GROUP BY orpc.docnum, orpc.discsum"
						],
						"outputs": [],
						"execution_count": 130
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpurchasecredit_tmp = spark.sql(\"SELECT * FROM stpurchasecredit_tmp\")"
						],
						"outputs": [],
						"execution_count": 131
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stpurchasecredit\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    '' as sap_purchasecreditinvoiceline_polookupid\r\n",
							"    ,orpc.docentry as sap_purchasecreditheader_docentry\r\n",
							"    ,orpc.docnum as sap_purchasecreditheader_docnum\r\n",
							"    ,orpc.doctype as sap_purchasecreditheader_doctype\r\n",
							"    -- ,orpc.canceled as sap_purchasecreditheader_canceled\r\n",
							"    ,orpc.objtype as sap_purchasecreditheader_objtype\r\n",
							"    ,orpc.docdate as sap_purchasecreditheader_postingdate\r\n",
							"    ,orpc.docduedate as sap_purchasecreditheader_duedate\r\n",
							"    ,orpc.cardcode as sap_purchasecreditheader_cardcode\r\n",
							"    -- ,orpc.cardname as sap_purchasecreditheader_cardname\r\n",
							"    ,orpc.numatcard as sap_purchasecreditheader_cardref\r\n",
							"    ,orpc.discprcnt as sap_purchasecreditheader_discprcnt\r\n",
							"    ,orpc.discsum as sap_purchasecreditheader_discsum\r\n",
							"    ,orpc.doctotal as sap_purchasecreditheader_doctotal\r\n",
							"    ,orpc.comments as sap_purchasecreditheader_comments\r\n",
							"    ,orpc.transid as sap_purchasecreditheader_transid\r\n",
							"    -- ,orpc.usersign as sap_purchasecreditheader_usersign\r\n",
							"    -- ,orpc.u_depot as sap_purchasecreditheader_u_depot\r\n",
							"    -- ,orpc.u_usercode as sap_purchasecreditheader_u_usercode\r\n",
							"    ,orpc.u_expense_depot as sap_purchasecreditheader_u_expense_depot\r\n",
							"    -- ,orpc.u_transaction_date as sap_purchasecreditheader_u_transaction_date\r\n",
							"    -- ,orpc.rounddif as sap_purchasecreditheader_rounddif\r\n",
							"    -- ,orpc.rounding as sap_purchasecreditheader_rounding\r\n",
							"    -- ,rpc1.docentry as sap_purchasecreditline_docentry\r\n",
							"    ,rpc1.linenum as sap_purchasecreditline_linenum\r\n",
							"    ,rpc1.linestatus as sap_purchasecreditline_linestatus\r\n",
							"    ,rpc1.itemcode as sap_purchasecreditline_itemcode\r\n",
							"    ,rpc1.dscription as sap_purchasecreditline_dscription\r\n",
							"    ,rpc1.quantity as sap_purchasecreditline_quantity\r\n",
							"    ,rpc1.openqty as sap_purchasecreditline_openqty\r\n",
							"    ,rpc1.price as sap_purchasecreditline_price\r\n",
							"    ,rpc1.rate as sap_purchasecreditline_rate\r\n",
							"    ,rpc1.discprcnt as sap_purchasecreditline_discprcnt\r\n",
							"    ,rpc1.linetotal as sap_purchasecreditline_linetotal\r\n",
							"    ,rpc1.opensum as sap_purchasecreditline_opensum\r\n",
							"    ,rpc1.pricebefdi as sap_purchasecreditline_pricebefdi\r\n",
							"    ,rpc1.docdate as sap_purchasecreditline_docdate\r\n",
							"    ,rpc1.project as sap_purchasecreditline_project\r\n",
							"    ,rpc1.vatprcnt as sap_purchasecreditline_vatprcnt\r\n",
							"    -- ,rpc1.volume as sap_purchasecreditline_volume\r\n",
							"    ,rpc1.vatgroup as sap_purchasecreditline_vatgroup\r\n",
							"    ,rpc1.vatsum as sap_purchasecreditline_vatamount\r\n",
							"    -- ,rpc1.grssprofit as sap_purchasecreditline_grssprofit\r\n",
							"    ,rpc1.u_reason as sap_purchasecreditline_u_reason\r\n",
							"    -- ,rpc1.u_lane as sap_purchasecreditline_u_lane\r\n",
							"    ,rpc1.u_expenseitem as sap_purchasecreditline_u_expenseitem\r\n",
							"    ,rpc1.u_fueldate as sap_purchasecreditline_u_fueldate\r\n",
							"    ,rpc1.acctcode as sap_purchasecreditline_acctcode\r\n",
							"    ,'purchasecredit' as sap_purchasecreditline_doccat\r\n",
							"    ,Right(LEFT(rpc1.itemcode,5),3) as sap_purchasecreditline_subdepotcode\r\n",
							"    ,rpc1.u_rate as sap_purchasecreditline_u_rate\r\n",
							"    ,rpc1.u_ir_number as sap_purchasecreditline_u_ir_number\r\n",
							"    ,t.discsum as sap_purchasecreditline_discsum\r\n",
							"\r\n",
							"FROM dboORPC orpc\r\n",
							"LEFT JOIN dboRPC1 rpc1 on rpc1.docentry = orpc.docentry\r\n",
							"LEFT JOIN stpurchasecredit_tmp t on t.docnum = orpc.docnum\r\n",
							"WHERE orpc.canceled = 'N'"
						],
						"outputs": [],
						"execution_count": 132
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpurchasecredit = spark.sql(\"SELECT * FROM stpurchasecredit\")\r\n",
							"stpurchasecredit.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stpurchasecredit.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 133
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stgoodsreceiptnote_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    opdn.docnum\r\n",
							"    ,(opdn.discsum)/COUNT(opd1.linenum) as discsum\r\n",
							"\r\n",
							"FROM dboOPDN opdn\r\n",
							"LEFT JOIN dboPDN1 opd1 on opd1.docentry = opdn.docentry\r\n",
							"GROUP BY opdn.docnum, opdn.discsum"
						],
						"outputs": [],
						"execution_count": 134
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stgoodsreceiptnote_tmp = spark.sql(\"SELECT * FROM stgoodsreceiptnote_tmp\")"
						],
						"outputs": [],
						"execution_count": 135
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--NEGETIVE VALUES\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stgoodsreceiptnote\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    '' as sap_goodsreceiptnoteline_polookupid\r\n",
							"    ,opdn.docentry as sap_goodsreceiptnoteheader_docentry\r\n",
							"    ,opdn.docnum as sap_goodsreceiptnoteheader_docnum\r\n",
							"    ,opdn.doctype as sap_goodsreceiptnoteheader_doctype\r\n",
							"    -- ,opdn.canceled as sap_goodsreceiptnoteheader_canceled\r\n",
							"    ,opdn.objtype as sap_goodsreceiptnoteheader_objtype\r\n",
							"    ,opdn.docdate as sap_goodsreceiptnoteheader_postingdate\r\n",
							"    ,opdn.docduedate as sap_goodsreceiptnoteheader_duedate\r\n",
							"    ,opdn.cardcode as sap_goodsreceiptnoteheader_cardcode\r\n",
							"    -- ,opdn.cardname as sap_goodsreceiptnoteheader_cardname\r\n",
							"    ,opdn.numatcard as sap_goodsreceiptnoteheader_cardref\r\n",
							"    ,opdn.discprcnt as sap_goodsreceiptnoteheader_discprcnt\r\n",
							"    ,(opdn.discsum*-1) as sap_goodsreceiptnoteheader_discsum\r\n",
							"    ,(opdn.doctotal*-1) as sap_goodsreceiptnoteheader_doctotal\r\n",
							"    ,opdn.comments as sap_goodsreceiptnoteheader_comments\r\n",
							"    ,opdn.transid as sap_goodsreceiptnoteheader_transid\r\n",
							"    -- ,opdn.usersign as sap_goodsreceiptnoteheader_usersign\r\n",
							"    -- ,opdn.u_depot as sap_goodsreceiptnoteheader_u_depot\r\n",
							"    -- ,opdn.u_usercode as sap_goodsreceiptnoteheader_u_usercode\r\n",
							"    ,opdn.u_expense_depot as sap_goodsreceiptnoteheader_u_expense_depot\r\n",
							"    -- ,opdn.u_transaction_date as sap_goodsreceiptnoteheader_u_transaction_date\r\n",
							"    -- ,opdn.rounddif as sap_goodsreceiptnoteheader_rounddif\r\n",
							"    -- ,opdn.rounding as sap_goodsreceiptnoteheader_rounding\r\n",
							"    -- ,pdn1.docentry as sap_goodsreceiptnoteline_docentry\r\n",
							"    ,pdn1.linenum as sap_goodsreceiptnoteline_linenum\r\n",
							"    ,pdn1.linestatus as sap_goodsreceiptnoteline_linestatus\r\n",
							"    ,pdn1.itemcode as sap_goodsreceiptnoteline_itemcode\r\n",
							"    ,pdn1.dscription as sap_goodsreceiptnoteline_dscription\r\n",
							"    ,(pdn1.quantity*-1) as sap_goodsreceiptnoteline_quantity\r\n",
							"    ,(pdn1.openqty*-1) as sap_goodsreceiptnoteline_openqty\r\n",
							"    ,pdn1.price as sap_goodsreceiptnoteline_price\r\n",
							"    ,(pdn1.rate*-1) as sap_goodsreceiptnoteline_rate\r\n",
							"    ,pdn1.discprcnt as sap_goodsreceiptnoteline_discprcnt\r\n",
							"    ,(pdn1.linetotal*-1) as sap_goodsreceiptnoteline_linetotal\r\n",
							"    ,(pdn1.opensum*-1) as sap_goodsreceiptnoteline_opensum\r\n",
							"    ,pdn1.pricebefdi as sap_goodsreceiptnoteline_pricebefdi\r\n",
							"    ,pdn1.docdate as sap_goodsreceiptnoteline_docdate\r\n",
							"    ,pdn1.project as sap_goodsreceiptnoteline_project\r\n",
							"    ,pdn1.vatprcnt as sap_goodsreceiptnoteline_vatprcnt\r\n",
							"    -- ,(pdn1.volume*-1) as sap_goodsreceiptnoteline_volume\r\n",
							"    ,pdn1.vatgroup as sap_goodsreceiptnoteline_vatgroup\r\n",
							"    ,(pdn1.vatsum*-1) as sap_goodsreceiptnoteline_vatamount\r\n",
							"    -- ,(pdn1.grssprofit*-1) as sap_goodsreceiptnoteline_grssprofit\r\n",
							"    ,pdn1.u_reason as sap_goodsreceiptnoteline_u_reason\r\n",
							"    -- ,pdn1.u_lane as sap_goodsreceiptnoteline_u_lane\r\n",
							"    ,pdn1.u_expenseitem as sap_goodsreceiptnoteline_u_expenseitem\r\n",
							"    ,pdn1.u_fueldate as sap_goodsreceiptnoteline_u_fueldate\r\n",
							"    ,pdn1.acctcode as sap_goodsreceiptnoteline_acctcode\r\n",
							"    ,'goodsreceiptnote' as sap_goodsreceiptnoteline_doccat\r\n",
							"    ,Right(LEFT(pdn1.itemcode,5),3) as sap_goodsreceiptnoteline_subdepotcode\r\n",
							"    ,pdn1.u_rate as sap_goodsreceiptnoteline_u_rate\r\n",
							"    ,pdn1.u_ir_number as sap_goodsreceiptnoteline_u_ir_number\r\n",
							"    ,t.discsum as sap_goodsreceiptnoteline_discsum\r\n",
							"\r\n",
							"FROM dboOPDN opdn\r\n",
							"LEFT JOIN dboPDN1 pdn1 on pdn1.docentry = opdn.docentry\r\n",
							"LEFT JOIN stgoodsreceiptnote_tmp t on t.docnum = opdn.docnum\r\n",
							"WHERE opdn.canceled = 'N' \r\n",
							"AND pdn1.linestatus = 'O'"
						],
						"outputs": [],
						"execution_count": 136
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stgoodsreceiptnote = spark.sql(\"SELECT * FROM stgoodsreceiptnote\")\r\n",
							"stgoodsreceiptnote.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stgoodsreceiptnote.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 137
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stpolookup\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    pdn1.linenum||'_'||opdn.docnum as sap_polookup_polookupid\r\n",
							"    ,pdn1.baseref as sap_polookup_baseref\r\n",
							"    ,opdn.docnum as sap_polookup_docnum\r\n",
							"    ,to_date(opdn.docdate,'yyyy-MM-dd') as sap_polookup_docdate\r\n",
							"FROM dboOPDN opdn\r\n",
							"LEFT JOIN dboPDN1 pdn1 on pdn1.docentry = opdn.docentry\r\n",
							""
						],
						"outputs": [],
						"execution_count": 138
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpolookup = spark.sql(\"SELECT * FROM stpolookup\")\r\n",
							"stpolookup.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stpolookup.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 139
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stgoodsreturn_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    orpd.docnum\r\n",
							"    ,(orpd.discsum*-1)/COUNT(rpd1.linenum) as discsum\r\n",
							"\r\n",
							"FROM dboORPD orpd\r\n",
							"LEFT JOIN dboRPD1 rpd1 on rpd1.docentry = orpd.docentry\r\n",
							"GROUP BY orpd.docnum, orpd.discsum"
						],
						"outputs": [],
						"execution_count": 140
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stgoodsreturn_tmp = spark.sql(\"SELECT * FROM stgoodsreturn_tmp\")"
						],
						"outputs": [],
						"execution_count": 141
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stgoodsreturn\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    '' as sap_goodsreturnline_polookupid\r\n",
							"    ,orpd.docentry as sap_goodsreturnheader_docentry\r\n",
							"    ,orpd.docnum as sap_goodsreturnheader_docnum\r\n",
							"    ,orpd.doctype as sap_goodsreturnheader_doctype\r\n",
							"    -- ,orpd.canceled as sap_goodsreturnheader_canceled\r\n",
							"    ,orpd.objtype as sap_goodsreturnheader_objtype\r\n",
							"    ,orpd.docdate as sap_goodsreturnheader_postingdate\r\n",
							"    ,orpd.docduedate as sap_goodsreturnheader_duedate\r\n",
							"    ,orpd.cardcode as sap_goodsreturnheader_cardcode\r\n",
							"    -- ,orpd.cardname as sap_goodsreturnheader_cardname\r\n",
							"    ,orpd.numatcard as sap_goodsreturnheader_cardref\r\n",
							"    ,orpd.discprcnt as sap_goodsreturnheader_discprcnt\r\n",
							"    ,orpd.discsum as sap_goodsreturnheader_discsum\r\n",
							"    ,orpd.doctotal as sap_goodsreturnheader_doctotal\r\n",
							"    ,orpd.comments as sap_goodsreturnheader_comments\r\n",
							"    ,orpd.transid as sap_goodsreturnheader_transid\r\n",
							"    -- ,orpd.usersign as sap_goodsreturnheader_usersign\r\n",
							"    -- ,orpd.u_depot as sap_goodsreturnheader_u_depot\r\n",
							"    -- ,orpd.u_usercode as sap_goodsreturnheader_u_usercode\r\n",
							"    ,orpd.u_expense_depot as sap_goodsreturnheader_u_expense_depot\r\n",
							"    -- ,orpd.u_transaction_date as sap_goodsreturnheader_u_transaction_date\r\n",
							"    -- ,orpd.rounddif as sap_goodsreturnheader_rounddif\r\n",
							"    -- ,orpd.rounding as sap_goodsreturnheader_rounding\r\n",
							"    -- ,rpd1.docentry as sap_goodsreturnline_docentry\r\n",
							"    ,rpd1.linenum as sap_goodsreturnline_linenum\r\n",
							"    ,rpd1.linestatus as sap_goodsreturnline_linestatus\r\n",
							"    ,rpd1.itemcode as sap_goodsreturnline_itemcode\r\n",
							"    ,rpd1.dscription as sap_goodsreturnline_dscription\r\n",
							"    ,rpd1.quantity as sap_goodsreturnline_quantity\r\n",
							"    ,rpd1.openqty as sap_goodsreturnline_openqty\r\n",
							"    ,rpd1.price as sap_goodsreturnline_price\r\n",
							"    ,rpd1.rate as sap_goodsreturnline_rate\r\n",
							"    ,rpd1.discprcnt as sap_goodsreturnline_discprcnt\r\n",
							"    ,rpd1.linetotal as sap_goodsreturnline_linetotal\r\n",
							"    ,rpd1.opensum as sap_goodsreturnline_opensum\r\n",
							"    ,rpd1.pricebefdi as sap_goodsreturnline_pricebefdi\r\n",
							"    ,rpd1.docdate as sap_goodsreturnline_docdate\r\n",
							"    ,rpd1.project as sap_goodsreturnline_project\r\n",
							"    ,rpd1.vatprcnt as sap_goodsreturnline_vatprcnt\r\n",
							"    -- ,rpd1.volume as sap_goodsreturnline_volume\r\n",
							"    ,rpd1.vatgroup as sap_goodsreturnline_vatgroup\r\n",
							"    ,rpd1.vatsum as sap_goodsreturnline_vatamount\r\n",
							"    -- ,rpd1.grssprofit as sap_goodsreturnline_grssprofit\r\n",
							"    ,rpd1.u_reason as sap_goodsreturnline_u_reason\r\n",
							"    -- ,rpd1.u_lane as sap_goodsreturnline_u_lane\r\n",
							"    ,rpd1.u_expenseitem as sap_goodsreturnline_u_expenseitem\r\n",
							"    ,rpd1.u_fueldate as sap_goodsreturnline_u_fueldate\r\n",
							"    ,rpd1.acctcode as sap_goodsreturnline_acctcode\r\n",
							"    ,'goodsreturn' as sap_goodsreturnline_doccat\r\n",
							"    ,Right(LEFT(rpd1.itemcode,5),3) as sap_goodsreturnline_subdepotcode\r\n",
							"    ,rpd1.u_rate as sap_goodsreturnline_u_rate\r\n",
							"    ,rpd1.u_ir_number as sap_goodsreturnline_u_ir_number\r\n",
							"    ,t.discsum as sap_goodsreturnline_discsum\r\n",
							"\r\n",
							"\r\n",
							"FROM dboORPD orpd\r\n",
							"LEFT JOIN dboRPD1 rpd1 on rpd1.docentry = orpd.docentry\r\n",
							"LEFT JOIN stgoodsreturn_tmp t on t.docnum = orpd.docnum\r\n",
							"WHERE orpd.canceled = 'N' \r\n",
							""
						],
						"outputs": [],
						"execution_count": 142
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stgoodsreturn = spark.sql(\"SELECT * FROM stgoodsreturn\")\r\n",
							"stgoodsreturn.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stgoodsreturn.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 143
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdocuments = stsalesinvoice.unionAll(stsalescredit).unionAll(stpurchaseinvoice).unionAll(stpurchasecredit).unionAll(stgoodsreceiptnote).unionAll(stgoodsreturn).unionAll(stpurchaseorder)"
						],
						"outputs": [],
						"execution_count": 144
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdocuments = stdocuments.withColumnRenamed(\"sap_salesinvoiceline_polookupid\",\"sap_documentsline_polookupid\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_docentry\",\"sap_documentsheader_docentry\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_docnum\",\"sap_documentsheader_docnum\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_doctype\",\"sap_documentsheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_objtype\",\"sap_documentsheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_postingdate\",\"sap_documentsheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_duedate\",\"sap_documentsheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_cardcode\",\"sap_documentsheader_cardcode\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_cardref\",\"sap_documentsheader_cardref\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_discprcnt\",\"sap_documentsheader_discprcnt\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_discsum\",\"sap_documentsheader_discsum\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_doctotal\",\"sap_documentsheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_comments\",\"sap_documentsheader_comments\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_transid\",\"sap_documentsheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceheader_u_expense_depot\",\"sap_documentsheader_u_expense_depot\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_linenum\",\"sap_documentsline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_linestatus\",\"sap_documentsline_linestatus\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_itemcode\",\"sap_documentsline_itemcode\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_dscription\",\"sap_documentsline_dscription\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_quantity\",\"sap_documentsline_quantity\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_openqty\",\"sap_documentsline_openqty\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_price\",\"sap_documentsline_price\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_rate\",\"sap_documentsline_rate\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_discprcnt\",\"sap_documentsline_discprcnt\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_linetotal\",\"sap_documentsline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_opensum\",\"sap_documentsline_opensum\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_pricebefdi\",\"sap_documentsline_pricebefdi\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_docdate\",\"sap_documentsline_docdate\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_project\",\"sap_documentsline_project\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_vatprcnt\",\"sap_documentsline_vatprcnt\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_vatgroup\",\"sap_documentsline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_vatamount\",\"sap_documentsline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_u_reason\",\"sap_documentsline_u_reason\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_u_expenseitem\",\"sap_documentsline_u_expenseitem\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_u_fueldate\",\"sap_documentsline_u_fueldate\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_acctcode\",\"sap_documentsline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_doccat\",\"sap_documentsline_doccat\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_subdepotcode\",\"sap_documentsline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_u_rate\",\"sap_documentsline_u_rate\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_u_ir_number\",\"sap_documentsline_u_ir_number\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceline_discsum\",\"sap_documentsline_discsum\")"
						],
						"outputs": [],
						"execution_count": 145
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdocuments.createOrReplaceTempView(\"stdocuments\")"
						],
						"outputs": [],
						"execution_count": 146
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdocuments = spark.sql(\"SELECT * FROM stdocuments\")"
						],
						"outputs": [],
						"execution_count": 147
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stdocuments.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stdocuments.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 151
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 149
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/08_DIST_STLoadParent')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "56880ee4-97de-4022-a15d-980f9613b01b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the stloadchild LMS Table\r\n",
							"# stloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadchild.parquet', format='parquet')\r\n",
							"# stloadchild.createOrReplaceTempView(\"stloadchild\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdispatch ORV Table\r\n",
							"# publicdispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
							"# publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicreportdistotmgntdispatchdt ORV Table\r\n",
							"# publicreportdistotmgntdispatchdt = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicreportdistotmgntdispatchdt.parquet', format='parquet')\r\n",
							"# publicreportdistotmgntdispatchdt.createOrReplaceTempView(\"publicreportdistotmgntdispatchdt\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stloadparent_tmp\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lc.lms_loadchild_parentloadid\r\n",
							"    ,sum(lc.lms_loadchild_aggrweight) as lms_loadchild_aggrweight\r\n",
							"    ,sum(lc.lms_loadchild_aggrchargeweight) as lms_loadchild_aggrchargeweight\r\n",
							"    ,sum(lc.lms_loadchild_aggrvolweight) as lms_loadchild_aggrvolweight\r\n",
							"    ,sum(lc.lms_loadchild_aggrvolumiserweight) as lms_loadchild_aggrvolumiserweight\r\n",
							"    ,sum(lc.lms_loadchild_aggrmaxweight) as lms_loadchild_aggrmaxweight\r\n",
							"    ,sum(lc.lms_loadchild_aggrnoparcels) as lms_loadchild_aggrnoparcels\r\n",
							"    ,sum(lc.lms_loadchild_aggrweightexclspecdel) as lms_loadchild_aggrweightexclspecdel\r\n",
							"    ,sum(lc.lms_loadchild_aggrchargeweightexclspecdel) as lms_loadchild_aggrchargeweightexclspecdel\r\n",
							"    ,sum(lc.lms_loadchild_aggrvolweightexclspecdel) as lms_loadchild_aggrvolweightexclspecdel\r\n",
							"    ,sum(lc.lms_loadchild_aggrvolumiserweightexclspecdel) as lms_loadchild_aggrvolumiserweightexclspecdel\r\n",
							"    ,sum(lc.lms_loadchild_aggrmaxweightexclspecdel) as lms_loadchild_aggrmaxweightexclspecdel\r\n",
							"    ,sum(lc.lms_loadchild_aggrnoparcelsexclspecdel) as lms_loadchild_aggrnoparcelsexclspecdel\r\n",
							"FROM stloadchild lc \r\n",
							"WHERE lc.lms_loadchild_parentloadid is not null\r\n",
							"GROUP BY lc.lms_loadchild_parentloadid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadparent_tmp = spark.sql(\"SELECT * FROM stloadparent_tmp\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stloadparent\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    t.lms_loadchild_parentloadid as  lms_loadparent_parentloadid \r\n",
							"    ,t.lms_loadchild_aggrweight  as  lms_loadparent_aggrweight \r\n",
							"    ,t.lms_loadchild_aggrchargeweight  as  lms_loadparent_aggrchargeweight\r\n",
							"    ,t.lms_loadchild_aggrvolweight  as  lms_loadparent_aggrvolweight\r\n",
							"    ,t.lms_loadchild_aggrvolumiserweight  as  lms_loadparent_aggrvolumiserweight\r\n",
							"    ,t.lms_loadchild_aggrmaxweight  as  lms_loadparent_aggrmaxweight\r\n",
							"    ,t.lms_loadchild_aggrnoparcels  as  lms_loadparent_aggrnoparcels\r\n",
							"    ,t.lms_loadchild_aggrweightexclspecdel  as  lms_loadparent_aggrweightexclspecdel\r\n",
							"    ,t.lms_loadchild_aggrchargeweightexclspecdel  as  lms_loadparent_aggrchargeweightexclspecdel\r\n",
							"    ,t.lms_loadchild_aggrvolweightexclspecdel  as  lms_loadparent_aggrvolweightexclspecdel\r\n",
							"    ,t.lms_loadchild_aggrvolumiserweightexclspecdel  as  lms_loadparent_aggrvolumiserweightexclspecdel\r\n",
							"    ,t.lms_loadchild_aggrmaxweightexclspecdel  as  lms_loadparent_aggrmaxweightexclspecdel\r\n",
							"    ,t.lms_loadchild_aggrnoparcelsexclspecdel  as  lms_loadparent_aggrnoparcelsexclspecdel\r\n",
							"    ,d.id as orv_dispatch_id\r\n",
							"    ,d.lmsid as orv_dispatch_lmsid\r\n",
							"    ,d.vid as orv_dispatch_vid\r\n",
							"    ,d.did as orv_dispatch_did\r\n",
							"    ,d.status as orv_dispatch_status\r\n",
							"    ,to_timestamp(d.startdate) as orv_dispatch_startdate\r\n",
							"    ,to_timestamp(d.stopdate) as orv_dispatch_stopdate\r\n",
							"    ,d.vehicletype as orv_dispatch_vehicletype\r\n",
							"    ,d.uid as orv_dispatch_uid\r\n",
							"    ,to_timestamp(d.estdepdate) as orv_dispatch_estdepdate\r\n",
							"    ,d.trailer as orv_dispatch_trailer\r\n",
							"    ,d.trailer2 as orv_dispatch_trailer2\r\n",
							"    ,d.fromlocid as orv_dispatch_fromlocid\r\n",
							"    ,d.tolocid as orv_dispatch_tolocid\r\n",
							"    ,d.site as orv_dispatch_site\r\n",
							"    ,to_timestamp(d.lastupdate) as orv_dispatch_lastupdate\r\n",
							"    ,d.etastatus as orv_dispatch_etastatus\r\n",
							"    ,d.startinglat as orv_dispatch_startinglat\r\n",
							"    ,d.startinglng as orv_dispatch_startinglng\r\n",
							"    ,d.endinglat as orv_dispatch_endinglat\r\n",
							"    ,d.endinglng as orv_dispatch_endinglng\r\n",
							"    ,d.startingfrom as orv_dispatch_startingfrom\r\n",
							"    ,d.goingto as orv_dispatch_goingto\r\n",
							"    ,d.importissue as orv_dispatch_importissue\r\n",
							"    ,to_timestamp(d.insdate) as orv_dispatch_insdate\r\n",
							"    ,to_timestamp(d.estarrdate) as orv_dispatch_estarrdate\r\n",
							"    ,d.duration as orv_dispatch_duration\r\n",
							"    ,d.distance as orv_dispatch_distance\r\n",
							"    ,d.cost as orv_dispatch_cost\r\n",
							"    ,d.stoplat as orv_dispatch_stoplat\r\n",
							"    ,d.stoplng as orv_dispatch_stoplng\r\n",
							"    ,d.stopreason as orv_dispatch_stopreason\r\n",
							"    ,d.startodo as orv_dispatch_startodo\r\n",
							"    ,d.stopodo as orv_dispatch_stopodo\r\n",
							"    ,d.expduration as orv_dispatch_expduration\r\n",
							"    ,d.expdistance as orv_dispatch_expdistance\r\n",
							"    ,d.expcost as orv_dispatch_expcost\r\n",
							"    ,d.collectionid as orv_dispatch_collectionid\r\n",
							"    ,d.crew as orv_dispatch_crew\r\n",
							"    ,d.crewnames as orv_dispatch_crewnames\r\n",
							"    ,d.bocloseuid as orv_dispatch_bocloseuid\r\n",
							"    ,d.routing as orv_dispatch_routing\r\n",
							"    ,d.swapct as orv_dispatch_swapct\r\n",
							"    ,d.debriefed as orv_dispatch_debriefed\r\n",
							"    ,d.debriefnotes as orv_dispatch_debriefnotes\r\n",
							"    ,d.bopin as orv_dispatch_bopin\r\n",
							"    ,d.cpicost as orv_dispatch_cpicost\r\n",
							"    ,d.labourcost as orv_dispatch_labourcost\r\n",
							"    ,d.maintcost as orv_dispatch_maintcost\r\n",
							"    ,d.inscost as orv_dispatch_inscost\r\n",
							"    ,d.tollcost as orv_dispatch_tollcost\r\n",
							"    ,d.fuelcost as orv_dispatch_fuelcost\r\n",
							"    ,d.internal as orv_dispatch_internal\r\n",
							"    ,d.childids as orv_dispatch_childids\r\n",
							"    ,d.guid as orv_dispatch_guid\r\n",
							"    ,d.timedefinite as orv_dispatch_timedefinite\r\n",
							"    ,d.orvcode as orv_dispatch_orvcode\r\n",
							"    ,to_timestamp(d.tsstopdepoenter) as orv_dispatch_tsstopdepoenter\r\n",
							"    ,to_timestamp(d.tsstartdepoexit) as orv_dispatch_tsstartdepoexit\r\n",
							"    ,d.reroutect as orv_dispatch_reroutect\r\n",
							"    ,to_timestamp(d.actualarrdate) as orv_dispatch_actualarrdate\r\n",
							"    ,d.physicalstartlat as orv_dispatch_physicalstartlat\r\n",
							"    ,d.physicalstartlng as orv_dispatch_physicalstartlng\r\n",
							"    ,to_timestamp(d.tsstartdepoexitapp) as orv_dispatch_tsstartdepoexitapp\r\n",
							"    ,to_timestamp(d.tsstopdepoenterapp) as orv_dispatch_tsstopdepoenterapp\r\n",
							"    ,to_timestamp(d.uncanceldate) as orv_dispatch_uncanceldate\r\n",
							"    ,d.uncancelusername as orv_dispatch_uncancelusername\r\n",
							"    ,d.lmsdebrifed as orv_dispatch_lmsdebrifed\r\n",
							"    ,d.reviseddebrief as orv_dispatch_reviseddebrief\r\n",
							"    ,d.lhtransporter as orv_dispatch_lhtransporter\r\n",
							"    ,d.triptype as orv_dispatch_triptype\r\n",
							"    ,d.startreason as orv_dispatch_startreason\r\n",
							"    ,d.route as orv_dispatch_route\r\n",
							"    ,d.tmstraileridentify as orv_dispatch_tmstraileridentify\r\n",
							"    ,d.tmstrailer2identify as orv_dispatch_tmstrailer2identify\r\n",
							"    ,d.tmscontroller as orv_dispatch_tmscontroller\r\n",
							"    ,d.routekey as orv_dispatch_routekey\r\n",
							"    ,d.courierid as orv_dispatch_courierid\r\n",
							"    ,to_timestamp(d.originalstartdate) as orv_dispatch_originalstartdate\r\n",
							"    ,to_timestamp(d.originalextarrival) as orv_dispatch_originalextarrival\r\n",
							"    ,d.recomputeoriginals as orv_dispatch_recomputeoriginals\r\n",
							"    ,d.originalextdistance as orv_dispatch_originalextdistance\r\n",
							"    ,d.originalextduration as orv_dispatch_originalextduration\r\n",
							"    ,to_timestamp(d.moddate) as orv_dispatch_moddate\r\n",
							"    ,d.tmsmode as orv_dispatch_tmsmode\r\n",
							"    ,d.driversignature as orv_dispatch_driversignature\r\n",
							"    ,to_timestamp(x.exitdepot) as orv_dispatch_exitdepot\r\n",
							"\t,to_timestamp(x.enterdepot) as orv_dispatch_enterdepot\r\n",
							"\t,to_timestamp(x.fdeliverydate) as orv_dispatch_fdeliverydate\r\n",
							"\t,to_timestamp(x.fdeltsgeofenceenter) as orv_dispatch_fdeltsgeofenceenter\r\n",
							"\t,to_timestamp(x.fdeltsscanningstart) as orv_dispatch_fdeltsscanningstart\r\n",
							"\t,to_timestamp(x.fdeltsscanningstop) as orv_dispatch_fdeltsscanningstop\r\n",
							"\t,to_timestamp(x.fdeltspodsignature) as orv_dispatch_fdeltspodsignature\r\n",
							"\t,x.fdelnumprcls as orv_dispatch_fdelnumprcls\r\n",
							"\t,to_timestamp(x.deliverydate) as orv_dispatch_deliverydate\r\n",
							"\t,to_timestamp(x.ldeltsgeofenceenter) as orv_dispatch_ldeltsgeofenceenter\r\n",
							"\t,to_timestamp(x.ldeltsscanningstart) as orv_dispatch_ldeltsscanningstart\r\n",
							"\t,to_timestamp(x.ldeltsscanningstop) as orv_dispatch_ldeltsscanningstop\r\n",
							"\t,to_timestamp(x.ldeltspodsignature) as orv_dispatch_ldeltspodsignature\r\n",
							"\t,x.ldelnumprcls as orv_dispatch_ldelnumprcls\r\n",
							"\t,x.fromdelid as orv_dispatch_fromdelid\r\n",
							"\t,x.todelid as orv_dispatch_todelid\r\n",
							"\t,x.distancemeters as orv_dispatch_distancemeters\r\n",
							"\t,(x.durationseconds)/3600 as orv_dispatch_durationhours\r\n",
							"\t,to_timestamp(x.timeduebackatdepot) as orv_dispatch_timeduebackatdepot\r\n",
							"\t,to_timestamp(x.lastcanceleddeltodepotime) as orv_dispatch_lastcanceleddeltodepotime\r\n",
							"    ,(d.stopdate - coalesce(x.timeduebackatdepot,x.lastcanceleddeltodepotime))/3600  orv_dispatch_difstopdatevstimedueback\r\n",
							"    ,CASE \r\n",
							"        WHEN to_date(to_timestamp(d.startdate)) = to_date(to_timestamp(d.stopdate)) THEN 1\r\n",
							"        ELSE 0\r\n",
							"    END AS orv_dispatch_completesameday\r\n",
							"    \r\n",
							"\r\n",
							"FROM stloadparent_tmp t\r\n",
							"LEFT JOIN publicdispatch d on d.lmsid = t.lms_loadchild_parentloadid and d.vehicletype = 6\r\n",
							"LEFT JOIN publicreportdistotmgntdispatchdt x on x.dispatchid = d.id"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadparent = spark.sql(\"SELECT * FROM stloadparent\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stloadparent.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/08_LH_STTrip')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "16159e11-4004-4348-a274-7791db26d4c6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						}
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the publictrip TMS Table\r\n",
							"# publictrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrip.parquet', format='parquet')\r\n",
							"# publictrip.createOrReplaceTempView(\"publictrip\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdispatch ORV Table\r\n",
							"# publicdispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
							"# publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolhtrip LMS Table\r\n",
							"# dbolhtrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_trip.parquet', format='parquet')\r\n",
							"# dbolhtrip.createOrReplaceTempView(\"dbolhtrip\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolhtrackstatus LMS Table\r\n",
							"# dbolhtrackstatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_trackstatus.parquet', format='parquet')\r\n",
							"# dbolhtrackstatus.createOrReplaceTempView(\"dbolhtrackstatus\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolhbookingspertrip TMS Table\r\n",
							"# dbolhbookingspertrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_bookingspertrip.parquet', format='parquet')\r\n",
							"# dbolhbookingspertrip.createOrReplaceTempView(\"dbolhbookingspertrip\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolhbooking TMS Table\r\n",
							"# dbolhbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_booking.parquet', format='parquet')\r\n",
							"# dbolhbooking.createOrReplaceTempView(\"dbolhbooking\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolhtrailersize TMS Table\r\n",
							"# dbolhtrailersize = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_trailersize.parquet', format='parquet')\r\n",
							"# dbolhtrailersize.createOrReplaceTempView(\"dbolhtrailersize\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolh_3pl TMS Table\r\n",
							"# dbolh_3pl = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_3pl.parquet', format='parquet')\r\n",
							"# dbolh_3pl.createOrReplaceTempView(\"dbolh_3pl\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehicle TMS Table\r\n",
							"# dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"# dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodriver TMS Table\r\n",
							"# dbodriver = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodriver.parquet', format='parquet')\r\n",
							"# dbodriver.createOrReplaceTempView(\"dbodriver\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehiclebasic MD Table\r\n",
							"# dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"# dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbopeoplebasic MD Table\r\n",
							"# dbopeoplebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeoplebasic.parquet', format='parquet')\r\n",
							"# dbopeoplebasic.createOrReplaceTempView(\"dbopeoplebasic\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttrip_tms\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lt.id as tms_trip_id\r\n",
							"    ,lt.driverid as tms_trip_driverid\r\n",
							"    ,UPPER(pb.firstname||'_'||pb.lastname) tms_trip_drivername\r\n",
							"    ,lt.vehicleid as tms_trip_vehicleid\r\n",
							"    ,vbv.fleetcode as tms_trip_vehiclefleetcode\r\n",
							"    ,lt.trailerid as tms_trip_trailerid\r\n",
							"    ,vbt1.fleetcode as tms_trip_trailer1fleetcode\r\n",
							"    ,lt.sectrailerid as tms_trip_sectrailerid\r\n",
							"    ,vbt2.fleetcode as tms_trip_trailer2fleetcode\r\n",
							"    ,CAST(CAST(LEFT(vbt1.vehicletrailersize,2) AS int)+CAST(LEFT(vbt2.vehicletrailersize,2) AS int) AS STRING)||' '||'METER' as tms_trip_trailersize\r\n",
							"    ,lt.status as tms_trip_status\r\n",
							"    ,lt.routeid as tms_trip_routeid\r\n",
							"    ,lt.opsrouteid as tms_trip_opsrouteid\r\n",
							"    ,lt.startfromaddress as tms_trip_startfromaddress\r\n",
							"    ,lt.startfromlat as tms_trip_startfromlat\r\n",
							"    ,lt.startfromlng as tms_trip_startfromlng\r\n",
							"    ,to_timestamp(lt.dispatchdate) as tms_trip_dispatchdate\r\n",
							"    ,lt.stopaddress as tms_trip_stopaddress\r\n",
							"    ,lt.stoplat as tms_trip_stoplat\r\n",
							"    ,lt.stoplng as tms_trip_stoplng\r\n",
							"    ,to_timestamp(lt.insdate) as tms_trip_insdate\r\n",
							"    ,to_timestamp(lt.moddate) as tms_trip_moddate\r\n",
							"    ,lt.insby as tms_trip_insby\r\n",
							"    ,lt.onrouteid as tms_trip_onrouteid\r\n",
							"    ,lt.uuid as tms_trip_uuid\r\n",
							"    ,lt.insbyuser as tms_trip_insbyuser\r\n",
							"    ,lt.thirdpartyid as tms_trip_thirdpartyid\r\n",
							"    ,lt.timehash as tms_trip_timehash\r\n",
							"    ,lt.onroutestatus as tms_trip_onroutestatus\r\n",
							"    ,to_timestamp(lt.lastupdate) as tms_trip_lastupdate\r\n",
							"    ,lt.lastlng as tms_trip_lastlng\r\n",
							"    ,lt.lastlat as tms_trip_lastlat\r\n",
							"    ,lt.controllerid as tms_trip_controllerid\r\n",
							"    ,lt.trackstatus as tms_trip_trackstatus\r\n",
							"    ,lt.lastrackid as tms_trip_lastrackid\r\n",
							"    ,lt.customer as tms_trip_customer\r\n",
							"    ,lt.bookings as tms_trip_bookings\r\n",
							"    ,lt.controller as tms_trip_controller\r\n",
							"    ,lt.transporter as tms_trip_transporter\r\n",
							"    ,lt.legacyid as tms_trip_legacyid\r\n",
							"    ,lt.originatedfrom as tms_trip_originatedfrom\r\n",
							"    ,lt.local as tms_trip_local\r\n",
							"    ,to_timestamp(lt.startdate) as tms_trip_startdate\r\n",
							"    ,to_timestamp(lt.enddate) as tms_trip_enddate\r\n",
							"    ,to_timestamp(lt.actualdeliverydate) as tms_trip_actualdeliverydate\r\n",
							"    ,lt.note as tms_trip_note\r\n",
							"    ,to_timestamp(lt.deliverydate) as tms_trip_deliverydate\r\n",
							"    ,lt.internalexternal as tms_trip_internalexternal\r\n",
							"    ,lt.pickupstartaddress as tms_trip_pickupstartaddress\r\n",
							"    ,to_timestamp(lt.originaletadate) as tms_trip_originaletadate\r\n",
							"    ,to_timestamp(lt.currentetadate) as tms_trip_currentetadate\r\n",
							"    ,to_timestamp(lt.lastetaupdate) as tms_trip_lastetaupdate\r\n",
							"    ,'v2' as tms_trip_source\r\n",
							"\r\n",
							"FROM publictrip lt\r\n",
							"LEFT JOIN dbovehiclebasic vbv on vbv.uid = lt.vehicleid\r\n",
							"LEFT JOIN dbovehiclebasic vbt1 on vbt1.uid = lt.trailerid\r\n",
							"LEFT JOIN dbovehiclebasic vbt2 on vbt2.uid = lt.sectrailerid\r\n",
							"LEFT JOIN dbopeoplebasic pb on pb.uid = lt.driverid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttrip_tms = spark.sql(\"SELECT * FROM sttrip_tms\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stthirdparty_tmp\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"    bpt.tripid\r\n",
							"    ,CASE \r\n",
							"        WHEN lb.id = 65190 THEN 'TANZER TRANSPORT' \r\n",
							"        WHEN lb.id = 70593 THEN 'TAURAS TRANS CC' \r\n",
							"        WHEN lb.id = 72599 THEN 'TRANSSA TRASNPORTERS' \r\n",
							"        ELSE lp.name\r\n",
							"    END as name\r\n",
							"FROM dbolhbooking lb \r\n",
							"LEFT JOIN  dbolhbookingspertrip bpt on bpt.BookingID = lb.ID \r\n",
							"LEFT JOIN  dbolh_3pl lp on lp.id = lb.3PL_ID \r\n",
							"WHERE bpt.tripid>0\r\n",
							"AND lb.allocationdate > '2020-08-31 23:59:59.999'\r\n",
							"AND lb.bookingtypeid in (1,3)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stthirdparty_tmp = spark.sql(\"SELECT * FROM stthirdparty_tmp\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttrip_lms_tmp0\r\n",
							"AS\r\n",
							"SELECT DISTINCT \r\n",
							"t.id\r\n",
							",t.trailerid\r\n",
							",v.fleetno\r\n",
							",CASE \t\r\n",
							"\tWHEN lts.Description = '4 Meter' THEN 1\r\n",
							"\tWHEN lts.Description = '6 Meter' THEN 2\r\n",
							"\tWHEN lts.Description = '12 Meter' THEN 3\r\n",
							"\tWHEN lts.Description = '15 Meter' THEN 4\r\n",
							"\tWHEN lts.Description = '18 Meter' THEN 5\r\n",
							"\t\r\n",
							"END as Trailersize\r\n",
							",CAST(LEFT(lts.Description,2) AS int) as sumsize\r\n",
							",ROW_NUMBER() OVER (\r\n",
							"          PARTITION BY CAST(LEFT(lts.Description,2) AS int) \r\n",
							"          ORDER BY CAST(LEFT(lts.Description,2) AS int) DESC) rownum\r\n",
							"\r\n",
							"from dboLHTrip t \r\n",
							"LEFT JOIN dbovehicle v on v.id = t.TrailerID\r\n",
							"LEFT JOIN dbolhbookingspertrip lbpt on lbpt.TripID = t.ID \r\n",
							"LEFT JOIN dbolhbooking lb on lb.id = lbpt.BookingID \r\n",
							"LEFT JOIN dbolhtrailersize lts on lts.id =  lb.TrailerSizeID  \r\n",
							"\r\n",
							"WHERE lb.allocationdate > '2020-08-31 23:59:59.999'\r\n",
							"AND lb.bookingtypeid in (1,3)\r\n",
							"AND lbpt.tripid>0\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttrip_lms_tmp0 = spark.sql(\"SELECT * FROM sttrip_lms_tmp0\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttrip_lms_tmp1\r\n",
							"AS\r\n",
							"SELECT DISTINCT \r\n",
							"*\r\n",
							"FROM sttrip_lms_tmp0\r\n",
							"WHERE rownum = 1"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttrip_lms_tmp1 = spark.sql(\"SELECT * FROM sttrip_lms_tmp1\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttrip_lms_tmp2\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"DISTINCT\r\n",
							"t.id\r\n",
							",t.TrailerID\r\n",
							",t.FleetNo\r\n",
							",MAX(Trailersize) Trailersize\r\n",
							",CASE \r\n",
							"\tWHEN MAX(Trailersize) = 5 and sum(sumsize) > 18 THEN 18\r\n",
							"\tWHEN MAX(Trailersize) = 4 and sum(sumsize) > 18 THEN 15\r\n",
							"\tELSE SUM(sumsize)\r\n",
							"END as sumsize\r\n",
							"FROM sttrip_lms_tmp1 t\r\n",
							"GROUP BY\r\n",
							"t.id\r\n",
							",t.TrailerID\r\n",
							",t.FleetNo\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttrip_lms_tmp2 = spark.sql(\"SELECT * FROM sttrip_lms_tmp2\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttrip_lms_tmp3\r\n",
							"AS\r\n",
							"SELECT DISTINCT \r\n",
							"lt.id\r\n",
							",CASE \r\n",
							"\tWHEN lbpt.tripid in (2188,5563,7070,7167,7557,8361,8543,8647,9231,10050,10161,11478,11495,13024,16738,16977,17105,17112,17436,17930,21970,39539,44340,44572,61574,62471) THEN 3\r\n",
							"\tELSE lb.BookingTypeID \r\n",
							"END as BookingTypeID\r\n",
							"\r\n",
							"\r\n",
							"FROM dbolhbookingspertrip lbpt \r\n",
							"LEFT JOIN dboLHTrip lt on lt.ID  = lbpt.tripid \r\n",
							"LEFT JOIN dbolhbooking lb on lb.id = lbpt.bookingid\r\n",
							"WHERE lb.BookingTypeID in (1,3)\r\n",
							"AND lt.id IS NOT NULL\r\n",
							"AND lb.allocationdate > '2020-08-31 23:59:59.999'\r\n",
							"AND lb.bookingtypeid in (1,3)\r\n",
							"AND lbpt.tripid >0"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttrip_lms_tmp3 = spark.sql(\"SELECT * FROM sttrip_lms_tmp3\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttrip_lms_tmp4\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"a.id\r\n",
							",trailerid\r\n",
							",fleetno\r\n",
							",trailersize\r\n",
							",sumsize\r\n",
							",bookingtypeid\r\n",
							"FROM  sttrip_lms_tmp2 a\r\n",
							"LEFT JOIN  sttrip_lms_tmp3 b on b.id = a.id\r\n",
							"ORDER BY sumsize desc\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttrip_lms_tmp4 = spark.sql(\"SELECT * FROM sttrip_lms_tmp4\")"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttrip_lms\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    (lt.id)*-1 as tms_trip_id\r\n",
							"    ,(x.driverid)*-1 as tms_trip_driverid\r\n",
							"    ,UPPER((d.fname||'_'||d.surname)) tms_trip_drivername\r\n",
							"    ,(x.vehicleid)*-1 as tms_trip_vehicleid\r\n",
							"    ,v.fleetno as tms_trip_vehiclefleetcode\r\n",
							"    ,(lt.trailerid)*-1 as tms_trip_trailerid\r\n",
							"    ,t1.fleetno as tms_trip_trailer1fleetcode\r\n",
							"    ,(x.trailer2id)*-1 as tms_trip_sectrailerid\r\n",
							"    ,t2.fleetno as tms_trip_trailer2fleetcode\r\n",
							"    ,CAST(lt.sumsize AS STRING)||' '||'METER' AS tms_trip_trailersize\r\n",
							"    ,ts.description as tms_trip_status\r\n",
							"    ,null as tms_trip_routeid\r\n",
							"    ,(x.routeid)*-1 as tms_trip_opsrouteid\r\n",
							"    ,x.dispatchaddress as tms_trip_startfromaddress\r\n",
							"    ,x.dispatchlongitude as tms_trip_startfromlat\r\n",
							"    ,x.dispatchlatitude as tms_trip_startfromlng\r\n",
							"    ,to_timestamp(coalesce(x.dispatchdate,x.cdate)) as tms_trip_dispatchdate\r\n",
							"    ,x.destinationaddress as tms_trip_stopaddress\r\n",
							"    ,x.destinationlongitude as tms_trip_stoplat\r\n",
							"    ,x.destinationlatitude as tms_trip_stoplng\r\n",
							"    ,null as tms_trip_insdate\r\n",
							"    ,null as tms_trip_moddate\r\n",
							"    ,null as tms_trip_insby\r\n",
							"    ,null as tms_trip_onrouteid\r\n",
							"    ,(x.userid)*-1 as tms_trip_uuid\r\n",
							"    ,null as tms_trip_insbyuser\r\n",
							"    ,null as tms_trip_thirdpartyid\r\n",
							"    ,null as tms_trip_timehash\r\n",
							"    ,null as tms_trip_onroutestatus\r\n",
							"    ,null as tms_trip_lastupdate\r\n",
							"    ,null as tms_trip_lastlng\r\n",
							"    ,null as tms_trip_lastlat\r\n",
							"    ,null as tms_trip_controllerid\r\n",
							"    ,null as tms_trip_trackstatus\r\n",
							"    ,null as tms_trip_lastrackid\r\n",
							"    ,null as tms_trip_customer\r\n",
							"    ,null as tms_trip_bookings\r\n",
							"    ,null as tms_trip_controller\r\n",
							"    ,CASE \r\n",
							"        WHEN lt.id in(68453,66450,61094) THEN 'CITY LINEHAUL'\r\n",
							"        ELSE coalesce(tp.name,'CITY LINEHAUL') \r\n",
							"    END as tms_trip_transporter\r\n",
							"    ,null as tms_trip_legacyid\r\n",
							"    ,null as tms_trip_originatedfrom\r\n",
							"    ,null as tms_trip_local\r\n",
							"    ,null as tms_trip_startdate\r\n",
							"    ,null as tms_trip_enddate\r\n",
							"    ,null as tms_trip_actualdeliverydate\r\n",
							"    ,null as tms_trip_note\r\n",
							"    ,null as tms_trip_deliverydate\r\n",
							"    ,null as tms_trip_internalexternal\r\n",
							"    ,null as tms_trip_originaletadate\r\n",
							"    ,null as tms_trip_currentetadate\r\n",
							"    ,null as tms_trip_lastetaupdate\r\n",
							"    ,null as tms_trip_pickupstartaddress   \r\n",
							"    ,'v1' as tms_trip_source\r\n",
							"FROM sttrip_lms_tmp4 lt\r\n",
							"LEFT JOIN dboLHTrip x on x.id = lt.id\r\n",
							"LEFT JOIN dboLHTrackStatus ts on ts.id = x.tripstatusid\r\n",
							"LEFT JOIN stthirdparty_tmp tp on tp.tripid = lt.id\r\n",
							"-- LEFT JOIN dbolhbookingspertrip bpt on bpt.tripid = lt.id\r\n",
							"-- LEFT JOIN dbolhbooking lb on lb.id = bpt.bookingid\r\n",
							"LEFT JOIN dbovehicle v on v.id = x.vehicleid\r\n",
							"LEFT JOIN dbovehicle t1 on t1.id = x.trailerid\r\n",
							"LEFT JOIN dbovehicle t2 on t1.id = x.trailer2id\r\n",
							"LEFT JOIN dbodriver d on d.id = x.driverid\r\n",
							"\r\n",
							"-- WHERE lb.allocationdate > '2020-08-31 23:59:59.999'\r\n",
							"-- AND lb.bookingtypeid in (1,3)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttrip_lms = spark.sql(\"SELECT * FROM sttrip_lms\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttrip_tmp = sttrip_tms.unionByName(sttrip_lms, allowMissingColumns = True)\r\n",
							"sttrip_tmp.createOrReplaceTempView(\"sttrip_tmp\")"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttrip\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    st.*\r\n",
							"    ,d.id as orv_dispatch_id\r\n",
							"    ,d.lmsid as orv_dispatch_lmsid\r\n",
							"    ,d.vid as orv_dispatch_vid\r\n",
							"    ,d.did as orv_dispatch_did\r\n",
							"    ,d.status as orv_dispatch_status\r\n",
							"    ,to_timestamp(d.startdate) as orv_dispatch_startdate\r\n",
							"    ,to_timestamp(d.stopdate) as orv_dispatch_stopdate\r\n",
							"    ,d.vehicletype as orv_dispatch_vehicletype\r\n",
							"    ,d.uid as orv_dispatch_uid\r\n",
							"    ,to_timestamp(d.estdepdate) as orv_dispatch_estdepdate\r\n",
							"    ,d.trailer as orv_dispatch_trailer\r\n",
							"    ,d.trailer2 as orv_dispatch_trailer2\r\n",
							"    ,d.fromlocid as orv_dispatch_fromlocid\r\n",
							"    ,d.tolocid as orv_dispatch_tolocid\r\n",
							"    ,d.site as orv_dispatch_site\r\n",
							"    ,to_timestamp(d.lastupdate) as orv_dispatch_lastupdate\r\n",
							"    ,d.etastatus as orv_dispatch_etastatus\r\n",
							"    ,d.startinglat as orv_dispatch_startinglat\r\n",
							"    ,d.startinglng as orv_dispatch_startinglng\r\n",
							"    ,d.endinglat as orv_dispatch_endinglat\r\n",
							"    ,d.endinglng as orv_dispatch_endinglng\r\n",
							"    ,d.startingfrom as orv_dispatch_startingfrom\r\n",
							"    ,d.goingto as orv_dispatch_goingto\r\n",
							"    ,d.importissue as orv_dispatch_importissue\r\n",
							"    ,to_timestamp(d.insdate) as orv_dispatch_insdate\r\n",
							"    ,to_timestamp(d.estarrdate) as orv_dispatch_estarrdate\r\n",
							"    ,d.duration as orv_dispatch_duration\r\n",
							"    ,d.distance as orv_dispatch_distance\r\n",
							"    ,d.cost as orv_dispatch_cost\r\n",
							"    ,d.stoplat as orv_dispatch_stoplat\r\n",
							"    ,d.stoplng as orv_dispatch_stoplng\r\n",
							"    ,d.stopreason as orv_dispatch_stopreason\r\n",
							"    ,d.startodo as orv_dispatch_startodo\r\n",
							"    ,d.stopodo as orv_dispatch_stopodo\r\n",
							"    ,d.expduration as orv_dispatch_expduration\r\n",
							"    ,d.expdistance as orv_dispatch_expdistance\r\n",
							"    ,d.expcost as orv_dispatch_expcost\r\n",
							"    ,d.collectionid as orv_dispatch_collectionid\r\n",
							"    ,d.crew as orv_dispatch_crew\r\n",
							"    ,d.crewnames as orv_dispatch_crewnames\r\n",
							"    ,d.bocloseuid as orv_dispatch_bocloseuid\r\n",
							"    ,d.routing as orv_dispatch_routing\r\n",
							"    ,d.swapct as orv_dispatch_swapct\r\n",
							"    ,d.debriefed as orv_dispatch_debriefed\r\n",
							"    ,d.debriefnotes as orv_dispatch_debriefnotes\r\n",
							"    ,d.bopin as orv_dispatch_bopin\r\n",
							"    ,d.cpicost as orv_dispatch_cpicost\r\n",
							"    ,d.labourcost as orv_dispatch_labourcost\r\n",
							"    ,d.maintcost as orv_dispatch_maintcost\r\n",
							"    ,d.inscost as orv_dispatch_inscost\r\n",
							"    ,d.tollcost as orv_dispatch_tollcost\r\n",
							"    ,d.fuelcost as orv_dispatch_fuelcost\r\n",
							"    ,d.internal as orv_dispatch_internal\r\n",
							"    ,d.childids as orv_dispatch_childids\r\n",
							"    ,d.guid as orv_dispatch_guid\r\n",
							"    ,d.timedefinite as orv_dispatch_timedefinite\r\n",
							"    ,d.orvcode as orv_dispatch_orvcode\r\n",
							"    ,to_timestamp(d.tsstopdepoenter) as orv_dispatch_tsstopdepoenter\r\n",
							"    ,to_timestamp(d.tsstartdepoexit) as orv_dispatch_tsstartdepoexit\r\n",
							"    ,d.reroutect as orv_dispatch_reroutect\r\n",
							"    ,to_timestamp(d.actualarrdate) as orv_dispatch_actualarrdate\r\n",
							"    ,d.physicalstartlat as orv_dispatch_physicalstartlat\r\n",
							"    ,d.physicalstartlng as orv_dispatch_physicalstartlng\r\n",
							"    ,to_timestamp(d.tsstartdepoexitapp) as orv_dispatch_tsstartdepoexitapp\r\n",
							"    ,to_timestamp(d.tsstopdepoenterapp) as orv_dispatch_tsstopdepoenterapp\r\n",
							"    ,to_timestamp(d.uncanceldate) as orv_dispatch_uncanceldate\r\n",
							"    ,d.uncancelusername as orv_dispatch_uncancelusername\r\n",
							"    ,d.lmsdebrifed as orv_dispatch_lmsdebrifed\r\n",
							"    ,d.reviseddebrief as orv_dispatch_reviseddebrief\r\n",
							"    ,d.lhtransporter as orv_dispatch_lhtransporter\r\n",
							"    ,d.triptype as orv_dispatch_triptype\r\n",
							"    ,d.startreason as orv_dispatch_startreason\r\n",
							"    ,d.route as orv_dispatch_route\r\n",
							"    ,d.tmstraileridentify as orv_dispatch_tmstraileridentify\r\n",
							"    ,d.tmstrailer2identify as orv_dispatch_tmstrailer2identify\r\n",
							"    ,d.tmscontroller as orv_dispatch_tmscontroller\r\n",
							"    ,d.routekey as orv_dispatch_routekey\r\n",
							"    ,d.courierid as orv_dispatch_courierid\r\n",
							"    ,to_timestamp(d.originalstartdate) as orv_dispatch_originalstartdate\r\n",
							"    ,to_timestamp(d.originalextarrival) as orv_dispatch_originalextarrival\r\n",
							"    ,d.recomputeoriginals as orv_dispatch_recomputeoriginals\r\n",
							"    ,d.originalextdistance as orv_dispatch_originalextdistance\r\n",
							"    ,d.originalextduration as orv_dispatch_originalextduration\r\n",
							"    ,to_timestamp(d.moddate) as orv_dispatch_moddate\r\n",
							"    ,d.tmsmode as orv_dispatch_tmsmode\r\n",
							"    ,d.driversignature as orv_dispatch_driversignature\r\n",
							"    ,(coalesce(coalesce(d.tsstopdepoenterapp,d.tsstopdepoenter),to_unix_timestamp(st.tms_trip_enddate)) - to_unix_timestamp(st.tms_trip_originaletadate)) as tms_trip_appduration\r\n",
							"    ,(d.stopdate - d.startdate) as tms_trip_driverduration\r\n",
							"    ,(to_unix_timestamp(st.tms_trip_enddate) - to_unix_timestamp(st.tms_trip_startdate)) as tms_trip_controlroomduration\r\n",
							"    ,CASE \r\n",
							"        WHEN coalesce(coalesce(d.tsstopdepoenterapp,d.tsstopdepoenter),to_unix_timestamp(st.tms_trip_enddate)) is null THEN 'unknown'\r\n",
							"        WHEN coalesce(coalesce(d.tsstopdepoenterapp,d.tsstopdepoenter),to_unix_timestamp(st.tms_trip_enddate)) < to_unix_timestamp(st.tms_trip_originaletadate) THEN 'ontime'\r\n",
							"        ELSE 'late'\r\n",
							"    END tms_trip_arrivedontime\r\n",
							"   \r\n",
							"FROM sttrip_tmp st\r\n",
							"LEFT JOIN publicDispatch d on d.lmsid = st.tms_trip_id and d.vehicletype = 2 and tmsmode = 2"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttrip = spark.sql(\"SELECT * FROM sttrip\")"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sttrip.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/sttrip.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/08_STManualJournals')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "MANUAL JOURNAL\nDIRECT POSTINGS\nGENERAL JOURNAL\nDISCOUNT JOURNAL\nSALES INVOICES INVENTORY\nPURCHASE PRICE VARIANCE\nCOGS",
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "3e6d5291-32f4-4fc9-9838-592d7c899aff"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 118
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dboOJDT SAP Table\r\n",
							"# dboOJDT = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboOJDT.parquet', format='parquet')\r\n",
							"# dboOJDT.createOrReplaceTempView(\"dboOJDT\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboJDT1 SAP Table\r\n",
							"# dboJDT1 = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/SAP/dboJDT1.parquet', format='parquet')\r\n",
							"# dboJDT1.createOrReplaceTempView(\"dboJDT1\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stchartofaccounts SAP Table\r\n",
							"# stchartofaccounts = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stchartofaccounts.parquet', format='parquet')\r\n",
							"# stchartofaccounts.createOrReplaceTempView(\"stchartofaccounts\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stsalesinvoice SAP Table\r\n",
							"# stsalesinvoice = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stsalesinvoice.parquet', format='parquet')\r\n",
							"# stsalesinvoice.createOrReplaceTempView(\"stsalesinvoice\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stitem SAP Table\r\n",
							"# stitem = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stitem.parquet', format='parquet')\r\n",
							"# stitem.createOrReplaceTempView(\"stitem\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": true,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# -- %%sql\r\n",
							"# -- -- CREATE OR REPLACE TEMP VIEW\r\n",
							"# -- -- stmanualjournals\r\n",
							"# -- -- AS\r\n",
							"# -- -- SELECT\r\n",
							"# -- --     ojdt.refdate as sap_manualjournalsheader_postingdate\r\n",
							"# -- --     ,ojdt.duedate as sap_manualjournalsheader_duedate\r\n",
							"# -- --     ,ojdt.loctotal as sap_manualjournalsheader_doctotal\r\n",
							"# -- --     ,CASE \r\n",
							"# -- --         WHEN (si.sap_salesinvoiceheader_transid = ojdt.transid \r\n",
							"# -- --             AND (ojdt.transtype = 13 AND coa.sap_account_groupmask IN (5,6,7,8)) \r\n",
							"# -- --             AND si.sap_salesinvoiceheader_canceled = 'N') THEN si.sap_salesinvoiceheader_doctype\r\n",
							"# -- --         ELSE 'M' \r\n",
							"# -- --     END as sap_manualjournalsheader_doctype\r\n",
							"# -- --     ,ojdt.transid as sap_manualjournalsheader_transid\r\n",
							"# -- --     ,jdt1.line_id as sap_manualjournalsline_linenum\r\n",
							"# -- --     ,jdt1.account as sap_manualjournalsline_acctcode\r\n",
							"# -- --     ,ojdt.transtype as sap_manualjournalsheader_objtype\r\n",
							"# -- --     ,jdt1.project as sap_manualjournalsline_project\r\n",
							"# -- --     ,jdt1.vatgroup as sap_manualjournalsline_vatgroup\r\n",
							"# -- --     ,jdt1.vatrate as sap_manualjournalsline_vatrate\r\n",
							"# -- --     ,jdt1.vatamount as sap_manualjournalsline_vatamount\r\n",
							"# -- --     ,jdt1.linememo as sap_manualjournalsline_description\r\n",
							"# -- --     ,jdt1.ref1 as sap_manualjournalsline_jnlref1\r\n",
							"# -- --     ,jdt1.ref2 as sap_manualjournalsline_jnlref2\r\n",
							"# -- --     ,jdt1.u_depot as sap_manualjournalsline_subdepotcode\r\n",
							"# -- --     ,CASE \r\n",
							"# -- --         --PPV\r\n",
							"# -- --         WHEN (jdt1.account = '_SYS00000010296' AND UPPER(LEFT(ojdt.memo, 8)) <> 'YEAR END') THEN sum((jdt1.credit-jdt1.debit))\r\n",
							"# -- --         --COGS\r\n",
							"# -- --         WHEN (jdt1.account = '_SYS00000005261' AND UPPER(LEFT(ojdt.memo, 8)) <> 'YEAR END') THEN sum((jdt1.credit-jdt1.debit))\r\n",
							"# -- --         --SALES INVETORY\r\n",
							"# -- --         WHEN (ojdt.transtype = 13 AND coa.sap_account_groupmask in (5,6,7,8)) THEN sum((jdt1.credit-jdt1.debit))\r\n",
							"# -- --         --DISCOUNT \r\n",
							"# -- --         WHEN (ojdt.transtype = 321) THEN sum((jdt1.credit-jdt1.debit))\r\n",
							"# -- --         --MANUAL JOURNAL    \r\n",
							"# -- --         WHEN (ojdt.transtype in (30,-4) \r\n",
							"# -- --             AND coa.sap_account_groupmask in (5,6,7,8) \r\n",
							"# -- --             AND CONCAT(coa.sap_account_segment_0,coa.sap_account_segment_1,coa.sap_account_segment_2) \r\n",
							"# -- --             NOT IN ('572110ADHDO','511120ADHDO''571170ADHDO')) THEN sum((jdt1.credit-jdt1.debit))\r\n",
							"# -- --         --MANUAL JOURNAL \r\n",
							"# -- --         WHEN (ojdt.transtype = 30 \r\n",
							"# -- --             AND coa.sap_account_groupmask = 4  \r\n",
							"# -- --             AND CONCAT(coa.sap_account_segment_0,coa.sap_account_segment_1,coa.sap_account_segment_2) \r\n",
							"# -- --             NOT IN ('572110ADHDO','511120ADHDO''571170ADHDO')) THEN sum((jdt1.credit-jdt1.debit))\r\n",
							"# -- --         --DIRECT POSTING\r\n",
							"# -- --         WHEN (ojdt.transtype = 46 \r\n",
							"# -- --             AND coa.sap_account_groupmask in (5,6,7,8) \r\n",
							"# -- --             AND CONCAT(coa.sap_account_segment_0,coa.sap_account_segment_1,coa.sap_account_segment_2) \r\n",
							"# -- --             NOT IN ('572110ADHDO')) THEN sum((jdt1.credit-jdt1.debit))\r\n",
							"# -- --         --DIRECT POSTING\r\n",
							"# -- --         WHEN (ojdt.transtype = 24 \r\n",
							"# -- --             AND coa.sap_account_groupmask in (5,6,7,8) \r\n",
							"# -- --             AND CONCAT(coa.sap_account_segment_0,coa.sap_account_segment_1,coa.sap_account_segment_2) \r\n",
							"# -- --             NOT IN ('572110ADHDO')) THEN sum((jdt1.credit-jdt1.debit))\r\n",
							"# -- --         --DIRECT POSTING\r\n",
							"# -- --         WHEN (ojdt.transtype = 46 \r\n",
							"# -- --             AND coa.sap_account_groupmask = 4\r\n",
							"# -- --             AND CONCAT(coa.sap_account_segment_0,coa.sap_account_segment_1,coa.sap_account_segment_2) \r\n",
							"# -- --             NOT IN ('572110ADHDO')) THEN sum((jdt1.credit-jdt1.debit))\r\n",
							"# -- --         --DIRECT POSTING\r\n",
							"# -- --         WHEN (ojdt.transtype = 24 \r\n",
							"# -- --             AND coa.sap_account_groupmask = 4\r\n",
							"# -- --             AND CONCAT(coa.sap_account_segment_0,coa.sap_account_segment_1,coa.sap_account_segment_2) \r\n",
							"# -- --             NOT IN ('572110ADHDO')) THEN sum((jdt1.credit-jdt1.debit))\r\n",
							"# -- --         --JOURNAL\r\n",
							"# -- --         WHEN (coa.sap_account_groupmask IN (1)) THEN sum((jdt1.debit-jdt1.credit))\r\n",
							"# -- --         WHEN (coa.sap_account_groupmask IN (2,3,4,5,6,8)) THEN sum((jdt1.credit-jdt1.debit))\r\n",
							"# -- --         ELSE NULL \r\n",
							"# -- --     END as  sap_manualjournalsline_linetotal\r\n",
							"# -- --     ,CASE \r\n",
							"# -- --         WHEN (jdt1.account = '_SYS00000010296' AND UPPER(LEFT(ojdt.memo, 8)) <> 'YEAR END') THEN 'purchasepricevariance'\r\n",
							"# -- --         WHEN (jdt1.account = '_SYS00000005261' AND UPPER(LEFT(ojdt.memo, 8)) <> 'YEAR END') THEN 'costofgoodssoldjournal'\r\n",
							"# -- --         WHEN (ojdt.transtype = 13 AND coa.sap_account_groupmask in (5,6,7,8)) THEN 'salesinvoiceinventory'\r\n",
							"# -- --         WHEN (ojdt.transtype = 321) THEN 'discountjournal'\r\n",
							"# -- --         WHEN (ojdt.transtype in (30,-4) \r\n",
							"# -- --             AND coa.sap_account_groupmask in (5,6,7,8) \r\n",
							"# -- --             AND CONCAT(coa.sap_account_segment_0,coa.sap_account_segment_1,coa.sap_account_segment_2) \r\n",
							"# -- --             NOT IN ('572110ADHDO','511120ADHDO''571170ADHDO')) THEN 'manualjournal'\r\n",
							"# -- --         WHEN (ojdt.transtype = 30 \r\n",
							"# -- --             AND coa.sap_account_groupmask = 4  \r\n",
							"# -- --             AND CONCAT(coa.sap_account_segment_0,coa.sap_account_segment_1,coa.sap_account_segment_2) \r\n",
							"# -- --             NOT IN ('572110ADHDO','511120ADHDO''571170ADHDO')) THEN 'manualjournal'\r\n",
							"# -- --         WHEN (ojdt.transtype = 46 \r\n",
							"# -- --             AND coa.sap_account_groupmask in (5,6,7,8) \r\n",
							"# -- --             AND CONCAT(coa.sap_account_segment_0,coa.sap_account_segment_1,coa.sap_account_segment_2) \r\n",
							"# -- --             NOT IN ('572110ADHDO')) THEN 'directposting'\r\n",
							"# -- --         WHEN (ojdt.transtype = 24 \r\n",
							"# -- --             AND coa.sap_account_groupmask in (5,6,7,8) \r\n",
							"# -- --             AND CONCAT(coa.sap_account_segment_0,coa.sap_account_segment_1,coa.sap_account_segment_2) \r\n",
							"# -- --             NOT IN ('572110ADHDO')) THEN 'directposting'\r\n",
							"# -- --         WHEN (ojdt.transtype = 46 \r\n",
							"# -- --             AND coa.sap_account_groupmask = 4\r\n",
							"# -- --             AND CONCAT(coa.sap_account_segment_0,coa.sap_account_segment_1,coa.sap_account_segment_2) \r\n",
							"# -- --             NOT IN ('572110ADHDO')) THEN 'directposting'\r\n",
							"# -- --         WHEN (ojdt.transtype = 24 \r\n",
							"# -- --             AND coa.sap_account_groupmask = 4\r\n",
							"# -- --             AND CONCAT(coa.sap_account_segment_0,coa.sap_account_segment_1,coa.sap_account_segment_2) \r\n",
							"# -- --             NOT IN ('572110ADHDO')) THEN 'directposting'\r\n",
							"# -- --         WHEN (coa.sap_account_groupmask IN (1,2,3,4,5,6,8)) THEN 'journal'\r\n",
							"# -- --         ELSE NULL \r\n",
							"# -- --     END as  sap_manualjournalsline_doccat\r\n",
							"# -- --     ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"# -- --     ,CASE \r\n",
							"# -- --         WHEN (si.sap_salesinvoiceheader_transid = ojdt.transid \r\n",
							"# -- --             AND (ojdt.transtype = 13 AND coa.sap_account_groupmask IN (5,6,7,8)) \r\n",
							"# -- --             AND si.sap_salesinvoiceheader_canceled = 'N') THEN sap_salesinvoiceheader_cardcode\r\n",
							"# -- --         WHEN (d.sap_documentsheader_transid = ojdt.transid AND coa.sap_account_groupmask IN (1,2,3,4,5,6,8)) THEN d.sap_documentsheader_cardcode\r\n",
							"# -- --         ELSE NULL\r\n",
							"# -- --     END sap_manualjournalsheader_cardcode\r\n",
							"# -- --     ,CASE \r\n",
							"# -- --         WHEN (si.sap_salesinvoiceheader_transid = ojdt.transid \r\n",
							"# -- --             AND (ojdt.transtype = 13 AND coa.sap_account_groupmask IN (5,6,7,8)) \r\n",
							"# -- --             AND si.sap_salesinvoiceheader_canceled = 'N') THEN sap_salesinvoiceheader_numatcard\r\n",
							"# -- --         WHEN (d.sap_documentsheader_transid = ojdt.transid AND coa.sap_account_groupmask IN (1,2,3,4,5,6,8)) THEN d.sap_documentsheader_cardref\r\n",
							"# -- --         ELSE NULL\r\n",
							"# -- --     END sap_manualjournalsheader_cardref\r\n",
							"# -- --     ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							" \r\n",
							"# -- --     -- ojdt.transid as sap_manualjournalsheader_transid\r\n",
							"# -- --     -- ,ojdt.transtype as sap_manualjournalsheader_transtype \r\n",
							"# -- --     -- ,ojdt.ref1 as sap_manualjournalsheader_ref1\r\n",
							"# -- --     -- ,ojdt.memo as sap_manualjournalsheader_memo\r\n",
							"# -- --     -- ,ojdt.createdby as sap_manualjournalsheader_createdby\r\n",
							"# -- --     -- ,ojdt.transcode as sap_manualjournalsheader_transcode\r\n",
							"# -- --     -- ,ojdt.project as sap_manualjournalsheader_project\r\n",
							"# -- --     -- ,ojdt.usersign as sap_manualjournalsheader_usersign\r\n",
							"# -- --     -- ,ojdt.objtype as sap_manualjournalsheader_objtype\r\n",
							"# -- --     -- ,jdt1.baseref as sap_manualjournalsline_baseref\r\n",
							"# -- --     -- ,jdt1.debit as sap_manualjournalsline_debit\r\n",
							"# -- --     -- ,jdt1.credit as sap_manualjournalsline_credit\r\n",
							"# -- --     -- ,jdt1.duedate as sap_manualjournalsline_duedate\r\n",
							"# -- --     -- ,jdt1.sourceid as sap_manualjournalsline_sourceid\r\n",
							"# -- --     -- ,jdt1.sourceline as sap_manualjournalsline_sourceline\r\n",
							"# -- --     -- ,jdt1.createdby as sap_manualjournalsline_createdby\r\n",
							"# -- --     -- ,jdt1.transcode as sap_manualjournalsline_transcode\r\n",
							"# -- --     -- ,jdt1.usersign as sap_manualjournalsline_usersign\r\n",
							"# -- --     -- ,jdt1.objtype as sap_manualjournalsline_objtype\r\n",
							"# -- --     -- ,jdt1.vatline as sap_manualjournalsline_vatline\r\n",
							"# -- --     -- ,jdt1.grossvalue as sap_manualjournalsline_grossvalue\r\n",
							"# -- --     -- ,jdt1.linetype as sap_manualjournalsline_linetype\r\n",
							"# -- --     -- ,jdt1.debcred as sap_manualjournalsline_debcred\r\n",
							"# -- --     -- ,coa.sap_account_groupmask\r\n",
							"# -- --     -- ,coa.sap_account_acctname\r\n",
							"# -- --     -- ,coa.sap_account_segment_0\r\n",
							"# -- --     -- ,coa.sap_account_segment_1\r\n",
							"# -- --     -- ,coa.sap_account_segment_2\r\n",
							"# -- --     -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"   \r\n",
							"# -- -- FROM dboOJDT ojdt\r\n",
							"# -- -- LEFT JOIN dboJDT1 jdt1 on jdt1.transid = ojdt.transid\r\n",
							"# -- -- LEFT JOIN stchartofaccounts coa on coa.sap_account_acctcode = jdt1.account\r\n",
							"# -- -- LEFT JOIN stsalesinvoice si on si.sap_salesinvoiceheader_transid = jdt1.transid \r\n",
							"# -- --     AND (ojdt.transtype = 13 AND coa.sap_account_groupmask IN (5,6,7,8)) \r\n",
							"# -- --     AND si.sap_salesinvoiceheader_canceled = 'N'\r\n",
							"# -- -- LEFT JOIN stitem i on i.sap_item_itemcode = si.sap_salesinvoiceline_itemcode \r\n",
							"# -- --     AND (ojdt.transtype = 13 AND coa.sap_account_groupmask IN (5,6,7,8))\r\n",
							"# -- -- LEFT JOIN stdocuments d on d.sap_documentsheader_transid = jdt1.transid \r\n",
							"# -- --     AND coa.sap_account_groupmask IN (1,2,3,4,5,6,8) AND d.sap_documentsline_doccat NOT IN ('journal','purchaseorder')\r\n",
							"# -- -- GROUP BY\r\n",
							"# -- --     ojdt.memo\r\n",
							"# -- --     ,ojdt.transtype\r\n",
							"# -- --     ,ojdt.duedate\r\n",
							"# -- --     ,ojdt.loctotal\r\n",
							"# -- --     ,coa.sap_account_groupmask\r\n",
							"# -- --     ,coa.sap_account_acctname\r\n",
							"# -- --     ,coa.sap_account_segment_0\r\n",
							"# -- --     ,coa.sap_account_segment_1\r\n",
							"# -- --     ,coa.sap_account_segment_2\r\n",
							"# -- --     ,ojdt.refdate\r\n",
							"# -- --     ,ojdt.doctype\r\n",
							"# -- --     ,ojdt.transid\r\n",
							"# -- --     ,jdt1.line_id\r\n",
							"# -- --     ,jdt1.account\r\n",
							"# -- --     ,jdt1.transtype\r\n",
							"# -- --     ,jdt1.refdate\r\n",
							"# -- --     ,jdt1.project\r\n",
							"# -- --     ,jdt1.vatgroup\r\n",
							"# -- --     ,jdt1.vatrate\r\n",
							"# -- --     ,jdt1.vatamount\r\n",
							"# -- --     ,jdt1.linememo\r\n",
							"# -- --     ,jdt1.ref1\r\n",
							"# -- --     ,jdt1.ref2\r\n",
							"# -- --     ,jdt1.baseref\r\n",
							"# -- --     ,jdt1.u_depot\r\n",
							"# -- --     ,si.sap_salesinvoiceline_itemcode\r\n",
							"# -- --     ,si.sap_salesinvoiceheader_doctype\r\n",
							"# -- --     ,si.sap_salesinvoiceheader_transid\r\n",
							"# -- --     ,si.sap_salesinvoiceheader_canceled\r\n",
							"# -- --     ,si.sap_salesinvoiceheader_cardcode\r\n",
							"# -- --     ,si.sap_salesinvoiceheader_numatcard\r\n",
							"# -- --     ,d.sap_documentsheader_transid\r\n",
							"# -- --     ,d.sap_documentsheader_cardcode\r\n",
							"# -- --     ,d.sap_documentsheader_cardref\r\n",
							"# -- --     ,i.sap_item_invntitem\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stmanualjournals_tmp\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"    ojdt.refdate as sap_manualjournalsheader_postingdate\r\n",
							"    ,ojdt.duedate as sap_manualjournalsheader_duedate\r\n",
							"    ,ojdt.loctotal as sap_manualjournalsheader_doctotal\r\n",
							"    ,COALESCE(ojdt.doctype,'M') as sap_manualjournalsheader_doctype\r\n",
							"    ,ojdt.transid as sap_manualjournalsheader_transid\r\n",
							"    ,jdt1.line_id as sap_manualjournalsline_linenum\r\n",
							"    ,jdt1.account as sap_manualjournalsline_acctcode\r\n",
							"    ,ojdt.transtype as sap_manualjournalsheader_objtype\r\n",
							"    ,jdt1.project as sap_manualjournalsline_project\r\n",
							"    ,jdt1.vatgroup as sap_manualjournalsline_vatgroup\r\n",
							"    ,jdt1.vatrate as sap_manualjournalsline_vatrate\r\n",
							"    ,jdt1.vatamount as sap_manualjournalsline_vatamount\r\n",
							"    ,jdt1.linememo as sap_manualjournalsline_description\r\n",
							"    ,jdt1.ref1 as sap_manualjournalsline_jnlref1\r\n",
							"    ,jdt1.ref2 as sap_manualjournalsline_jnlref2\r\n",
							"    ,jdt1.u_depot as sap_manualjournalsline_subdepotcode\r\n",
							"    ,jdt1.credit as sap_manualjournalsline_credit --REMOVE IN SUB TABLES\r\n",
							"    ,jdt1.debit as sap_manualjournalsline_debit --REMOVE IN SUB TABLES\r\n",
							"    -- ,as sap_manualjournalsline_linetotal\r\n",
							"    -- ,as  sap_manualjournalsline_doccat\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"    ,ojdt.memo as sap_manualjournalsheader_memo\r\n",
							"    ,coa.sap_account_groupmask\r\n",
							"    ,coa.sap_account_acctname\r\n",
							"    ,coa.sap_account_segment_0\r\n",
							"    ,coa.sap_account_segment_1\r\n",
							"    ,coa.sap_account_segment_2\r\n",
							"    ,coa.sap_account_level1name\r\n",
							"\r\n",
							"FROM dboOJDT ojdt\r\n",
							"LEFT JOIN dboJDT1 jdt1 on jdt1.transid = ojdt.transid\r\n",
							"LEFT JOIN stchartofaccounts coa on coa.sap_account_acctcode = jdt1.account\r\n",
							""
						],
						"outputs": [],
						"execution_count": 79
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmanualjournals_tmp = spark.sql(\"SELECT * FROM stmanualjournals_tmp\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stpurchasepricevariance\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit)as sap_manualjournalsline_linetotal\r\n",
							"    ,'purchasepricevariance' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp\r\n",
							"WHERE sap_manualjournalsline_acctcode =  '_SYS00000010296'\r\n",
							"AND UPPER(LEFT(sap_manualjournalsheader_memo, 8)) <> 'YEAR END'\r\n",
							"GROUP BY\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							""
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpurchasepricevariance = spark.sql(\"SELECT * FROM stpurchasepricevariance\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpurchasepricevariance = stpurchasepricevariance.withColumnRenamed(\"sap_manualjournalsheader_postingdate\",\"sap_purchasepricevarianceheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_duedate\",\"sap_purchasepricevarianceheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctotal\",\"sap_purchasepricevarianceheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctype\",\"sap_purchasepricevarianceheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_transid\",\"sap_purchasepricevarianceheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linenum\",\"sap_purchasepricevarianceline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_acctcode\",\"sap_purchasepricevarianceline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_objtype\",\"sap_purchasepricevarianceheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_project\",\"sap_purchasepricevarianceline_project\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatgroup\",\"sap_purchasepricevarianceline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatrate\",\"sap_purchasepricevarianceline_vatrate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatamount\",\"sap_purchasepricevarianceline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_description\",\"sap_purchasepricevarianceline_description\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref1\",\"sap_purchasepricevarianceline_jnlref1\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref2\",\"sap_purchasepricevarianceline_jnlref2\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_subdepotcode\",\"sap_purchasepricevarianceline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linetotal\",\"sap_purchasepricevarianceline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_doccat\",\"sap_purchasepricevarianceline_doccat\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stpurchasepricevariance.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stpurchasepricevariance.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stcostofgoods\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit)as sap_manualjournalsline_linetotal\r\n",
							"    ,'costofgoods' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp\r\n",
							"WHERE sap_manualjournalsline_acctcode =  '_SYS00000005261'\r\n",
							"AND UPPER(LEFT(sap_manualjournalsheader_memo, 8)) <> 'YEAR END'\r\n",
							"GROUP BY\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stcostofgoods = spark.sql(\"SELECT * FROM stcostofgoods\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stcostofgoods = stcostofgoods.withColumnRenamed(\"sap_manualjournalsheader_postingdate\",\"sap_costofgoodsheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_duedate\",\"sap_costofgoodsheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctotal\",\"sap_costofgoodsheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctype\",\"sap_costofgoodsheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_transid\",\"sap_costofgoodsheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linenum\",\"sap_costofgoodsline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_acctcode\",\"sap_costofgoodsline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_objtype\",\"sap_costofgoodsheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_project\",\"sap_costofgoodsline_project\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatgroup\",\"sap_costofgoodsline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatrate\",\"sap_costofgoodsline_vatrate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatamount\",\"sap_costofgoodsline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_description\",\"sap_costofgoodsline_description\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref1\",\"sap_costofgoodsline_jnlref1\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref2\",\"sap_costofgoodsline_jnlref2\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_subdepotcode\",\"sap_costofgoodsline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linetotal\",\"sap_costofgoodsline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_doccat\",\"sap_costofgoodsline_doccat\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stcostofgoods.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stcostofgoods.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stsalesinvoiceinventory\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    mjt.sap_manualjournalsheader_postingdate\r\n",
							"    ,mjt.sap_manualjournalsheader_duedate\r\n",
							"    ,mjt.sap_manualjournalsheader_doctotal\r\n",
							"    ,COALESCE(si.sap_salesinvoiceheader_doctype,'M') as sap_manualjournalsheader_doctype\r\n",
							"    ,mjt.sap_manualjournalsheader_transid\r\n",
							"    ,mjt.sap_manualjournalsline_linenum\r\n",
							"    ,mjt.sap_manualjournalsline_acctcode\r\n",
							"    ,mjt.sap_manualjournalsheader_objtype\r\n",
							"    ,mjt.sap_manualjournalsline_project\r\n",
							"    ,mjt.sap_manualjournalsline_vatgroup\r\n",
							"    ,mjt.sap_manualjournalsline_vatrate\r\n",
							"    ,mjt.sap_manualjournalsline_vatamount\r\n",
							"    ,mjt.sap_manualjournalsline_description\r\n",
							"    ,mjt.sap_manualjournalsline_jnlref1\r\n",
							"    ,mjt.sap_manualjournalsline_jnlref2\r\n",
							"    ,mjt.sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(mjt.sap_manualjournalsline_credit-mjt.sap_manualjournalsline_debit)as sap_manualjournalsline_linetotal\r\n",
							"    ,'salesinvoiceinventory' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    ,si.sap_salesinvoiceheader_cardcode as sap_manualjournalsheader_cardcode\r\n",
							"    ,si.sap_salesinvoiceheader_cardref as sap_manualjournalsheader_cardref\r\n",
							"    ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp mjt\r\n",
							"LEFT JOIN stsalesinvoice si on si.sap_salesinvoiceheader_transid = mjt.sap_manualjournalsheader_transid \r\n",
							"LEFT JOIN stitem i on i.sap_item_itemcode = si.sap_salesinvoiceline_itemcode\r\n",
							"WHERE mjt.sap_manualjournalsheader_objtype =  13\r\n",
							"AND i.sap_item_invntitem = 'Y'\r\n",
							"AND mjt.sap_account_groupmask in (5,6,7,8)\r\n",
							"GROUP BY\r\n",
							"    mjt.sap_manualjournalsheader_postingdate\r\n",
							"    ,mjt.sap_manualjournalsheader_duedate\r\n",
							"    ,mjt.sap_manualjournalsheader_doctotal\r\n",
							"    ,mjt.sap_manualjournalsheader_doctype\r\n",
							"    ,mjt.sap_manualjournalsheader_transid\r\n",
							"    ,mjt.sap_manualjournalsline_linenum\r\n",
							"    ,mjt.sap_manualjournalsline_acctcode\r\n",
							"    ,mjt.sap_manualjournalsheader_objtype\r\n",
							"    ,mjt.sap_manualjournalsline_project\r\n",
							"    ,mjt.sap_manualjournalsline_vatgroup\r\n",
							"    ,mjt.sap_manualjournalsline_vatrate\r\n",
							"    ,mjt.sap_manualjournalsline_vatamount\r\n",
							"    ,mjt.sap_manualjournalsline_description\r\n",
							"    ,mjt.sap_manualjournalsline_jnlref1\r\n",
							"    ,mjt.sap_manualjournalsline_jnlref2\r\n",
							"    ,mjt.sap_manualjournalsline_subdepotcode\r\n",
							"    ,si.sap_salesinvoiceheader_doctype\r\n",
							"    ,si.sap_salesinvoiceline_itemcode\r\n",
							"    ,si.sap_salesinvoiceheader_cardcode\r\n",
							"    ,si.sap_salesinvoiceheader_cardref\r\n",
							"    ,i.sap_item_invntitem\r\n",
							""
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsalesinvoiceinventory = spark.sql(\"SELECT * FROM stsalesinvoiceinventory\")"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsalesinvoiceinventory = stsalesinvoiceinventory.withColumnRenamed(\"sap_manualjournalsheader_postingdate\",\"sap_salesinvoiceinventoryheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_duedate\",\"sap_salesinvoiceinventoryheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctotal\",\"sap_salesinvoiceinventoryheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctype\",\"sap_salesinvoiceinventoryheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_transid\",\"sap_salesinvoiceinventoryheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linenum\",\"sap_salesinvoiceinventoryline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_acctcode\",\"sap_salesinvoiceinventoryline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_objtype\",\"sap_salesinvoiceinventoryheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_project\",\"sap_salesinvoiceinventoryline_project\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatgroup\",\"sap_salesinvoiceinventoryline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatrate\",\"sap_salesinvoiceinventoryline_vatrate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatamount\",\"sap_salesinvoiceinventoryline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_description\",\"sap_salesinvoiceinventoryline_description\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref1\",\"sap_salesinvoiceinventoryline_jnlref1\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref2\",\"sap_salesinvoiceinventoryline_jnlref2\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_subdepotcode\",\"sap_salesinvoiceinventoryline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linetotal\",\"sap_salesinvoiceinventoryline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_doccat\",\"sap_salesinvoiceinventoryline_doccat\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_itemcode\",\"sap_salesinvoiceinventoryline_itemcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_cardcode\",\"sap_salesinvoiceinventoryheader_cardcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_cardref\",\"sap_salesinvoiceinventoryheader_cardref\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_invntitem\",\"sap_salesinvoiceinventoryline_invntitem\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stsalesinvoiceinventory.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stsalesinvoiceinventory.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdiscountjournal\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit)as sap_manualjournalsline_linetotal\r\n",
							"    ,'discountjournal' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp\r\n",
							"WHERE sap_manualjournalsheader_objtype =  321\r\n",
							"GROUP BY\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdiscountjournal = spark.sql(\"SELECT * FROM stdiscountjournal\")"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdiscountjournal = stdiscountjournal.withColumnRenamed(\"sap_manualjournalsheader_postingdate\",\"sap_discountjournalheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_duedate\",\"sap_discountjournalheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctotal\",\"sap_discountjournalheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctype\",\"sap_discountjournalheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_transid\",\"sap_discountjournalheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linenum\",\"sap_discountjournalline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_acctcode\",\"sap_discountjournalline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_objtype\",\"sap_discountjournalheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_project\",\"sap_discountjournalline_project\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatgroup\",\"sap_discountjournalline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatrate\",\"sap_discountjournalline_vatrate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatamount\",\"sap_discountjournalline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_description\",\"sap_discountjournalline_description\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref1\",\"sap_discountjournalline_jnlref1\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref2\",\"sap_discountjournalline_jnlref2\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_subdepotcode\",\"sap_discountjournalline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linetotal\",\"sap_discountjournalline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_doccat\",\"sap_discountjournalline_doccat\")"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stdiscountjournal.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stdiscountjournal.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--EXPENSES\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stmanualjournal1\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit)as sap_manualjournalsline_linetotal\r\n",
							"    ,'manualjournal' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp\r\n",
							"WHERE (sap_manualjournalsheader_objtype in (30,-4)\r\n",
							"AND CONCAT(sap_account_segment_0,sap_account_segment_1,sap_account_segment_2) NOT IN ('572110ADHDO','511120ADHDO','571170ADHDO')\r\n",
							"AND sap_account_groupmask in (5,6,7,8))\r\n",
							"AND sap_account_level1name NOT IN ('ASSETS','CAPITAL AND RESERVES','LIABILITIES')\r\n",
							"AND (CONCAT(sap_manualjournalsheader_objtype,sap_account_groupmask) <> 307)\r\n",
							"\r\n",
							"GROUP BY\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 112
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--REVENUE\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stmanualjournal2\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit)as sap_manualjournalsline_linetotal\r\n",
							"    ,'manualjournal' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp\r\n",
							"WHERE (sap_manualjournalsheader_objtype in (30)\r\n",
							"AND CONCAT(sap_account_segment_0,sap_account_segment_1,sap_account_segment_2) NOT IN ('572110ADHDO','511120ADHDO','571170ADHDO')\r\n",
							"AND sap_account_groupmask in (4))\r\n",
							"AND sap_account_level1name NOT IN ('ASSETS','CAPITAL AND RESERVES','LIABILITIES')\r\n",
							"GROUP BY\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 113
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmanualjournal1 = spark.sql(\"SELECT * FROM stmanualjournal1\")\r\n",
							"stmanualjournal2 = spark.sql(\"SELECT * FROM stmanualjournal2\")"
						],
						"outputs": [],
						"execution_count": 114
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmanualjournal = stmanualjournal1.unionByName(stmanualjournal2, allowMissingColumns = True)"
						],
						"outputs": [],
						"execution_count": 115
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmanualjournal.createOrReplaceTempView(\"stmanualjournal\")"
						],
						"outputs": [],
						"execution_count": 116
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stmanualjournal.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stmanualjournal.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 117
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdirectposting1\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit)as sap_manualjournalsline_linetotal\r\n",
							"    ,'directposting' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp\r\n",
							"WHERE sap_manualjournalsheader_objtype in (46)\r\n",
							"AND CONCAT(sap_account_segment_0,sap_account_segment_1,sap_account_segment_2) NOT IN ('572110ADHDO')\r\n",
							"AND sap_account_groupmask in (5,6,7,8)\r\n",
							"GROUP BY\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdirectposting2\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit)as sap_manualjournalsline_linetotal\r\n",
							"    ,'directposting' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp\r\n",
							"WHERE sap_manualjournalsheader_objtype in (24)\r\n",
							"AND CONCAT(sap_account_segment_0,sap_account_segment_1,sap_account_segment_2) NOT IN ('572110ADHDO')\r\n",
							"AND sap_account_groupmask in (5,6,7,8)\r\n",
							"GROUP BY\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdirectposting3\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit)as sap_manualjournalsline_linetotal\r\n",
							"    ,'directposting' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp\r\n",
							"WHERE sap_manualjournalsheader_objtype in (46)\r\n",
							"AND CONCAT(sap_account_segment_0,sap_account_segment_1,sap_account_segment_2) NOT IN ('572110ADHDO')\r\n",
							"AND sap_account_groupmask in (4)\r\n",
							"GROUP BY\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdirectposting4\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit)as sap_manualjournalsline_linetotal\r\n",
							"    ,'directposting' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp\r\n",
							"WHERE sap_manualjournalsheader_objtype in (24)\r\n",
							"AND CONCAT(sap_account_segment_0,sap_account_segment_1,sap_account_segment_2) NOT IN ('572110ADHDO')\r\n",
							"AND sap_account_groupmask in (4)\r\n",
							"GROUP BY\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdirectposting1 = spark.sql(\"SELECT * FROM stdirectposting1\")\r\n",
							"stdirectposting2 = spark.sql(\"SELECT * FROM stdirectposting2\")\r\n",
							"stdirectposting3 = spark.sql(\"SELECT * FROM stdirectposting3\")\r\n",
							"stdirectposting4 = spark.sql(\"SELECT * FROM stdirectposting4\")"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdirectposting = stdirectposting1.unionByName(stdirectposting2, allowMissingColumns = True).unionByName(stdirectposting3, allowMissingColumns = True).unionByName(stdirectposting4, allowMissingColumns = True)"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdirectposting = stdirectposting.withColumnRenamed(\"sap_manualjournalsheader_postingdate\",\"sap_directpostingheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_duedate\",\"sap_directpostingheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctotal\",\"sap_directpostingheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctype\",\"sap_directpostingheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_transid\",\"sap_directpostingheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linenum\",\"sap_directpostingline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_acctcode\",\"sap_directpostingline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_objtype\",\"sap_directpostingheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_project\",\"sap_directpostingline_project\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatgroup\",\"sap_directpostingline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatrate\",\"sap_directpostingline_vatrate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatamount\",\"sap_directpostingline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_description\",\"sap_directpostingline_description\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref1\",\"sap_directpostingline_jnlref1\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref2\",\"sap_directpostingline_jnlref2\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_subdepotcode\",\"sap_directpostingline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linetotal\",\"sap_directpostingline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_doccat\",\"sap_directpostingline_doccat\")"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stdirectposting.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stdirectposting.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": true,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# -- %%sql\r\n",
							"# -- --ASSETS\r\n",
							"# -- CREATE OR REPLACE TEMP VIEW\r\n",
							"# -- stgeneraljournal1\r\n",
							"# -- AS\r\n",
							"# -- SELECT\r\n",
							"# --     sap_manualjournalsheader_postingdate\r\n",
							"# --     ,sap_manualjournalsheader_duedate\r\n",
							"# --     ,sap_manualjournalsheader_doctotal\r\n",
							"# --     ,sap_manualjournalsheader_doctype\r\n",
							"# --     ,sap_manualjournalsheader_transid\r\n",
							"# --     ,sap_manualjournalsline_linenum\r\n",
							"# --     ,sap_manualjournalsline_acctcode\r\n",
							"# --     ,sap_manualjournalsheader_objtype\r\n",
							"# --     ,sap_manualjournalsline_project\r\n",
							"# --     ,sap_manualjournalsline_vatgroup\r\n",
							"# --     ,sap_manualjournalsline_vatrate\r\n",
							"# --     ,sap_manualjournalsline_vatamount\r\n",
							"# --     ,sap_manualjournalsline_description\r\n",
							"# --     ,sap_manualjournalsline_jnlref1\r\n",
							"# --     ,sap_manualjournalsline_jnlref2\r\n",
							"# --     ,sap_manualjournalsline_subdepotcode\r\n",
							"# --     ,SUM(sap_manualjournalsline_debit-sap_manualjournalsline_credit) as sap_manualjournalsline_linetotal\r\n",
							"# --     ,'generaljournal' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"# --     -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"# --     -- ,as sap_manualjournalsheader_cardcode\r\n",
							"# --     -- ,as sap_manualjournalsheader_cardref\r\n",
							"# --     -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"# -- FROM stmanualjournals_tmp\r\n",
							"# -- WHERE sap_account_groupmask in (1)\r\n",
							"# -- GROUP BY\r\n",
							"# --     sap_manualjournalsheader_postingdate\r\n",
							"# --     ,sap_manualjournalsheader_duedate\r\n",
							"# --     ,sap_manualjournalsheader_doctotal\r\n",
							"# --     ,sap_manualjournalsheader_doctype\r\n",
							"# --     ,sap_manualjournalsheader_transid\r\n",
							"# --     ,sap_manualjournalsline_linenum\r\n",
							"# --     ,sap_manualjournalsline_acctcode\r\n",
							"# --     ,sap_manualjournalsheader_objtype\r\n",
							"# --     ,sap_manualjournalsline_project\r\n",
							"# --     ,sap_manualjournalsline_vatgroup\r\n",
							"# --     ,sap_manualjournalsline_vatrate\r\n",
							"# --     ,sap_manualjournalsline_vatamount\r\n",
							"# --     ,sap_manualjournalsline_description\r\n",
							"# --     ,sap_manualjournalsline_jnlref1\r\n",
							"# --     ,sap_manualjournalsline_jnlref2\r\n",
							"# --     ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": true,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# -- %%sql\r\n",
							"# -- --LIABILITIES\r\n",
							"# -- CREATE OR REPLACE TEMP VIEW\r\n",
							"# -- stgeneraljournal2\r\n",
							"# -- AS\r\n",
							"# -- SELECT\r\n",
							"# --     sap_manualjournalsheader_postingdate\r\n",
							"# --     ,sap_manualjournalsheader_duedate\r\n",
							"# --     ,sap_manualjournalsheader_doctotal\r\n",
							"# --     ,sap_manualjournalsheader_doctype\r\n",
							"# --     ,sap_manualjournalsheader_transid\r\n",
							"# --     ,sap_manualjournalsline_linenum\r\n",
							"# --     ,sap_manualjournalsline_acctcode\r\n",
							"# --     ,sap_manualjournalsheader_objtype\r\n",
							"# --     ,sap_manualjournalsline_project\r\n",
							"# --     ,sap_manualjournalsline_vatgroup\r\n",
							"# --     ,sap_manualjournalsline_vatrate\r\n",
							"# --     ,sap_manualjournalsline_vatamount\r\n",
							"# --     ,sap_manualjournalsline_description\r\n",
							"# --     ,sap_manualjournalsline_jnlref1\r\n",
							"# --     ,sap_manualjournalsline_jnlref2\r\n",
							"# --     ,sap_manualjournalsline_subdepotcode\r\n",
							"# --     ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit) as sap_manualjournalsline_linetotal\r\n",
							"# --     ,'generaljournal' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"# --     -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"# --     -- ,as sap_manualjournalsheader_cardcode\r\n",
							"# --     -- ,as sap_manualjournalsheader_cardref\r\n",
							"# --     -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"# -- FROM stmanualjournals_tmp\r\n",
							"# -- WHERE sap_account_groupmask in (2)\r\n",
							"# -- GROUP BY\r\n",
							"# --     sap_manualjournalsheader_postingdate\r\n",
							"# --     ,sap_manualjournalsheader_duedate\r\n",
							"# --     ,sap_manualjournalsheader_doctotal\r\n",
							"# --     ,sap_manualjournalsheader_doctype\r\n",
							"# --     ,sap_manualjournalsheader_transid\r\n",
							"# --     ,sap_manualjournalsline_linenum\r\n",
							"# --     ,sap_manualjournalsline_acctcode\r\n",
							"# --     ,sap_manualjournalsheader_objtype\r\n",
							"# --     ,sap_manualjournalsline_project\r\n",
							"# --     ,sap_manualjournalsline_vatgroup\r\n",
							"# --     ,sap_manualjournalsline_vatrate\r\n",
							"# --     ,sap_manualjournalsline_vatamount\r\n",
							"# --     ,sap_manualjournalsline_description\r\n",
							"# --     ,sap_manualjournalsline_jnlref1\r\n",
							"# --     ,sap_manualjournalsline_jnlref2\r\n",
							"# --     ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": true,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# -- %%sql\r\n",
							"# -- --CAPITAL AND RESERVES\r\n",
							"# -- CREATE OR REPLACE TEMP VIEW\r\n",
							"# -- stgeneraljournal3\r\n",
							"# -- AS\r\n",
							"# -- SELECT\r\n",
							"# --     sap_manualjournalsheader_postingdate\r\n",
							"# --     ,sap_manualjournalsheader_duedate\r\n",
							"# --     ,sap_manualjournalsheader_doctotal\r\n",
							"# --     ,sap_manualjournalsheader_doctype\r\n",
							"# --     ,sap_manualjournalsheader_transid\r\n",
							"# --     ,sap_manualjournalsline_linenum\r\n",
							"# --     ,sap_manualjournalsline_acctcode\r\n",
							"# --     ,sap_manualjournalsheader_objtype\r\n",
							"# --     ,sap_manualjournalsline_project\r\n",
							"# --     ,sap_manualjournalsline_vatgroup\r\n",
							"# --     ,sap_manualjournalsline_vatrate\r\n",
							"# --     ,sap_manualjournalsline_vatamount\r\n",
							"# --     ,sap_manualjournalsline_description\r\n",
							"# --     ,sap_manualjournalsline_jnlref1\r\n",
							"# --     ,sap_manualjournalsline_jnlref2\r\n",
							"# --     ,sap_manualjournalsline_subdepotcode\r\n",
							"# --     ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit) as sap_manualjournalsline_linetotal\r\n",
							"# --     ,'generaljournal' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"# --     -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"# --     -- ,as sap_manualjournalsheader_cardcode\r\n",
							"# --     -- ,as sap_manualjournalsheader_cardref\r\n",
							"# --     -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"# -- FROM stmanualjournals_tmp\r\n",
							"# -- WHERE sap_account_groupmask in (3)\r\n",
							"# -- GROUP BY\r\n",
							"# --     sap_manualjournalsheader_postingdate\r\n",
							"# --     ,sap_manualjournalsheader_duedate\r\n",
							"# --     ,sap_manualjournalsheader_doctotal\r\n",
							"# --     ,sap_manualjournalsheader_doctype\r\n",
							"# --     ,sap_manualjournalsheader_transid\r\n",
							"# --     ,sap_manualjournalsline_linenum\r\n",
							"# --     ,sap_manualjournalsline_acctcode\r\n",
							"# --     ,sap_manualjournalsheader_objtype\r\n",
							"# --     ,sap_manualjournalsline_project\r\n",
							"# --     ,sap_manualjournalsline_vatgroup\r\n",
							"# --     ,sap_manualjournalsline_vatrate\r\n",
							"# --     ,sap_manualjournalsline_vatamount\r\n",
							"# --     ,sap_manualjournalsline_description\r\n",
							"# --     ,sap_manualjournalsline_jnlref1\r\n",
							"# --     ,sap_manualjournalsline_jnlref2\r\n",
							"# --     ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--TURNOVER\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stgeneraljournal4\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit) as sap_manualjournalsline_linetotal\r\n",
							"    ,'generaljournal' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp\r\n",
							"WHERE sap_account_groupmask in (4)\r\n",
							"GROUP BY\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--COST OF SALES\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stgeneraljournal5\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit) as sap_manualjournalsline_linetotal\r\n",
							"    ,'generaljournal' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp\r\n",
							"WHERE sap_account_groupmask in (5)\r\n",
							"GROUP BY\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--OPERATING COSTS\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stgeneraljournal6\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit) as sap_manualjournalsline_linetotal\r\n",
							"    ,'generaljournal' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp\r\n",
							"WHERE sap_account_groupmask in (6)\r\n",
							"AND sap_manualjournalsheader_transid NOT IN (311478,311479,311480,311481,311482,311484,311485) --HACK TO REMOVE GARBAGE IN SAP\r\n",
							"GROUP BY\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--TAX AND EXTRAORINARY ITEMS\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stgeneraljournal7\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode\r\n",
							"    ,SUM(sap_manualjournalsline_credit-sap_manualjournalsline_debit) as sap_manualjournalsline_linetotal\r\n",
							"    ,'generaljournal' as  sap_manualjournalsline_doccat\r\n",
							"\r\n",
							"    -- ,si.sap_salesinvoiceline_itemcode as sap_manualjournalsline_itemcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardcode\r\n",
							"    -- ,as sap_manualjournalsheader_cardref\r\n",
							"    -- ,i.sap_item_invntitem as sap_manualjournalsline_invntitem\r\n",
							"\r\n",
							"FROM stmanualjournals_tmp\r\n",
							"WHERE sap_account_groupmask in (8)\r\n",
							"\r\n",
							"GROUP BY\r\n",
							"    sap_manualjournalsheader_postingdate\r\n",
							"    ,sap_manualjournalsheader_duedate\r\n",
							"    ,sap_manualjournalsheader_doctotal\r\n",
							"    ,sap_manualjournalsheader_doctype\r\n",
							"    ,sap_manualjournalsheader_transid\r\n",
							"    ,sap_manualjournalsline_linenum\r\n",
							"    ,sap_manualjournalsline_acctcode\r\n",
							"    ,sap_manualjournalsheader_objtype\r\n",
							"    ,sap_manualjournalsline_project\r\n",
							"    ,sap_manualjournalsline_vatgroup\r\n",
							"    ,sap_manualjournalsline_vatrate\r\n",
							"    ,sap_manualjournalsline_vatamount\r\n",
							"    ,sap_manualjournalsline_description\r\n",
							"    ,sap_manualjournalsline_jnlref1\r\n",
							"    ,sap_manualjournalsline_jnlref2\r\n",
							"    ,sap_manualjournalsline_subdepotcode"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stgeneraljournal1 = spark.sql(\"SELECT * FROM stgeneraljournal1\")\r\n",
							"# stgeneraljournal2 = spark.sql(\"SELECT * FROM stgeneraljournal2\")\r\n",
							"# stgeneraljournal3 = spark.sql(\"SELECT * FROM stgeneraljournal3\")\r\n",
							"stgeneraljournal4 = spark.sql(\"SELECT * FROM stgeneraljournal4\")\r\n",
							"stgeneraljournal5 = spark.sql(\"SELECT * FROM stgeneraljournal5\")\r\n",
							"stgeneraljournal6 = spark.sql(\"SELECT * FROM stgeneraljournal6\")\r\n",
							"stgeneraljournal7 = spark.sql(\"SELECT * FROM stgeneraljournal7\")"
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stgeneraljournal = stgeneraljournal4.unionByName(stgeneraljournal5, allowMissingColumns = True).unionByName(stgeneraljournal6, allowMissingColumns = True).unionByName(stgeneraljournal7, allowMissingColumns = True)"
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stgeneraljournal = stgeneraljournal.withColumnRenamed(\"sap_manualjournalsheader_postingdate\",\"sap_generaljournalheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_duedate\",\"sap_generaljournalheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctotal\",\"sap_generaljournalheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctype\",\"sap_generaljournalheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_transid\",\"sap_generaljournalheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linenum\",\"sap_generaljournalline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_acctcode\",\"sap_generaljournalline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_objtype\",\"sap_generaljournalheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_project\",\"sap_generaljournalline_project\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatgroup\",\"sap_generaljournalline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatrate\",\"sap_generaljournalline_vatrate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatamount\",\"sap_generaljournalline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_description\",\"sap_generaljournalline_description\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref1\",\"sap_generaljournalline_jnlref1\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref2\",\"sap_generaljournalline_jnlref2\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_subdepotcode\",\"sap_generaljournalline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linetotal\",\"sap_generaljournalline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_doccat\",\"sap_generaljournalline_doccat\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stgeneraljournal.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stgeneraljournal.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 50
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 51
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/09_DIST_STDCTransfer')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f4f90490-670d-4169-8960-148013ef1c42"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dbodc_transfer LMS Table\r\n",
							"# dbodc_transfer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodc_transfer.parquet', format='parquet')\r\n",
							"# dbodc_transfer.createOrReplaceTempView(\"dbodc_transfer\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdctransfer\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    dct.id as lms_dctransfer_id\r\n",
							"    ,dct.destinationstoreid as lms_dctransfer_destinationstoreid\r\n",
							"    ,dct.transfercode as lms_dctransfer_transfercode\r\n",
							"    ,dct.audittype as lms_dctransfer_audittype\r\n",
							"    ,dct.qty as lms_dctransfer_qty\r\n",
							"    ,dct.dc_prepackid as lms_dctransfer_dc_prepackid\r\n",
							"    ,dct.acceptancedate as lms_dctransfer_acceptancedate\r\n",
							"    ,dct.auditflag as lms_dctransfer_auditflag\r\n",
							"    ,dct.audituserid as lms_dctransfer_audituserid\r\n",
							"    ,dct.auditlocid as lms_dctransfer_auditlocid\r\n",
							"    ,dct.counted as lms_dctransfer_counted\r\n",
							"    ,dct.damagecount as lms_dctransfer_damagecount\r\n",
							"    ,dct.uploaded as lms_dctransfer_uploaded\r\n",
							"    ,dct.dc_torderid as lms_dctransfer_dc_torderid\r\n",
							"    ,dct.duedate as lms_dctransfer_duedate\r\n",
							"    ,dct.destinationlocationcode as lms_dctransfer_destinationlocationcode\r\n",
							"    ,dct.destinationlocationtypecode as lms_dctransfer_destinationlocationtypecode\r\n",
							"    ,dct.processfamilycode as lms_dctransfer_processfamilycode\r\n",
							"    ,dct.grnversion as lms_dctransfer_grnversion\r\n",
							"\r\n",
							"FROM dbodc_transfer dct\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdctransfer = spark.sql(\"SELECT * FROM stdctransfer\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stdctransfer.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdctransfer.parquet', mode = \"overwrite\")\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/09_LH_STTripTrackingHistory')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6e3f8ef8-2ee2-470d-b161-597dd188927f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						}
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the publictriptrackinghistory TMS Table\r\n",
							"# publictriptrackinghistory = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictriptrackinghistory.parquet', format='parquet')\r\n",
							"# publictriptrackinghistory.createOrReplaceTempView(\"publictriptrackinghistory\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttriptrackinghistory\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    t.id as tms_triptrackinghistory_id\r\n",
							"    ,t.tripid as tms_triptrackinghistory_tripid\r\n",
							"    ,t.controllerid as tms_triptrackinghistory_controllerid\r\n",
							"    ,to_timestamp(t.fromdate) as tms_triptrackinghistory_fromdate\r\n",
							"    ,to_timestamp(t.todate) as tms_triptrackinghistory_todate\r\n",
							"    ,t.actionedby as tms_triptrackinghistory_actionedby\r\n",
							"    ,t.controllername as tms_triptrackinghistory_controllername\r\n",
							"    ,t.actionedbyname as tms_triptrackinghistory_actionedbyname\r\n",
							"\r\n",
							"\r\n",
							"FROM publictriptrackinghistory t"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttriptrackinghistory = spark.sql(\"SELECT * FROM sttriptrackinghistory\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sttriptrackinghistory.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/OPS/sttriptrackinghistory.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/09_STTransactions')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0e795848-884a-48ed-b9d3-ee1513120c68"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 72
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the stdocuments SAP Table\r\n",
							"# stdocuments = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stdocuments.parquet', format='parquet')\r\n",
							"# stdocuments.createOrReplaceTempView(\"stdocuments\")\r\n",
							"\r\n",
							"# ######################################################################## UNION\r\n",
							"\r\n",
							"# #Create DataFrame for the stmanualjournal SAP Table\r\n",
							"# stmanualjournal = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stmanualjournal.parquet', format='parquet')\r\n",
							"# stmanualjournal.createOrReplaceTempView(\"stmanualjournal\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stdirectposting SAP Table\r\n",
							"# stdirectposting = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stdirectposting.parquet', format='parquet')\r\n",
							"# stdirectposting.createOrReplaceTempView(\"stdirectposting\")\r\n",
							"\r\n",
							"# ######################################################################## UNION\r\n",
							"\r\n",
							"# #Create DataFrame for the stgeneraljournal SAP Table\r\n",
							"# stgeneraljournal = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stgeneraljournal.parquet', format='parquet')\r\n",
							"# stgeneraljournal.createOrReplaceTempView(\"stgeneraljournal\")\r\n",
							"\r\n",
							"# ######################################################################## UNION\r\n",
							"\r\n",
							"# #Create DataFrame for the ststocktransactions SAP Table\r\n",
							"# ststocktransactions = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/ststocktransactions.parquet', format='parquet')\r\n",
							"# ststocktransactions.createOrReplaceTempView(\"ststocktransactions\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stdiscountjournal SAP Table\r\n",
							"# stdiscountjournal = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stdiscountjournal.parquet', format='parquet')\r\n",
							"# stdiscountjournal.createOrReplaceTempView(\"stdiscountjournal\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stsalesinvoiceinventory SAP Table\r\n",
							"# stsalesinvoiceinventory = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stsalesinvoiceinventory.parquet', format='parquet')\r\n",
							"# stsalesinvoiceinventory.createOrReplaceTempView(\"stsalesinvoiceinventory\")\r\n",
							"\r\n",
							"# #Create DataFrame for the ststockrevaluations SAP Table\r\n",
							"# ststockrevaluations = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/ststockrevaluations.parquet', format='parquet')\r\n",
							"# ststockrevaluations.createOrReplaceTempView(\"ststockrevaluations\")\r\n",
							"\r\n",
							"# ######################################################################## UNION\r\n",
							"\r\n",
							"# #Create DataFrame for the stpurchasepricevariance SAP Table\r\n",
							"# stpurchasepricevariance = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stpurchasepricevariance.parquet', format='parquet')\r\n",
							"# stpurchasepricevariance.createOrReplaceTempView(\"stpurchasepricevariance\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stcostofgoods SAP Table\r\n",
							"# stcostofgoods = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stcostofgoods.parquet', format='parquet')\r\n",
							"# stcostofgoods.createOrReplaceTempView(\"stcostofgoods\")\r\n",
							"\r\n",
							"\r\n",
							"# ######################################################################## LEFT JOIN\r\n",
							"\r\n",
							"# #Create DataFrame for the stchartofaccounts SAP Table\r\n",
							"# stchartofaccounts = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stchartofaccounts.parquet', format='parquet')\r\n",
							"# stchartofaccounts.createOrReplaceTempView(\"stchartofaccounts\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stitems SAP Table\r\n",
							"# stitems = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/stitems.parquet', format='parquet')\r\n",
							"# stitems.createOrReplaceTempView(\"stitems\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 73
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# %%pyspark\r\n",
							"# exceptions = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Finance and Operations Mapping Sources/SAP_Transactions_Exceptions.csv', format='csv'\r\n",
							"# , header=True\r\n",
							"# )\r\n",
							""
						],
						"outputs": [],
						"execution_count": 74
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# import pandas as pd\r\n",
							"# from pyspark.sql.types import DecimalType\r\n",
							"# from pyspark.sql.functions import col"
						],
						"outputs": [],
						"execution_count": 75
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"exceptions = exceptions.withColumn('sap_transactionsline_linetotal', col('sap_transactionsline_linetotal').cast(DecimalType(30,6)))\\\r\n",
							".withColumn('sap_transactionsheader_docnum', col('sap_transactionsheader_docnum').cast('int'))\\\r\n",
							".withColumn('sap_transactionsheader_transid', col('sap_transactionsheader_transid').cast('int'))\\\r\n",
							".withColumn('sap_transactionsline_u_ir_number', col('sap_transactionsline_u_ir_number').cast('int'))\r\n",
							""
						],
						"outputs": [],
						"execution_count": 76
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"exceptions.createOrReplaceTempView(\"exceptions\")"
						],
						"outputs": [],
						"execution_count": 77
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdocuments = stdocuments.withColumnRenamed(\"sap_documentsline_polookupid\",\"sap_transactionsline_polookupid\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_docentry\",\"sap_transactionsheader_docentry\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_docnum\",\"sap_transactionsheader_docnum\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_doctype\",\"sap_transactionsheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_objtype\",\"sap_transactionsheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_postingdate\",\"sap_transactionsheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_duedate\",\"sap_transactionsheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_cardcode\",\"sap_transactionsheader_cardcode\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_cardref\",\"sap_transactionsheader_cardref\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_discprcnt\",\"sap_transactionsheader_discprcnt\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_discsum\",\"sap_transactionsheader_discsum\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_doctotal\",\"sap_transactionsheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_comments\",\"sap_transactionsheader_comments\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_transid\",\"sap_transactionsheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_documentsheader_u_expense_depot\",\"sap_transactionsheader_u_expense_depot\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_linenum\",\"sap_transactionsline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_linestatus\",\"sap_transactionsline_linestatus\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_itemcode\",\"sap_transactionsline_itemcode\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_dscription\",\"sap_transactionsline_dscription\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_quantity\",\"sap_transactionsline_quantity\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_openqty\",\"sap_transactionsline_openqty\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_price\",\"sap_transactionsline_price\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_rate\",\"sap_transactionsline_rate\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_discprcnt\",\"sap_transactionsline_discprcnt\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_linetotal\",\"sap_transactionsline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_opensum\",\"sap_transactionsline_opensum\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_pricebefdi\",\"sap_transactionsline_pricebefdi\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_docdate\",\"sap_transactionsline_docdate\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_project\",\"sap_transactionsline_project\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_vatprcnt\",\"sap_transactionsline_vatprcnt\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_vatgroup\",\"sap_transactionsline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_vatamount\",\"sap_transactionsline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_u_reason\",\"sap_transactionsline_u_reason\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_u_expenseitem\",\"sap_transactionsline_u_expenseitem\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_u_fueldate\",\"sap_transactionsline_u_fueldate\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_acctcode\",\"sap_transactionsline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_doccat\",\"sap_transactionsline_doccat\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_subdepotcode\",\"sap_transactionsline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_u_rate\",\"sap_transactionsline_u_rate\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_u_ir_number\",\"sap_transactionsline_u_ir_number\")\\\r\n",
							".withColumnRenamed(\"sap_documentsline_discsum\",\"sap_transactionsline_discsum\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 78
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmanualjournal = stmanualjournal.withColumnRenamed(\"sap_manualjournalsheader_postingdate\",\"sap_transactionsheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_duedate\",\"sap_transactionsheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctotal\",\"sap_transactionsheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_doctype\",\"sap_transactionsheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_transid\",\"sap_transactionsheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linenum\",\"sap_transactionsline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_acctcode\",\"sap_transactionsline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsheader_objtype\",\"sap_transactionsheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_project\",\"sap_transactionsline_project\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatgroup\",\"sap_transactionsline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatrate\",\"sap_transactionsline_vatrate\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_vatamount\",\"sap_transactionsline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_description\",\"sap_transactionsline_description\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref1\",\"sap_transactionsline_jnlref1\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_jnlref2\",\"sap_transactionsline_jnlref2\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_subdepotcode\",\"sap_transactionsline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_linetotal\",\"sap_transactionsline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_manualjournalsline_doccat\",\"sap_transactionsline_doccat\")"
						],
						"outputs": [],
						"execution_count": 79
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdirectposting = stdirectposting.withColumnRenamed(\"sap_directpostingheader_postingdate\",\"sap_transactionsheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingheader_duedate\",\"sap_transactionsheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingheader_doctotal\",\"sap_transactionsheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingheader_doctype\",\"sap_transactionsheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingheader_transid\",\"sap_transactionsheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingline_linenum\",\"sap_transactionsline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingline_acctcode\",\"sap_transactionsline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingheader_objtype\",\"sap_transactionsheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingline_project\",\"sap_transactionsline_project\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingline_vatgroup\",\"sap_transactionsline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingline_vatrate\",\"sap_transactionsline_vatrate\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingline_vatamount\",\"sap_transactionsline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingline_description\",\"sap_transactionsline_description\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingline_jnlref1\",\"sap_transactionsline_jnlref1\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingline_jnlref2\",\"sap_transactionsline_jnlref2\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingline_subdepotcode\",\"sap_transactionsline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingline_linetotal\",\"sap_transactionsline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_directpostingline_doccat\",\"sap_transactionsline_doccat\")"
						],
						"outputs": [],
						"execution_count": 80
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stgeneraljournal = stgeneraljournal.withColumnRenamed(\"sap_generaljournalheader_postingdate\",\"sap_transactionsheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalheader_duedate\",\"sap_transactionsheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalheader_doctotal\",\"sap_transactionsheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalheader_doctype\",\"sap_transactionsheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalheader_transid\",\"sap_transactionsheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalline_linenum\",\"sap_transactionsline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalline_acctcode\",\"sap_transactionsline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalheader_objtype\",\"sap_transactionsheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalline_project\",\"sap_transactionsline_project\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalline_vatgroup\",\"sap_transactionsline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalline_vatrate\",\"sap_transactionsline_vatrate\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalline_vatamount\",\"sap_transactionsline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalline_description\",\"sap_transactionsline_description\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalline_jnlref1\",\"sap_transactionsline_jnlref1\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalline_jnlref2\",\"sap_transactionsline_jnlref2\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalline_subdepotcode\",\"sap_transactionsline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalline_linetotal\",\"sap_transactionsline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_generaljournalline_doccat\",\"sap_transactionsline_doccat\")"
						],
						"outputs": [],
						"execution_count": 81
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ststocktransactions = ststocktransactions.withColumnRenamed(\"sap_stocktransactionsheader_docentry\",\"sap_transactionsheader_docentry\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsheader_docnum\",\"sap_transactionsheader_docnum\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsheader_doctype\",\"sap_transactionsheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsheader_objtype\",\"sap_transactionsheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsheader_postingdate\",\"sap_transactionsheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsheader_duedate\",\"sap_transactionsheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsheader_cardcode\",\"sap_transactionsheader_cardcode\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsheader_cardref\",\"sap_transactionsheader_cardref\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsheader_discprcnt\",\"sap_transactionsheader_discprcnt\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsheader_discsum\",\"sap_transactionsheader_discsum\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsheader_doctotal\",\"sap_transactionsheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsheader_comments\",\"sap_transactionsheader_comments\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsheader_transid\",\"sap_transactionsheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsheader_u_expense_depot\",\"sap_transactionsheader_u_expense_depot\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_linenum\",\"sap_transactionsline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_linestatus\",\"sap_transactionsline_linestatus\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_itemcode\",\"sap_transactionsline_itemcode\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_dscription\",\"sap_transactionsline_dscription\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_quantity\",\"sap_transactionsline_quantity\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_openqty\",\"sap_transactionsline_openqty\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_price\",\"sap_transactionsline_price\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_rate\",\"sap_transactionsline_rate\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_discprcnt\",\"sap_transactionsline_discprcnt\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_linetotal\",\"sap_transactionsline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_opensum\",\"sap_transactionsline_opensum\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_pricebefdi\",\"sap_transactionsline_pricebefdi\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_docdate\",\"sap_transactionsline_docdate\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_project\",\"sap_transactionsline_project\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_vatprcnt\",\"sap_transactionsline_vatprcnt\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_vatgroup\",\"sap_transactionsline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_vatamount\",\"sap_transactionsline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_u_reason\",\"sap_transactionsline_u_reason\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_u_expenseitem\",\"sap_transactionsline_u_expenseitem\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_u_fueldate\",\"sap_transactionsline_u_fueldate\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_acctcode\",\"sap_transactionsline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_doccat\",\"sap_transactionsline_doccat\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_subdepotcode\",\"sap_transactionsline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_stocktransactionsline_discsum\",\"sap_transactionsline_discsum\")"
						],
						"outputs": [],
						"execution_count": 82
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdiscountjournal = stdiscountjournal.withColumnRenamed(\"sap_discountjournalheader_postingdate\",\"sap_transactionsheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalheader_duedate\",\"sap_transactionsheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalheader_doctotal\",\"sap_transactionsheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalheader_doctype\",\"sap_transactionsheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalheader_transid\",\"sap_transactionsheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalline_linenum\",\"sap_transactionsline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalline_acctcode\",\"sap_transactionsline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalheader_objtype\",\"sap_transactionsheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalline_project\",\"sap_transactionsline_project\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalline_vatgroup\",\"sap_transactionsline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalline_vatrate\",\"sap_transactionsline_vatrate\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalline_vatamount\",\"sap_transactionsline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalline_description\",\"sap_transactionsline_description\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalline_jnlref1\",\"sap_transactionsline_jnlref1\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalline_jnlref2\",\"sap_transactionsline_jnlref2\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalline_subdepotcode\",\"sap_transactionsline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalline_linetotal\",\"sap_transactionsline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_discountjournalline_doccat\",\"sap_transactionsline_doccat\")"
						],
						"outputs": [],
						"execution_count": 83
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stsalesinvoiceinventory = stsalesinvoiceinventory.withColumnRenamed(\"sap_salesinvoiceinventoryheader_postingdate\",\"sap_transactionsheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryheader_duedate\",\"sap_transactionsheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryheader_doctotal\",\"sap_transactionsheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryheader_doctype\",\"sap_transactionsheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryheader_transid\",\"sap_transactionsheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_linenum\",\"sap_transactionsline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_acctcode\",\"sap_transactionsline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryheader_objtype\",\"sap_transactionsheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_project\",\"sap_transactionsline_project\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_vatgroup\",\"sap_transactionsline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_vatrate\",\"sap_transactionsline_vatrate\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_vatamount\",\"sap_transactionsline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_description\",\"sap_transactionsline_description\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_jnlref1\",\"sap_transactionsline_jnlref1\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_jnlref2\",\"sap_transactionsline_jnlref2\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_subdepotcode\",\"sap_transactionsline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_linetotal\",\"sap_transactionsline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_doccat\",\"sap_transactionsline_doccat\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_itemcode\",\"sap_transactionsline_itemcode\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryheader_cardcode\",\"sap_transactionsheader_cardcode\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryheader_cardref\",\"sap_transactionsheader_cardref\")\\\r\n",
							".withColumnRenamed(\"sap_salesinvoiceinventoryline_invntitem\",\"sap_transactionsline_invntitem\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 84
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ststockrevaluations = ststockrevaluations.withColumnRenamed(\"sap_stockrevaluationsheader_docentry\",\"sap_transactionsheader_docentry\")\\\r\n",
							".withColumnRenamed(\"sap_stockrevaluationsheader_docnum\",\"sap_transactionsheader_docnum\")\\\r\n",
							".withColumnRenamed(\"sap_stockrevaluationsheader_objtype\",\"sap_transactionsheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_stockrevaluationsheader_postingdate\",\"sap_transactionsheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_stockrevaluationsheader_comments\",\"sap_transactionsheader_comments\")\\\r\n",
							".withColumnRenamed(\"sap_stockrevaluationsheader_transid\",\"sap_transactionsheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_stockrevaluationsline_linenum\",\"sap_transactionsline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_stockrevaluationsline_itemcode\",\"sap_transactionsline_itemcode\")\\\r\n",
							".withColumnRenamed(\"sap_stockrevaluationsline_dscription\",\"sap_transactionsline_dscription\")\\\r\n",
							".withColumnRenamed(\"sap_stockrevaluationsline_linetotal\",\"sap_transactionsline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_stockrevaluationsline_acctcode\",\"sap_transactionsline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_stockrevaluationsline_doccat\",\"sap_transactionsline_doccat\")\\\r\n",
							".withColumnRenamed(\"sap_stockrevaluationsline_subdepotcode\",\"sap_transactionsline_subdepotcode\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 85
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpurchasepricevariance = stpurchasepricevariance.withColumnRenamed(\"sap_purchasepricevarianceheader_postingdate\",\"sap_transactionsheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceheader_duedate\",\"sap_transactionsheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceheader_doctotal\",\"sap_transactionsheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceheader_doctype\",\"sap_transactionsheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceheader_transid\",\"sap_transactionsheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceline_linenum\",\"sap_transactionsline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceline_acctcode\",\"sap_transactionsline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceheader_objtype\",\"sap_transactionsheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceline_project\",\"sap_transactionsline_project\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceline_vatgroup\",\"sap_transactionsline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceline_vatrate\",\"sap_transactionsline_vatrate\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceline_vatamount\",\"sap_transactionsline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceline_description\",\"sap_transactionsline_description\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceline_jnlref1\",\"sap_transactionsline_jnlref1\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceline_jnlref2\",\"sap_transactionsline_jnlref2\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceline_subdepotcode\",\"sap_transactionsline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceline_linetotal\",\"sap_transactionsline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_purchasepricevarianceline_doccat\",\"sap_transactionsline_doccat\")"
						],
						"outputs": [],
						"execution_count": 86
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stcostofgoods = stcostofgoods.withColumnRenamed(\"sap_costofgoodsheader_postingdate\",\"sap_transactionsheader_postingdate\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsheader_duedate\",\"sap_transactionsheader_duedate\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsheader_doctotal\",\"sap_transactionsheader_doctotal\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsheader_doctype\",\"sap_transactionsheader_doctype\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsheader_transid\",\"sap_transactionsheader_transid\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsline_linenum\",\"sap_transactionsline_linenum\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsline_acctcode\",\"sap_transactionsline_acctcode\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsheader_objtype\",\"sap_transactionsheader_objtype\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsline_project\",\"sap_transactionsline_project\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsline_vatgroup\",\"sap_transactionsline_vatgroup\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsline_vatrate\",\"sap_transactionsline_vatrate\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsline_vatamount\",\"sap_transactionsline_vatamount\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsline_description\",\"sap_transactionsline_description\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsline_jnlref1\",\"sap_transactionsline_jnlref1\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsline_jnlref2\",\"sap_transactionsline_jnlref2\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsline_subdepotcode\",\"sap_transactionsline_subdepotcode\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsline_linetotal\",\"sap_transactionsline_linetotal\")\\\r\n",
							".withColumnRenamed(\"sap_costofgoodsline_doccat\",\"sap_transactionsline_doccat\")"
						],
						"outputs": [],
						"execution_count": 87
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"transactions_tmp = stdocuments.unionByName(stmanualjournal, allowMissingColumns = True).unionByName(stdirectposting, allowMissingColumns = True).unionByName(stgeneraljournal, allowMissingColumns = True).unionByName(ststocktransactions, allowMissingColumns = True).unionByName(stdiscountjournal, allowMissingColumns = True).unionByName(stsalesinvoiceinventory, allowMissingColumns = True).unionByName(ststockrevaluations, allowMissingColumns = True).unionByName(stpurchasepricevariance, allowMissingColumns = True).unionByName(stcostofgoods, allowMissingColumns = True)\r\n",
							"transactions_tmp.createOrReplaceTempView(\"transactions_tmp\")"
						],
						"outputs": [],
						"execution_count": 88
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttransactions_tmp2\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    t.sap_transactionsline_polookupid\r\n",
							"    ,t.sap_transactionsheader_docentry \r\n",
							"    ,t.sap_transactionsheader_docnum \r\n",
							"    ,t.sap_transactionsheader_doctype \r\n",
							"    ,t.sap_transactionsheader_objtype \r\n",
							"    ,t.sap_transactionsheader_postingdate \r\n",
							"    ,t.sap_transactionsheader_duedate \r\n",
							"    ,t.sap_transactionsheader_cardcode \r\n",
							"    ,t.sap_transactionsheader_cardref \r\n",
							"    ,t.sap_transactionsheader_discprcnt \r\n",
							"    ,t.sap_transactionsheader_discsum \r\n",
							"    ,t.sap_transactionsheader_doctotal \r\n",
							"    ,t.sap_transactionsheader_comments \r\n",
							"    ,t.sap_transactionsheader_transid \r\n",
							"    ,t.sap_transactionsheader_u_expense_depot \r\n",
							"    ,t.sap_transactionsline_linenum \r\n",
							"    ,t.sap_transactionsline_linestatus \r\n",
							"    ,t.sap_transactionsline_itemcode \r\n",
							"    ,t.sap_transactionsline_dscription \r\n",
							"    ,t.sap_transactionsline_quantity \r\n",
							"    ,t.sap_transactionsline_openqty \r\n",
							"    ,t.sap_transactionsline_price \r\n",
							"    ,t.sap_transactionsline_rate \r\n",
							"    ,t.sap_transactionsline_discprcnt \r\n",
							"    ,t.sap_transactionsline_linetotal\r\n",
							"    -- ,(sap_transactionsline_linetotal+sap_transactionsline_discsum) as sap_transactionsline_linetotallessdiscount\r\n",
							"    ,(sap_transactionsline_linetotal+(sap_transactionsline_linetotal*(sap_transactionsheader_discprcnt*-1/100))) as sap_transactionsline_linetotallessdiscount\r\n",
							"    ,t.sap_transactionsline_opensum \r\n",
							"    ,t.sap_transactionsline_pricebefdi \r\n",
							"    ,t.sap_transactionsline_docdate \r\n",
							"    ,t.sap_transactionsline_project \r\n",
							"    ,t.sap_transactionsline_vatprcnt \r\n",
							"    ,t.sap_transactionsline_vatgroup \r\n",
							"    ,t.sap_transactionsline_vatamount \r\n",
							"    ,t.sap_transactionsline_u_reason \r\n",
							"    ,t.sap_transactionsline_u_expenseitem \r\n",
							"    ,t.sap_transactionsline_u_fueldate \r\n",
							"    ,t.sap_transactionsline_acctcode \r\n",
							"    ,t.sap_transactionsline_doccat \r\n",
							"    ,COALESCE(t.sap_transactionsline_subdepotcode,c.sap_account_segment_2) sap_transactionsline_subdepotcode\r\n",
							"    ,t.sap_transactionsline_u_rate \r\n",
							"    ,t.sap_transactionsline_u_ir_number \r\n",
							"    ,t.sap_transactionsline_discsum \r\n",
							"    ,t.sap_transactionsline_vatrate \r\n",
							"    ,t.sap_transactionsline_description \r\n",
							"    ,t.sap_transactionsline_jnlref1 \r\n",
							"    ,t.sap_transactionsline_jnlref2 \r\n",
							"    ,i.sap_item_invntitem as sap_transactionsline_invntitem\r\n",
							"    ,CASE \r\n",
							"\t\tWHEN (t.sap_transactionsline_doccat = 'salesinvoice' and i.sap_item_invntitem = 'Y') THEN 1\r\n",
							"\t\tWHEN (t.sap_transactionsline_doccat = 'goodsreturn' and c.sap_account_groupmask IN (5,6)) THEN 1\r\n",
							"\t\tWHEN (t.sap_transactionsline_doccat NOT IN ('generaljournal','manualjournal','directposting') and c.sap_account_groupmask IN (1,2,3)) THEN 1\r\n",
							"\t\tELSE 0\r\n",
							"\tEND as exclude\r\n",
							"\r\n",
							"FROM transactions_tmp t\r\n",
							"LEFT JOIN stchartofaccounts c on c.sap_account_acctcode = t.sap_transactionsline_acctcode\r\n",
							"LEFT JOIN stitems i on i.sap_item_itemcode = t.sap_transactionsline_itemcode\r\n",
							"WHERE c.sap_account_accttype <> 'COST RECOVERY'\r\n",
							"AND t.sap_transactionsheader_postingdate >= '2016-04-01 00:00:00.000'\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 89
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttransactions_tmp2 = spark.sql(\"SELECT * FROM sttransactions_tmp2\")"
						],
						"outputs": [],
						"execution_count": 90
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttransactionsexceptions\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    sap_transactionsheader_cardcode\r\n",
							"    ,sap_transactionsline_acctcode\r\n",
							"    ,sap_transactionsline_itemcode\r\n",
							"    ,to_date(sap_transactionsheader_postingdate,\"dd/MM/yyyy\") as sap_transactionsheader_postingdate\r\n",
							"    ,sap_transactionsline_subdepotcode\r\n",
							"    ,sap_transactionsline_doccat\r\n",
							"    ,sap_transactionsheader_docnum\r\n",
							"    ,sap_transactionsline_project\r\n",
							"    ,sap_transactionsline_linetotal \r\n",
							"    ,sap_transactionsline_linetotal as sap_transactionsline_linetotallessdiscount\r\n",
							"    ,sap_transactionsline_linetotal as sap_transactionsline_linetotalfinal\r\n",
							"    ,sap_transactionsheader_cardref\r\n",
							"    ,sap_transactionsheader_comments\r\n",
							"    ,sap_transactionsheader_transid\r\n",
							"    ,sap_transactionsline_u_ir_number\r\n",
							"    --,sap_transactionsline_goodsreceiptnumber\r\n",
							"    ,sap_transactionsline_exception\r\n",
							"\r\n",
							"FROM exceptions\r\n",
							""
						],
						"outputs": [],
						"execution_count": 91
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttransactionsexceptions = spark.sql(\"SELECT * FROM sttransactionsexceptions\")"
						],
						"outputs": [],
						"execution_count": 92
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttransactionsdetail_tmp\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"  t.sap_transactionsline_polookupid\r\n",
							"  ,t.sap_transactionsheader_docentry \r\n",
							"  ,t.sap_transactionsheader_docnum \r\n",
							"  ,t.sap_transactionsheader_doctype \r\n",
							"  ,t.sap_transactionsheader_objtype \r\n",
							"  ,to_date(t.sap_transactionsheader_postingdate,'yyyy-MM-dd') as sap_transactionsheader_postingdate\r\n",
							"  ,to_date(t.sap_transactionsheader_duedate,'yyyy-MM-dd') as sap_transactionsheader_duedate\r\n",
							"  ,t.sap_transactionsheader_cardcode \r\n",
							"  ,t.sap_transactionsheader_cardref \r\n",
							"  ,t.sap_transactionsheader_discprcnt \r\n",
							"  ,t.sap_transactionsheader_discsum \r\n",
							"  ,t.sap_transactionsheader_doctotal \r\n",
							"  ,t.sap_transactionsheader_comments \r\n",
							"  ,t.sap_transactionsheader_transid \r\n",
							"  ,t.sap_transactionsheader_u_expense_depot \r\n",
							"  ,t.sap_transactionsline_linenum \r\n",
							"  ,t.sap_transactionsline_linestatus \r\n",
							"  ,t.sap_transactionsline_itemcode \r\n",
							"  ,t.sap_transactionsline_dscription \r\n",
							"  ,t.sap_transactionsline_quantity \r\n",
							"  ,t.sap_transactionsline_openqty \r\n",
							"  ,t.sap_transactionsline_price \r\n",
							"  ,t.sap_transactionsline_rate \r\n",
							"  ,t.sap_transactionsline_discprcnt \r\n",
							"  ,t.sap_transactionsline_linetotal\r\n",
							"  ,t.sap_transactionsline_linetotallessdiscount\r\n",
							"  ,COALESCE(t.sap_transactionsline_linetotallessdiscount,t.sap_transactionsline_linetotal) as sap_transactionsline_linetotalfinal\r\n",
							"  ,CASE \r\n",
							"      WHEN \r\n",
							"      t.sap_transactionsline_doccat in ('generaljournal','purchaseorder') THEN 0\r\n",
							"      ELSE COALESCE(t.sap_transactionsline_linetotallessdiscount,t.sap_transactionsline_linetotal)\r\n",
							"    END as sap_transactionsline_linetotalfinalexclgjpo\r\n",
							"  ,t.sap_transactionsline_opensum \r\n",
							"  ,t.sap_transactionsline_pricebefdi \r\n",
							"  ,to_date(t.sap_transactionsline_docdate,'yyyy-MM-dd') as  sap_transactionsline_docdate\r\n",
							"  ,t.sap_transactionsline_project \r\n",
							"  ,t.sap_transactionsline_vatprcnt \r\n",
							"  ,t.sap_transactionsline_vatgroup \r\n",
							"  ,t.sap_transactionsline_vatamount \r\n",
							"  ,t.sap_transactionsline_u_reason \r\n",
							"  ,t.sap_transactionsline_u_expenseitem \r\n",
							"  ,to_date(t.sap_transactionsline_u_fueldate,'yyyy-MM-dd') as sap_transactionsline_u_fueldate\r\n",
							"  ,t.sap_transactionsline_acctcode \r\n",
							"  ,t.sap_transactionsline_doccat \r\n",
							"  ,t.sap_transactionsline_subdepotcode \r\n",
							"  ,t.sap_transactionsline_u_rate \r\n",
							"  ,t.sap_transactionsline_u_ir_number \r\n",
							"  ,t.sap_transactionsline_discsum \r\n",
							"  ,t.sap_transactionsline_vatrate \r\n",
							"  ,t.sap_transactionsline_description \r\n",
							"  ,t.sap_transactionsline_jnlref1 \r\n",
							"  ,t.sap_transactionsline_jnlref2 \r\n",
							"  ,t.sap_transactionsline_invntitem \r\n",
							"\r\n",
							"FROM sttransactions_tmp2 t\r\n",
							"WHERE t.exclude = 0\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 93
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttransactionsdetail_tmp = spark.sql(\"SELECT * FROM sttransactionsdetail_tmp\")"
						],
						"outputs": [],
						"execution_count": 94
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttransactionsdetail = sttransactionsdetail_tmp.unionByName(sttransactionsexceptions, allowMissingColumns = True)\r\n",
							"sttransactionsdetail.createOrReplaceTempView(\"sttransactionsdetail\")"
						],
						"outputs": [],
						"execution_count": 95
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sttransactionsdetail.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/sttransactionsdetail.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 96
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttransactionssummary\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"   sap_transactionsline_acctcode\r\n",
							"  ,sap_transactionsline_doccat\r\n",
							"  ,to_date(sap_transactionsheader_postingdate,'yyyy-MM-dd') as sap_transactionsheader_postingdate\r\n",
							"  ,sap_transactionsline_subdepotcode\r\n",
							"  ,SUM(sap_transactionsline_linetotal) sap_transactionsline_linetotal\r\n",
							"  ,SUM(sap_transactionsline_linetotalfinal) sap_transactionsline_linetotalfinal\r\n",
							"  ,SUM(sap_transactionsline_linetotalfinalexclgjpo) sap_transactionsline_linetotalfinalexclgjpo\r\n",
							"FROM sttransactionsdetail t\r\n",
							"GROUP BY\r\n",
							"\tsap_transactionsline_acctcode,\r\n",
							"  sap_transactionsheader_postingdate,\r\n",
							"  sap_transactionsline_doccat,\r\n",
							"  sap_transactionsline_subdepotcode\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 97
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttransactionssummary = spark.sql(\"SELECT * FROM sttransactionssummary\")"
						],
						"outputs": [],
						"execution_count": 98
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sttransactionssummary.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/sttransactionssummary.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 99
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 100
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_DIST_STEndorsments')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9dd9d3a7-28c0-47b2-a9c5-bf55b05f6041"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #create dataframe for the publicclaim orv table\r\n",
							"# publicclaim = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicclaim.parquet', format='parquet')\r\n",
							"# publicclaim.createOrReplaceTempView(\"publicclaim\")\r\n",
							"\r\n",
							"# #create dataframe for the publicdelivery orv table\r\n",
							"# publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"# publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbowbendorsement LMS Table\r\n",
							"# dbowbendorsement = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowbendorsement.parquet', format='parquet')\r\n",
							"# dbowbendorsement.createOrReplaceTempView(\"dbowbendorsement\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_endorsement LMS Table\r\n",
							"# dbodb_endorsement = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_endorsement.parquet', format='parquet')\r\n",
							"# dbodb_endorsement.createOrReplaceTempView(\"dbodb_endorsement\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stendorsments_tmp\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    c.id\r\n",
							"    ,c.delid\r\n",
							"\t,c.claimtype\r\n",
							"\t,to_timestamp(c.claimdate) as claimdate\r\n",
							"\t,c.did\r\n",
							"\t,c.parcelid\r\n",
							"\t,c.barcode\r\n",
							"\t,c.attachid\r\n",
							"\t,c.note\r\n",
							"    ,d.waybillid\r\n",
							"    \r\n",
							"FROM publicclaim c\r\n",
							"LEFT JOIN publicdelivery d on d.id = c.delid"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stendorsments\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    e.ID as lms_db_endorsement_id\r\n",
							"\t,e.Description as lms_db_endorsement_description\r\n",
							"    ,er.ID as lms_wbendorsement_id\r\n",
							"    ,er.Barcode as lms_wbendorsement_barcode\r\n",
							"    ,er.WaybillID as lms_wbendorsement_waybillid\r\n",
							"    ,et.id as orv_claim_id\r\n",
							"    ,et.delid as orv_claim_delid\r\n",
							"\t,et.claimtype as orv_claim_claimtype\r\n",
							"\t,et.claimdate as orv_claim_claimdate\r\n",
							"\t,et.did as orv_claim_did\r\n",
							"\t,et.parcelid as orv_claim_parcelid\r\n",
							"\t,et.barcode as orv_claim_barcode\r\n",
							"\t,et.attachid as orv_claim_attachid\r\n",
							"\t,et.note as orv_claim_note\r\n",
							"    \r\n",
							"FROM dbodb_endorsement e\r\n",
							"LEFT JOIN dbowbendorsement er on er.EType = e.ID\r\n",
							"LEFT JOIN stendorsments_tmp et on et.waybillid||'|'||et.barcode = er.WaybillID||'|'||er.barcode"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stendorsments = spark.sql(\"SELECT * FROM stendorsments\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stendorsments.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stendorsments.parquet', mode = \"overwrite\")\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_STFinanceDates')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4c8cff45-3e72-4847-8af8-7e7a3e8b7096"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the sttransactionssummary SAP Table\r\n",
							"# sttransactionssummary = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/sttransactionssummary.parquet', format='parquet')\r\n",
							"# sttransactionssummary.createOrReplaceTempView(\"sttransactionssummary\")"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"endDateDF = spark.sql(\"SELECT max(sap_transactionsheader_postingdate) as enddate FROM sttransactionssummary\")"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"endDate = endDateDF.first()['enddate']"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"beginDate = '2016-04-01'\r\n",
							"\r\n",
							"(\r\n",
							"  # spark.sql(f\"select explode(sequence(to_date('{beginDate}'), current_date(), interval 1 day)) as calendarDate\").createOrReplaceTempView('dates')\r\n",
							"  spark.sql(f\"select explode(sequence(to_date('{beginDate}'), to_date('{endDate}'), interval 1 day)) as calendarDate\").createOrReplaceTempView('dates')\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stfinancedates\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"  year(calendarDate) * 10000 + month(calendarDate) * 100 + day(calendarDate) AS date_dim_id,\r\n",
							"  CalendarDate AS sap_transactionsheader_postingdate,\r\n",
							"  to_unix_timestamp(calendarDate) AS epoch,\r\n",
							"  year(calendarDate) AS actual_year,\r\n",
							"  year(calendarDate)||'-'||date_format(calendarDate,'MM') AS actual_year_month,\r\n",
							"  date_format(calendarDate, 'MMMM') as actual_month_name,\r\n",
							"  date_format(calendarDate,'MM')as actual_month_number,\r\n",
							"  date_format(calendarDate, 'EEEE') as actual_day_name,\r\n",
							"  dayofweek(calendarDate) AS actual_day_of_week,\r\n",
							"  case\r\n",
							"    when weekday(calendarDate) < 5 then 1\r\n",
							"    else 0\r\n",
							"  end as is_week_day,\r\n",
							"  dayofmonth(calendarDate) as actual_day_of_month,\r\n",
							"  case\r\n",
							"    when calendarDate = last_day(calendarDate) then 1\r\n",
							"    else 0\r\n",
							"  end as is_last_day_of_month,\r\n",
							"  date_format(last_day(calendarDate),'dd') AS last_day_of_month,\r\n",
							"  dayofyear(calendarDate) as actual_day_of_year,\r\n",
							"  weekofyear(calendarDate) as actual_week_of_year,\r\n",
							"  quarter(calendarDate) as actual_quarter_of_year,\r\n",
							"  /* Use fiscal periods needed by organization fiscal calendar */\r\n",
							"  case\r\n",
							"    when month(calendarDate) >= 4 then year(calendarDate) + 1\r\n",
							"    else year(calendarDate)\r\n",
							"  end as fiscal_year,\r\n",
							"  case\r\n",
							"    when month(calendarDate) >= 4 then (year(calendarDate) + 1)||'-'||date_format(calendarDate,'MM')\r\n",
							"    else year(calendarDate)||'-'||date_format(calendarDate,'MM')\r\n",
							"  end as fiscal_year_month,\r\n",
							"  case\r\n",
							"    when month(calendarDate) = 4 then 1\r\n",
							"    when month(calendarDate) = 5 then 2\r\n",
							"    when month(calendarDate) = 6 then 3\r\n",
							"    when month(calendarDate) = 7 then 4\r\n",
							"    when month(calendarDate) = 8 then 5\r\n",
							"    when month(calendarDate) = 9 then 6\r\n",
							"    when month(calendarDate) = 10 then 7\r\n",
							"    when month(calendarDate) = 11 then 8\r\n",
							"    when month(calendarDate) = 12 then 9\r\n",
							"    when month(calendarDate) = 1 then 10\r\n",
							"    when month(calendarDate) = 2 then 11\r\n",
							"    when month(calendarDate) = 3 then 12\r\n",
							"    else 0\r\n",
							"  end as fiscal_month_sort,\r\n",
							"  month(calendarDate) as actual_month_sort\r\n",
							"\r\n",
							"from\r\n",
							"  dates\r\n",
							"order by\r\n",
							"\r\n",
							"  year(calendarDate) desc,  case\r\n",
							"    when month(calendarDate) = 4 then 1\r\n",
							"    when month(calendarDate) = 5 then 2\r\n",
							"    when month(calendarDate) = 6 then 3\r\n",
							"    when month(calendarDate) = 7 then 4\r\n",
							"    when month(calendarDate) = 8 then 5\r\n",
							"    when month(calendarDate) = 9 then 6\r\n",
							"    when month(calendarDate) = 10 then 7\r\n",
							"    when month(calendarDate) = 11 then 8\r\n",
							"    when month(calendarDate) = 12 then 9\r\n",
							"    when month(calendarDate) = 1 then 10\r\n",
							"    when month(calendarDate) = 2 then 11\r\n",
							"    when month(calendarDate) = 3 then 12\r\n",
							"    else 0\r\n",
							"  end,calendarDate  asc\r\n",
							""
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stfinancedates = spark.sql(\"SELECT * FROM stfinancedates\")"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stfinancedates.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stfinancedates.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 36
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_STJournals')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "bef936b6-36bc-45c0-b536-d560859229c7"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dboOJDT SAP Table\r\n",
							"# dboOJDT = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboOJDT.parquet', format='parquet')\r\n",
							"# dboOJDT.createOrReplaceTempView(\"dboOJDT\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboJDT1 SAP Table\r\n",
							"# dboJDT1 = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Unstructured Data/SAP/dboJDT1.parquet', format='parquet')\r\n",
							"# dboJDT1.createOrReplaceTempView(\"dboJDT1\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stchartofaccounts SAP Table\r\n",
							"# stchartofaccounts = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/stchartofaccounts.parquet', format='parquet')\r\n",
							"# stchartofaccounts.createOrReplaceTempView(\"stchartofaccounts\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stsalesinvoice SAP Table\r\n",
							"# stsalesinvoice = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/stsalesinvoice.parquet', format='parquet')\r\n",
							"# stsalesinvoice.createOrReplaceTempView(\"stsalesinvoice\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stitem SAP Table\r\n",
							"# stitem = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/stitem.parquet', format='parquet')\r\n",
							"# stitem.createOrReplaceTempView(\"stitem\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stdocuments SAP Table\r\n",
							"# stdocuments = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/stdocuments.parquet', format='parquet')\r\n",
							"# stdocuments.createOrReplaceTempView(\"stdocuments\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stjournals\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    ojdt.refdate as sap_journalsheader_postingdate\r\n",
							"    ,ojdt.duedate as sap_journalsheader_duedate\r\n",
							"    ,ojdt.loctotal as sap_journalsheader_doctotal\r\n",
							"    ,'J' as sap_journalsheader_doctype\r\n",
							"    ,ojdt.transid as sap_journalsheader_transid\r\n",
							"    ,jdt1.line_id as sap_journalsline_linenum\r\n",
							"    ,jdt1.account as sap_journalsline_acctcode\r\n",
							"    ,ojdt.transtype as sap_journalsheader_objtype\r\n",
							"    ,jdt1.project as sap_journalsline_project\r\n",
							"    ,jdt1.vatgroup as sap_journalsline_vatgroup\r\n",
							"    ,jdt1.vatrate as sap_journalsline_vatrate\r\n",
							"    ,jdt1.vatamount as sap_journalsline_vatamount\r\n",
							"    ,jdt1.linememo as sap_journalsline_description\r\n",
							"    ,jdt1.ref1 as sap_journalsline_jnlref1\r\n",
							"    ,jdt1.ref2 as sap_journalsline_jnlref2\r\n",
							"    ,jdt1.u_depot as sap_journalsline_subdepotcode\r\n",
							"    ,CASE \r\n",
							"        --JOURNAL\r\n",
							"        WHEN (coa.sap_account_groupmask IN (1)) THEN sum((jdt1.debit-jdt1.credit))\r\n",
							"        WHEN (coa.sap_account_groupmask IN (2,3,4,5,6,8)) THEN sum((jdt1.credit-jdt1.debit))\r\n",
							"        ELSE NULL \r\n",
							"    END as  sap_journalsline_linetotal\r\n",
							"    ,CASE \r\n",
							"        WHEN (coa.sap_account_groupmask IN (1,2,3,4,5,6,8)) THEN 'journal'\r\n",
							"        ELSE NULL \r\n",
							"    END as  sap_journalsline_doccat\r\n",
							"    ,si.sap_salesinvoiceline_itemcode as sap_journalsline_itemcode\r\n",
							"    ,CASE \r\n",
							"        WHEN (si.sap_salesinvoiceheader_transid = ojdt.transid \r\n",
							"            AND (ojdt.transtype = 13 AND coa.sap_account_groupmask IN (5,6,7,8)) \r\n",
							"            AND si.sap_salesinvoiceheader_canceled = 'N') THEN sap_salesinvoiceheader_cardcode\r\n",
							"        WHEN (d.sap_documentsheader_transid = ojdt.transid AND coa.sap_account_groupmask IN (1,2,3,4,5,6,8)) THEN d.sap_documentsheader_cardcode\r\n",
							"        ELSE NULL\r\n",
							"    END sap_journalsheader_cardcode\r\n",
							"    ,CASE \r\n",
							"        WHEN (si.sap_salesinvoiceheader_transid = ojdt.transid \r\n",
							"            AND (ojdt.transtype = 13 AND coa.sap_account_groupmask IN (5,6,7,8)) \r\n",
							"            AND si.sap_salesinvoiceheader_canceled = 'N') THEN sap_salesinvoiceheader_numatcard\r\n",
							"        WHEN (d.sap_documentsheader_transid = ojdt.transid AND coa.sap_account_groupmask IN (1,2,3,4,5,6,8)) THEN d.sap_documentsheader_numatcard\r\n",
							"        ELSE NULL\r\n",
							"    END sap_journalsheader_cardref\r\n",
							"   \r\n",
							"FROM dboOJDT ojdt\r\n",
							"LEFT JOIN dboJDT1 jdt1 on jdt1.transid = ojdt.transid\r\n",
							"LEFT JOIN stchartofaccounts coa on coa.sap_account_acctcode = jdt1.account\r\n",
							"LEFT JOIN stsalesinvoice si on si.sap_salesinvoiceheader_transid = jdt1.transid \r\n",
							"    AND (ojdt.transtype = 13 AND coa.sap_account_groupmask IN (5,6,7,8)) \r\n",
							"    AND si.sap_salesinvoiceheader_canceled = 'N'\r\n",
							"LEFT JOIN stitem i on i.sap_item_itemcode = si.sap_salesinvoiceline_itemcode \r\n",
							"    AND (ojdt.transtype = 13 AND coa.sap_account_groupmask IN (5,6,7,8))\r\n",
							"LEFT JOIN stdocuments d on d.sap_documentsheader_transid = jdt1.transid \r\n",
							"    AND coa.sap_account_groupmask IN (1,2,3,4,5,6,8) AND d.sap_documentsline_doccat NOT IN ('journal','purchaseorder')\r\n",
							"GROUP BY\r\n",
							"    ojdt.memo\r\n",
							"    ,ojdt.transtype\r\n",
							"    ,ojdt.duedate\r\n",
							"    ,ojdt.loctotal\r\n",
							"    ,coa.sap_account_groupmask\r\n",
							"    ,coa.sap_account_acctname\r\n",
							"    ,coa.sap_account_segment_0\r\n",
							"    ,coa.sap_account_segment_1\r\n",
							"    ,coa.sap_account_segment_2\r\n",
							"    ,ojdt.refdate\r\n",
							"    ,ojdt.doctype\r\n",
							"    ,ojdt.transid\r\n",
							"    ,jdt1.line_id\r\n",
							"    ,jdt1.account\r\n",
							"    ,jdt1.transtype\r\n",
							"    ,jdt1.refdate\r\n",
							"    ,jdt1.project\r\n",
							"    ,jdt1.vatgroup\r\n",
							"    ,jdt1.vatrate\r\n",
							"    ,jdt1.vatamount\r\n",
							"    ,jdt1.linememo\r\n",
							"    ,jdt1.ref1\r\n",
							"    ,jdt1.ref2\r\n",
							"    ,jdt1.baseref\r\n",
							"    ,jdt1.u_depot\r\n",
							"    ,si.sap_salesinvoiceline_itemcode\r\n",
							"    ,si.sap_salesinvoiceheader_doctype\r\n",
							"    ,si.sap_salesinvoiceheader_transid\r\n",
							"    ,si.sap_salesinvoiceheader_canceled\r\n",
							"    ,si.sap_salesinvoiceheader_cardcode\r\n",
							"    ,si.sap_salesinvoiceheader_numatcard\r\n",
							"    ,d.sap_documentsheader_transid\r\n",
							"    ,d.sap_documentsheader_cardcode\r\n",
							"    ,d.sap_documentsheader_numatcard\r\n",
							"    ,i.sap_item_invntitem\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stjournals = spark.sql(\"SELECT * FROM stjournals\")\r\n",
							"# stjournals.write.parquet('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/stjournals.parquet', mode = \"overwrite\")\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_DIST_ST3MonthRoling')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "60079657-18e0-458c-a695-74be44ed7047"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #create dataframe for the stparcel lms table\r\n",
							"# stparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet/', format='parquet')\r\n",
							"# stparcel.createOrReplaceTempView(\"stparcel\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stlmstrack LMS Table\r\n",
							"# stlmstrack = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet', format='parquet')\r\n",
							"# stlmstrack.createOrReplaceTempView(\"stlmstrack\")\r\n",
							"\r\n",
							"# #create dataframe for the stconsignment lms table\r\n",
							"# stconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stconsignment.parquet/', format='parquet')\r\n",
							"# stconsignment.createOrReplaceTempView(\"stconsignment\")\r\n",
							"\r\n",
							"# #create dataframe for the stwaybill lms table\r\n",
							"# stwaybill = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet/', format='parquet')\r\n",
							"# stwaybill.createOrReplaceTempView(\"stwaybill\")\r\n",
							"\r\n",
							"# #create dataframe for the storder lms table\r\n",
							"# storder = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/storder.parquet/', format='parquet')\r\n",
							"# storder.createOrReplaceTempView(\"storder\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stloadparent LMS Table\r\n",
							"# stloadparent = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet', format='parquet')\r\n",
							"# stloadparent.createOrReplaceTempView(\"stloadparent\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stloadchild LMS Table\r\n",
							"# stloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadchild.parquet', format='parquet')\r\n",
							"# stloadchild.createOrReplaceTempView(\"stloadchild\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"PARCEL CURRENT AND PRIOR YEAR 3MONTHS"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stparcel3myoy\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    *\r\n",
							"FROM stparcel\r\n",
							"WHERE \r\n",
							"(\r\n",
							"    lms_parcel_pdate >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
							"AND \r\n",
							"    lms_parcel_pdate <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
							")\r\n",
							"OR \r\n",
							"(\r\n",
							"    lms_parcel_pdate >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
							"AND \r\n",
							"    lms_parcel_pdate <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
							")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stparcel3myoy = spark.sql(\"SELECT * FROM stparcel3myoy\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stparcel3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stparcel3myoy.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"CONSIGNEMT CURRENT AND PRIOR YEAR 3MONTHS"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stconsignment3myoy_tmp1\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lms_consignment_id\r\n",
							"FROM stconsignment\r\n",
							"\r\n",
							"WHERE \r\n",
							"(\r\n",
							"    lms_consignment_cdate >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
							"AND \r\n",
							"    lms_consignment_cdate <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
							")\r\n",
							"OR \r\n",
							"(\r\n",
							"    lms_consignment_cdate >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
							"AND \r\n",
							"    lms_consignment_cdate <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
							")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stconsignment3myoy_tmp2\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lms_parcel_consignid as lms_consignment_id\r\n",
							"FROM stparcel3myoy\r\n",
							"WHERE lms_parcel_consignid IS NOT NULL\r\n",
							""
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stconsignment3myoy_tmp3 = spark.sql(\"SELECT * FROM stconsignment3myoy_tmp1 UNION SELECT * FROM stconsignment3myoy_tmp2\")"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stconsignment3myoy_tmp3.createOrReplaceTempView(\"stconsignment3myoy_tmp3\")"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stconsignment3myoy\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    c.*\r\n",
							"FROM stconsignment3myoy_tmp3 t\r\n",
							"LEFT JOIN stconsignment c on c.lms_consignment_id = t.lms_consignment_id\r\n",
							"WHERE c.lms_consignment_id IS NOT NULL"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stconsignment3myoy = spark.sql(\"SELECT * FROM stconsignment3myoy\")"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stconsignment3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stconsignment3myoy.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"WAYBILL CURRENT AND PRIOR YEAR 3MONTHS"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stwaybill3myoy_tmp1\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lms_waybill_id\r\n",
							"FROM stwaybill\r\n",
							"WHERE \r\n",
							"(\r\n",
							"    lms_waybill_date >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
							"AND \r\n",
							"    lms_waybill_date <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
							")\r\n",
							"OR \r\n",
							"(\r\n",
							"    lms_waybill_date >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
							"AND \r\n",
							"    lms_waybill_date <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stwaybill3myoy_tmp2\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lms_parcel_waybillid as lms_waybill_id\r\n",
							"FROM stparcel3myoy\r\n",
							""
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stwaybill3myoy_tmp3 = spark.sql(\"SELECT * FROM stwaybill3myoy_tmp1 UNION SELECT * FROM stwaybill3myoy_tmp2\")"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stwaybill3myoy_tmp3.createOrReplaceTempView(\"stwaybill3myoy_tmp3\")"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stwaybill3myoy\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    w.*\r\n",
							"FROM stwaybill3myoy_tmp3 t\r\n",
							"LEFT JOIN stwaybill w on w.lms_waybill_id = t.lms_waybill_id\r\n",
							"WHERE w.lms_waybill_id IS NOT NULL"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stwaybill3myoy = spark.sql(\"SELECT * FROM stwaybill3myoy\")"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stwaybill3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybill3myoy.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ORDER CURRENT AND PRIOR YEAR 3MONTHS"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storder3myoy_tmp1\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lms_order_id\r\n",
							"FROM storder\r\n",
							"WHERE \r\n",
							"(\r\n",
							"    lms_order_hodate >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
							"AND \r\n",
							"    lms_order_hodate <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
							")\r\n",
							"OR \r\n",
							"(\r\n",
							"    lms_order_hodate >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
							"AND \r\n",
							"    lms_order_hodate <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storder3myoy_tmp2\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lms_parcel_waybillid as lms_waybill_id\r\n",
							"FROM stparcel3myoy"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"storder3myoy_tmp3 = spark.sql(\"SELECT * FROM storder3myoy_tmp1 UNION SELECT * FROM storder3myoy_tmp2\")"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"storder3myoy_tmp3.createOrReplaceTempView(\"storder3myoy_tmp3\")"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"storder3myoy\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    o.*\r\n",
							"FROM storder3myoy_tmp3 t\r\n",
							"LEFT JOIN storder o on o.lms_order_id = t.lms_order_id\r\n",
							"WHERE o.lms_order_id IS NOT NULL"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"storder3myoy = spark.sql(\"SELECT * FROM storder3myoy\")"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# storder3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/storder3myoy.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"TRACK CURRENT AND PRIOR YEAR 3MONTHS"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stlmstrack3myoy_tmp1\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lms_track_parcelid,\r\n",
							"    lms_track_loadid\r\n",
							"FROM stlmstrack\r\n",
							"WHERE \r\n",
							"(\r\n",
							"    lms_track_opendt >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
							"AND \r\n",
							"    lms_track_opendt <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
							")\r\n",
							"OR \r\n",
							"(\r\n",
							"    lms_track_opendt >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
							"AND \r\n",
							"    lms_track_opendt <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmstrack3myoy_tmp = spark.sql(\"SELECT * FROM stlmstrack3myoy_tmp1\")"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmstrack3myoy_tmp.createOrReplaceTempView(\"stlmstrack3myoy_tmp\")"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stlmstrack3myoy_tmp2\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lms_parcel_id as lms_track_parcelid\r\n",
							"FROM stparcel3myoy "
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmstrack3myoy_tmp3 = spark.sql(\"SELECT lms_track_parcelid FROM stlmstrack3myoy_tmp1 UNION SELECT * FROM stlmstrack3myoy_tmp2\")"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmstrack3myoy_tmp3.createOrReplaceTempView(\"stlmstrack3myoy_tmp3\")"
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stlmstrack3myoy\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    t.*\r\n",
							"FROM stlmstrack3myoy_tmp3 t1\r\n",
							"LEFT JOIN stlmstrack t on t.lms_track_parcelid = t1.lms_track_parcelid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmstrack3myoy = spark.sql(\"SELECT * FROM stlmstrack3myoy\")"
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stlmstrack3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmstrack3myoy.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"LOAD CHILD CURRENT AND PRIOR YEAR 3MONTHS"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stloadchild3myoy_tmp1\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lms_loadchild_id,\r\n",
							"    lms_loadchild_parentloadid\r\n",
							"FROM stloadchild\r\n",
							"WHERE \r\n",
							"(\r\n",
							"    lms_loadchild_ldate >= (to_timestamp(year(current_date())||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
							"AND \r\n",
							"    lms_loadchild_ldate <= (to_timestamp(year(current_date())||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
							")\r\n",
							"OR \r\n",
							"(\r\n",
							"    lms_loadchild_ldate >= (to_timestamp((year(current_date())-1)||'-'||(month(current_date())-3)||'-'||'01'))\r\n",
							"AND \r\n",
							"    lms_loadchild_ldate <= (to_timestamp(year(current_date())-1||'-'||month(current_date())||'-'||day(current_date())||'T23:59:59'))\r\n",
							")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadchild3myoy_tmp = spark.sql(\"SELECT * FROM stloadchild3myoy_tmp1\")"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadchild3myoy_tmp.createOrReplaceTempView(\"stloadchild3myoy_tmp\")"
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stloadchild3myoy_tmp2\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lms_track_loadid as lms_loadchild_id\r\n",
							"FROM stlmstrack3myoy_tmp"
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadchild3myoy_tmp3 = spark.sql(\"SELECT lms_loadchild_id FROM stloadchild3myoy_tmp1 UNION SELECT * FROM stloadchild3myoy_tmp2\")"
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadchild3myoy_tmp3.createOrReplaceTempView(\"stloadchild3myoy_tmp3\")"
						],
						"outputs": [],
						"execution_count": 50
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stloadchild3myoy\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lc.*\r\n",
							"FROM stloadchild3myoy_tmp3 t\r\n",
							"LEFT JOIN stloadchild lc on lc.lms_loadchild_id = t.lms_loadchild_id\r\n",
							"WHERE lc.lms_loadchild_id IS NOT NULL\r\n",
							"AND lc.lms_loadchild_ldate IS NOT NULL"
						],
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadchild3myoy = spark.sql(\"SELECT * FROM stloadchild3myoy\")"
						],
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stloadchild3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stloadchild3myoy.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"LOAD PARENT CURRENT AND PRIOR YEAR 3MONTHS"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stloadparent3myoy_tmp1\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"    lms_loadchild_parentloadid as lms_loadparent_parentloadid\r\n",
							"FROM stloadchild3myoy_tmp \r\n",
							"WHERE lms_loadchild_parentloadid IS NOT NULL"
						],
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stloadparent3myoy_tmp2\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lms_track_loadid as lms_loadparent_parentloadid\r\n",
							"FROM stlmstrack3myoy_tmp\r\n",
							""
						],
						"outputs": [],
						"execution_count": 55
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadparent3myoy_tmp3 = spark.sql(\"SELECT * FROM stloadparent3myoy_tmp1 UNION SELECT * FROM stloadparent3myoy_tmp2\")"
						],
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadparent3myoy_tmp3.createOrReplaceTempView(\"stloadparent3myoy_tmp3\")"
						],
						"outputs": [],
						"execution_count": 57
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stloadparent3myoy\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lp.*\r\n",
							"FROM stloadparent3myoy_tmp3 t\r\n",
							"LEFT JOIN stloadparent lp on lp.lms_loadparent_parentloadid = t.lms_loadparent_parentloadid\r\n",
							"WHERE lp.lms_loadparent_parentloadid IS NOT NULL"
						],
						"outputs": [],
						"execution_count": 58
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadparent3myoy = spark.sql(\"SELECT * FROM stloadparent3myoy\")"
						],
						"outputs": [],
						"execution_count": 59
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stloadparent3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stloadparent3myoy.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 62
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 61
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_STDocumentTypes')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f4bbbdfc-02ec-41e6-91b0-7b7be3896b25"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the sttransactionssummary SAP Table\r\n",
							"# sttransactionssummary = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/FINANCE/sttransactionssummary.parquet', format='parquet')\r\n",
							"# sttransactionssummary.createOrReplaceTempView(\"sttransactionssummary\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdocumentcategories\r\n",
							"AS\r\n",
							"SELECT DISTINCT \r\n",
							"   t.sap_transactionsline_doccat \r\n",
							"  ,CASE \r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'generaljournal' THEN 'General Journal'\r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'manualjournal' THEN 'Manual Journal'\r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'purchaseorder' THEN 'Purchase Order'\r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'purchaseinvoice' THEN 'Purchase Invoice'\r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'goodsissue' THEN 'Goods Issue'\r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'salesinvoice' THEN 'Sales Invoice'\r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'salescredit' THEN 'Sales Credit'\r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'directposting' THEN 'Direct Posting'\r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'purchasepricevariance' THEN 'Purchase Price Variance'\r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'goodsreceiptnote' THEN 'Goods Receipt Note'\r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'goodsreceipt' THEN 'Goods Receipt'\r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'stockrevaluation' THEN 'Stock Revaluation'\r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'purchasecredit' THEN 'Purchase Credit'\r\n",
							"      WHEN t.sap_transactionsline_doccat  = 'discountjournal' THEN 'Discount Journal'\r\n",
							"\tEND as sap_transactionsline_doccatname\r\n",
							"\r\n",
							"FROM sttransactionssummary t\r\n",
							"WHERE t.sap_transactionsline_doccat  IS NOT NULL\r\n",
							"ORDER BY t.sap_transactionsline_doccat \r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdocumentcategories = spark.sql(\"SELECT * FROM stdocumentcategories\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stdocumentcategories.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stdocumentcategories.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_STActivity')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "c090652f-c4aa-42f3-bc05-3ccbe5a35246"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
						"name": "ApacheSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the stconsignment LMS Table\r\n",
							"# stconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stconsignment.parquet', format='parquet')\r\n",
							"# stconsignment.createOrReplaceTempView(\"stconsignment\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stlocation LMS Table\r\n",
							"# stlocation = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet', format='parquet')\r\n",
							"# stlocation.createOrReplaceTempView(\"stlocation\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stzone LMS Table\r\n",
							"# stzone = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stzone.parquet', format='parquet')\r\n",
							"# stzone.createOrReplaceTempView(\"stzone\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stsroute LMS Table\r\n",
							"# stsroute = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stsroute.parquet', format='parquet')\r\n",
							"# stsroute.createOrReplaceTempView(\"stsroute\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stbillcustomer LMS Table\r\n",
							"# stbillcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stbillcustomer.parquet', format='parquet')\r\n",
							"# stbillcustomer.createOrReplaceTempView(\"stbillcustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stdeliverypickupcustomer LMS Table\r\n",
							"# stdeliverypickupcustomer = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet', format='parquet')\r\n",
							"# stdeliverypickupcustomer.createOrReplaceTempView(\"stdeliverypickupcustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stlmstrack LMS Table\r\n",
							"# stlmstrack = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet', format='parquet')\r\n",
							"# stlmstrack.createOrReplaceTempView(\"stlmstrack\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stloadchild LMS Table\r\n",
							"# stloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadchild.parquet', format='parquet')\r\n",
							"# stloadchild.createOrReplaceTempView(\"stloadchild\")\r\n",
							"\r\n",
							"# #Create DataFrame for the storder LMS Table\r\n",
							"# storder = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/storder.parquet', format='parquet')\r\n",
							"# storder.createOrReplaceTempView(\"storder\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stparcel LMS Table\r\n",
							"# stparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet', format='parquet')\r\n",
							"# stparcel.createOrReplaceTempView(\"stparcel\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sttrip LMS Table\r\n",
							"# sttrip = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/sttrip.parquet', format='parquet')\r\n",
							"# sttrip.createOrReplaceTempView(\"sttrip\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sttrip LMS Table\r\n",
							"# sttrip = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/sttrip.parquet', format='parquet')\r\n",
							"# sttrip.createOrReplaceTempView(\"sttrip\")\r\n",
							"\r\n",
							"# #Create DataFrame for the stbooking LMS Table\r\n",
							"# stbooking = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stbooking.parquet', format='parquet')\r\n",
							"# stbooking.createOrReplaceTempView(\"stbooking\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehiclebasic MD Table\r\n",
							"# dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"# dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbopeoplebasic MD Table\r\n",
							"# dbopeoplebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeoplebasic.parquet', format='parquet')\r\n",
							"# dbopeoplebasic.createOrReplaceTempView(\"dbopeoplebasic\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehicle LMS Table\r\n",
							"# dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"# dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodriver LMS Table\r\n",
							"# dbodriver = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodriver.parquet', format='parquet')\r\n",
							"# dbodriver.createOrReplaceTempView(\"dbodriver\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolhroutes LMS Table\r\n",
							"# dbolhroutes = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_routes.parquet', format='parquet')\r\n",
							"# dbolhroutes.createOrReplaceTempView(\"dbolhroutes\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicroute LMS Table\r\n",
							"# publicroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicroute.parquet', format='parquet')\r\n",
							"# publicroute.createOrReplaceTempView(\"publicroute\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicthirdparty TMS Table\r\n",
							"# publicthirdparty = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicthirdparty.parquet', format='parquet')\r\n",
							"# publicthirdparty.createOrReplaceTempView(\"publicthirdparty\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publiccustomer TMS Table\r\n",
							"# publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiccustomer.parquet', format='parquet')\r\n",
							"# publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# import os\r\n",
							"# import pandas as pd\r\n",
							"# import numpy as np\r\n",
							"# from pyspark.sql.types import StructType, StructField, DoubleType, StringType, DecimalType\r\n",
							"# from pyspark.sql.functions import col, to_timestamp"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# # Variables\r\n",
							"# var_File_Path = \"abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Avis_Files/AvisUsage.xlsx\"\r\n",
							"# var_File_Page = \"AvisUsage\"\r\n",
							"\r\n",
							"# # Processing\r\n",
							"# excel_file = pd.ExcelFile(var_File_Path)\r\n",
							"# excel_file_page = pd.read_excel(excel_file, var_File_Page,  engine='openpyxl')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"excel_file_page = excel_file_page.astype({'Reg. No':'string','Fleet No':'string','FuelCompany':'string','Time':'string','Voucher No':'string','FuelStation':'string','Pickup Type':'string','Account':'string','Cost Centre':'string','Division':'string','Make':'string','Range':'string','Model':'string','Consum. Norm':'string'})"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"excel_file_page = excel_file_page.fillna(\"NULL\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stkmsandlts_tmp = spark.createDataFrame(excel_file_page)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stkmsandlts_tmp = stkmsandlts_tmp.withColumnRenamed(\"Reg. No\",\"excel_kmsandlts_registrationnumber\")\\\r\n",
							".withColumnRenamed(\"Fleet No\",\"excel_kmsandlts_fleetcode\")\\\r\n",
							".withColumnRenamed(\"Date\",\"excel_kmsandlts_date\")\\\r\n",
							".withColumnRenamed(\"Time\",\"excel_kmsandlts_time\")\\\r\n",
							".withColumnRenamed(\"FuelCompany\",\"excel_kmsandlts_fuelcompany\")\\\r\n",
							".withColumnRenamed(\"Voucher No\",\"excel_kmsandlts_voucherno\")\\\r\n",
							".withColumnRenamed(\"FuelStation\",\"excel_kmsandlts_fuelstation\")\\\r\n",
							".withColumnRenamed(\"PreviousOdo\",\"excel_kmsandlts_previousodo\")\\\r\n",
							".withColumnRenamed(\"Odo\",\"excel_kmsandlts_odo\")\\\r\n",
							".withColumnRenamed(\"Trip Km\",\"excel_kmsandlts_tripkm\")\\\r\n",
							".withColumnRenamed(\"Consum/100\",\"excel_kmsandlts_consumptionper100kms\")\\\r\n",
							".withColumnRenamed(\"Consum/Unit\",\"excel_kmsandlts_consumptionperunit\")\\\r\n",
							".withColumnRenamed(\"L Loss\",\"excel_kmsandlts_ltsloss\")\\\r\n",
							".withColumnRenamed(\"R Loss\",\"excel_kmsandlts_randsloss\")\\\r\n",
							".withColumnRenamed(\"TripLitres\",\"excel_kmsandlts_triplts\")\\\r\n",
							".withColumnRenamed(\"Price Per Unit\",\"excel_kmsandlts_priceperunit\")\\\r\n",
							".withColumnRenamed(\"Fuel Amount\",\"excel_kmsandlts_fuelamount\")\\\r\n",
							".withColumnRenamed(\"Pickup Type\",\"excel_kmsandlts_pickuptype\")\\\r\n",
							".withColumnRenamed(\"Account\",\"excel_kmsandlts_account\")\\\r\n",
							".withColumnRenamed(\"Cost Centre\",\"excel_kmsandlts_costcentre\")\\\r\n",
							".withColumnRenamed(\"Division\",\"excel_kmsandlts_division\")\\\r\n",
							".withColumnRenamed(\"Make\",\"excel_kmsandlts_make\")\\\r\n",
							".withColumnRenamed(\"Range\",\"excel_kmsandlts_range\")\\\r\n",
							".withColumnRenamed(\"Model\",\"excel_kmsandlts_model\")\\\r\n",
							".withColumnRenamed(\"Consum. Norm\",\"excel_kmsandlts_consumptionexpected\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stkmsandlts_tmp = stkmsandlts_tmp.withColumn('excel_kmsandlts_previousodo', col('excel_kmsandlts_previousodo').cast('int'))\\\r\n",
							".withColumn('excel_kmsandlts_odo', col('excel_kmsandlts_odo').cast('int'))\\\r\n",
							".withColumn('excel_kmsandlts_tripkm', col('excel_kmsandlts_tripkm').cast('int'))\\\r\n",
							".withColumn('excel_kmsandlts_consumptionper100kms', col('excel_kmsandlts_consumptionper100kms').cast(DecimalType(18,2)))\\\r\n",
							".withColumn('excel_kmsandlts_consumptionperunit', col('excel_kmsandlts_consumptionperunit').cast(DecimalType(18,2)))\\\r\n",
							".withColumn('excel_kmsandlts_ltsloss', col('excel_kmsandlts_ltsloss').cast(DecimalType(18,2)))\\\r\n",
							".withColumn('excel_kmsandlts_randsloss', col('excel_kmsandlts_randsloss').cast(DecimalType(18,2)))\\\r\n",
							".withColumn('excel_kmsandlts_priceperunit', col('excel_kmsandlts_priceperunit').cast(DecimalType(18,2)))\\\r\n",
							".withColumn('excel_kmsandlts_fuelamount', col('excel_kmsandlts_fuelamount').cast(DecimalType(18,2)))\\\r\n",
							".withColumn('excel_kmsandlts_consumptionexpected', col('excel_kmsandlts_consumptionexpected').cast(DecimalType(18,2)))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stkmsandlts_tmp.createOrReplaceTempView(\"stkmsandlts_tmp\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stkmsandlts\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"excel_kmsandlts_registrationnumber\r\n",
							",excel_kmsandlts_fleetcode\r\n",
							",to_date(excel_kmsandlts_date,'yyyy-MM-dd') as excel_kmsandlts_date\r\n",
							",excel_kmsandlts_time\r\n",
							",excel_kmsandlts_fuelcompany\r\n",
							",excel_kmsandlts_voucherno\r\n",
							",excel_kmsandlts_fuelstation\r\n",
							",excel_kmsandlts_previousodo\r\n",
							",excel_kmsandlts_odo\r\n",
							",excel_kmsandlts_tripkm\r\n",
							",excel_kmsandlts_consumptionper100kms\r\n",
							",excel_kmsandlts_consumptionperunit\r\n",
							",excel_kmsandlts_ltsloss\r\n",
							",excel_kmsandlts_randsloss\r\n",
							",excel_kmsandlts_triplts\r\n",
							",excel_kmsandlts_priceperunit\r\n",
							",excel_kmsandlts_fuelamount\r\n",
							",excel_kmsandlts_pickuptype\r\n",
							",excel_kmsandlts_account\r\n",
							",excel_kmsandlts_costcentre\r\n",
							",excel_kmsandlts_division\r\n",
							",excel_kmsandlts_make\r\n",
							",excel_kmsandlts_range\r\n",
							",excel_kmsandlts_model\r\n",
							",excel_kmsandlts_consumptionexpected\r\n",
							"FROM stkmsandlts_tmp"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stkmsandlts = spark.sql(\"SELECT * FROM stkmsandlts\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stkmsandlts.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stkmsandlts.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttmsactivitydetail\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"t.tms_trip_id as tms_activity_tripid\r\n",
							",t.tms_trip_driverid  as tms_activity_tripdriverid\r\n",
							",t.tms_trip_drivername  as tms_activity_tripdrivername\r\n",
							",t.tms_trip_vehicleid  as tms_activity_tripvehicleid\r\n",
							",t.tms_trip_vehiclefleetcode as tms_activity_tripvehiclefleetcode\r\n",
							",t.tms_trip_trailerid  as tms_activity_triptrailer1id\r\n",
							",t.tms_trip_trailer1fleetcode as tms_activity_triptrailer1fleetcode\r\n",
							",t.tms_trip_sectrailerid  as tms_activity_triptrailer2id\r\n",
							",t.tms_trip_trailer2fleetcode as tms_activity_triptrailer2fleetcode\r\n",
							",t.tms_trip_trailersize  as tms_activity_triptrailersize\r\n",
							",t.tms_trip_status as tms_activity_tripstatus\r\n",
							",t.tms_trip_routeid as tms_activity_tripparenetrouteid\r\n",
							",pr.name as tms_activity_tripparentroute\r\n",
							",t.tms_trip_opsrouteid as tms_activity_tripopsrouteid\r\n",
							",CASE\r\n",
							"    WHEN t.tms_trip_source = 'v1' THEN UPPER(sr.description)\r\n",
							"    WHEN t.tms_trip_source = 'v2' THEN UPPER(sr1.name)\r\n",
							" END tms_activity_tripopsroute\r\n",
							",to_date(t.tms_trip_dispatchdate) as tms_activity_tripdispatchdate\r\n",
							",upper(t.tms_trip_transporter) as tms_activity_triptransporter\r\n",
							",t.tms_trip_source as tms_activity_tripsource\r\n",
							"\r\n",
							"\r\n",
							",b.tms_booking_id as tms_activity_bookingid\r\n",
							",b.tms_booking_type as tms_activity_bookingtype\r\n",
							",b.tms_booking_trailersize as tms_activity_bookingtrailersize\r\n",
							",b.tms_booking_cubicvolume as tms_activity_bookingcubicvolume\r\n",
							",b.tms_booking_directbooking as tms_activity_directbooking\r\n",
							",b.tms_booking_local as tms_activity_localbooking\r\n",
							",b.tms_booking_source as tms_activity_bookingsource\r\n",
							",b.tms_booking_customerid as tms_activity_customerid\r\n",
							",ppc.name as tms_activity_primarycustomer\r\n",
							",b.tms_booking_childcustomerid as tms_activity_childcustomerid\r\n",
							",spc.name as tms_activity_secondarycustomer\r\n",
							",CASE\r\n",
							"    WHEN b.tms_booking_type = 'nonbooking' AND b.tms_booking_allocateddate IS NULL THEN to_date(t.tms_trip_dispatchdate)\r\n",
							"    ELSE to_date(b.tms_booking_allocateddate)\r\n",
							"END AS tms_activity_bookingallocateddate\r\n",
							"\r\n",
							"FROM sttrip t\r\n",
							"LEFT JOIN dbovehicle v1 on (v1.id)*-1 = t.tms_trip_vehicleid and t.tms_trip_source = 'v1'\r\n",
							"LEFT JOIN dbovehicle t1 on (t1.id)*-1 = t.tms_trip_trailerid and t.tms_trip_source = 'v1'\r\n",
							"LEFT JOIN dbovehicle t2 on (t2.id)*-1 = t.tms_trip_sectrailerid and t.tms_trip_source = 'v1'\r\n",
							"LEFT JOIN dbovehiclebasic vbv  on vbv.uid = t.tms_trip_vehicleid and t.tms_trip_source = 'v2'\r\n",
							"LEFT JOIN dbovehiclebasic vbt1  on vbt1.uid = t.tms_trip_trailerid and t.tms_trip_source = 'v2'\r\n",
							"LEFT JOIN dbovehiclebasic vbt2  on vbt2.uid = t.tms_trip_sectrailerid and t.tms_trip_source = 'v2'\r\n",
							"LEFT JOIN publicroute pr on pr.id = t.tms_trip_routeid \r\n",
							"LEFT JOIN dbolhroutes sr on (sr.id)*-1 = t.tms_trip_opsrouteid and t.tms_trip_source = 'v1'\r\n",
							"LEFT JOIN publicroute sr1 on sr1.id = t.tms_trip_opsrouteid and t.tms_trip_source = 'v2'\r\n",
							"LEFT JOIN stbooking b on b.tms_booking_tripid = t.tms_trip_id\r\n",
							"LEFT JOIN dbodriver d on (d.id)*-1 = t.tms_trip_driverid and t.tms_trip_source = 'v1'\r\n",
							"LEFT JOIN dbopeoplebasic pb on pb.uid = t.tms_trip_driverid and t.tms_trip_source = 'v2'\r\n",
							"LEFT JOIN publiccustomer ppc on ppc.id = b.tms_booking_customerid and  t.tms_trip_source = 'v2'\r\n",
							"LEFT JOIN publiccustomer spc on spc.id = b.tms_booking_childcustomerid and  t.tms_trip_source = 'v2'\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttmsactivitydetail = spark.sql(\"SELECT * FROM sttmsactivitydetail\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sttmsactivitydetail.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/sttmsactivitydetail.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sttmsactivitysummary\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"tms_activity_tripid\r\n",
							",tms_activity_bookingid\r\n",
							",tms_activity_tripdrivername\r\n",
							",tms_activity_tripstatus\r\n",
							",tms_activity_tripopsroute\r\n",
							",tms_activity_tripdispatchdate\r\n",
							",tms_activity_tripsource\r\n",
							",tms_activity_directbooking\r\n",
							",tms_activity_localbooking\r\n",
							",tms_activity_triptrailersize\r\n",
							",tms_activity_triptransporter\r\n",
							",tms_activity_bookingtype\r\n",
							",tms_activity_bookingallocateddate\r\n",
							",tms_activity_primarycustomer\r\n",
							",tms_activity_secondarycustomer\r\n",
							",sum(tms_activity_bookingcubicvolume) as tms_activity_aggrbookingcubicvolume\r\n",
							",count(tms_activity_bookingid) as tms_activity_aggrbookingid\r\n",
							"\r\n",
							"\r\n",
							"FROM sttmsactivitydetail\r\n",
							"GROUP BY \r\n",
							"tms_activity_tripid\r\n",
							",tms_activity_bookingid\r\n",
							",tms_activity_tripdrivername\r\n",
							",tms_activity_tripstatus\r\n",
							",tms_activity_tripopsroute\r\n",
							",tms_activity_tripdispatchdate\r\n",
							",tms_activity_tripsource\r\n",
							",tms_activity_triptrailersize\r\n",
							",tms_activity_triptransporter\r\n",
							",tms_activity_directbooking\r\n",
							",tms_activity_localbooking\r\n",
							",tms_activity_bookingtype\r\n",
							",tms_activity_bookingallocateddate\r\n",
							",tms_activity_primarycustomer\r\n",
							",tms_activity_secondarycustomer\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttmsactivitysummary = spark.sql(\"SELECT * FROM sttmsactivitysummary\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sttmsactivitysummary.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/sttmsactivitysummary.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stactivityconsignedto\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    c.lms_consignment_id as lms_activity_transid\r\n",
							"    ,'consignmentid' as lms_activity_transidtype\r\n",
							"    ,to_date(c.lms_consignment_cdate,'yyyy-MM-dd') as lms_activity_date\r\n",
							"    ,c.lms_consignment_billcust as lms_activity_billcustid\r\n",
							"    ,bc.lms_customer_name as lms_activity_billcustname\r\n",
							"    --,'' as lms_activity_fromlocation\r\n",
							"    ,l.lms_location_description as lms_activity_location\r\n",
							"    ,'consignment' as lms_activity_movementtype\r\n",
							"    ,'' as lms_activity_linehualbookingid\r\n",
							"    ,(c.lms_parcelbyconsignment_aggrweight) as lms_activity_aggrweight\r\n",
							"    ,(c.lms_parcelbyconsignment_aggrchargeweight) as lms_activity_aggrchargeweight\r\n",
							"    ,(c.lms_parcelbyconsignment_aggrvolweight) as lms_activity_aggrvolweight\r\n",
							"    ,(c.lms_parcelbyconsignment_aggrvolumiserweight) as lms_activity_aggrvolumiserweight\r\n",
							"    ,(c.lms_parcelbyconsignment_aggrmaxweight) as lms_activity_aggrmaxweight\r\n",
							"    ,(c.lms_parcelbyconsignment_aggrnoparcels) as lms_activity_aggrnoparcels\r\n",
							"    ,(c.lms_parcelbyconsignment_aggrweightexclspecdel) as lms_activity_aggrweightexclspecdel\r\n",
							"    ,(c.lms_parcelbyconsignment_aggrchargeweightexclspecdel) as lms_activity_aggrchargeweightexclspecdel\r\n",
							"    ,(c.lms_parcelbyconsignment_aggrvolweightexclspecdel) as lms_activity_aggrvolweightexclspecdel\r\n",
							"    ,(c.lms_parcelbyconsignment_aggrvolumiserweightexclspecdel) as lms_activity_aggrvolumiserweightexclspecdel\r\n",
							"    ,(c.lms_parcelbyconsignment_aggrmaxweightexclspecdel) as lms_activity_aggrmaxweightexclspecdel\r\n",
							"    ,(c.lms_parcelbyconsignment_aggrnoparcelsexclspecdel) as lms_activity_aggrnoparcelsexclspecdel\r\n",
							"\r\n",
							"\r\n",
							"FROM stconsignment c\r\n",
							"LEFT JOIN stbillcustomer bc on bc.lms_customer_id = c.lms_consignment_billcust\r\n",
							"LEFT JOIN stdeliverypickupcustomer dpc on dpc.lms_customer_id = c.lms_consignment_delivercustid\r\n",
							"LEFT JOIN stsroute sr on sr.lms_sroute_id = dpc.lms_customer_srouteid\r\n",
							"LEFT JOIN stzone z on z.lms_zone_id = sr.lms_sroute_zoneid\r\n",
							"LEFT JOIN stlocation l on l.lms_location_id = z.lms_zone_locid\r\n",
							"\r\n",
							"\r\n",
							"--LEFT JOIN storder o on o.lms_order_id = p.lms_parcel_orderid\r\n",
							"\r\n",
							"WHERE to_date(c.lms_consignment_cdate,'yyyy-MM-dd') >= '2016-04-01'\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stactivityconsignedto = spark.sql(\"SELECT * FROM stactivityconsignedto\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## stactivityconsignedto.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stactivityconsignedto.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stactivityhandled_tmp1\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"     lc.lms_loadchild_id as lms_activity_transid\r\n",
							"    ,'loadid' as lms_activity_transidtype\r\n",
							"    ,to_date(lms_track_opendt,'yyyy-MM-dd') as lms_activity_date\r\n",
							"    ,p.lms_parcel_orderbillcustid as lms_activity_billcustid\r\n",
							"    ,bc.lms_customer_name as lms_activity_billcustname\r\n",
							"    ,CASE \r\n",
							"        WHEN lms_track_tracktypeid = 2 THEN 'linehaul' \r\n",
							"        WHEN lms_track_tracktypeid = 6 THEN 'distribution'\r\n",
							"        ELSE '' \r\n",
							"    END as lms_activity_movementtype\r\n",
							"    ,lc.lms_loadchild_masterloadid as lms_activity_linehualbookingid\r\n",
							"    ,fl.lms_location_description as lms_activity_location\r\n",
							"\r\n",
							"    ,CASE \r\n",
							"        WHEN o.lms_order_specdel = 1 THEN SUM(p.lms_parcel_weight)\r\n",
							"    END as lms_activity_aggrweight\r\n",
							"\r\n",
							"    ,CASE \r\n",
							"        WHEN lms_order_specdel = 1 THEN SUM(p.lms_parcel_chargeweight)\r\n",
							"    END as lms_activity_aggrchargeweight\r\n",
							"\r\n",
							"    ,CASE \r\n",
							"        WHEN o.lms_order_specdel = 1 THEN SUM(p.lms_parcel_volweight)\r\n",
							"    END as lms_activity_aggrvolweight\r\n",
							"\r\n",
							"    ,CASE \r\n",
							"        WHEN o.lms_order_specdel = 1 THEN SUM(p.lms_parcel_volumiserweight)\r\n",
							"    END as lms_activity_aggrvolumiserweight\r\n",
							"\r\n",
							"    ,CASE \r\n",
							"        WHEN o.lms_order_specdel = 1 THEN SUM(p.lms_parcel_pweight)\r\n",
							"    END as lms_activity_aggrmaxweight\r\n",
							"\r\n",
							"    ,CASE \r\n",
							"        WHEN o.lms_order_specdel = 1 THEN COUNT(p.lms_parcel_id)\r\n",
							"    END as lms_activity_aggrnoparcels\r\n",
							"\r\n",
							"    ,CASE \r\n",
							"        WHEN o.lms_order_specdel = 0 THEN SUM(p.lms_parcel_weight)\r\n",
							"    END as lms_activity_aggrweightexclspecdel\r\n",
							"\r\n",
							"    ,CASE \r\n",
							"        WHEN o.lms_order_specdel = 0 THEN SUM(p.lms_parcel_chargeweight)\r\n",
							"    END as lms_activity_aggrchargeweightexclspecdel\r\n",
							"\r\n",
							"    ,CASE \r\n",
							"        WHEN o.lms_order_specdel = 0 THEN SUM(p.lms_parcel_volweight)\r\n",
							"    END as lms_activity_aggrvolweightexclspecdel\r\n",
							"\r\n",
							"    ,CASE \r\n",
							"        WHEN o.lms_order_specdel = 0 THEN SUM(p.lms_parcel_volumiserweight)\r\n",
							"    END as lms_activity_aggrvolumiserweightexclspecdel\r\n",
							"\r\n",
							"    ,CASE \r\n",
							"        WHEN o.lms_order_specdel = 0 THEN SUM(p.lms_parcel_pweight)\r\n",
							"    END as lms_activity_aggrmaxweightexclspecdel\r\n",
							"\r\n",
							"    ,CASE \r\n",
							"        WHEN o.lms_order_specdel = 0 THEN COUNT(p.lms_parcel_id)\r\n",
							"    END as lms_activity_aggrnoparcelsexclspecdel\r\n",
							"\r\n",
							"\r\n",
							"FROM stlmstrack t\r\n",
							"LEFT JOIN stparcel p on p.lms_parcel_id = t.lms_track_parcelid\r\n",
							"LEFT JOIN stloadchild lc on lc.lms_loadchild_id = t.lms_track_loadid\r\n",
							"LEFT JOIN storder o on o.lms_order_id = p.lms_parcel_orderid\r\n",
							"LEFT JOIN stbillcustomer bc on bc.lms_customer_id = p.lms_parcel_orderbillcustid\r\n",
							"LEFT JOIN stlocation fl on fl.lms_location_id = t.lms_track_fromlocid\r\n",
							"LEFT JOIN stlocation tl on tl.lms_location_id = t.lms_track_tolocid\r\n",
							"\r\n",
							"WHERE t.lms_track_tracktypeid in (2,6)\r\n",
							"AND to_date(t.lms_track_opendt,'yyyy-MM-dd') >= '2016-04-01'\r\n",
							"\r\n",
							"GROUP BY\r\n",
							"     lc.lms_loadchild_id\r\n",
							"    ,to_date(t.lms_track_opendt,'yyyy-MM-dd')\r\n",
							"    ,p.lms_parcel_orderbillcustid\r\n",
							"    ,bc.lms_customer_name\r\n",
							"    ,lc.lms_loadchild_masterloadid\r\n",
							"    ,fl.lms_location_description\r\n",
							"    ,tl.lms_location_description\r\n",
							"    ,t.lms_track_tracktypeid\r\n",
							"    ,o.lms_order_specdel\r\n",
							""
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stactivityhandled_tmp1 = spark.sql(\"SELECT * FROM stactivityhandled_tmp1\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stactivityhandled\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"     t1.lms_activity_transid\r\n",
							"    ,t1.lms_activity_transidtype\r\n",
							"    ,t1.lms_activity_date\r\n",
							"    ,t1.lms_activity_billcustid\r\n",
							"    ,t1.lms_activity_billcustname\r\n",
							"    ,t1.lms_activity_movementtype\r\n",
							"    ,t1.lms_activity_linehualbookingid\r\n",
							"    --,t1.lms_activity_fromlocation\r\n",
							"    ,t1.lms_activity_location\r\n",
							"    ,CAST(t1.lms_activity_aggrweight AS decimal(18,2)) as lms_activity_aggrweight\r\n",
							"    ,CAST(t1.lms_activity_aggrchargeweight AS decimal(18,2)) as lms_activity_aggrchargeweight\r\n",
							"    ,CAST(t1.lms_activity_aggrvolweight AS decimal(18,2)) as lms_activity_aggrvolweight\r\n",
							"    ,CAST(t1.lms_activity_aggrvolumiserweight AS decimal(18,2)) as lms_activity_aggrvolumiserweight\r\n",
							"    ,CAST(t1.lms_activity_aggrmaxweight AS decimal(18,2)) as lms_activity_aggrmaxweight\r\n",
							"    ,t1.lms_activity_aggrnoparcels\r\n",
							"    ,CAST(t1.lms_activity_aggrweightexclspecdel AS decimal(18,2)) as lms_activity_aggrweightexclspecdel\r\n",
							"    ,CAST(t1.lms_activity_aggrchargeweightexclspecdel AS decimal(18,2)) as lms_activity_aggrchargeweightexclspecdel\r\n",
							"    ,CAST(t1.lms_activity_aggrvolweightexclspecdel AS decimal(18,2)) as lms_activity_aggrvolweightexclspecdel\r\n",
							"    ,CAST(t1.lms_activity_aggrvolumiserweightexclspecdel AS decimal(18,2)) as lms_activity_aggrvolumiserweightexclspecdel\r\n",
							"    ,CAST(t1.lms_activity_aggrmaxweightexclspecdel AS decimal(18,2)) as lms_activity_aggrmaxweightexclspecdel\r\n",
							"    ,t1.lms_activity_aggrnoparcelsexclspecdel\r\n",
							"\r\n",
							"\r\n",
							"FROM stactivityhandled_tmp1 t1\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stactivityhandled = spark.sql(\"SELECT * FROM stactivityhandled\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## stactivityhandled.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stactivityhandled.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stactivitydetail = stactivityhandled.unionByName(stactivityconsignedto, allowMissingColumns = True)\r\n",
							"stactivitydetail.createOrReplaceTempView(\"stactivitydetail\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stactivitydetail.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stactivitydetail.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stactivitysummary\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"\r\n",
							"lms_activity_date\r\n",
							",lms_activity_movementtype\r\n",
							",lms_activity_location\r\n",
							",lms_activity_billcustname\r\n",
							",CAST(SUM(lms_activity_aggrweight) AS decimal(18,2)) as lms_activity_aggrweight\r\n",
							",CAST(SUM(lms_activity_aggrchargeweight) AS decimal(18,2)) as lms_activity_aggrchargeweight\r\n",
							",CAST(SUM(lms_activity_aggrvolweight) AS decimal(18,2)) as lms_activity_aggrvolweight\r\n",
							",CAST(SUM(lms_activity_aggrvolumiserweight) AS decimal(18,2)) as lms_activity_aggrvolumiserweight\r\n",
							",CAST(SUM(lms_activity_aggrmaxweight) AS decimal(18,2)) as lms_activity_aggrmaxweight\r\n",
							",SUM(lms_activity_aggrnoparcels) lms_activity_aggrnoparcels\r\n",
							",CAST(SUM(lms_activity_aggrweightexclspecdel) AS decimal(18,2)) as lms_activity_aggrweightexclspecdel\r\n",
							",CAST(SUM(lms_activity_aggrchargeweightexclspecdel) AS decimal(18,2)) as lms_activity_aggrchargeweightexclspecdel\r\n",
							",CAST(SUM(lms_activity_aggrvolweightexclspecdel) AS decimal(18,2)) as lms_activity_aggrvolweightexclspecdel\r\n",
							",CAST(SUM(lms_activity_aggrvolumiserweightexclspecdel) AS decimal(18,2)) as lms_activity_aggrvolumiserweightexclspecdel\r\n",
							",CAST(SUM(lms_activity_aggrmaxweightexclspecdel) AS decimal(18,2)) as lms_activity_aggrmaxweightexclspecdel\r\n",
							",SUM(lms_activity_aggrnoparcelsexclspecdel) lms_activity_aggrnoparcelsexclspecdel\r\n",
							"\r\n",
							"FROM stactivitydetail\r\n",
							"GROUP BY\r\n",
							"lms_activity_date\r\n",
							",lms_activity_movementtype\r\n",
							",lms_activity_location\r\n",
							",lms_activity_billcustname\r\n",
							""
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stactivitysummary = spark.sql(\"SELECT * FROM stactivitysummary\")"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stactivitysummary.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stactivitysummary.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 92
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_STDepotMap')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Finance"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "29a5b9f8-2d28-40ba-8196-48fa8011e0c4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# import pandas as pd\r\n",
							"# from pyspark.sql.types import DecimalType\r\n",
							"# from pyspark.sql.functions import col"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# %%pyspark\r\n",
							"# stdepotmap_tmp = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Finance and Operations Mapping Sources/SAP_DepotLocation_Map.csv', format='csv'\r\n",
							"# , header=True\r\n",
							"# )"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdepotmap_tmp = stdepotmap_tmp.withColumn('LOCATIONID', col('LOCATIONID').cast('int'))"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdepotmap_tmp = stdepotmap_tmp.withColumnRenamed(\"LMS Depot Description\",\"LMS_Depot_Description\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdepotmap_tmp.createOrReplaceTempView(\"stdepotmap_tmp\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stdepotmap\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    LOCATIONID as excel_depotmap_locationid\r\n",
							"    ,LMS_Depot_Description as excel_depotmap_locationdescription\r\n",
							"    ,DEPOTCODE as excel_depotmap_subdepot\r\n",
							"    ,PARENTDEPOTCODE as excel_depotmap_parentdepot\r\n",
							"FROM stdepotmap_tmp"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdepotmap = spark.sql(\"SELECT * FROM stdepotmap\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stdepotmap.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stdepotmap.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_MonthTotals')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DEV/Cost To Serve Notebooks DEV/CTS Run"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c0727409-5df4-4486-9c2c-2d107bb01ed5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
						"name": "DevSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# WRITE abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/CTS_Results/\r\n",
							"\r\n",
							"from pyspark.sql import *\r\n",
							"from pyspark.sql.functions import *\r\n",
							"import pandas as pd\r\n",
							"\r\n",
							"MonthToRun = '2023-02-28'\r\n",
							"\r\n",
							"#STOPS\r\n",
							"#parcel_track = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet/\", format='parquet')\r\n",
							"parcel = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet/\", format='parquet')\r\n",
							"waybill = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet/\", format='parquet')\r\n",
							"#location = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet/\", format='parquet')\r\n",
							"dispatch_segment = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdispatchsegment.parquet/\", format='parquet')\r\n",
							"del_pickup_cust = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet/\", format='parquet')\r\n",
							"load_parent = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet/\", format='parquet')\r\n",
							"\r\n",
							"#STSAP\r\n",
							"#dim_account = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_Account_Expose.parquet/\", format='parquet')\r\n",
							"#dim_dates = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_DATES.parquet/\", format='parquet')\r\n",
							"#dim_group = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_GROUP_Expose.parquet/\", format='parquet')\r\n",
							"#trans_summary = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/sttransactionssummary.parquet/\", format='parquet')\r\n",
							"\r\n",
							"#CTS Inputs\r\n",
							"dim_skippedreasoninclude = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/Structured/Dimensions/DIM_SkippedReasonIncludeExclude.parquet/\", format='parquet')\r\n",
							"\r\n",
							"\r\n",
							"#STOPS\r\n",
							"#parcel_track.createOrReplaceTempView(\"parcel_track\")\r\n",
							"parcel.createOrReplaceTempView(\"parcel\")\r\n",
							"waybill.createOrReplaceTempView(\"waybill\")\r\n",
							"#location.createOrReplaceTempView(\"location\")\r\n",
							"dispatch_segment.createOrReplaceTempView(\"dispatch_segment\")\r\n",
							"del_pickup_cust.createOrReplaceTempView(\"del_pickup_cust\")\r\n",
							"load_parent.createOrReplaceTempView(\"load_parent\")\r\n",
							"\r\n",
							"#STSAP\r\n",
							"#dim_account.createOrReplaceTempView(\"dim_account\")\r\n",
							"#dim_dates.createOrReplaceTempView(\"dim_dates\")\r\n",
							"#dim_group.createOrReplaceTempView(\"dim_group\")\r\n",
							"#trans_summary.createOrReplaceTempView(\"trans_summary\")\r\n",
							"\r\n",
							"#CTS Inputs\r\n",
							"dim_skippedreasoninclude.createOrReplaceTempView(\"dim_skippedreasoninclude\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"f_drops = spark.sql(\"\"\"\r\n",
							"with drops as (\r\n",
							"SELECT  orv_dispatchsegment_id\r\n",
							"      ,orv_dispatchsegment_fromdelid\r\n",
							"      ,orv_dispatchsegment_todelid\r\n",
							"\t  ,orv_dispatchsegment_distance\r\n",
							"      ,orv_dispatchsegment_duration\r\n",
							"      ,orv_dispatchsegment_did\r\n",
							"      ,orv_dispatchsegment_tollcost\r\n",
							"      ,orv_dispatchsegment_fuelcost\r\n",
							"      ,orv_dispatchsegment_inscost\r\n",
							"      ,orv_dispatchsegment_labourcost\r\n",
							"      ,orv_dispatchsegment_maintcost\r\n",
							"      ,orv_dispatchsegment_cpicost\r\n",
							"      ,orv_dispatchsegment_vehicleclass\r\n",
							"      ,orv_dispatchsegment_fromlat\r\n",
							"      ,orv_dispatchsegment_fromlng\r\n",
							"      ,orv_dispatchsegment_tolat\r\n",
							"      ,orv_dispatchsegment_tolng\r\n",
							"      ,orv_dispatchsegment_departuredate\r\n",
							"      ,orv_dispatchsegment_arrivaldate\r\n",
							"      ,orv_dispatchsegment_debriefeddate\r\n",
							"      ,orv_dispatchsegment_optimized\r\n",
							"      ,orv_dispatchsegment_segmentorder\r\n",
							"      ,orv_dispatchsegment_customized\r\n",
							"      ,orv_dispatchsegment_parcelct\r\n",
							"\t  ,LAG(orv_dispatchsegment_arrivaldate,1) OVER (PARTITION BY orv_dispatchsegment_did ORDER BY orv_dispatchsegment_arrivaldate) AS DROP_START\r\n",
							"\t  ,ROW_NUMBER() OVER (PARTITION BY  orv_dispatchsegment_did ORDER BY orv_dispatchsegment_departuredate) AS seq\r\n",
							"  FROM (SELECT *,ROW_NUMBER() OVER (PARTITION BY orv_dispatchsegment_did,COALESCE(orv_dispatchsegment_fromdelid,'') ORDER BY orv_dispatchsegment_customized desc) AS RN FROM dispatch_segment\r\n",
							"\t\t) dseg\r\n",
							")\r\n",
							"\r\n",
							"select * from drops\r\n",
							"\"\"\")\r\n",
							"\r\n",
							"display(f_drops.limit(10))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"f_drops = spark.sql(\"\"\"\r\n",
							"\r\n",
							"with drops as (\r\n",
							"SELECT  orv_dispatchsegment_id\r\n",
							"\t  ,LP.lms_loadparent_parentloadid\r\n",
							"\t  ,LP.orv_dispatch_site\r\n",
							"\t  ,LP.orv_dispatch_startinglat\r\n",
							"\t  ,LP.orv_dispatch_startinglng\r\n",
							"\t  ,LP.orv_dispatch_distance\r\n",
							"\t  ,LP.orv_dispatch_duration\r\n",
							"\t  ,LP.orv_dispatch_estdepdate\r\n",
							"\t  ,LP.orv_dispatch_estarrdate\r\n",
							"      ,orv_dispatchsegment_fromdelid\r\n",
							"\t  ,fc.lms_customer_id as lms_from_customer_id\r\n",
							"\t  ,fc.orv_customer_name as orv_from_customer_name\r\n",
							"      ,orv_dispatchsegment_todelid\r\n",
							"\t  ,tc.lms_customer_id as lms_to_customer_id\r\n",
							"      ,tc.orv_customer_name as orv_to_customer_name\r\n",
							"\t  ,CAST(6371 as float) * 2 * ASIN(SQRT(POWER(SIN(RADIANS(LP.orv_dispatch_startinglat - dseg.orv_dispatchsegment_tolat) / 2), 2) + COS(RADIANS(dseg.orv_dispatchsegment_tolat)) * COS(RADIANS(LP.orv_dispatch_startinglat)) * POWER(SIN(RADIANS(LP.orv_dispatch_startinglng - dseg.orv_dispatchsegment_tolng) / 2), 2))) AS StemDistance\r\n",
							"\t  ,tc0.orv_delivery_status as tc_orv_delivery_status\r\n",
							"\t  ,tc0.lms_waybill_id as tc_lms_waybill_id\r\n",
							"\t  ,tc0.orv_delivery_skipreason as tc_orv_delivery_skipreason\r\n",
							"\t  ,orv_dispatchsegment_distance\r\n",
							"      ,orv_dispatchsegment_duration\r\n",
							"      ,orv_dispatchsegment_did\r\n",
							"      ,orv_dispatchsegment_tollcost\r\n",
							"      ,orv_dispatchsegment_fuelcost\r\n",
							"      ,orv_dispatchsegment_inscost\r\n",
							"      ,orv_dispatchsegment_labourcost\r\n",
							"      ,orv_dispatchsegment_maintcost\r\n",
							"      ,orv_dispatchsegment_cpicost\r\n",
							"      ,orv_dispatchsegment_vehicleclass\r\n",
							"      ,orv_dispatchsegment_fromlat\r\n",
							"      ,orv_dispatchsegment_fromlng\r\n",
							"      ,orv_dispatchsegment_tolat\r\n",
							"      ,orv_dispatchsegment_tolng\r\n",
							"      ,orv_dispatchsegment_departuredate\r\n",
							"      ,orv_dispatchsegment_arrivaldate\r\n",
							"      ,orv_dispatchsegment_debriefeddate\r\n",
							"      ,orv_dispatchsegment_optimized\r\n",
							"      ,orv_dispatchsegment_segmentorder\r\n",
							"      ,orv_dispatchsegment_customized\r\n",
							"      ,orv_dispatchsegment_parcelct\r\n",
							"\t  ,LP.orv_dispatch_vehicletype\r\n",
							"\t  ,LP.orv_dispatch_triptype\r\n",
							"\t  ,SRE.IncludeCosting\r\n",
							"      ,SRE.IncludeTheoretical\r\n",
							"\t  ,tc0.NUM_PARCELS\r\n",
							"\t  ,LAG(orv_dispatchsegment_arrivaldate,1) OVER (PARTITION BY orv_dispatchsegment_did ORDER BY orv_dispatchsegment_arrivaldate) AS DROP_START\r\n",
							"\t  ,ROW_NUMBER() OVER (PARTITION BY  orv_dispatchsegment_did ORDER BY orv_dispatchsegment_departuredate) AS seq\r\n",
							"  FROM (SELECT *,ROW_NUMBER() OVER (PARTITION BY orv_dispatchsegment_did,COALESCE(orv_dispatchsegment_fromdelid,'') ORDER BY orv_dispatchsegment_customized desc) AS RN FROM dispatch_segment\r\n",
							"\t\t--WHERE orv_dispatchsegment_did IN (545891,522846) --One normal & one skipped trip\r\n",
							"\t\t--WHERE orv_dispatchsegment_did IN (549595,551082,550607,550205)\r\n",
							"\t\t) dseg --Select the drop where customized = 1 otherwise use other drop value\r\n",
							"\tLEFT JOIN ( --get LMS customer ID from waybill table\r\n",
							"\t\t\tSELECT\r\n",
							"\t\torv_delivery_did\r\n",
							"\t\t,orv_delivery_id\r\n",
							"\t\t,MAX(lms_waybill_delivercustid) AS lms_waybill_delivercustid\r\n",
							"\t\t,MAX(orv_delivery_orderid) AS orv_delivery_orderid\r\n",
							"\t\t,MAX(orv_delivery_status) AS orv_delivery_status\r\n",
							"\t\t,MAX(lms_waybill_id) as lms_waybill_id\r\n",
							"\t\tFROM waybill\r\n",
							"\t\tGROUP BY orv_delivery_did\r\n",
							"\t\t,orv_delivery_id\r\n",
							"\t) fc0 ON dseg.orv_dispatchsegment_did = fc0.orv_delivery_did AND dseg.orv_dispatchsegment_fromdelid = fc0.orv_delivery_id\r\n",
							"\t\tLEFT JOIN ( --get LMS customer ID from waybill table\r\n",
							"\t\t\tSELECT\r\n",
							"\t\torv_delivery_did\r\n",
							"\t\t,orv_delivery_id\r\n",
							"\t\t,MAX(lms_waybill_delivercustid) AS lms_waybill_delivercustid\r\n",
							"\t\t,MAX(orv_delivery_orderid) AS orv_delivery_orderid\r\n",
							"\t\t,MAX(orv_delivery_status) AS orv_delivery_status\r\n",
							"\t\t,MAX(lms_waybill_id) as lms_waybill_id\r\n",
							"\t\t,MAX(orv_delivery_skipreason) as orv_delivery_skipreason\r\n",
							"\t\t,MAX(NUM_PARCELS) AS NUM_PARCELS\r\n",
							"\t\tFROM waybill R\r\n",
							"\t\tLEFT JOIN (\r\n",
							"\t\t\t\tSELECT\r\n",
							"\t\tlms_parcel_waybillid\r\n",
							"\t\t,COUNT(lms_parcel_id) AS NUM_PARCELS\r\n",
							"\t\tFROM parcel\r\n",
							"\t\tGROUP BY lms_parcel_waybillid\r\n",
							"\t\t) PC ON R.lms_waybill_id = PC.lms_parcel_waybillid\r\n",
							"\t\tGROUP BY orv_delivery_did\r\n",
							"\t\t,orv_delivery_id\r\n",
							"\t) tc0 ON dseg.orv_dispatchsegment_did = tc0.orv_delivery_did AND dseg.orv_dispatchsegment_todelid = tc0.orv_delivery_id\r\n",
							"\r\n",
							"  LEFT JOIN del_pickup_cust fc on fc0.lms_waybill_delivercustid = fc.lms_customer_id\r\n",
							"  LEFT JOIN del_pickup_cust tc on tc0.lms_waybill_delivercustid = tc.lms_customer_id\r\n",
							"  LEFT JOIN load_parent LP ON dseg.orv_dispatchsegment_did = LP.orv_dispatch_id\r\n",
							"  LEFT JOIN dim_skippedreasoninclude SRE ON tc0.orv_delivery_status = SRE.DispatchStatus AND COALESCE(tc0.orv_delivery_skipreason,'') = COALESCE(SRE.DeliveryReason,'')\r\n",
							" WHERE RN = 1\r\n",
							" AND last_day(LP.orv_dispatch_estdepdate) >= '\"\"\" + MonthToRun + \"\"\"'\r\n",
							" AND LP.orv_dispatch_startinglat <> 0\r\n",
							" AND LP.orv_dispatch_startinglng <> 0\r\n",
							" )\r\n",
							"\r\n",
							"\r\n",
							"SELECT\r\n",
							"orv_dispatch_estdepdate AS TRIP_START\r\n",
							",orv_dispatch_estarrdate as TRIP_END\r\n",
							",orv_dispatchsegment_id\r\n",
							",lms_loadparent_parentloadid\r\n",
							",orv_dispatchsegment_did\r\n",
							",orv_dispatch_site\r\n",
							",orv_dispatch_duration\r\n",
							"--,orv_dispatchsegment_fromdelid\r\n",
							"--,lms_from_customer_id\r\n",
							"--,orv_from_customer_name\r\n",
							",orv_dispatchsegment_todelid\r\n",
							",lms_to_customer_id\r\n",
							",orv_to_customer_name\r\n",
							",tc_orv_delivery_status\r\n",
							",tc_lms_waybill_id\r\n",
							",tc_orv_delivery_skipreason\r\n",
							",orv_dispatchsegment_vehicleclass\r\n",
							",orv_dispatch_vehicletype\r\n",
							",orv_dispatchsegment_segmentorder\r\n",
							",DROP_START\r\n",
							",orv_dispatchsegment_departuredate AS DROP_END\r\n",
							",StemDistance\r\n",
							",CalcStemPercent\r\n",
							",TripKMs\r\n",
							",TripHrs\r\n",
							",TripKMs * CalcStemPercent AS DROP_KMs\r\n",
							",DROP_TAT\r\n",
							",(TripHrs - SUM(DROP_TAT) OVER (PARTITION BY orv_dispatchsegment_did) )*CalcStemPercent AS DROP_DRIVE_HRS\r\n",
							",NUM_PARCELS\r\n",
							",orv_dispatchsegment_customized\r\n",
							",orv_dispatchsegment_optimized\r\n",
							",IncludeCosting\r\n",
							",IncludeTheoretical\r\n",
							",orv_dispatchsegment_tolat\r\n",
							",orv_dispatchsegment_tolng\r\n",
							"FROM (\r\n",
							"\t SELECT \r\n",
							"\t *\r\n",
							"\t,StemDistance as CalcStemDistance\r\n",
							"\t,CASE WHEN SUM(StemDistance) OVER (PARTITION BY lms_loadparent_parentloadid) = 0 THEN NULL ELSE StemDistance / SUM(StemDistance) OVER (PARTITION BY lms_loadparent_parentloadid) END as CalcStemPercent\r\n",
							"\t,CAST(orv_dispatch_distance as float) / 1000 as TripKMs\r\n",
							"\t,CAST(orv_dispatch_duration as float) /60/60 as TripHrs\r\n",
							"\t,orv_dispatch_estdepdate AS PLAN_TRIP_START --estdepdate\r\n",
							"\t,orv_dispatch_estarrdate AS PLAN_TRIP_END --orv_dispatch_estarrdate \r\n",
							"\t,CAST(unix_timestamp(LAG(orv_dispatchsegment_arrivaldate,1) OVER (PARTITION BY orv_dispatchsegment_did ORDER BY orv_dispatchsegment_arrivaldate)) - unix_timestamp(orv_dispatchsegment_departuredate) as float)/60/60 AS DROP_TAT\r\n",
							"\t,MAX(seq) OVER (PARTITION BY  orv_dispatchsegment_did) AS Max_Seq\r\n",
							"\t FROM drops\r\n",
							"\t WHERE orv_dispatchsegment_todelid <> orv_dispatchsegment_fromdelid\r\n",
							"\t --AND IncludeCosting = 1\r\n",
							"\t\t\r\n",
							") T0\r\n",
							"\"\"\")\r\n",
							"\r\n",
							"display(f_drops.limit(10))"
						],
						"outputs": [],
						"execution_count": 11
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/COST_Linehaul_Fixed')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DEV/Cost To Serve Notebooks DEV/CTS Run"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a8f78baf-9fc3-4c9f-a631-0e629979d0b1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/DevSparkPool",
						"name": "DevSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DevSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# This Notebook is intended to apply the Fixed Linehaul cost to a parquet file"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Load required tables"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import *\r\n",
							"from pyspark.sql.functions import *\r\n",
							"import pandas as pd\r\n",
							"\r\n",
							"MonthToRun = '2023-02-28'\r\n",
							"\r\n",
							"#STOPS\r\n",
							"parcel_track = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet/\", format='parquet')\r\n",
							"parcel = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet/\", format='parquet')\r\n",
							"waybill = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet/\", format='parquet')\r\n",
							"location = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet/\", format='parquet')\r\n",
							"dispatch_segment = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdispatchsegment.parquet/\", format='parquet')\r\n",
							"del_pickup_cust = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet/\", format='parquet')\r\n",
							"load_parent = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet/\", format='parquet')\r\n",
							"\r\n",
							"#STSAP\r\n",
							"dim_account = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_Account_Expose.parquet/\", format='parquet')\r\n",
							"dim_dates = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_DATES.parquet/\", format='parquet')\r\n",
							"dim_group = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_GROUP_Expose.parquet/\", format='parquet')\r\n",
							"trans_summary = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/sttransactionssummary.parquet/\", format='parquet')\r\n",
							"\r\n",
							"#STOPS\r\n",
							"parcel_track.createOrReplaceTempView(\"parcel_track\")\r\n",
							"parcel.createOrReplaceTempView(\"parcel\")\r\n",
							"waybill.createOrReplaceTempView(\"waybill\")\r\n",
							"location.createOrReplaceTempView(\"location\")\r\n",
							"dispatch_segment.createOrReplaceTempView(\"dispatch_segment\")\r\n",
							"del_pickup_cust.createOrReplaceTempView(\"del_pickup_cust\")\r\n",
							"load_parent.createOrReplaceTempView(\"load_parent\")\r\n",
							"\r\n",
							"#STSAP\r\n",
							"dim_account.createOrReplaceTempView(\"dim_account\")\r\n",
							"dim_dates.createOrReplaceTempView(\"dim_dates\")\r\n",
							"dim_group.createOrReplaceTempView(\"dim_group\")\r\n",
							"trans_summary.createOrReplaceTempView(\"trans_summary\")\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"#Maybe consider only filtering the parcel_track table on dates\r\n",
							"\r\n",
							"f_parcel_track = spark.sql(\"SELECT * FROM parcel_track WHERE last_day(lms_track_opendt) = '\" + MonthToRun + \"'\")\r\n",
							"#f_parcel = spark.sql(\"SELECT * FROM parcel WHERE last_day(lms_track_opendt) = '\" + MonthToRun + \"'\")\r\n",
							"\r\n",
							"display(f_parcel_track.limit(10))"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dedupe on Track - 2023-05-18')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AD-HOC"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "723602ee-c3f4-410e-ada0-8be7da867521"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/LMS/dbotrack.parquet', format='parquet')\r\n",
							"df.createOrReplaceTempView(\"df\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data_BU/LMS/dbotrack_BU_2023_07_03.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data_BU/LMS/dbotrack_BU_2023_07_03.parquet', format='parquet')\r\n",
							"df.createOrReplaceTempView(\"df\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.dtypes"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"MAXVALUES\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"ID , MAX(CloseDt) CloseDt\r\n",
							"FROM df\r\n",
							"GROUP BY ID"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.count()"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT COUNT(*) FROM MAXVALUES"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--CREATE OR REPLACE TEMP VIEW\r\n",
							"--DEDUPE\r\n",
							"--AS\r\n",
							"SELECT \r\n",
							"df.ID , COUNT(df.ID)\r\n",
							"--COUNT(*)\r\n",
							"FROM df\r\n",
							"INNER JOIN MAXVALUES MV ON MV.ID = df.ID AND (MV.CloseDt = df.CloseDt OR MV.CloseDt is NULL)\r\n",
							"GROUP BY df.ID\r\n",
							"HAVING COUNT(ID) > 1"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--CREATE OR REPLACE TEMP VIEW\r\n",
							"--DEDUPE\r\n",
							"--AS\r\n",
							"SELECT \r\n",
							"--df.ID , COUNT(df.ID)\r\n",
							"COUNT(*)\r\n",
							"FROM df\r\n",
							"INNER JOIN MAXVALUES MV ON MV.ID = df.ID AND (MV.CloseDt = df.CloseDt OR MV.CloseDt is NULL)\r\n",
							"--GROUP BY df.ID\r\n",
							"--HAVING COUNT(ID) > 1"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"DEDUPE\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"df.*\r\n",
							"FROM df\r\n",
							"INNER JOIN MAXVALUES MV ON MV.ID = df.ID AND (MV.CloseDt = df.CloseDt OR MV.CloseDt is NULL)"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DEDUPE = spark.sql(\"SELECT * FROM DEDUPE\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DEDUPE.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/LMS/dbotrack.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dedupe on bill_consignmentr')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EXTRACT"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e68897d8-baa7-4873-b8db-07cf2f20d293"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/LMS/dbobill_consignmentr.parquet', format='parquet')\r\n",
							"df.createOrReplaceTempView(\"df\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data_BU/LMS/DeDupeWF/bill_consignmentrT1.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data_BU/LMS/DeDupeWF/bill_consignmentrT1.parquet', format='parquet')\r\n",
							"#df = spark.read.load('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data_BU/LMS/bill_consignmentr_BU_2023_06_29.parquet', format='parquet')\r\n",
							"df.createOrReplaceTempView(\"df\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.dtypes"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"MAXVALUES\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"consignid , MAX(Id) Id\r\n",
							"FROM df\r\n",
							"GROUP BY consignid"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.count()"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT COUNT(*) FROM MAXVALUES"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--CREATE OR REPLACE TEMP VIEW\r\n",
							"--DEDUPE\r\n",
							"--AS\r\n",
							"SELECT \r\n",
							"df.consignid , COUNT(df.consignid)\r\n",
							"--COUNT(*)\r\n",
							"FROM df\r\n",
							"INNER JOIN MAXVALUES MV ON MV.Id = df.Id --AND (MV.CloseDt = df.CloseDt OR MV.CloseDt is NULL)\r\n",
							"GROUP BY df.consignid\r\n",
							"HAVING COUNT(consignid) > 1"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--CREATE OR REPLACE TEMP VIEW\r\n",
							"--DEDUPE\r\n",
							"--AS\r\n",
							"SELECT \r\n",
							"--df.consignid , COUNT(df.consignid)\r\n",
							"COUNT(*)\r\n",
							"FROM df\r\n",
							"INNER JOIN MAXVALUES MV ON MV.Id = df.Id --AND (MV.CloseDt = df.CloseDt OR MV.CloseDt is NULL)\r\n",
							"--GROUP BY df.ID\r\n",
							"--HAVING COUNT(ID) > 1"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"DEDUPE\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"df.*\r\n",
							"FROM df\r\n",
							"INNER JOIN MAXVALUES MV ON MV.Id = df.Id --AND (MV.CloseDt = df.CloseDt OR MV.CloseDt is NULL)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DEDUPE = spark.sql(\"SELECT * FROM DEDUPE\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"DEDUPE.write.parquet('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data/LMS/dbobill_consignmentr.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from notebookutils import mssparkutils"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.fs.rm('abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Unstructured Data_BU/LMS/DeDupeWF/bill_consignmentrT1.parquet', True)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LOAD_Tables')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DEV/Cost To Serve Notebooks DEV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d0b212bd-bd4e-4b74-952e-2dee3498b01d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"# WRITE abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/CTS_Results/\r\n",
							"\r\n",
							"from pyspark.sql import *\r\n",
							"from pyspark.sql.functions import *\r\n",
							"import pandas as pd\r\n",
							"\r\n",
							"MonthToRun = '2023-02-28'\r\n",
							"\r\n",
							"#STOPS\r\n",
							"#parcel_track = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet/\", format='parquet')\r\n",
							"#parcel = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet/\", format='parquet')\r\n",
							"#waybill = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet/\", format='parquet')\r\n",
							"#location = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet/\", format='parquet')\r\n",
							"#dispatch_segment = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdispatchsegment.parquet/\", format='parquet')\r\n",
							"#del_pickup_cust = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet/\", format='parquet')\r\n",
							"#load_parent = spark.read.load(\"abfss://synapse@citylogisticsstorageprod.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet/\", format='parquet')\r\n",
							"\r\n",
							"#STSAP\r\n",
							"#dim_account = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_Account_Expose.parquet/\", format='parquet')\r\n",
							"#dim_dates = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_DATES.parquet/\", format='parquet')\r\n",
							"#dim_group = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_GROUP_Expose.parquet/\", format='parquet')\r\n",
							"#trans_summary = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/Structured Data/FINANCE/sttransactionssummary.parquet/\", format='parquet')\r\n",
							"\r\n",
							"#CTS Inputs\r\n",
							"#dim_skippedreasoninclude = spark.read.load(\"abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake Dev/Structured/Dimensions/DIM_SkippedReasonIncludeExclude.parquet/\", format='parquet')\r\n",
							"\r\n",
							"\r\n",
							"#STOPS\r\n",
							"#parcel_track.createOrReplaceTempView(\"parcel_track\")\r\n",
							"#parcel.createOrReplaceTempView(\"parcel\")\r\n",
							"#waybill.createOrReplaceTempView(\"waybill\")\r\n",
							"#location.createOrReplaceTempView(\"location\")\r\n",
							"#dispatch_segment.createOrReplaceTempView(\"dispatch_segment\")\r\n",
							"#del_pickup_cust.createOrReplaceTempView(\"del_pickup_cust\")\r\n",
							"#load_parent.createOrReplaceTempView(\"load_parent\")\r\n",
							"\r\n",
							"#STSAP\r\n",
							"#dim_account.createOrReplaceTempView(\"dim_account\")\r\n",
							"#dim_dates.createOrReplaceTempView(\"dim_dates\")\r\n",
							"#dim_group.createOrReplaceTempView(\"dim_group\")\r\n",
							"#trans_summary.createOrReplaceTempView(\"trans_summary\")\r\n",
							"\r\n",
							"#CTS Inputs\r\n",
							"#dim_skippedreasoninclude.createOrReplaceTempView(\"dim_skippedreasoninclude\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PartitionSparkJob')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "48c9899c-10f6-439a-bd9a-abfc919e50eb"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"cw_FolderName = \"\"\r\n",
							"cw_FileName = \"\"\r\n",
							"cw_IncFolderName = \"\"\r\n",
							"cw_IdField = \"\"\r\n",
							"ContainerName = \"\"\r\n",
							"DataLakeDF = \"\""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"##Load the Left File\r\n",
							"path = 'abfss://' + ContainerName + '@' + DataLakeDF + cw_FolderName + '/T1/' + cw_FileName\r\n",
							"LeftFile = spark.read.load(path, format='parquet')"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"Finalpath = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_FolderName + '/' + cw_FileName"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"LeftFile.write.parquet(Finalpath, mode='overwrite')"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTAggrParcelByX')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/02_LMS Aggr"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f7247c30-fe62-4060-bf7c-20e1476da296"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# # Create SSTParcelByOrder \r\n",
							"# # Create SSTParcelByWaybill\r\n",
							"# # Create SSTParcelByConsignment\r\n",
							"# # Create SSTParcelByLoad\r\n",
							"\r\n",
							"# #Create DataFrame for the sstparcelunion LMS Table\r\n",
							"# sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"# sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"# #Create DataFrame for the ssttrackunion LMS Table\r\n",
							"# ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"# ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboorder LMS Table\r\n",
							"# dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"# dboorder.createOrReplaceTempView(\"dboorder\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import greatest"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbyorder_tmp1\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     P.orderid as lms_parcelbyorder_orderid\r\n",
							"    ,Sum(P.weight) as lms_parcelbyorder_aggrweight\r\n",
							"    ,Sum(P.chargeweight) as lms_parcelbyorder_aggrchargeweight\r\n",
							"    ,Sum(P.volweight) as lms_parcelbyorder_aggrvolweight\r\n",
							"    ,Sum(P.volumiserweight) as lms_parcelbyorder_aggrvolumiserweight\r\n",
							"    ,Sum(greatest(P.volumiserweight,P.weight,P.chargeweight,P.volumiserweight)) as lms_parcelbyorder_aggrmaxweight \r\n",
							"    ,Count(P.id) as lms_parcelbyorder_aggrnoparcels\r\n",
							"FROM sstparcelunion P\r\n",
							"GROUP BY P.orderid"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbyorder_tmp2\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     P.orderid as lms_parcelbyorder_orderid\r\n",
							"    ,Sum(P.weight) as lms_parcelbyorder_aggrweightexclspecdel\r\n",
							"    ,Sum(P.chargeweight) as lms_parcelbyorder_aggrchargeweightexclspecdel\r\n",
							"    ,Sum(P.volweight) as lms_parcelbyorder_aggrvolweightexclspecdel\r\n",
							"    ,Sum(P.volumiserweight) as lms_parcelbyorder_aggrvolumiserweightexclspecdel\r\n",
							"    ,Sum(greatest(P.volumiserweight,P.weight,P.chargeweight,P.volumiserweight)) as lms_parcelbyorder_aggrmaxweightexclspecdel\r\n",
							"    ,Count(P.id) as lms_parcelbyorder_aggrnoparcelsexclspecdel\r\n",
							"FROM sstparcelunion P\r\n",
							"LEFT JOIN dboorder o on o.id = p.orderid\r\n",
							"WHERE o.specdel = 0\r\n",
							"GROUP BY P.orderid"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbyorder_tmp1 = spark.sql(\"SELECT * FROM sstparcelbyorder_tmp1\")\r\n",
							"sstparcelbyorder_tmp2 = spark.sql(\"SELECT * FROM sstparcelbyorder_tmp2\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbyorder\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     t1.lms_parcelbyorder_orderid\r\n",
							"    ,CAST(t1.lms_parcelbyorder_aggrweight AS decimal(28,2)) as lms_parcelbyorder_aggrweight\r\n",
							"    ,CAST(t1.lms_parcelbyorder_aggrchargeweight AS decimal(28,2)) as lms_parcelbyorder_aggrchargeweight\r\n",
							"    ,CAST(t1.lms_parcelbyorder_aggrvolweight AS decimal(28,2)) as lms_parcelbyorder_aggrvolweight\r\n",
							"    ,CAST(t1.lms_parcelbyorder_aggrvolumiserweight AS decimal(28,2)) as lms_parcelbyorder_aggrvolumiserweight\r\n",
							"    ,CAST(t1.lms_parcelbyorder_aggrmaxweight  AS decimal(28,2)) as lms_parcelbyorder_aggrmaxweight\r\n",
							"    ,t1.lms_parcelbyorder_aggrnoparcels\r\n",
							"    ,CAST(t2.lms_parcelbyorder_aggrweightexclspecdel AS decimal(28,2)) as lms_parcelbyorder_aggrweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbyorder_aggrchargeweightexclspecdel AS decimal(28,2)) as lms_parcelbyorder_aggrchargeweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbyorder_aggrvolweightexclspecdel AS decimal(28,2)) as lms_parcelbyorder_aggrvolweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbyorder_aggrvolumiserweightexclspecdel AS decimal(28,2)) as lms_parcelbyorder_aggrvolumiserweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbyorder_aggrmaxweightexclspecdel AS decimal(28,2)) as lms_parcelbyorder_aggrmaxweightexclspecdel\r\n",
							"    ,t2.lms_parcelbyorder_aggrnoparcelsexclspecdel\r\n",
							"FROM sstparcelbyorder_tmp1 t1\r\n",
							"LEFT JOIN sstparcelbyorder_tmp2 t2 on t2.lms_parcelbyorder_orderid = t1.lms_parcelbyorder_orderid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 165
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbyorder = spark.sql(\"SELECT * FROM sstparcelbyorder\")"
						],
						"outputs": [],
						"execution_count": 166
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstparcelbyorder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyorder.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 167
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbywaybill_tmp1\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     P.waybillid as lms_parcelbywaybill_waybillid\r\n",
							"    ,Sum(P.weight) as lms_parcelbywaybill_aggrweight\r\n",
							"    ,Sum(P.chargeweight) as lms_parcelbywaybill_aggrchargeweight\r\n",
							"    ,Sum(P.volweight) as lms_parcelbywaybill_aggrvolweight\r\n",
							"    ,Sum(P.volumiserweight) as lms_parcelbywaybill_aggrvolumiserweight\r\n",
							"    ,Sum(greatest(P.volumiserweight,P.weight,P.chargeweight,P.volumiserweight)) as lms_parcelbywaybill_aggrmaxweight \r\n",
							"    ,Count(P.id) as lms_parcelbywaybill_aggrnoparcels\r\n",
							"FROM sstparcelunion P\r\n",
							"GROUP BY P.waybillid"
						],
						"outputs": [],
						"execution_count": 168
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbywaybill_tmp2\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     P.waybillid as lms_parcelbywaybill_waybillid\r\n",
							"    ,Sum(P.weight) as lms_parcelbywaybill_aggrweightexclspecdel\r\n",
							"    ,Sum(P.chargeweight) as lms_parcelbywaybill_aggrchargeweightexclspecdel\r\n",
							"    ,Sum(P.volweight) as lms_parcelbywaybill_aggrvolweightexclspecdel\r\n",
							"    ,Sum(P.volumiserweight) as lms_parcelbywaybill_aggrvolumiserweightexclspecdel\r\n",
							"    ,Sum(greatest(P.volumiserweight,P.weight,P.chargeweight,P.volumiserweight)) as lms_parcelbywaybill_aggrmaxweightexclspecdel\r\n",
							"    ,Count(P.id) as lms_parcelbywaybill_aggrnoparcelsexclspecdel\r\n",
							"FROM sstparcelunion P\r\n",
							"LEFT JOIN dboorder o on o.id = p.orderid\r\n",
							"WHERE o.specdel = 0\r\n",
							"GROUP BY P.waybillid"
						],
						"outputs": [],
						"execution_count": 169
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbywaybill_tmp1 = spark.sql(\"SELECT * FROM sstparcelbywaybill_tmp1\")\r\n",
							"sstparcelbywaybill_tmp2 = spark.sql(\"SELECT * FROM sstparcelbywaybill_tmp2\")"
						],
						"outputs": [],
						"execution_count": 170
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbywaybill\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     t1.lms_parcelbywaybill_waybillid\r\n",
							"    ,CAST(t1.lms_parcelbywaybill_aggrweight AS decimal(28,2)) as lms_parcelbywaybill_aggrweight\r\n",
							"    ,CAST(t1.lms_parcelbywaybill_aggrchargeweight AS decimal(28,2)) as lms_parcelbywaybill_aggrchargeweight\r\n",
							"    ,CAST(t1.lms_parcelbywaybill_aggrvolweight AS decimal(28,2)) as lms_parcelbywaybill_aggrvolweight\r\n",
							"    ,CAST(t1.lms_parcelbywaybill_aggrvolumiserweight AS decimal(28,2)) as lms_parcelbywaybill_aggrvolumiserweight\r\n",
							"    ,CAST(t1.lms_parcelbywaybill_aggrmaxweight AS decimal(28,2)) as lms_parcelbywaybill_aggrmaxweight\r\n",
							"    ,t1.lms_parcelbywaybill_aggrnoparcels\r\n",
							"    ,CAST(t2.lms_parcelbywaybill_aggrweightexclspecdel AS decimal(28,2)) as lms_parcelbywaybill_aggrweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbywaybill_aggrchargeweightexclspecdel AS decimal(28,2)) as lms_parcelbywaybill_aggrchargeweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbywaybill_aggrvolweightexclspecdel AS decimal(28,2)) as lms_parcelbywaybill_aggrvolweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbywaybill_aggrvolumiserweightexclspecdel AS decimal(28,2)) as lms_parcelbywaybill_aggrvolumiserweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbywaybill_aggrmaxweightexclspecdel AS decimal(28,2)) as lms_parcelbywaybill_aggrmaxweightexclspecdel\r\n",
							"    ,t2.lms_parcelbywaybill_aggrnoparcelsexclspecdel\r\n",
							"FROM sstparcelbywaybill_tmp1 t1\r\n",
							"LEFT JOIN sstparcelbywaybill_tmp2 t2 on t2.lms_parcelbywaybill_waybillid = t1.lms_parcelbywaybill_waybillid"
						],
						"outputs": [],
						"execution_count": 171
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbywaybill = spark.sql(\"SELECT * FROM sstparcelbywaybill\")"
						],
						"outputs": [],
						"execution_count": 172
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstparcelbywaybill.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbywaybill.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 173
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbyconsignment_tmp1\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     P.consignid as lms_parcelbyconsignment_consignid\r\n",
							"    ,Sum(P.weight) as lms_parcelbyconsignment_aggrweight\r\n",
							"    ,Sum(P.chargeweight) as lms_parcelbyconsignment_aggrchargeweight\r\n",
							"    ,Sum(P.volweight) as lms_parcelbyconsignment_aggrvolweight\r\n",
							"    ,Sum(P.volumiserweight) as lms_parcelbyconsignment_aggrvolumiserweight\r\n",
							"    ,Sum(greatest(P.volumiserweight,P.weight,P.chargeweight,P.volumiserweight)) as lms_parcelbyconsignment_aggrmaxweight\r\n",
							"    ,Count(P.id) as lms_parcelbyconsignment_aggrnoparcels\r\n",
							"FROM sstparcelunion P\r\n",
							"GROUP BY P.consignid"
						],
						"outputs": [],
						"execution_count": 174
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbyconsignment_tmp2\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     P.consignid as lms_parcelbyconsignment_consignid\r\n",
							"    ,Sum(P.weight) as lms_parcelbyconsignment_aggrweightexclspecdel\r\n",
							"    ,Sum(P.chargeweight) as lms_parcelbyconsignment_aggrchargeweightexclspecdel\r\n",
							"    ,Sum(P.volweight) as lms_parcelbyconsignment_aggrvolweightexclspecdel\r\n",
							"    ,Sum(P.volumiserweight) as lms_parcelbyconsignment_aggrvolumiserweightexclspecdel\r\n",
							"    ,Sum(greatest(P.volumiserweight,P.weight,P.chargeweight,P.volumiserweight)) as lms_parcelbyconsignment_aggrmaxweightexclspecdel\r\n",
							"    ,Count(P.id) as lms_parcelbyconsignment_aggrnoparcelsexclspecdel\r\n",
							"FROM sstparcelunion P\r\n",
							"LEFT JOIN dboorder o on o.id = p.orderid\r\n",
							"WHERE o.specdel = 0\r\n",
							"GROUP BY P.consignid"
						],
						"outputs": [],
						"execution_count": 175
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbyconsignment_tmp1 = spark.sql(\"SELECT * FROM sstparcelbyconsignment_tmp1\")\r\n",
							"sstparcelbyconsignment_tmp2 = spark.sql(\"SELECT * FROM sstparcelbyconsignment_tmp2\")"
						],
						"outputs": [],
						"execution_count": 176
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbyconsignment\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     t1.lms_parcelbyconsignment_consignid\r\n",
							"    ,CAST(t1.lms_parcelbyconsignment_aggrweight AS decimal(28,2)) as lms_parcelbyconsignment_aggrweight\r\n",
							"    ,CAST(t1.lms_parcelbyconsignment_aggrchargeweight AS decimal(28,2)) as lms_parcelbyconsignment_aggrchargeweight\r\n",
							"    ,CAST(t1.lms_parcelbyconsignment_aggrvolweight AS decimal(28,2)) as lms_parcelbyconsignment_aggrvolweight\r\n",
							"    ,CAST(t1.lms_parcelbyconsignment_aggrvolumiserweight AS decimal(28,2)) as lms_parcelbyconsignment_aggrvolumiserweight\r\n",
							"    ,CAST(t1.lms_parcelbyconsignment_aggrmaxweight AS decimal(28,2)) as lms_parcelbyconsignment_aggrmaxweight\r\n",
							"    ,t1.lms_parcelbyconsignment_aggrnoparcels\r\n",
							"    ,CAST(t2.lms_parcelbyconsignment_aggrweightexclspecdel AS decimal(28,2)) as lms_parcelbyconsignment_aggrweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbyconsignment_aggrchargeweightexclspecdel AS decimal(28,2)) as lms_parcelbyconsignment_aggrchargeweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbyconsignment_aggrvolweightexclspecdel AS decimal(28,2)) as lms_parcelbyconsignment_aggrvolweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbyconsignment_aggrvolumiserweightexclspecdel AS decimal(28,2)) as lms_parcelbyconsignment_aggrvolumiserweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbyconsignment_aggrmaxweightexclspecdel AS decimal(28,2)) as lms_parcelbyconsignment_aggrmaxweightexclspecdel\r\n",
							"    ,t2.lms_parcelbyconsignment_aggrnoparcelsexclspecdel \r\n",
							"FROM sstparcelbyconsignment_tmp1 t1\r\n",
							"LEFT JOIN sstparcelbyconsignment_tmp2 t2 on t2.lms_parcelbyconsignment_consignid = t1.lms_parcelbyconsignment_consignid"
						],
						"outputs": [],
						"execution_count": 177
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbyconsignment = spark.sql(\"SELECT * FROM sstparcelbyconsignment\")"
						],
						"outputs": [],
						"execution_count": 178
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstparcelbyconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyconsignment.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 179
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbyload_tmp1 \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     T.loadid as lms_parcelbyload_loadid\r\n",
							"    ,Sum(T.weight) as lms_parcelbyload_aggrweight\r\n",
							"    ,Sum(T.chargeweight) as lms_parcelbyload_aggrchargeweight\r\n",
							"    ,Sum(T.volweight) as lms_parcelbyload_aggrvolweight\r\n",
							"    ,Sum(T.volumiserweight) as lms_parcelbyload_aggrvolumiserweight\r\n",
							"    ,Sum(greatest(T.volumiserweight,T.weight,T.chargeweight,T.volumiserweight)) as lms_parcelbyload_aggrmaxweight\r\n",
							"    ,Count(T.parcelid) as lms_parcelbyload_aggrnoparcels\r\n",
							"FROM ssttrackunion T\r\n",
							"GROUP BY T.loadid"
						],
						"outputs": [],
						"execution_count": 180
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbyload_tmp2\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     T.loadid as lms_parcelbyload_loadid\r\n",
							"    ,Sum(T.weight) as lms_parcelbyload_aggrweightexclspecdel\r\n",
							"    ,Sum(T.chargeweight) as lms_parcelbyload_aggrchargeweightexclspecdel\r\n",
							"    ,Sum(T.volweight) as lms_parcelbyload_aggrvolweightexclspecdel\r\n",
							"    ,Sum(T.volumiserweight) as lms_parcelbyload_aggrvolumiserweightexclspecdel\r\n",
							"    ,Sum(greatest(T.volumiserweight,T.weight,T.chargeweight,T.volumiserweight)) as lms_parcelbyload_aggrmaxweightexclspecdel\r\n",
							"    ,Count(T.id) as lms_parcelbyload_aggrnoparcelsexclspecdel\r\n",
							"FROM ssttrackunion T\r\n",
							"WHERE T.specdel = 0\r\n",
							"GROUP BY T.loadid"
						],
						"outputs": [],
						"execution_count": 181
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbyload_tmp1 = spark.sql(\"SELECT * FROM sstparcelbyload_tmp1\")\r\n",
							"sstparcelbyload_tmp2 = spark.sql(\"SELECT * FROM sstparcelbyload_tmp2\")"
						],
						"outputs": [],
						"execution_count": 182
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelbyload\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     t1.lms_parcelbyload_loadid\r\n",
							"    ,CAST(t1.lms_parcelbyload_aggrweight AS decimal(28,2)) AS lms_parcelbyload_aggrweight\r\n",
							"    ,CAST(t1.lms_parcelbyload_aggrchargeweight  AS decimal(28,2)) AS lms_parcelbyload_aggrchargeweight\r\n",
							"    ,CAST(t1.lms_parcelbyload_aggrvolweight  AS decimal(28,2)) AS lms_parcelbyload_aggrvolweight\r\n",
							"    ,CAST(t1.lms_parcelbyload_aggrvolumiserweight  AS decimal(28,2)) AS lms_parcelbyload_aggrvolumiserweight\r\n",
							"    ,CAST(t1.lms_parcelbyload_aggrmaxweight  AS decimal(28,2)) AS lms_parcelbyload_aggrmaxweight\r\n",
							"    ,t1.lms_parcelbyload_aggrnoparcels\r\n",
							"    ,CAST(t2.lms_parcelbyload_aggrweightexclspecdel  AS decimal(28,2)) AS lms_parcelbyload_aggrweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbyload_aggrchargeweightexclspecdel  AS decimal(28,2)) AS lms_parcelbyload_aggrchargeweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbyload_aggrvolweightexclspecdel  AS decimal(28,2)) AS lms_parcelbyload_aggrvolweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbyload_aggrvolumiserweightexclspecdel  AS decimal(28,2)) AS lms_parcelbyload_aggvolumiserweightexclspecdel\r\n",
							"    ,CAST(t2.lms_parcelbyload_aggrmaxweightexclspecdel  AS decimal(28,2)) AS lms_parcelbyload_aggrmaxweightexclspecdel\r\n",
							"    ,t2.lms_parcelbyload_aggrnoparcelsexclspecdel\r\n",
							"FROM sstparcelbyload_tmp1 t1\r\n",
							"LEFT JOIN sstparcelbyload_tmp2 t2 on t2.lms_parcelbyload_loadid = t1.lms_parcelbyload_loadid"
						],
						"outputs": [],
						"execution_count": 183
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbyload = spark.sql(\"SELECT * FROM sstparcelbyload\")"
						],
						"outputs": [],
						"execution_count": 184
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstparcelbyload.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyload.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 185
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTBooking')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/ARCHIVE/01 SEMI STRUCTURED/04_TMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7719f108-17ce-4fed-9f6a-7d7b063f02ac"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the publicnonbooking TMS Table\r\n",
							"# publicnonbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicnonbooking.parquet', format='parquet')\r\n",
							"# publicnonbooking.createOrReplaceTempView(\"publicnonbooking\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicbooking TMS Table\r\n",
							"# publicbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicbooking.parquet', format='parquet')\r\n",
							"# publicbooking.createOrReplaceTempView(\"publicbooking\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publiccustomer TMS Table\r\n",
							"# publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiccustomer.parquet', format='parquet')\r\n",
							"# publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicroute TMS Table\r\n",
							"# publicroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicroute.parquet', format='parquet')\r\n",
							"# publicroute.createOrReplaceTempView(\"publicroute\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicthirdparty TMS Table\r\n",
							"# publicthirdparty = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicthirdparty.parquet', format='parquet')\r\n",
							"# publicthirdparty.createOrReplaceTempView(\"publicthirdparty\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicfinancedata TMS Table\r\n",
							"# publicfinancedata = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfinancedata.parquet', format='parquet')\r\n",
							"# publicfinancedata.createOrReplaceTempView(\"publicfinancedata\")\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 55
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sstbooking_tmp = spark.sql(\"\"\"\r\n",
							"SELECT \r\n",
							"    b.id as tms_booking_id\r\n",
							"    ,'booking' as tms_booking_bookingtype\r\n",
							"    ,b.customerid as tms_booking_customerid\r\n",
							"    ,b.trailersize as tms_booking_trailersize\r\n",
							"    ,b.trailertype as tms_booking_trailertype\r\n",
							"    ,b.routeid as tms_booking_routeid\r\n",
							"    ,b.routename as tms_booking_routename\r\n",
							"    ,b.cargoweight as tms_booking_cargoweight\r\n",
							"    ,b.cubicvolume as tms_booking_cubicvolume\r\n",
							"    ,b.directbooking as tms_booking_directbooking\r\n",
							"    ,to_timestamp(b.pickupdate) as tms_booking_pickupdate\r\n",
							"    ,to_timestamp(b.dispatchdate) as tms_booking_dispatchdate\r\n",
							"    ,to_timestamp(b.deliverydate) as tms_booking_deliverydate\r\n",
							"    ,to_timestamp(b.insdate) as tms_booking_insdate\r\n",
							"    ,to_timestamp(b.moddate) as tms_booking_moddate\r\n",
							"    ,b.status as tms_booking_status\r\n",
							"    ,b.tripid as tms_booking_tripid\r\n",
							"    ,b.createdby as tms_booking_createdby\r\n",
							"    ,b.allocatedby as tms_booking_allocatedby\r\n",
							"    ,to_timestamp(b.allocateddate) as tms_booking_allocateddate\r\n",
							"    ,COALESCE(b.opsrouteid,b.routeid) as tms_booking_opsrouteid\r\n",
							"    ,COALESCE(b.opsroutename,b.routename) as tms_booking_opsroutename\r\n",
							"    ,b.childcustomerid as tms_booking_childcustomerid\r\n",
							"    ,b.thirdpartyreason as tms_booking_thirdpartyreason\r\n",
							"    ,b.thirdpartyrate as tms_booking_thirdpartyrate\r\n",
							"    ,b.cref1 as tms_booking_cref1\r\n",
							"    ,b.cref2 as tms_booking_cref2\r\n",
							"    ,b.thirdpartyvehicleflag as tms_booking_thirdpartyvehicleflag\r\n",
							"    ,b.thirdpartytrailerflag as tms_booking_thirdpartytrailerflag\r\n",
							"    ,b.thirdpartydriverflag as tms_booking_thirdpartydriverflag\r\n",
							"    ,b.invoiceid as tms_booking_invoiceid\r\n",
							"    ,b.docstatus as tms_booking_docstatus\r\n",
							"    ,b.billingstatus as tms_booking_billingstatus\r\n",
							"    ,b.thirdpartyagreedrate as tms_booking_thirdpartyagreedrate\r\n",
							"    ,to_timestamp(b.invoiceddate) as tms_booking_invoiceddate\r\n",
							"    ,b.legacyid as tms_booking_legacyid\r\n",
							"    ,b.createdbyname as tms_booking_createdbyname\r\n",
							"    ,b.note as tms_booking_note\r\n",
							"    ,b.manifests as tms_booking_manifests\r\n",
							"    ,b.local as tms_booking_local\r\n",
							"    ,to_timestamp(b.docdate) as tms_booking_docdate\r\n",
							"    ,b.billingmethod as tms_booking_billingmethod\r\n",
							"    ,b.originalpod as tms_booking_originalpod\r\n",
							"    ,b.ponumber as tms_booking_ponumber\r\n",
							"    ,b.customerrate as tms_booking_customerrate\r\n",
							"    ,b.customeragreedrate as tms_booking_customeragreedrate\r\n",
							"    ,to_timestamp(b.assetreleasedate) as tms_booking_assetreleasedate\r\n",
							"    ,b.thirdpartyid as tms_booking_thirdpartyid\r\n",
							"    ,b.transporter as tms_booking_transporter\r\n",
							"    ,b.emailrequester as tms_booking_emailrequester\r\n",
							"    ,b.frombranchid as tms_booking_frombranchid\r\n",
							"    ,b.tobranchid as tms_booking_tobranchid\r\n",
							"    ,b.frombranch as tms_booking_frombranch\r\n",
							"    ,b.tobranch as tms_booking_tobranch\r\n",
							"    ,null as tms_booking_reason\r\n",
							"    ,null as tms_booking_startaddress\r\n",
							"    ,null as tms_booking_startlat\r\n",
							"    ,null as tms_booking_startlng\r\n",
							"    ,null as tms_booking_endaddress\r\n",
							"    ,null as tms_booking_endlat\r\n",
							"    ,null as tms_booking_endlng\r\n",
							"    ,null as tms_booking_convertedbookingid\r\n",
							"    \r\n",
							"FROM publicBooking b\r\n",
							"\"\"\")"
						],
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sstnonbooking_tmp = spark.sql(\"\"\"\r\n",
							"SELECT\r\n",
							"    n.id as tms_booking_id\r\n",
							"    ,'nonbooking' as tms_booking_bookingtype\r\n",
							"    ,null as tms_booking_customerid\r\n",
							"    ,n.trailersize as tms_booking_trailersize\r\n",
							"    ,null as tms_booking_trailertype\r\n",
							"    ,n.routeid as tms_booking_routeid\r\n",
							"    ,n.routename as tms_booking_routename\r\n",
							"    ,null as tms_booking_cargoweight\r\n",
							"    ,null as tms_booking_cubicvolume\r\n",
							"    ,null as tms_booking_directbooking\r\n",
							"    ,null as tms_booking_pickupdate\r\n",
							"    ,to_timestamp(n.dispatchdate) as tms_booking_dispatchdate\r\n",
							"    ,to_timestamp(n.deliverydate) as tms_booking_deliverydate\r\n",
							"    ,to_timestamp(n.insdate) as tms_booking_insdate\r\n",
							"    ,to_timestamp(n.moddate) as tms_booking_moddate\r\n",
							"    ,n.status as tms_booking_status\r\n",
							"    ,n.tripid as tms_booking_tripid\r\n",
							"    ,null as tms_booking_createdby\r\n",
							"    ,null as tms_booking_allocatedby\r\n",
							"    ,to_timestamp(n.insdate) as tms_booking_allocateddate\r\n",
							"    ,n.routeid as tms_booking_opsrouteid\r\n",
							"    ,n.routename as tms_booking_opsroutename\r\n",
							"    ,null as tms_booking_childcustomerid\r\n",
							"    ,null as tms_booking_thirdpartyreason\r\n",
							"    ,null as tms_booking_thirdpartyrate\r\n",
							"    ,null as tms_booking_cref1\r\n",
							"    ,null as tms_booking_cref2\r\n",
							"    ,null as tms_booking_thirdpartyvehicleflag\r\n",
							"    ,null as tms_booking_thirdpartytrailerflag\r\n",
							"    ,null as tms_booking_thirdpartydriverflag\r\n",
							"    ,null as tms_booking_invoiceid\r\n",
							"    ,null as tms_booking_docstatus\r\n",
							"    ,n.billingstatus as tms_booking_billingstatus\r\n",
							"    ,null as tms_booking_thirdpartyagreedrate\r\n",
							"    ,null as tms_booking_invoiceddate\r\n",
							"    ,n.legacyid as tms_booking_legacyid\r\n",
							"    ,null as tms_booking_createdbyname\r\n",
							"    ,n.note as tms_booking_note\r\n",
							"    ,null as tms_booking_manifests\r\n",
							"    ,n.local as tms_booking_local\r\n",
							"    ,null as tms_booking_docdate\r\n",
							"    ,null as tms_booking_billingmethod\r\n",
							"    ,null as tms_booking_originalpod\r\n",
							"    ,null as tms_booking_ponumber\r\n",
							"    ,null as tms_booking_customerrate\r\n",
							"    ,null as tms_booking_customeragreedrate\r\n",
							"    ,to_timestamp(n.assetreleasedate) as tms_booking_assetreleasedate\r\n",
							"    ,null as tms_booking_thirdpartyid\r\n",
							"    ,null as tms_booking_transporter\r\n",
							"    ,null as tms_booking_emailrequester\r\n",
							"    ,n.frombranchid as tms_booking_frombranchid\r\n",
							"    ,n.tobranchid as tms_booking_tobranchid\r\n",
							"    ,n.frombranch as tms_booking_frombranch\r\n",
							"    ,n.tobranch as tms_booking_tobranch\r\n",
							"    ,n.reason as tms_booking_reason\r\n",
							"    ,n.startaddress as tms_booking_startaddress\r\n",
							"    ,n.startlat as tms_booking_startlat\r\n",
							"    ,n.startlng as tms_booking_startlng\r\n",
							"    ,n.endaddress as tms_booking_endaddress\r\n",
							"    ,n.endlat as tms_booking_endlat\r\n",
							"    ,n.endlng as tms_booking_endlng\r\n",
							"    ,n.convertedbookingid as tms_booking_convertedbookingid\r\n",
							"\r\n",
							"FROM publicNonBooking n\r\n",
							"\"\"\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 57
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstbooking_tmp.createOrReplaceTempView(\"sstbooking_tmp\")"
						],
						"outputs": [],
						"execution_count": 58
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstnonbooking_tmp.createOrReplaceTempView(\"sstnonbooking_tmp\")"
						],
						"outputs": [],
						"execution_count": 59
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"bookingunionnonbooking = sstbooking_tmp.unionByName(sstnonbooking_tmp, allowMissingColumns = True)\r\n",
							"bookingunionnonbooking.createOrReplaceTempView(\"bookingunionnonbooking\")"
						],
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstbooking \r\n",
							"AS \r\n",
							"SELECT\r\n",
							"    x.tms_booking_id\r\n",
							"    ,x.tms_booking_bookingtype\r\n",
							"    ,x.tms_booking_customerid\r\n",
							"    ,x.tms_booking_trailersize\r\n",
							"    ,x.tms_booking_trailertype\r\n",
							"    ,x.tms_booking_routeid\r\n",
							"    ,x.tms_booking_routename\r\n",
							"    ,x.tms_booking_cargoweight\r\n",
							"    ,x.tms_booking_cubicvolume\r\n",
							"    ,x.tms_booking_directbooking\r\n",
							"    ,x.tms_booking_pickupdate\r\n",
							"    ,x.tms_booking_dispatchdate\r\n",
							"    ,x.tms_booking_deliverydate\r\n",
							"    ,x.tms_booking_insdate\r\n",
							"    ,x.tms_booking_moddate\r\n",
							"    ,x.tms_booking_status\r\n",
							"    ,x.tms_booking_tripid\r\n",
							"    ,x.tms_booking_createdby\r\n",
							"    ,x.tms_booking_allocatedby\r\n",
							"    ,x.tms_booking_allocateddate\r\n",
							"    ,x.tms_booking_opsrouteid\r\n",
							"    ,x.tms_booking_opsroutename\r\n",
							"    ,x.tms_booking_childcustomerid\r\n",
							"    ,x.tms_booking_thirdpartyreason\r\n",
							"    ,x.tms_booking_thirdpartyrate\r\n",
							"    ,x.tms_booking_cref1\r\n",
							"    ,x.tms_booking_cref2\r\n",
							"    ,x.tms_booking_thirdpartyvehicleflag\r\n",
							"    ,x.tms_booking_thirdpartytrailerflag\r\n",
							"    ,x.tms_booking_thirdpartydriverflag\r\n",
							"    ,x.tms_booking_invoiceid\r\n",
							"    ,x.tms_booking_docstatus\r\n",
							"    ,x.tms_booking_billingstatus\r\n",
							"    ,x.tms_booking_thirdpartyagreedrate\r\n",
							"    ,x.tms_booking_invoiceddate\r\n",
							"    ,x.tms_booking_createdbyname\r\n",
							"    ,x.tms_booking_note\r\n",
							"    ,x.tms_booking_manifests\r\n",
							"    ,x.tms_booking_local\r\n",
							"    ,x.tms_booking_docdate\r\n",
							"    ,x.tms_booking_billingmethod\r\n",
							"    ,x.tms_booking_originalpod\r\n",
							"    ,x.tms_booking_ponumber\r\n",
							"    ,x.tms_booking_customerrate\r\n",
							"    ,x.tms_booking_customeragreedrate\r\n",
							"    ,x.tms_booking_assetreleasedate\r\n",
							"    ,x.tms_booking_thirdpartyid\r\n",
							"    ,x.tms_booking_transporter\r\n",
							"    ,x.tms_booking_emailrequester\r\n",
							"    ,x.tms_booking_frombranchid\r\n",
							"    ,x.tms_booking_tobranchid\r\n",
							"    ,x.tms_booking_frombranch\r\n",
							"    ,x.tms_booking_tobranch\r\n",
							"    ,x.tms_booking_reason\r\n",
							"    ,x.tms_booking_startaddress\r\n",
							"    ,x.tms_booking_startlat\r\n",
							"    ,x.tms_booking_startlng\r\n",
							"    ,x.tms_booking_endaddress\r\n",
							"    ,x.tms_booking_endlat\r\n",
							"    ,x.tms_booking_endlng\r\n",
							"    ,x.tms_booking_convertedbookingid\r\n",
							"    ,c.id as tms_customer_id\r\n",
							"    ,c.status as tms_customer_status\r\n",
							"    ,c.name as tms_customer_name\r\n",
							"    ,c.parentid as tms_customer_parentid\r\n",
							"    ,c.accountnumber as tms_customer_accountnumber\r\n",
							"    ,c.revenuecode as tms_customer_revenuecode\r\n",
							"    ,c.insdate as tms_customer_insdate\r\n",
							"    ,c.moddate as tms_customer_moddate\r\n",
							"    ,c.insby as tms_customer_insby\r\n",
							"    ,c.opaqueid as tms_customer_opaqueid\r\n",
							"    ,c.email as tms_customer_email\r\n",
							"    ,c.areacode as tms_customer_areacode\r\n",
							"    ,c.mobilenum as tms_customer_mobilenum\r\n",
							"    ,c.billingmethod as tms_customer_billingmethod\r\n",
							"    ,c.adjustmetric as tms_customer_adjustmetric\r\n",
							"    ,c.adjustvalue as tms_customer_adjustvalue\r\n",
							"    ,c.adjustnegativeallowed as tms_customer_adjustnegativeallowed\r\n",
							"    ,c.adjustvalueusingprevmonth as tms_customer_adjustvalueusingprevmonth\r\n",
							"    ,c.excludefromnotinvoicedreport as tms_customer_excludefromnotinvoicedreport\r\n",
							"    ,c.logictype as tms_customer_logictype\r\n",
							"    ,c1.id as tms_customer_childid\r\n",
							"    ,c1.status as tms_customer_childstatus\r\n",
							"    ,c1.name as tms_customer_childname\r\n",
							"    ,c1.parentid as tms_customer_childparentid\r\n",
							"    ,c1.accountnumber as tms_customer_childaccountnumber\r\n",
							"    ,c1.revenuecode as tms_customer_childrevenuecode\r\n",
							"    ,c1.insdate as tms_customer_childinsdate\r\n",
							"    ,c1.moddate as tms_customer_childmoddate\r\n",
							"    ,c1.insby as tms_customer_childinsby\r\n",
							"    ,c1.opaqueid as tms_customer_childopaqueid\r\n",
							"    ,c1.email as tms_customer_childemail\r\n",
							"    ,c1.areacode as tms_customer_childareacode\r\n",
							"    ,c1.mobilenum as tms_customer_childmobilenum\r\n",
							"    ,c1.billingmethod as tms_customer_childbillingmethod\r\n",
							"    ,c1.adjustmetric as tms_customer_childadjustmetric\r\n",
							"    ,c1.adjustvalue as tms_customer_childadjustvalue\r\n",
							"    ,c1.adjustnegativeallowed as tms_customer_childadjustnegativeallowed\r\n",
							"    ,c1.adjustvalueusingprevmonth as tms_customer_childadjustvalueusingprevmonth\r\n",
							"    ,c1.excludefromnotinvoicedreport as tms_customer_childexcludefromnotinvoicedreport\r\n",
							"    ,c1.logictype as tms_customer_childlogictype\r\n",
							"    ,c1.minliability as tms_customer_childminliability\r\n",
							"    ,r.id as tms_route_id\r\n",
							"    ,r.name as tms_route_name\r\n",
							"    ,r.slug as tms_route_slug\r\n",
							"    ,r.parentroute as tms_route_parentroute\r\n",
							"    ,r.insdate as tms_route_insdate\r\n",
							"    ,r.moddate as tms_route_moddate\r\n",
							"    ,r.insby as tms_route_insby\r\n",
							"    ,r.status as tms_route_status\r\n",
							"    ,r.crossborder as tms_route_crossborder\r\n",
							"    ,r.roundtripdays as tms_route_roundtripdays\r\n",
							"    ,r.distance as tms_route_distance\r\n",
							"    ,r.duration as tms_route_duration\r\n",
							"    ,r.numofuse as tms_route_numofuse\r\n",
							"    ,r.local as tms_route_local\r\n",
							"    ,r1.id as tms_route_opsrouteid\r\n",
							"    ,r1.name as tms_route_opsroutename\r\n",
							"    ,r1.slug as tms_route_opsrouteslug\r\n",
							"    ,r1.parentroute as tms_route_opsrouteparentroute\r\n",
							"    ,r1.insdate as tms_route_opsrouteinsdate\r\n",
							"    ,r1.moddate as tms_route_opsroutemoddate\r\n",
							"    ,r1.insby as tms_route_opsrouteinsby\r\n",
							"    ,r1.status as tms_route_opsroutestatus\r\n",
							"    ,r1.crossborder as tms_route_opsroutecrossborder\r\n",
							"    ,r1.roundtripdays as tms_route_opsrouteroundtripdays\r\n",
							"    ,r1.distance as tms_route_opsroutedistance\r\n",
							"    ,r1.duration as tms_route_opsrouteduration\r\n",
							"    ,r1.numofuse as tms_route_opsroutenumofuse\r\n",
							"    ,r1.local as tms_route_opsroutelocal\r\n",
							"    ,t.id as tms_thirdparty_id\r\n",
							"    ,t.name as tms_thirdparty_name\r\n",
							"    ,t.areacode as tms_thirdparty_areacode\r\n",
							"    ,t.telnumber as tms_thirdparty_telnumber\r\n",
							"    ,t.mobareacode as tms_thirdparty_mobareacode\r\n",
							"    ,t.mobnumer as tms_thirdparty_mobnumer\r\n",
							"    ,t.contact as tms_thirdparty_contact\r\n",
							"    ,t.address as tms_thirdparty_address\r\n",
							"    ,t.streetno as tms_thirdparty_streetno\r\n",
							"    ,t.zipcode as tms_thirdparty_zipcode\r\n",
							"    ,t.city as tms_thirdparty_city\r\n",
							"    ,t.province as tms_thirdparty_province\r\n",
							"    ,t.status as tms_thirdparty_status\r\n",
							"    ,t.mdvoid as tms_thirdparty_mdvoid\r\n",
							"    ,t.registration as tms_thirdparty_registration\r\n",
							"    ,t.email as tms_thirdparty_email\r\n",
							"    ,t.accnumber as tms_thirdparty_accnumber\r\n",
							"    ,t.insdate as tms_thirdparty_insdate\r\n",
							"    ,t.moddate as tms_thirdparty_moddate\r\n",
							"    ,t.gitstatus as tms_thirdparty_gitstatus\r\n",
							"    ,t.lat as tms_thirdparty_lat\r\n",
							"    ,t.lng as tms_thirdparty_lng\r\n",
							"    ,t.note as tms_thirdparty_note\r\n",
							"    ,t.revenuecode as tms_thirdparty_revenuecode\r\n",
							"    ,t.country as tms_thirdparty_country\r\n",
							"    ,fd.id as tms_financedata_id\r\n",
							"\t,fd.bookingid as tms_financedata_bookingid\r\n",
							"\t,fd.insdate as tms_financedata_insdate\r\n",
							"\t,fd.peaksurchagrebuy as tms_financedata_peaksurchagrebuy\r\n",
							"\t,fd.peaksurchagresell as tms_financedata_peaksurchagresell\r\n",
							"\t,fd.manualentryroadhaulsell as tms_financedata_manualentryroadhaulsell\r\n",
							"\t,fd.manualentryahocsell as tms_financedata_manualentryahocsell\r\n",
							"\t,fd.systemfuellevy as tms_financedata_systemfuellevy\r\n",
							"\t,fd.systemratefuellevy as tms_financedata_systemratefuellevy\r\n",
							"\t,fd.systemratefuelexlevy as tms_financedata_systemratefuelexlevy\r\n",
							"\t,fd.systemratefuelinclevy as tms_financedata_systemratefuelinclevy\r\n",
							"\t,fd.systemsellrate as tms_financedata_systemsellrate\r\n",
							"\t,fd.totalsellrate as tms_financedata_totalsellrate\r\n",
							"\t,fd.moddate as tms_financedata_moddate\r\n",
							"\t,fd.totalbuyrate as tms_financedata_totalbuyrate\r\n",
							"\t,fd.rateprofileid as tms_financedata_rateprofileid\r\n",
							"  \r\n",
							"\r\n",
							"FROM bookingunionnonbooking x\r\n",
							"\r\n",
							"LEFT JOIN publiccustomer c on c.id = x.tms_booking_customerid\r\n",
							"LEFT JOIN publiccustomer c1 on c1.id = x.tms_booking_childcustomerid\r\n",
							"LEFT JOIN publicroute r on r.id = x.tms_booking_routeid\r\n",
							"LEFT JOIN publicroute r1 on r1.id = x.tms_booking_opsrouteid\r\n",
							"LEFT JOIN publicthirdparty t on t.id = x.tms_booking_thirdpartyid\r\n",
							"LEFT JOIN publicfinancedata fd on fd.bookingid = x.tms_booking_id\r\n",
							""
						],
						"outputs": [],
						"execution_count": 70
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstbooking = spark.sql(\"SELECT * FROM sstbooking\")"
						],
						"outputs": [],
						"execution_count": 72
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstbooking.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstbooking.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 73
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTCollect')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/ARCHIVE/01 SEMI STRUCTURED/03_LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7d3ee78a-79be-4705-b4a4-330a3fecd46f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dbocollect LMS Table\r\n",
							"# dbocollect = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocollect.parquet', format='parquet')\r\n",
							"# dbocollect.createOrReplaceTempView(\"dbocollect\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbocustomer LMS Table\r\n",
							"# dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"# dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbousers LMS Table\r\n",
							"# dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"# dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolocation LMS Table\r\n",
							"# dbolocation= spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"# dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_collectstatus LMS Table\r\n",
							"# dbodb_collectstatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_collectstatus.parquet', format='parquet')\r\n",
							"# dbodb_collectstatus.createOrReplaceTempView(\"dbodb_collectstatus\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdraftcollection ORV Table\r\n",
							"# publicdraftcollection = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdraftcollection.parquet', format='parquet')\r\n",
							"# publicdraftcollection.createOrReplaceTempView(\"publicdraftcollection\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdelivery ORV Table\r\n",
							"# publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"# publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicmall ORV Table\r\n",
							"# publicmall = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicmall.parquet', format='parquet')\r\n",
							"# publicmall.createOrReplaceTempView(\"publicmall\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publiccustomer ORV Table\r\n",
							"# publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiccustomer.parquet', format='parquet')\r\n",
							"# publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sstcollect = spark.sql(\"\"\"\r\n",
							"SELECT \r\n",
							"    c.id as lms_collect_id\r\n",
							"    ,c.date as lms_collect_date\r\n",
							"    ,c.cservice as lms_collect_cservice\r\n",
							"    ,c.billcust as lms_collect_billcust\r\n",
							"    ,c.pickupcustid as lms_collect_pickupcustid\r\n",
							"    ,c.delivercustid as lms_collect_delivercustid\r\n",
							"    ,c.locationid as lms_collect_locationid\r\n",
							"    ,c.noofparcels as lms_collect_noofparcels\r\n",
							"    ,c.weight as lms_collect_weight\r\n",
							"    ,c.timeready as lms_collect_timeready\r\n",
							"    ,c.vehiclecapacity as lms_collect_vehiclecapacity\r\n",
							"    ,c.collectrefno as lms_collect_collectrefno\r\n",
							"    ,c.timeclosed as lms_collect_timeclosed\r\n",
							"    ,c.securitycollect as lms_collect_securitycollect\r\n",
							"    ,c.confirmedby as lms_collect_confirmedby\r\n",
							"    ,c.courierid as lms_collect_courierid\r\n",
							"    ,c.confirmeddate as lms_collect_confirmeddate\r\n",
							"    ,c.transferreddate as lms_collect_transferreddate\r\n",
							"    ,c.senddate as lms_collect_senddate\r\n",
							"    ,c.orderid as lms_collect_orderid\r\n",
							"    ,c.orderdate as lms_collect_orderdate\r\n",
							"    ,c.userid as lms_collect_userid\r\n",
							"    ,c.reason as lms_collect_reason\r\n",
							"    ,c.cubes as lms_collect_cubes\r\n",
							"    ,c.custref as lms_collect_custref\r\n",
							"    ,c.custref3 as lms_collect_custref3\r\n",
							"    ,c.custaccid as lms_collect_custaccid\r\n",
							"    ,c.collectparentid as lms_collect_collectparentid\r\n",
							"    ,c.duedate as lms_collect_duedate\r\n",
							"    ,c.specdel as lms_collect_specdel\r\n",
							"    ,c.flunits as lms_collect_flunits\r\n",
							"    ,c.flkgs as lms_collect_flkgs\r\n",
							"    ,c.quote as lms_collect_quote\r\n",
							"    ,c.bill_vehicletype as lms_collect_bill_vehicletype\r\n",
							"    ,c.collectstatusid as lms_collect_collectstatusid\r\n",
							"    ,c.bill_collectstatusid as lms_collect_bill_collectstatusid\r\n",
							"    ,c.cancelreason as lms_collect_cancelreason\r\n",
							"    ,c.cancelcomments as lms_collect_cancelcomments\r\n",
							"    ,c.loadid as lms_collect_loadid\r\n",
							"    ,c.custref2 as lms_collect_custref2\r\n",
							"    ,c.created as lms_collect_created\r\n",
							"    ,c.oncollection as lms_collect_oncollection\r\n",
							"    ,c.collected as lms_collect_collected\r\n",
							"    ,c.complete as lms_collect_complete\r\n",
							"    ,c.cancelled as lms_collect_cancelled\r\n",
							"    ,c.failed as lms_collect_failed\r\n",
							"    ,c.ctype as lms_collect_ctype\r\n",
							"    ,c.quoteid as lms_collect_quoteid\r\n",
							"    ,c.lastupdate as lms_collect_lastupdate\r\n",
							"    ,c.notes as lms_collect_notes\r\n",
							"    ,c.docurl as lms_collect_docurl\r\n",
							"    ,c.docdate as lms_collect_docdate\r\n",
							"    ,c.orvstatus as lms_collect_orvstatus\r\n",
							"    ,c.orvcode as lms_collect_orvcode\r\n",
							"    ,c.oldloadid as lms_collect_oldloadid\r\n",
							"    ,bc.id as lms_bcustomer_id\r\n",
							"    ,bc.name as lms_bcustomer_name\r\n",
							"    ,pc.id as lms_pcustomer_id\r\n",
							"    ,pc.name as lms_pcustomer_name\r\n",
							"    ,dc.id as lms_dcustomer_id\r\n",
							"    ,dc.name as lms_dcustomer_name\r\n",
							"    ,u.id as lms_users_id\r\n",
							"    ,u.fullname as lms_users_fullname\r\n",
							"    ,l.id as lms_clocation_id\r\n",
							"    ,l.description as lms_clocation_description\r\n",
							"    ,cs.id as lms_collectstatus_id\r\n",
							"    ,cs.description as lms_collectstatus_description\r\n",
							"    ,dcl.id as orv_draftcollection_id\r\n",
							"    ,dcl.fromlocid as orv_draftcollection_fromlocid\r\n",
							"    ,dcl.loadid as orv_draftcollection_loadid\r\n",
							"    ,dcl.status as orv_draftcollection_status\r\n",
							"    ,to_timestamp(dcl.importedate) as orv_draftcollection_importedate\r\n",
							"    ,dcl.fromstr as orv_draftcollection_fromstr\r\n",
							"    ,dcl.did as orv_draftcollection_did\r\n",
							"    ,dcl.mergedlmsid as orv_draftcollection_mergedlmsid\r\n",
							"    ,to_timestamp(dcl.rejectdate) as orv_draftcollection_rejectdate\r\n",
							"    ,to_timestamp(dcl.confirmdate) as orv_draftcollection_confirmdate\r\n",
							"    ,dcl.customerref as orv_draftcollection_customerref\r\n",
							"    ,dcl.collectionwaybillid as orv_draftcollection_collectionwaybillid\r\n",
							"    ,to_timestamp(dcl.collectbydate) as orv_draftcollection_collectbydate\r\n",
							"    ,dcl.rejectreason as orv_draftcollection_rejectreason\r\n",
							"    ,dcl.cancelctr as orv_draftcollection_cancelctr\r\n",
							"    ,d.id as orv_delivery_id\r\n",
							"    ,d.did as orv_delivery_dispatchid\r\n",
							"    ,d.waybillid as orv_delivery_waybillid\r\n",
							"    ,d.address as orv_delivery_address\r\n",
							"    ,d.town as orv_delivery_town\r\n",
							"    ,d.province as orv_delivery_province\r\n",
							"    ,d.country as orv_delivery_country\r\n",
							"    ,d.lat as orv_delivery_lat\r\n",
							"    ,d.lng as orv_delivery_lng\r\n",
							"    ,d.placeid as orv_delivery_placeid\r\n",
							"    ,d.what3words as orv_delivery_what3words\r\n",
							"    ,d.zipcode as orv_delivery_zipcode\r\n",
							"    ,to_timestamp(d.eta) as orv_delivery_eta\r\n",
							"    ,to_timestamp(d.actualeta) as orv_delivery_actualeta\r\n",
							"    ,to_timestamp(d.deliverydate) as orv_delivery_deliverydate\r\n",
							"    ,to_timestamp(d.deliverby) as orv_delivery_deliverby\r\n",
							"    ,d.deliveryorder as orv_delivery_deliveryorder\r\n",
							"    ,to_timestamp(d.tsgeofenceenter) as orv_delivery_tsgeofenceenter\r\n",
							"    ,to_timestamp(d.tsscanningstart) as orv_delivery_tsscanningstart\r\n",
							"    ,to_timestamp(d.tsscanningstop) as orv_delivery_tsscanningstop\r\n",
							"    ,to_timestamp(d.tspodsignature) as orv_delivery_tspodsignature\r\n",
							"    ,d.aid as orv_delivery_aid\r\n",
							"    ,d.numprcls as orv_delivery_numprcls\r\n",
							"    ,d.geocodingstatus as orv_delivery_geocodingstatus\r\n",
							"    ,to_timestamp(d.skipdate) as orv_delivery_skipdate\r\n",
							"    ,d.skipreason as orv_delivery_skipreason\r\n",
							"    ,d.status as orv_delivery_status\r\n",
							"    ,d.partialmatch as orv_delivery_partialmatch\r\n",
							"    ,d.approximated as orv_delivery_approximated\r\n",
							"    ,d.lmsorder as orv_delivery_lmsorder\r\n",
							"    ,d.optimizedorder as orv_delivery_optimizedorder\r\n",
							"    ,d.seal as orv_delivery_seal\r\n",
							"    ,d.customerinvoice as orv_delivery_customerinvoice\r\n",
							"    ,d.customerdn as orv_delivery_customerdn\r\n",
							"    ,d.grv as orv_delivery_grv\r\n",
							"    ,d.chepslip as orv_delivery_chepslip\r\n",
							"    ,d.cleandelivery as orv_delivery_cleandelivery\r\n",
							"    ,d.trackingcode as orv_delivery_trackingcode\r\n",
							"    ,d.mode as orv_delivery_mode\r\n",
							"    ,d.customorder as orv_delivery_customorder\r\n",
							"    ,d.verified as orv_delivery_verified\r\n",
							"    ,d.altered as orv_delivery_altered\r\n",
							"    ,d.orderid as orv_delivery_orderid\r\n",
							"    ,d.mergeid as orv_delivery_mergeid\r\n",
							"    ,d.orderref as orv_delivery_orderref\r\n",
							"    ,d.drivernote as orv_delivery_drivernote\r\n",
							"    ,d.guid as orv_delivery_guid\r\n",
							"    ,d.timedefinite as orv_delivery_timedefinite\r\n",
							"    ,d.orvcode as orv_delivery_orvcode\r\n",
							"    ,d.vaid as orv_delivery_vaid\r\n",
							"    ,to_timestamp(d.delegatedate) as orv_delivery_delegatedate\r\n",
							"    ,d.delegatemode as orv_delivery_delegatemode\r\n",
							"    ,d.debriefmode as orv_delivery_debriefmode\r\n",
							"    ,d.debriefed as orv_delivery_debriefed\r\n",
							"    ,to_timestamp(d.insdate) as orv_delivery_insdate\r\n",
							"    ,d.reviseddebrief as orv_delivery_reviseddebrief\r\n",
							"    ,d.lmsdebriefed as orv_delivery_lmsdebriefed\r\n",
							"    ,to_timestamp(d.uncanceldate) as orv_delivery_uncanceldate\r\n",
							"    ,to_timestamp(d.podlaterdate) as orv_delivery_podlaterdate\r\n",
							"    ,to_timestamp(d.podmanualdate) as orv_delivery_podmanualdate\r\n",
							"    ,d.manualdebriefreason as orv_delivery_manualdebriefreason\r\n",
							"    ,d.submanualdebriefreason as orv_delivery_submanualdebriefreason\r\n",
							"    ,d.outofgeofencereason as orv_delivery_outofgeofencereason\r\n",
							"    ,to_timestamp(d.tsentergeofenceapp) as orv_delivery_tsentergeofenceapp\r\n",
							"    ,to_timestamp(d.tsexitgeofenceapp) as orv_delivery_tsexitgeofenceapp\r\n",
							"    ,d.comebacklater as orv_delivery_comebacklater\r\n",
							"    ,d.uncancelusername as orv_delivery_uncancelusername\r\n",
							"    ,d.cref as orv_delivery_cref\r\n",
							"    ,d.division as orv_delivery_division\r\n",
							"    ,d.descriptionofgoods as orv_delivery_descriptionofgoods\r\n",
							"    ,d.skiplng as orv_delivery_skiplng\r\n",
							"    ,d.skiplat as orv_delivery_skiplat\r\n",
							"    ,d.courierid as orv_delivery_courierid\r\n",
							"    ,d.posreason as orv_delivery_posreason\r\n",
							"    ,to_timestamp(d.moddate) as orv_delivery_moddate\r\n",
							"    ,d.mallid as orv_delivery_mallid\r\n",
							"    ,d.mallgid as orv_delivery_mallgid\r\n",
							"    ,d.lmsidskipreason as orv_delivery_lmsidskipreason\r\n",
							"    ,d.deleteforimport as orv_delivery_deleteforimport\r\n",
							"    ,d.podoutofgeofence as orv_delivery_podoutofgeofence\r\n",
							"    ,d.originalcustomerid as orv_delivery_originalcustomerid\r\n",
							"    ,oc.id as orv_originalcustomer_id\r\n",
							"    ,oc.name as orv_originalcustomer_name\r\n",
							"    ,m.id as orv_mall_id\r\n",
							"    ,m.mallname as orv_mall_mallname\r\n",
							"    ,m.branchname as orv_mall_branchname\r\n",
							"    ,m.gpretailer as orv_mall_gpretailer\r\n",
							"    ,m.highvoldelivery as orv_mall_highvoldelivery\r\n",
							"    ,m.stripmall as orv_mall_stripmall\r\n",
							"    ,m.standalonestore as orv_mall_standalonestore\r\n",
							"    ,m.streetsidestore as orv_mall_streetsidestore\r\n",
							"    ,m.dedicatedrouted as orv_mall_dedicatedrouted\r\n",
							"    ,to_timestamp(m.insdate) as orv_mall_insdate\r\n",
							"    ,m.address as orv_mall_address\r\n",
							"    ,m.deleted as orv_mall_deleted\r\n",
							"    ,m.lat as orv_mall_lat\r\n",
							"    ,m.lng as orv_mall_lng\r\n",
							"\r\n",
							"\r\n",
							"FROM dbocollect c\r\n",
							"\r\n",
							"LEFT JOIN dbocustomer bc on bc.id = c.billcust\r\n",
							"LEFT JOIN dbocustomer pc on pc.id = c.pickupcustid\r\n",
							"LEFT JOIN dbocustomer dc on dc.id = c.delivercustid\r\n",
							"LEFT JOIN dbousers u on u.id = c.userid\r\n",
							"LEFT JOIN dbolocation l on l.id = c.locationid\r\n",
							"LEFT JOIN dbodb_collectstatus cs on cs.id = c.collectstatusid\r\n",
							"LEFT JOIN publicdraftcollection dcl on dcl.collectionwaybillid = c.id\r\n",
							"LEFT JOIN publicdelivery d on d.waybillid = c.id and d.mode = 'collect'\r\n",
							"LEFT JOIN publiccustomer oc on oc.id = d.originalcustomerid\r\n",
							"LEFT JOIN publicmall m on m.id = d.mallid\r\n",
							"\r\n",
							"\"\"\")\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstcollect.createOrReplaceTempView(\"sstcollect\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstcollect.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstcollect.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 11
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTConsignment')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/ARCHIVE/01 SEMI STRUCTURED/03_LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "09c03baa-9180-4d08-a87c-5cc3ccc77bc1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the sstconsignmentunion LMS Table\r\n",
							"# sstconsignmentunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"# sstconsignmentunion.createOrReplaceTempView(\"sstconsignmentunion\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstparcelbyconsignment LMS Table\r\n",
							"# sstparcelbyconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyconsignment.parquet', format='parquet')\r\n",
							"# sstparcelbyconsignment.createOrReplaceTempView(\"sstparcelbyconsignment\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_consignmentr LMS Table\r\n",
							"# dbobill_consignmentr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_consignmentr.parquet', format='parquet')\r\n",
							"# dbobill_consignmentr.createOrReplaceTempView(\"dbobill_consignmentr\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbousers LMS Table\r\n",
							"# dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"# dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbocustomer LMS Table\r\n",
							"# dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"# dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_delivertype LMS Table\r\n",
							"# dbobill_delivertype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_delivertype.parquet', format='parquet')\r\n",
							"# dbobill_delivertype.createOrReplaceTempView(\"dbobill_delivertype\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_zone LMS Table\r\n",
							"# dbobill_zone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zone.parquet', format='parquet')\r\n",
							"# dbobill_zone.createOrReplaceTempView(\"dbobill_zone\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_servicetype LMS Table\r\n",
							"# dbobill_servicetype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_servicetype.parquet', format='parquet')\r\n",
							"# dbobill_servicetype.createOrReplaceTempView(\"dbobill_servicetype\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_zoneroute LMS Table\r\n",
							"# dbobill_zoneroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zoneroute.parquet', format='parquet')\r\n",
							"# dbobill_zoneroute.createOrReplaceTempView(\"dbobill_zoneroute\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_billtypesr LMS Table\r\n",
							"# dbobill_billtypesr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_billtypesr.parquet', format='parquet')\r\n",
							"# dbobill_billtypesr.createOrReplaceTempView(\"dbobill_billtypesr\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_routerate LMS Table\r\n",
							"# dbobill_routerate = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_routerate.parquet', format='parquet')\r\n",
							"# dbobill_routerate.createOrReplaceTempView(\"dbobill_routerate\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobroutemaster LMS Table\r\n",
							"# dbobroutemaster = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobroutemaster.parquet', format='parquet')\r\n",
							"# dbobroutemaster.createOrReplaceTempView(\"dbobroutemaster\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstconsignment \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"\r\n",
							"    c.id as lms_consignment_id\r\n",
							"    ,c.cref as lms_consignment_cref\r\n",
							"    ,c.cdate as lms_consignment_cdate\r\n",
							"    ,c.userid as lms_consignment_userid\r\n",
							"    ,c.appointment as lms_consignment_appointment\r\n",
							"    ,c.deliverby as lms_consignment_deliverby\r\n",
							"    ,c.dconfirmed as lms_consignment_dconfirmed\r\n",
							"    ,c.dcomment as lms_consignment_dcomment\r\n",
							"    ,c.drefno as lms_consignment_drefno\r\n",
							"    ,c.loadid as lms_consignment_loadid\r\n",
							"    ,c.delivercustid as lms_consignment_delivercustid\r\n",
							"    ,c.mrpcflag as lms_consignment_mrpcflag\r\n",
							"    ,c.mrpflag as lms_consignment_mrpflag\r\n",
							"    ,c.billcust as lms_consignment_billcust\r\n",
							"    ,c.cserviceid as lms_consignment_cserviceid\r\n",
							"    ,c.lastupdate as lms_consignment_lastupdate\r\n",
							"    ,c.billflag as lms_consignment_billflag\r\n",
							"    ,c.missingflag as lms_consignment_missingflag\r\n",
							"    ,c.routerateid as lms_consignment_routerateid\r\n",
							"    ,c.delivertypeid as lms_consignment_delivertypeid\r\n",
							"    ,c.billtypeid as lms_consignment_billtypeid\r\n",
							"    ,c.totothersurcharges as lms_consignment_totothersurcharges\r\n",
							"    ,c.lhaddrate as lms_consignment_lhaddrate\r\n",
							"    ,c.lhcharge as lms_consignment_lhcharge\r\n",
							"    ,c.sapbillperiodid as lms_consignment_sapbillperiodid\r\n",
							"    ,c.lhrouterateid as lms_consignment_lhrouterateid\r\n",
							"    ,pbc.lms_parcelbyconsignment_consignid as lms_parcelbyconsignment_consignid\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrweight as lms_parcelbyconsignment_aggrweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrchargeweight as lms_parcelbyconsignment_aggrchargeweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrvolweight as lms_parcelbyconsignment_aggrvolweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrvolumiserweight as lms_parcelbyconsignment_aggrvolumiserweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrmaxweight as lms_parcelbyconsignment_aggrmaxweight\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrnoparcels as lms_parcelbyconsignment_aggrnoparcels\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrweight as lms_parcelbyconsignment_aggrweightexclspecdel\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrchargeweight as lms_parcelbyconsignment_aggrchargeweightexclspecdel\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrvolweight as lms_parcelbyconsignment_aggrvolweightexclspecdel\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrvolumiserweight as lms_parcelbyconsignment_aggrvolumiserweightexclspecdel\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrmaxweight as lms_parcelbyconsignment_aggrmaxweightexclspecdel\r\n",
							"    ,pbc.lms_parcelbyconsignment_aggrnoparcels as lms_parcelbyconsignment_aggrnoparcelsexclspecdel\r\n",
							"    -- ,bcr.id as lms_bill_consignmentr_id\r\n",
							"    -- ,bcr.consignid as lms_bill_consignmentr_consignid\r\n",
							"    -- ,bcr.updatedate as lms_bill_consignmentr_updatedate\r\n",
							"    -- ,bcr.pickuprouteid as lms_bill_consignmentr_pickuprouteid\r\n",
							"    -- ,bcr.deliverrouteid as lms_bill_consignmentr_deliverrouteid\r\n",
							"    -- ,bcr.chargeweight as lms_bill_consignmentr_chargeweight\r\n",
							"    -- ,bcr.noofparcels as lms_bill_consignmentr_noofparcels\r\n",
							"    -- ,bcr.tripdistance as lms_bill_consignmentr_tripdistance\r\n",
							"    -- ,bcr.consignmentvalue as lms_bill_consignmentr_consignmentvalue\r\n",
							"    -- ,bcr.billcust as lms_bill_consignmentr_billcust\r\n",
							"    -- ,bcr.redflag as lms_bill_consignmentr_redflag\r\n",
							"    -- ,bcr.updind as lms_bill_consignmentr_updind\r\n",
							"    -- ,bcr.servicetypeid as lms_bill_consignmentr_servicetypeid\r\n",
							"    -- ,bcr.routemissingind as lms_bill_consignmentr_routemissingind\r\n",
							"    -- ,bcr.chargescalcind as lms_bill_consignmentr_chargescalcind\r\n",
							"    -- ,bcr.cdate1 as lms_bill_consignmentr_cdate1\r\n",
							"    -- ,bcr.invalidpcode as lms_bill_consignmentr_invalidpcode\r\n",
							"    -- ,bcr.programno as lms_bill_consignmentr_programno\r\n",
							"    -- ,bcr.totrate as lms_bill_consignmentr_totrate\r\n",
							"    -- ,bcr.routecharge as lms_bill_consignmentr_routecharge\r\n",
							"    -- ,bcr.minweight as lms_bill_consignmentr_minweight\r\n",
							"    -- ,bcr.minrate as lms_bill_consignmentr_minrate\r\n",
							"    -- ,bcr.corderno as lms_bill_consignmentr_corderno\r\n",
							"    -- ,bcr.custref as lms_bill_consignmentr_custref\r\n",
							"    -- ,bcr.manualupdateflag as lms_bill_consignmentr_manualupdateflag\r\n",
							"    -- ,bcr.prevbillcustid as lms_bill_consignmentr_prevbillcustid\r\n",
							"    -- ,bcr.specdelvehicleid as lms_bill_consignmentr_specdelvehicleid\r\n",
							"    -- ,bcr.specdelmissingrouteflag as lms_bill_consignmentr_specdelmissingrouteflag\r\n",
							"    -- ,bcr.overborderflag as lms_bill_consignmentr_overborderflag\r\n",
							"    -- ,bcr.samedeliverid as lms_bill_consignmentr_samedeliverid\r\n",
							"    -- ,bcr.combineroutecharge as lms_bill_consignmentr_combineroutecharge\r\n",
							"    -- ,bcr.waybillid as lms_bill_consignmentr_waybillid\r\n",
							"    -- ,bcr.routelinecount as lms_bill_consignmentr_routelinecount\r\n",
							"    -- ,bcr.samedelcount as lms_bill_consignmentr_samedelcount\r\n",
							"    -- ,bcr.aweight as lms_bill_consignmentr_aweight\r\n",
							"    -- ,bcr.vweight as lms_bill_consignmentr_vweight\r\n",
							"    -- ,bcr.custref3 as lms_bill_consignmentr_custref3\r\n",
							"    -- ,bcr.units as lms_bill_consignmentr_units\r\n",
							"    -- ,bcr.totsurcharges as lms_bill_consignmentr_totsurcharges\r\n",
							"    -- ,bcr.noofpallets as lms_bill_consignmentr_noofpallets\r\n",
							"    -- ,bcr.invalidpudel as lms_bill_consignmentr_invalidpudel\r\n",
							"    -- ,bcr.sharikaflag as lms_bill_consignmentr_sharikaflag\r\n",
							"    -- ,bcr.sapid as lms_bill_consignmentr_sapid\r\n",
							"    -- ,bcr.totfuelsurcharge as lms_bill_consignmentr_totfuelsurcharge\r\n",
							"    -- ,bcr.totdocsurcharge as lms_bill_consignmentr_totdocsurcharge\r\n",
							"    -- ,bcr.totothersurcharge as lms_bill_consignmentr_totothersurcharge\r\n",
							"    -- ,bcr.specdel as lms_bill_consignmentr_specdel\r\n",
							"    -- ,bcr.quoteflag as lms_bill_consignmentr_quoteflag\r\n",
							"    -- ,bcr.billperiod as lms_bill_consignmentr_billperiod\r\n",
							"    -- ,bcr.billweekr as lms_bill_consignmentr_billweekr\r\n",
							"    -- ,bcr.billperiodflag as lms_bill_consignmentr_billperiodflag\r\n",
							"    -- ,bcr.surhargeflag as lms_bill_consignmentr_surhargeflag\r\n",
							"    -- ,bcr.recalcflag as lms_bill_consignmentr_recalcflag\r\n",
							"    -- ,bcr.quotemissingflag as lms_bill_consignmentr_quotemissingflag\r\n",
							"    -- ,bcr.delivertypeid as lms_bill_consignmentr_delivertypeid\r\n",
							"    -- ,bcr.totcovidsurcharge as lms_bill_consignmentr_totcovidsurcharge\r\n",
							"    -- ,u.id as lms_users_id\r\n",
							"    -- ,u.fullname as lms_users_fullname\r\n",
							"    -- ,u.site as lms_users_site\r\n",
							"    -- ,bc.id as lms_bcustomer_id\r\n",
							"    -- ,bc.name as lms_bcustomer_name\r\n",
							"    -- ,dc.id as lms_dcustomer_id\r\n",
							"    -- ,dc.name as lms_dcustomer_name\r\n",
							"    -- ,brr.id as lms_bill_routerate_id\r\n",
							"    -- ,brr.billcustid as lms_bill_routerate_billcustid\r\n",
							"    -- ,brr.effectivedate as lms_bill_routerate_effectivedate\r\n",
							"    -- ,brr.uomid as lms_bill_routerate_uomid\r\n",
							"    -- ,brr.routetypeid as lms_bill_routerate_routetypeid\r\n",
							"    -- ,brr.servicetypeid as lms_bill_routerate_servicetypeid\r\n",
							"    -- ,brr.minkg as lms_bill_routerate_minkg\r\n",
							"    -- ,brr.minrate as lms_bill_routerate_minrate\r\n",
							"    -- ,brr.addrate as lms_bill_routerate_addrate\r\n",
							"    -- ,brr.servicedays as lms_bill_routerate_servicedays\r\n",
							"    -- ,brr.servicehours as lms_bill_routerate_servicehours\r\n",
							"    -- ,brr.ratecardind as lms_bill_routerate_ratecardind\r\n",
							"    -- ,brr.pickupid as lms_bill_routerate_pickupid\r\n",
							"    -- ,brr.deliverid as lms_bill_routerate_deliverid\r\n",
							"    -- ,brr.description as lms_bill_routerate_description\r\n",
							"    -- ,brr.activeflag as lms_bill_routerate_activeflag\r\n",
							"    -- ,brr.billroutetypeflag as lms_bill_routerate_billroutetypeflag\r\n",
							"    -- ,brr.samedayflag as lms_bill_routerate_samedayflag\r\n",
							"    -- ,brr.specialrateflag as lms_bill_routerate_specialrateflag\r\n",
							"    -- ,brr.tocustid as lms_bill_routerate_tocustid\r\n",
							"    -- ,brr.maxparcel as lms_bill_routerate_maxparcel\r\n",
							"    -- ,brr.returnflag as lms_bill_routerate_returnflag\r\n",
							"    -- ,brr.cutoff as lms_bill_routerate_cutoff\r\n",
							"    -- ,brr.rateperkg as lms_bill_routerate_rateperkg\r\n",
							"    -- ,brr.userid as lms_bill_routerate_userid\r\n",
							"    -- ,brr.authorizeperson as lms_bill_routerate_authorizeperson\r\n",
							"    -- ,brr.updatedate as lms_bill_routerate_updatedate\r\n",
							"    -- ,brr.delivertypeid as lms_bill_routerate_delivertypeid\r\n",
							"    -- ,brr.billyear as lms_bill_routerate_billyear\r\n",
							"    -- ,brr.ecommzoneid as lms_bill_routerate_ecommzoneid\r\n",
							"    -- ,brr.billareaid as lms_bill_routerate_billareaid\r\n",
							"    -- ,brr.routerateoverideflag as lms_bill_routerate_routerateoverideflag\r\n",
							"    -- ,bbt.id as lms_bill_billtypesr_id\r\n",
							"    -- ,bbt.description as lms_bill_billtypesr_description\r\n",
							"    -- ,bbt.surchargeflag as lms_bill_billtypesr_surchargeflag\r\n",
							"    -- ,bzrp.id as lms_bill_zoneroute_pickupid\r\n",
							"    -- ,bzrp.description as lms_bill_zoneroute_pickupdescription\r\n",
							"    -- ,bzrp.zoneid as lms_bill_zoneroute_pickupzoneid\r\n",
							"    -- ,bzrp.zrscode as lms_bill_zoneroute_pickupzrscode\r\n",
							"    -- ,bzrp.zonerouteorder as lms_bill_zoneroute_pickupzonerouteorder\r\n",
							"    -- ,bzrp.zonetype as lms_bill_zoneroute_pickupzonetype\r\n",
							"    -- ,bzrp.broutemasterid as lms_bill_zoneroute_pickupbroutemasterid\r\n",
							"    -- ,bzrp.broutecode as lms_bill_zoneroute_pickupbroutecode\r\n",
							"    -- ,bzrd.id as lms_bill_zoneroute_deliverid\r\n",
							"    -- ,bzrd.description as lms_bill_zoneroute_deliverdescription\r\n",
							"    -- ,bzrd.zoneid as lms_bill_zoneroute_deliverzoneid\r\n",
							"    -- ,bzrd.zrscode as lms_bill_zoneroute_deliverzrscode\r\n",
							"    -- ,bzrd.zonerouteorder as lms_bill_zoneroute_deliverzonerouteorder\r\n",
							"    -- ,bzrd.zonetype as lms_bill_zoneroute_deliverzonetype\r\n",
							"    -- ,bzrd.broutemasterid as lms_bill_zoneroute_deliverbroutemasterid\r\n",
							"    -- ,bzrd.broutecode as lms_bill_zoneroute_deliverbroutecode\r\n",
							"    -- ,bst.id as lms_bill_servicetype_id\r\n",
							"    -- ,bst.description as lms_bill_servicetype_description\r\n",
							"    -- ,bst.code as lms_bill_servicetype_code\r\n",
							"    -- ,bst.ccode as lms_bill_servicetype_ccode\r\n",
							"    -- ,bzp.id as lms_bill_zone_pickupid\r\n",
							"    -- ,bzp.description as lms_bill_zone_pickupdescription\r\n",
							"    -- ,bzp.zonemasterid as lms_bill_zone_pickupzonemasterid\r\n",
							"    -- ,bzp.countryid as lms_bill_zone_pickupcountryid\r\n",
							"    -- ,bzd.id as lms_bill_zone_deliverid\r\n",
							"    -- ,bzd.description as lms_bill_zone_deliverdescription\r\n",
							"    -- ,bzd.zonemasterid as lms_bill_zone_deliverzonemasterid\r\n",
							"    -- ,bzd.countryid as lms_bill_zone_delivercountryid\r\n",
							"    -- ,bdt.id as lms_bill_delivertype_id\r\n",
							"    -- ,bdt.description as lms_bill_delivertype_description\r\n",
							"    -- ,brmp.id as lms_broutemaster_pickupid\r\n",
							"    -- ,brmp.description as lms_broutemaster_pickupdescription\r\n",
							"    -- ,brmp.code as lms_broutemaster_pickupcode\r\n",
							"    -- ,brmp.brouteparentid as lms_broutemaster_pickupbrouteparentid\r\n",
							"    -- ,brmd.id as lms_broutemaster_deliverid\r\n",
							"    -- ,brmd.description as lms_broutemaster_deliverdescription\r\n",
							"    -- ,brmd.code as lms_broutemaster_delivercode\r\n",
							"    -- ,brmd.brouteparentid as lms_broutemaster_deliverbrouteparentid\r\n",
							"\r\n",
							"FROM sstconsignmentunion c\r\n",
							"\r\n",
							"LEFT JOIN sstparcelbyconsignment pbc on pbc.lms_parcelbyconsignment_consignid = c.id\r\n",
							"-- LEFT JOIN dbobill_consignmentr bcr on bcr.consignid = c.id\r\n",
							"LEFT JOIN dbousers u on u.id = c.userid\r\n",
							"-- LEFT JOIN dbocustomer bc on bc.id = bcr.billcust\r\n",
							"LEFT JOIN dbocustomer dc on dc.id = c.delivercustid\r\n",
							"-- LEFT JOIN dbobill_routerate brr on brr.id = c.routerateid\r\n",
							"-- LEFT JOIN dbobill_billtypesr bbt on bbt.id = c.billtypeid \r\n",
							"-- LEFT JOIN dbobill_delivertype bdt on bdt.id = c.delivertypeid\r\n",
							"-- LEFT JOIN dbobill_servicetype bst on bst.id = bcr.servicetypeid\r\n",
							"-- LEFT JOIN dbobill_zoneroute bzrp on bzrp.id = bcr.pickuprouteid\r\n",
							"-- LEFT JOIN dbobill_zoneroute bzrd on bzrd.id = bcr.deliverrouteid\r\n",
							"-- LEFT JOIN dbobill_zone bzp on bzp.id = bzrp.zoneid\r\n",
							"-- LEFT JOIN dbobill_zone bzd on bzd.id = bzrd.zoneid\r\n",
							"-- LEFT JOIN dboBroutemaster brmp on brmp.id = bzrp.broutemasterid\r\n",
							"-- LEFT JOIN dboBroutemaster brmd on brmd.id = bzrd.broutemasterid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstconsignment = spark.sql(\"SELECT * FROM sstconsignment\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignment.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 16
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTConsignmentUnion')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/01_LMS Union"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "bd5ee716-1189-4f6c-ba5a-6fd91b1228ab"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dboconsignment_archive LMS Table\r\n",
							"# dboconsignment_archive = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboconsignment_archive.parquet', format='parquet')\r\n",
							"# dboconsignment_archive.createOrReplaceTempView(\"dboconsignment_archive\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboconsignment LMS Table\r\n",
							"# dboconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboconsignment.parquet', format='parquet')\r\n",
							"# dboconsignment.createOrReplaceTempView(\"dboconsignment\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dboconsignmentunion = dboconsignment_archive.unionByName(dboconsignment, allowMissingColumns = True)\r\n",
							"dboconsignmentunion.createOrReplaceTempView(\"dboconsignmentunion\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstconsignmentunion\r\n",
							"AS\r\n",
							"SELECT * \r\n",
							"FROM dboconsignmentunion"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstconsignmentunion = spark.sql(\"SELECT * FROM sstconsignmentunion\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstconsignmentunion.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTInstruction')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/ARCHIVE/01 SEMI STRUCTURED/04_TMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "75ca2bce-c493-4723-a3e9-ba21deac722b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the publicinstruction TMS Table\r\n",
							"# publicinstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinstruction.parquet', format='parquet')\r\n",
							"# publicinstruction.createOrReplaceTempView(\"publicinstruction\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicaddress TMS Table\r\n",
							"# publicaddress = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicaddress.parquet', format='parquet')\r\n",
							"# publicaddress.createOrReplaceTempView(\"publicaddress\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publiccustomer TMS Table\r\n",
							"# publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiccustomer.parquet', format='parquet')\r\n",
							"# publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publiclhdelivery ORV Table\r\n",
							"# publiclhdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiclhdelivery.parquet', format='parquet')\r\n",
							"# publiclhdelivery.createOrReplaceTempView(\"publiclhdelivery\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sstinstruction = spark.sql(\"\"\"\r\n",
							"SELECT \r\n",
							"    i.id as tms_instruction_id\r\n",
							"    ,i.bookingid as tms_instruction_bookingid\r\n",
							"    ,i.addressid as tms_instruction_addressid\r\n",
							"    ,to_timestamp(i.insdate) as tms_instruction_insdate\r\n",
							"    ,to_timestamp(i.moddate) as tms_instruction_moddate\r\n",
							"    ,i.insby as tms_instruction_insby\r\n",
							"    ,i.onroute as tms_instruction_onroute\r\n",
							"    ,i.instrtype as tms_instruction_instrtype\r\n",
							"    ,i.onrouteid as tms_instruction_onrouteid\r\n",
							"    ,i.sort as tms_instruction_sort\r\n",
							"    ,i.note as tms_instruction_note\r\n",
							"    ,i.onroutestatus as tms_instruction_onroutestatus\r\n",
							"    ,i.legacyid as tms_instruction_legacyid\r\n",
							"    ,i.legacyaddress as tms_instruction_legacyaddress\r\n",
							"    ,i.citybranchid as tms_instruction_citybranchid\r\n",
							"    ,i.citybranchname as tms_instruction_citybranchname\r\n",
							"    ,a.id as tms_address_id\r\n",
							"    ,a.customerid as tms_address_customerid\r\n",
							"    ,a.address as tms_address_address\r\n",
							"    ,a.streetno as tms_address_streetno\r\n",
							"    ,a.city as tms_address_city\r\n",
							"    ,a.province as tms_address_province\r\n",
							"    ,a.country as tms_address_country\r\n",
							"    ,a.addresstype as tms_address_addresstype\r\n",
							"    ,a.lat as tms_address_lat\r\n",
							"    ,a.lng as tms_address_lng\r\n",
							"    ,to_timestamp(a.insdate) as tms_address_insdate\r\n",
							"    ,to_timestamp(a.moddate) as tms_address_moddate\r\n",
							"    ,to_timestamp(a.lastuseddate) as tms_address_lastuseddate\r\n",
							"    ,a.searchfield as tms_address_searchfield\r\n",
							"    ,a.zipcode as tms_address_zipcode\r\n",
							"    ,a.slug as tms_address_slug\r\n",
							"    ,c.status as tms_customer_status\r\n",
							"    ,c.name as tms_customer_name\r\n",
							"    ,c.parentid as tms_customer_parentid\r\n",
							"    ,c.accountnumber as tms_customer_accountnumber\r\n",
							"    ,c.revenuecode as tms_customer_revenuecode\r\n",
							"    ,to_timestamp(c.insdate) as tms_customer_insdate\r\n",
							"    ,to_timestamp(c.moddate) as tms_customer_moddate\r\n",
							"    ,c.insby as tms_customer_insby\r\n",
							"    ,c.opaqueid as tms_customer_opaqueid\r\n",
							"    ,c.email as tms_customer_email\r\n",
							"    ,c.areacode as tms_customer_areacode\r\n",
							"    ,c.mobilenum as tms_customer_mobilenum\r\n",
							"    ,c.legacyid as tms_customer_legacyid\r\n",
							"    ,c.billingmethod as tms_customer_billingmethod\r\n",
							"    ,c.adjustmetric as tms_customer_adjustmetric\r\n",
							"    ,c.adjustvalue as tms_customer_adjustvalue\r\n",
							"    ,c.adjustnegativeallowed as tms_customer_adjustnegativeallowed\r\n",
							"    ,c.adjustvalueusingprevmonth as tms_customer_adjustvalueusingprevmonth\r\n",
							"    ,c.excludefromnotinvoicedreport as tms_customer_excludefromnotinvoicedreport\r\n",
							"    ,c.logictype as tms_customer_logictype\r\n",
							"    ,c.minliability as tms_customer_minliability\r\n",
							"    ,lhd.id as orv_lhdelivery_id\r\n",
							"    ,lhd.did as orv_lhdelivery_did\r\n",
							"    ,lhd.address as orv_lhdelivery_address\r\n",
							"    ,lhd.lat as orv_lhdelivery_lat\r\n",
							"    ,lhd.lng as orv_lhdelivery_lng\r\n",
							"    ,to_timestamp(lhd.actualeta) as orv_lhdelivery_actualeta\r\n",
							"    ,to_timestamp(lhd.eta) as orv_lhdelivery_eta\r\n",
							"    ,to_timestamp(lhd.tsgeofenceenter) as orv_lhdelivery_tsgeofenceenter\r\n",
							"    ,to_timestamp(lhd.tsdocuments) as orv_lhdelivery_tsdocuments\r\n",
							"    ,lhd.customerref1 as orv_lhdelivery_customerref1\r\n",
							"    ,lhd.customerref2 as orv_lhdelivery_customerref2\r\n",
							"    ,lhd.trailersize as orv_lhdelivery_trailersize\r\n",
							"    ,lhd.cargoweight as orv_lhdelivery_cargoweight\r\n",
							"    ,lhd.cubicvolume as orv_lhdelivery_cubicvolume\r\n",
							"    ,lhd.geocodingstatus as orv_lhdelivery_geocodingstatus\r\n",
							"    ,lhd.status as orv_lhdelivery_status\r\n",
							"    ,lhd.optimizedorder as orv_lhdelivery_optimizedorder\r\n",
							"    ,lhd.triporder as orv_lhdelivery_triporder\r\n",
							"    ,lhd.sequence as orv_lhdelivery_sequence\r\n",
							"    ,lhd.bookingid as orv_lhdelivery_bookingid\r\n",
							"    ,lhd.grv as orv_lhdelivery_grv\r\n",
							"    ,lhd.chepslip as orv_lhdelivery_chepslip\r\n",
							"    ,lhd.type as orv_lhdelivery_type\r\n",
							"    ,to_timestamp(lhd.insdate) as orv_lhdelivery_insdate\r\n",
							"    ,lhd.isdirect as orv_lhdelivery_isdirect\r\n",
							"    ,lhd.notes as orv_lhdelivery_notes\r\n",
							"    ,lhd.contactperson as orv_lhdelivery_contactperson\r\n",
							"    ,lhd.contactnumber as orv_lhdelivery_contactnumber\r\n",
							"    ,lhd.trailerfleetcode as orv_lhdelivery_trailerfleetcode\r\n",
							"    ,lhd.primarycustomerid as orv_lhdelivery_primarycustomerid\r\n",
							"    ,lhd.pcustomername as orv_lhdelivery_pcustomername\r\n",
							"    ,lhd.pcustomeraccountnumber as orv_lhdelivery_pcustomeraccountnumber\r\n",
							"    ,lhd.pcustomerrevenuecode as orv_lhdelivery_pcustomerrevenuecode\r\n",
							"    ,lhd.secondarycustomerid as orv_lhdelivery_secondarycustomerid\r\n",
							"    ,lhd.scustomername as orv_lhdelivery_scustomername\r\n",
							"    ,lhd.scustomeraccountnumber as orv_lhdelivery_scustomeraccountnumber\r\n",
							"    ,lhd.scustomerrevenuecode as orv_lhdelivery_scustomerrevenuecode\r\n",
							"    ,to_timestamp(lhd.actiondate) as orv_lhdelivery_actiondate\r\n",
							"    ,to_timestamp(lhd.tsgeofenceexit) as orv_lhdelivery_tsgeofenceexit\r\n",
							"    ,lhd.pctmsid as orv_lhdelivery_pctmsid\r\n",
							"    ,lhd.sctmsid as orv_lhdelivery_sctmsid\r\n",
							"    ,lhd.customorder as orv_lhdelivery_customorder\r\n",
							"    ,to_timestamp(lhd.skipdate) as orv_lhdelivery_skipdate\r\n",
							"    ,lhd.skipreason as orv_lhdelivery_skipreason\r\n",
							"    ,lhd.outofgeofencereason as orv_lhdelivery_outofgeofencereason\r\n",
							"    ,to_timestamp(lhd.tsarrivedcustomer) as orv_lhdelivery_tsarrivedcustomer\r\n",
							"    ,to_timestamp(lhd.tsdroppedoff) as orv_lhdelivery_tsdroppedoff\r\n",
							"    ,to_timestamp(lhd.tsstartoffloading) as orv_lhdelivery_tsstartoffloading\r\n",
							"    ,to_timestamp(lhd.tsstartloading) as orv_lhdelivery_tsstartloading\r\n",
							"    ,to_timestamp(lhd.tsloaded) as orv_lhdelivery_tsloaded\r\n",
							"    ,to_timestamp(lhd.tsfinishedoffloading) as orv_lhdelivery_tsfinishedoffloading\r\n",
							"    ,to_timestamp(lhd.tsdocumnetshanddovedriver) as orv_lhdelivery_tsdocumnetshanddovedriver\r\n",
							"    ,to_timestamp(lhd.tsleavingcustomer) as orv_lhdelivery_tsleavingcustomer\r\n",
							"    ,lhd.actionsubtype as orv_lhdelivery_actionsubtype\r\n",
							"    ,to_timestamp(lhd.tsstart) as orv_lhdelivery_tsstart\r\n",
							"    ,lhd.signame as orv_lhdelivery_signame\r\n",
							"    ,lhd.signcomment as orv_lhdelivery_signcomment\r\n",
							"    ,to_timestamp(lhd.signdate) as orv_lhdelivery_signdate\r\n",
							"    ,to_timestamp(lhd.tsendtate) as orv_lhdelivery_tsendtate\r\n",
							"    ,to_timestamp(lhd.tsentergeofenceapp) as orv_lhdelivery_tsentergeofenceapp\r\n",
							"    ,to_timestamp(lhd.tsexitgeofenceapp) as orv_lhdelivery_tsexitgeofenceapp\r\n",
							"    ,lhd.tmsid as orv_lhdelivery_tmsid\r\n",
							"    ,lhd.subtype as orv_lhdelivery_subtype\r\n",
							"    ,lhd.needbotrailerver as orv_lhdelivery_needbotrailerver\r\n",
							"    ,lhd.secondtrailerfleetcode as orv_lhdelivery_secondtrailerfleetcode\r\n",
							"    ,lhd.trailerverlat as orv_lhdelivery_trailerverlat\r\n",
							"    ,lhd.trailerverlng as orv_lhdelivery_trailerverlng\r\n",
							"    ,to_timestamp(lhd.tstrailerver) as orv_lhdelivery_tstrailerver\r\n",
							"    ,lhd.podlat as orv_lhdelivery_podlat\r\n",
							"    ,lhd.podlng as orv_lhdelivery_podlng\r\n",
							"    ,lhd.skiplat as orv_lhdelivery_skiplat\r\n",
							"    ,lhd.skiplng as orv_lhdelivery_skiplng\r\n",
							"    ,to_timestamp(lhd.uncanceldate) as orv_lhdelivery_uncanceldate\r\n",
							"\r\n",
							"\r\n",
							"    FROM publicinstruction i\r\n",
							"    LEFT JOIN publicaddress a on a.id = i.addressid\r\n",
							"    LEFT JOIN publiccustomer c on c.id = a.customerid\r\n",
							"    LEFT JOIN publiclhdelivery lhd on lhd.tmsid = i.id\r\n",
							"    \"\"\")\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstinstruction.createOrReplaceTempView(\"sstinstruction\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstinstruction.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstinstruction.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 7
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTLoadChild')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/ARCHIVE/01 SEMI STRUCTURED/03_LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "dbc2ba2c-c10e-4ae3-9e05-069573f58250"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dboloads LMS Table\r\n",
							"# dboloads = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboloads.parquet', format='parquet')\r\n",
							"# dboloads.createOrReplaceTempView(\"dboloads\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstparcelbyload LMS Table\r\n",
							"# sstparcelbyload = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyload.parquet', format='parquet')\r\n",
							"# sstparcelbyload.createOrReplaceTempView(\"sstparcelbyload\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbosroute LMS Table\r\n",
							"# dbosroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbosroute.parquet', format='parquet')\r\n",
							"# dbosroute.createOrReplaceTempView(\"dbosroute\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodriver LMS Table\r\n",
							"# dbodriver = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodriver.parquet', format='parquet')\r\n",
							"# dbodriver.createOrReplaceTempView(\"dbodriver\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehicle LMS Table\r\n",
							"# dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"# dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehiclebasic LMS Table\r\n",
							"# dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"# dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstloadchild\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    l.id as lms_loads_id\r\n",
							"    ,l.routeid as lms_loads_routeid\r\n",
							"    ,l.driverid as lms_loads_driverid\r\n",
							"    ,l.sealno as lms_loads_sealno\r\n",
							"    ,l.vehicleid as lms_loads_vehicleid\r\n",
							"    ,l.ttypeid as lms_loads_ttypeid\r\n",
							"    ,l.userid as lms_loads_userid\r\n",
							"    ,l.ldate as lms_loads_ldate\r\n",
							"    ,l.courierid as lms_loads_courierid\r\n",
							"    ,l.site as lms_loads_site\r\n",
							"    ,l.fromlocid as lms_loads_fromlocid\r\n",
							"    ,l.tolocid as lms_loads_tolocid\r\n",
							"    ,l.cdate as lms_loads_cdate\r\n",
							"    ,l.trailer1 as lms_loads_trailer1\r\n",
							"    ,l.trailer2 as lms_loads_trailer2\r\n",
							"    ,l.cref as lms_loads_cref\r\n",
							"    ,l.debriefed as lms_loads_debriefed\r\n",
							"    ,l.mrpflag as lms_loads_mrpflag\r\n",
							"    ,l.mrpcflag as lms_loads_mrpcflag\r\n",
							"    ,l.finalflag as lms_loads_finalflag\r\n",
							"    ,l.alidaflag as lms_loads_alidaflag\r\n",
							"    ,l.puibts as lms_loads_puibts\r\n",
							"    ,l.pucols as lms_loads_pucols\r\n",
							"    ,l.planningref as lms_loads_planningref\r\n",
							"    ,l.interfacedate as lms_loads_interfacedate\r\n",
							"    ,l.nosealsret as lms_loads_nosealsret\r\n",
							"    ,l.excludeopsi as lms_loads_excludeopsi\r\n",
							"    ,l.dccref as lms_loads_dccref\r\n",
							"    ,l.srouteid as lms_loads_srouteid\r\n",
							"    ,l.fuellitres as lms_loads_fuellitres\r\n",
							"    ,l.outsourcedcrew as lms_loads_outsourcedcrew\r\n",
							"    ,l.masterloadid as lms_loads_masterloadid\r\n",
							"    ,l.securitygatedespatched as lms_loads_securitygatedespatched\r\n",
							"    ,l.securitygateuserid as lms_loads_securitygateuserid\r\n",
							"    ,l.securitygatearrived as lms_loads_securitygatearrived\r\n",
							"    ,l.securitygatearriveduserid as lms_loads_securitygatearriveduserid\r\n",
							"    ,l.lastupdate as lms_loads_lastupdate\r\n",
							"    ,l.bayno as lms_loads_bayno\r\n",
							"    ,l.costs as lms_loads_costs\r\n",
							"    ,l.estdeparturedatetime as lms_loads_estdeparturedatetime\r\n",
							"    ,l.totalweight as lms_loads_totalweight\r\n",
							"    ,l.ovrignore as lms_loads_ovrignore\r\n",
							"    ,l.childloadid as lms_loads_childloadid\r\n",
							"    ,l.orvcode as lms_loads_orvcode\r\n",
							"    ,l.companyid as lms_loads_companyid\r\n",
							"    ,l.editloaddate as lms_loads_editloaddate\r\n",
							"    ,l.reopeneddate as lms_loads_reopeneddate\r\n",
							"    ,l.reopeneduserid as lms_loads_reopeneduserid\r\n",
							"    ,l.novehicle as lms_loads_novehicle\r\n",
							"    ,l.mobilefeedbackreasonid as lms_loads_mobilefeedbackreasonid\r\n",
							"    ,l.direct as lms_loads_direct\r\n",
							"    ,l.noofpcls as lms_loads_noofpcls\r\n",
							"    ,l.debriefdt as lms_loads_debriefdt\r\n",
							"    ,l.httpcode as lms_loads_httpcode\r\n",
							"    ,l.parentloadid as lms_loads_parentloadid\r\n",
							"    ,l.mrpobversion as lms_loads_mrpobversion\r\n",
							"    ,pbl.lms_parcelbyload_loadid as lms_parcelbyload_loadid\r\n",
							"    ,pbl.lms_parcelbyload_aggrweight as lms_parcelbyload_aggrweight\r\n",
							"    ,pbl.lms_parcelbyload_aggrchargeweight as lms_parcelbyload_aggrchargeweight\r\n",
							"    ,pbl.lms_parcelbyload_aggrvolweight as lms_parcelbyload_aggrvolweight\r\n",
							"    ,pbl.lms_parcelbyload_aggrvolumiserweight as lms_parcelbyload_aggrvolumiserweight\r\n",
							"    ,pbl.lms_parcelbyload_aggrmaxweight as lms_parcelbyload_aggrmaxweight\r\n",
							"    ,pbl.lms_parcelbyload_aggrnoparcels as lms_parcelbyload_aggrnoparcels\r\n",
							"    ,pbl.lms_parcelbyload_aggrweight as lms_parcelbyload_aggrweightexclspecdel\r\n",
							"    ,pbl.lms_parcelbyload_aggrchargeweight as lms_parcelbyload_aggrchargeweightexclspecdel\r\n",
							"    ,pbl.lms_parcelbyload_aggrvolweight as lms_parcelbyload_aggrvolweightexclspecdel\r\n",
							"    ,pbl.lms_parcelbyload_aggrvolumiserweight as lms_parcelbyload_aggrvolumiserweightexclspecdel\r\n",
							"    ,pbl.lms_parcelbyload_aggrmaxweight as lms_parcelbyload_aggrmaxweightexclspecdel\r\n",
							"    ,pbl.lms_parcelbyload_aggrnoparcels as lms_parcelbyload_aggrnoparcelsexclspecdel\r\n",
							"    ,sr.id as lms_sroute_id\r\n",
							"    ,sr.description as lms_sroute_description\r\n",
							"    ,d.id as lms_driver_id\r\n",
							"    ,d.dname as lms_driver_dname\r\n",
							"    ,u.id as lms_users_id\r\n",
							"    ,u.fullname as lms_users_fullname\r\n",
							"    ,u.site as lms_users_site\r\n",
							"    ,u2.id as lms_users_reopenuserid\r\n",
							"    ,u2.fullname as lms_users_reopenuserfullname\r\n",
							"    ,u2.site as lms_users_reopenusersite\r\n",
							"    ,v.id as lms_vehicle_id\r\n",
							"    ,v.fleetno as lms_vehicle_fleetno\r\n",
							"    ,v.uid as lms_vehicle_uid\r\n",
							"    ,v1.id as lms_vehicle_trailer1id\r\n",
							"    ,v1.fleetno as lms_vehicle_trailer1fleetno\r\n",
							"    ,v1.uid as lms_vehicle_trailer1uid\r\n",
							"    ,v2.id as lms_vehicle_trailer2id\r\n",
							"    ,v2.fleetno as lms_vehicle_trailer2fleetno\r\n",
							"    ,v2.uid as lms_vehicle_trailer2uid\r\n",
							"    ,vb.id as md_vehiclebasic_id\r\n",
							"    ,vb.uid as md_vehiclebasic_uid\r\n",
							"    ,vb.vehicletype as md_vehiclebasic_vehicletype\r\n",
							"    ,vb.internalexternal as md_vehiclebasic_internalexternal\r\n",
							"    ,vb.activeflag as md_vehiclebasic_activeflag\r\n",
							"    ,vb.vehiclestatus as md_vehiclebasic_vehiclestatus\r\n",
							"    ,vb.chassisnumber as md_vehiclebasic_chassisnumber\r\n",
							"    ,vb.depot as md_vehiclebasic_depot\r\n",
							"    ,vb.enginenumber as md_vehiclebasic_enginenumber\r\n",
							"    ,vb.fleetcode as md_vehiclebasic_fleetcode\r\n",
							"    ,vb.fueltype as md_vehiclebasic_fueltype\r\n",
							"    ,vb.registrationnumber as md_vehiclebasic_registrationnumber\r\n",
							"    ,vb.vehicleapplication as md_vehiclebasic_vehicleapplication\r\n",
							"    ,vb.vehiclebodymake as md_vehiclebasic_vehiclebodymake\r\n",
							"    ,vb.vehiclecolour as md_vehiclebasic_vehiclecolour\r\n",
							"    ,vb.vehiclemake as md_vehiclebasic_vehiclemake\r\n",
							"    ,vb.vehiclemodel as md_vehiclebasic_vehiclemodel\r\n",
							"    ,vb.vehicleseries as md_vehiclebasic_vehicleseries\r\n",
							"    ,vb.year as md_vehiclebasic_year\r\n",
							"    ,vb.vehicleownerid as md_vehiclebasic_vehicleownerid\r\n",
							"    ,vb.vehicleowner as md_vehiclebasic_vehicleowner\r\n",
							"    ,vb.staffvehicleflag as md_vehiclebasic_staffvehicleflag\r\n",
							"    ,vb.vehicletrailersize as md_vehiclebasic_vehicletrailersize\r\n",
							"    ,vb.vehicletrailertype as md_vehiclebasic_vehicletrailertype\r\n",
							"    ,vb.vehicleetollclass as md_vehiclebasic_vehicleetollclass\r\n",
							"    ,vb.brn as md_vehiclebasic_brn\r\n",
							"    ,vb.brnnumber as md_vehiclebasic_brnnumber\r\n",
							"    ,vb.vehicleregisterno as md_vehiclebasic_vehicleregisterno\r\n",
							"    ,vb.insdate as md_vehiclebasic_insdate\r\n",
							"    ,vb.insby as md_vehiclebasic_insby\r\n",
							"    ,vb.islinehaulvehicle as md_vehiclebasic_islinehaulvehicle\r\n",
							"    ,vb.internalheight as md_vehiclebasic_internalheight\r\n",
							"    ,vb.internallength as md_vehiclebasic_internallength\r\n",
							"    ,vb.internalvolume as md_vehiclebasic_internalvolume\r\n",
							"    ,vb.internalwidth as md_vehiclebasic_internalwidth\r\n",
							"    ,vb.moddate as md_vehiclebasic_moddate\r\n",
							"    ,vb.trailerflag as md_vehiclebasic_trailerflag\r\n",
							"    ,vb.workflowstatus as md_vehiclebasic_workflowstatus\r\n",
							"    ,vb.approveddate as md_vehiclebasic_approveddate\r\n",
							"    ,vb1.id as md_vehiclebasic_trailer1id\r\n",
							"    ,vb1.uid as md_vehiclebasic_trailer1uid\r\n",
							"    ,vb1.vehicletype as md_vehiclebasic_trailer1vehicletype\r\n",
							"    ,vb1.internalexternal as md_vehiclebasic_trailer1internalexternal\r\n",
							"    ,vb1.activeflag as md_vehiclebasic_trailer1activeflag\r\n",
							"    ,vb1.vehiclestatus as md_vehiclebasic_trailer1vehiclestatus\r\n",
							"    ,vb1.chassisnumber as md_vehiclebasic_trailer1chassisnumber\r\n",
							"    ,vb1.depot as md_vehiclebasic_trailer1depot\r\n",
							"    ,vb1.enginenumber as md_vehiclebasic_trailer1enginenumber\r\n",
							"    ,vb1.fleetcode as md_vehiclebasic_trailer1fleetcode\r\n",
							"    ,vb1.fueltype as md_vehiclebasic_trailer1fueltype\r\n",
							"    ,vb1.registrationnumber as md_vehiclebasic_trailer1registrationnumber\r\n",
							"    ,vb1.vehicleapplication as md_vehiclebasic_trailer1vehicleapplication\r\n",
							"    ,vb1.vehiclebodymake as md_vehiclebasic_trailer1vehiclebodymake\r\n",
							"    ,vb1.vehiclecolour as md_vehiclebasic_trailer1vehiclecolour\r\n",
							"    ,vb1.vehiclemake as md_vehiclebasic_trailer1vehiclemake\r\n",
							"    ,vb1.vehiclemodel as md_vehiclebasic_trailer1vehiclemodel\r\n",
							"    ,vb1.vehicleseries as md_vehiclebasic_trailer1vehicleseries\r\n",
							"    ,vb1.year as md_vehiclebasic_trailer1year\r\n",
							"    ,vb1.vehicleownerid as md_vehiclebasic_trailer1vehicleownerid\r\n",
							"    ,vb1.vehicleowner as md_vehiclebasic_trailer1vehicleowner\r\n",
							"    ,vb1.staffvehicleflag as md_vehiclebasic_trailer1staffvehicleflag\r\n",
							"    ,vb1.vehicletrailersize as md_vehiclebasic_trailer1vehicletrailersize\r\n",
							"    ,vb1.vehicletrailertype as md_vehiclebasic_trailer1vehicletrailertype\r\n",
							"    ,vb1.vehicleetollclass as md_vehiclebasic_trailer1vehicleetollclass\r\n",
							"    ,vb1.brn as md_vehiclebasic_trailer1brn\r\n",
							"    ,vb1.brnnumber as md_vehiclebasic_trailer1brnnumber\r\n",
							"    ,vb1.vehicleregisterno as md_vehiclebasic_trailer1vehicleregisterno\r\n",
							"    ,vb1.insdate as md_vehiclebasic_trailer1insdate\r\n",
							"    ,vb1.insby as md_vehiclebasic_trailer1insby\r\n",
							"    ,vb1.islinehaulvehicle as md_vehiclebasic_trailer1islinehaulvehicle\r\n",
							"    ,vb1.internalheight as md_vehiclebasic_trailer1internalheight\r\n",
							"    ,vb1.internallength as md_vehiclebasic_trailer1internallength\r\n",
							"    ,vb1.internalvolume as md_vehiclebasic_trailer1internalvolume\r\n",
							"    ,vb1.internalwidth as md_vehiclebasic_trailer1internalwidth\r\n",
							"    ,vb1.moddate as md_vehiclebasic_trailer1moddate\r\n",
							"    ,vb1.trailerflag as md_vehiclebasic_trailer1trailerflag\r\n",
							"    ,vb1.workflowstatus as md_vehiclebasic_trailer1workflowstatus\r\n",
							"    ,vb1.approveddate as md_vehiclebasic_trailer1approveddate\r\n",
							"    ,vb2.id as md_vehiclebasic_trailer2id\r\n",
							"    ,vb2.uid as md_vehiclebasic_trailer2uid\r\n",
							"    ,vb2.vehicletype as md_vehiclebasic_trailer2vehicletype\r\n",
							"    ,vb2.internalexternal as md_vehiclebasic_trailer2internalexternal\r\n",
							"    ,vb2.activeflag as md_vehiclebasic_trailer2activeflag\r\n",
							"    ,vb2.vehiclestatus as md_vehiclebasic_trailer2vehiclestatus\r\n",
							"    ,vb2.chassisnumber as md_vehiclebasic_trailer2chassisnumber\r\n",
							"    ,vb2.depot as md_vehiclebasic_trailer2depot\r\n",
							"    ,vb2.enginenumber as md_vehiclebasic_trailer2enginenumber\r\n",
							"    ,vb2.fleetcode as md_vehiclebasic_trailer2fleetcode\r\n",
							"    ,vb2.fueltype as md_vehiclebasic_trailer2fueltype\r\n",
							"    ,vb2.registrationnumber as md_vehiclebasic_trailer2registrationnumber\r\n",
							"    ,vb2.vehicleapplication as md_vehiclebasic_trailer2vehicleapplication\r\n",
							"    ,vb2.vehiclebodymake as md_vehiclebasic_trailer2vehiclebodymake\r\n",
							"    ,vb2.vehiclecolour as md_vehiclebasic_trailer2vehiclecolour\r\n",
							"    ,vb2.vehiclemake as md_vehiclebasic_trailer2vehiclemake\r\n",
							"    ,vb2.vehiclemodel as md_vehiclebasic_trailer2vehiclemodel\r\n",
							"    ,vb2.vehicleseries as md_vehiclebasic_trailer2vehicleseries\r\n",
							"    ,vb2.year as md_vehiclebasic_trailer2year\r\n",
							"    ,vb2.vehicleownerid as md_vehiclebasic_trailer2vehicleownerid\r\n",
							"    ,vb2.vehicleowner as md_vehiclebasic_trailer2vehicleowner\r\n",
							"    ,vb2.staffvehicleflag as md_vehiclebasic_trailer2staffvehicleflag\r\n",
							"    ,vb2.vehicletrailersize as md_vehiclebasic_trailer2vehicletrailersize\r\n",
							"    ,vb2.vehicletrailertype as md_vehiclebasic_trailer2vehicletrailertype\r\n",
							"    ,vb2.vehicleetollclass as md_vehiclebasic_trailer2vehicleetollclass\r\n",
							"    ,vb2.brn as md_vehiclebasic_trailer2brn\r\n",
							"    ,vb2.brnnumber as md_vehiclebasic_trailer2brnnumber\r\n",
							"    ,vb2.vehicleregisterno as md_vehiclebasic_trailer2vehicleregisterno\r\n",
							"    ,vb2.insdate as md_vehiclebasic_trailer2insdate\r\n",
							"    ,vb2.insby as md_vehiclebasic_trailer2insby\r\n",
							"    ,vb2.islinehaulvehicle as md_vehiclebasic_trailer2islinehaulvehicle\r\n",
							"    ,vb2.internalheight as md_vehiclebasic_trailer2internalheight\r\n",
							"    ,vb2.internallength as md_vehiclebasic_trailer2internallength\r\n",
							"    ,vb2.internalvolume as md_vehiclebasic_trailer2internalvolume\r\n",
							"    ,vb2.internalwidth as md_vehiclebasic_trailer2internalwidth\r\n",
							"    ,vb2.moddate as md_vehiclebasic_trailer2moddate\r\n",
							"    ,vb2.trailerflag as md_vehiclebasic_trailer2trailerflag\r\n",
							"    ,vb2.workflowstatus as md_vehiclebasic_trailer2workflowstatus\r\n",
							"    ,vb2.approveddate as md_vehiclebasic_trailer2approveddate\r\n",
							"\r\n",
							"FROM dboloads l\r\n",
							"LEFT JOIN sstparcelbyload pbl on pbl.lms_parcelbyload_loadid = l.id\r\n",
							"LEFT JOIN dbosroute sr on sr.id = l.routeid\r\n",
							"LEFT JOIN dbodriver d on d.id = l.driverid\r\n",
							"LEFT JOIN dbovehicle v on v.id = l.vehicleid\r\n",
							"LEFT JOIN dbovehicle v1 on v1.id = l.trailer1\r\n",
							"LEFT JOIN dbovehicle v2 on v2.id = l.trailer2\r\n",
							"LEFT JOIN dbovehiclebasic vb on vb.uid = v.uid\r\n",
							"LEFT JOIN dbovehiclebasic vb1 on vb1.uid = v1.uid\r\n",
							"LEFT JOIN dbovehiclebasic vb2 on vb2.uid = v2.uid\r\n",
							"LEFT JOIN dbousers u on u.id = l.userid\r\n",
							"LEFT JOIN dbousers u2 on u2.id = l.reopeneduserid\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstloadchild = spark.sql(\"SELECT * FROM sstloadchild\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstloadchild.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadchild.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 11
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTLoadParent')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/ARCHIVE/01 SEMI STRUCTURED/03_LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "995f2dd2-eda1-4774-879f-1b5cd837232f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the sstloadchild LMS Table\r\n",
							"# sstloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadchild.parquet', format='parquet')\r\n",
							"# sstloadchild.createOrReplaceTempView(\"sstloadchild\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdispatch ORV Table\r\n",
							"# publicdispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
							"# publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicvehicle ORV Table\r\n",
							"# publicvehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicvehicle.parquet', format='parquet')\r\n",
							"# publicvehicle.createOrReplaceTempView(\"publicvehicle\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicorvuser ORV Table\r\n",
							"# publicorvuser = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicorvuser.parquet', format='parquet')\r\n",
							"# publicorvuser.createOrReplaceTempView(\"publicorvuser\")"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstloadparent_tmp\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    lc.lms_loads_parentloadid as lms_loadchild_parentloadid\r\n",
							"    ,sum(lc.lms_parcelbyload_aggrweight) as lms_loadchild_aggrweight\r\n",
							"    ,sum(lc.lms_parcelbyload_aggrchargeweight) as lms_loadchild_aggrchargeweight\r\n",
							"    ,sum(lc.lms_parcelbyload_aggrvolweight) as lms_loadchild_aggrvolweight\r\n",
							"    ,sum(lc.lms_parcelbyload_aggrvolumiserweight) as lms_loadchild_aggrvolumiserweight\r\n",
							"    ,sum(lc.lms_parcelbyload_aggrmaxweight) as lms_loadchild_aggrmaxweight\r\n",
							"    ,sum(lc.lms_parcelbyload_aggrnoparcels) as lms_loadchild_aggrnoparcels\r\n",
							"    ,sum(lc.lms_parcelbyload_aggrweightexclspecdel) as lms_loadchild_aggrweightexclspecdel\r\n",
							"    ,sum(lc.lms_parcelbyload_aggrchargeweightexclspecdel) as lms_loadchild_aggrchargeweightexclspecdel\r\n",
							"    ,sum(lc.lms_parcelbyload_aggrvolweightexclspecdel) as lms_loadchild_aggrvolweightexclspecdel\r\n",
							"    ,sum(lc.lms_parcelbyload_aggrvolumiserweightexclspecdel) as lms_loadchild_aggrvolumiserweightexclspecdel\r\n",
							"    ,sum(lc.lms_parcelbyload_aggrmaxweightexclspecdel) as lms_loadchild_aggrmaxweightexclspecdel\r\n",
							"    ,sum(lc.lms_parcelbyload_aggrnoparcelsexclspecdel) as lms_loadchild_aggrnoparcelsexclspecdel\r\n",
							"FROM sstloadchild lc \r\n",
							"WHERE lc.lms_loads_parentloadid is not null\r\n",
							"GROUP BY lc.lms_loads_parentloadid\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstloadparent_tmp = spark.sql(\"SELECT * FROM sstloadparent_tmp\")"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstloadparent\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    t.lms_loadchild_parentloadid as  lms_loadparent_parentloadid \r\n",
							"    ,t.lms_loadchild_aggrweight  as  lms_loadparent_aggrweight \r\n",
							"    ,t.lms_loadchild_aggrchargeweight  as  lms_loadparent_aggrchargeweight\r\n",
							"    ,t.lms_loadchild_aggrvolweight  as  lms_loadparent_aggrvolweight\r\n",
							"    ,t.lms_loadchild_aggrvolumiserweight  as  lms_loadparent_aggrvolumiserweight\r\n",
							"    ,t.lms_loadchild_aggrmaxweight  as  lms_loadparent_aggrmaxweight\r\n",
							"    ,t.lms_loadchild_aggrnoparcels  as  lms_loadparent_aggrnoparcels\r\n",
							"    ,t.lms_loadchild_aggrweightexclspecdel  as  lms_loadparent_aggrweightexclspecdel\r\n",
							"    ,t.lms_loadchild_aggrchargeweightexclspecdel  as  lms_loadparent_aggrchargeweightexclspecdel\r\n",
							"    ,t.lms_loadchild_aggrvolweightexclspecdel  as  lms_loadparent_aggrvolweightexclspecdel\r\n",
							"    ,t.lms_loadchild_aggrvolumiserweightexclspecdel  as  lms_loadparent_aggrvolumiserweightexclspecdel\r\n",
							"    ,t.lms_loadchild_aggrmaxweightexclspecdel  as  lms_loadparent_aggrmaxweightexclspecdel\r\n",
							"    ,t.lms_loadchild_aggrnoparcelsexclspecdel  as  lms_loadparent_aggrnoparcelsexclspecdel\r\n",
							"    ,d.id as orv_dispatch_id\r\n",
							"    ,d.lmsid as orv_dispatch_lmsid\r\n",
							"    ,d.vid as orv_dispatch_vid\r\n",
							"    ,d.did as orv_dispatch_did\r\n",
							"    ,d.status as orv_dispatch_status\r\n",
							"    ,to_timestamp(d.startdate) as orv_dispatch_startdate\r\n",
							"    ,to_timestamp(d.stopdate) as orv_dispatch_stopdate\r\n",
							"    ,d.vehicletype as orv_dispatch_vehicletype\r\n",
							"    ,d.uid as orv_dispatch_uid\r\n",
							"    ,to_timestamp(d.estdepdate) as orv_dispatch_estdepdate\r\n",
							"    ,d.trailer as orv_dispatch_trailer\r\n",
							"    ,d.trailer2 as orv_dispatch_trailer2\r\n",
							"    ,d.fromlocid as orv_dispatch_fromlocid\r\n",
							"    ,d.tolocid as orv_dispatch_tolocid\r\n",
							"    ,d.site as orv_dispatch_site\r\n",
							"    ,to_timestamp(d.lastupdate) as orv_dispatch_lastupdate\r\n",
							"    ,d.etastatus as orv_dispatch_etastatus\r\n",
							"    ,d.startinglat as orv_dispatch_startinglat\r\n",
							"    ,d.startinglng as orv_dispatch_startinglng\r\n",
							"    ,d.endinglat as orv_dispatch_endinglat\r\n",
							"    ,d.endinglng as orv_dispatch_endinglng\r\n",
							"    ,d.startingfrom as orv_dispatch_startingfrom\r\n",
							"    ,d.goingto as orv_dispatch_goingto\r\n",
							"    ,d.importissue as orv_dispatch_importissue\r\n",
							"    ,to_timestamp(d.insdate) as orv_dispatch_insdate\r\n",
							"    ,to_timestamp(d.estarrdate) as orv_dispatch_estarrdate\r\n",
							"    ,d.duration as orv_dispatch_duration\r\n",
							"    ,d.distance as orv_dispatch_distance\r\n",
							"    ,d.cost as orv_dispatch_cost\r\n",
							"    ,d.stoplat as orv_dispatch_stoplat\r\n",
							"    ,d.stoplng as orv_dispatch_stoplng\r\n",
							"    ,d.stopreason as orv_dispatch_stopreason\r\n",
							"    ,d.startodo as orv_dispatch_startodo\r\n",
							"    ,d.stopodo as orv_dispatch_stopodo\r\n",
							"    ,d.expduration as orv_dispatch_expduration\r\n",
							"    ,d.expdistance as orv_dispatch_expdistance\r\n",
							"    ,d.expcost as orv_dispatch_expcost\r\n",
							"    ,d.collectionid as orv_dispatch_collectionid\r\n",
							"    ,d.crew as orv_dispatch_crew\r\n",
							"    ,d.crewnames as orv_dispatch_crewnames\r\n",
							"    ,d.bocloseuid as orv_dispatch_bocloseuid\r\n",
							"    ,d.routing as orv_dispatch_routing\r\n",
							"    ,d.swapct as orv_dispatch_swapct\r\n",
							"    ,d.debriefed as orv_dispatch_debriefed\r\n",
							"    ,d.debriefnotes as orv_dispatch_debriefnotes\r\n",
							"    ,d.bopin as orv_dispatch_bopin\r\n",
							"    ,d.cpicost as orv_dispatch_cpicost\r\n",
							"    ,d.labourcost as orv_dispatch_labourcost\r\n",
							"    ,d.maintcost as orv_dispatch_maintcost\r\n",
							"    ,d.inscost as orv_dispatch_inscost\r\n",
							"    ,d.tollcost as orv_dispatch_tollcost\r\n",
							"    ,d.fuelcost as orv_dispatch_fuelcost\r\n",
							"    ,d.internal as orv_dispatch_internal\r\n",
							"    ,d.childids as orv_dispatch_childids\r\n",
							"    ,d.guid as orv_dispatch_guid\r\n",
							"    ,d.timedefinite as orv_dispatch_timedefinite\r\n",
							"    ,d.orvcode as orv_dispatch_orvcode\r\n",
							"    ,to_timestamp(d.tsstopdepoenter) as orv_dispatch_tsstopdepoenter\r\n",
							"    ,to_timestamp(d.tsstartdepoexit) as orv_dispatch_tsstartdepoexit\r\n",
							"    ,d.reroutect as orv_dispatch_reroutect\r\n",
							"    ,to_timestamp(d.actualarrdate) as orv_dispatch_actualarrdate\r\n",
							"    ,d.physicalstartlat as orv_dispatch_physicalstartlat\r\n",
							"    ,d.physicalstartlng as orv_dispatch_physicalstartlng\r\n",
							"    ,to_timestamp(d.tsstartdepoexitapp) as orv_dispatch_tsstartdepoexitapp\r\n",
							"    ,to_timestamp(d.tsstopdepoenterapp) as orv_dispatch_tsstopdepoenterapp\r\n",
							"    ,to_timestamp(d.uncanceldate) as orv_dispatch_uncanceldate\r\n",
							"    ,d.uncancelusername as orv_dispatch_uncancelusername\r\n",
							"    ,d.lmsdebrifed as orv_dispatch_lmsdebrifed\r\n",
							"    ,d.reviseddebrief as orv_dispatch_reviseddebrief\r\n",
							"    ,d.lhtransporter as orv_dispatch_lhtransporter\r\n",
							"    ,d.triptype as orv_dispatch_triptype\r\n",
							"    ,d.startreason as orv_dispatch_startreason\r\n",
							"    ,d.route as orv_dispatch_route\r\n",
							"    ,d.tmstraileridentify as orv_dispatch_tmstraileridentify\r\n",
							"    ,d.tmstrailer2identify as orv_dispatch_tmstrailer2identify\r\n",
							"    ,d.tmscontroller as orv_dispatch_tmscontroller\r\n",
							"    ,d.routekey as orv_dispatch_routekey\r\n",
							"    ,d.courierid as orv_dispatch_courierid\r\n",
							"    ,to_timestamp(d.originalstartdate) as orv_dispatch_originalstartdate\r\n",
							"    ,to_timestamp(d.originalextarrival) as orv_dispatch_originalextarrival\r\n",
							"    ,d.recomputeoriginals as orv_dispatch_recomputeoriginals\r\n",
							"    ,d.originalextdistance as orv_dispatch_originalextdistance\r\n",
							"    ,d.originalextduration as orv_dispatch_originalextduration\r\n",
							"    ,to_timestamp(d.moddate) as orv_dispatch_moddate\r\n",
							"    ,d.tmsmode as orv_dispatch_tmsmode\r\n",
							"    ,d.driversignature as orv_dispatch_driversignature\r\n",
							"    ,v.id as orv_vehicle_id\r\n",
							"    ,v.fleetcode as orv_vehicle_fleetcode\r\n",
							"    ,v.lmsid as orv_vehicle_lmsid\r\n",
							"    ,v1.id as orv_vehicle_trailer1id\r\n",
							"    ,v1.fleetcode as orv_vehicle_trailer1fleetcode\r\n",
							"    ,v1.lmsid as orv_vehicle_trailer1lmsid\r\n",
							"    ,v2.id as orv_vehicle_trailer2id\r\n",
							"    ,v2.fleetcode as orv_vehicle_trailer2fleetcode\r\n",
							"    ,v2.lmsid as orv_vehicle_trailer2lmsid\r\n",
							"    ,lv.id as lms_vehicle_id\r\n",
							"    ,lv.uid as lms_vehicle_uid\r\n",
							"    ,lv1.id as lms_vehicle_trailer1id\r\n",
							"    ,lv1.uid as lms_vehicle_trailer1uid\r\n",
							"    ,lv2.id as lms_vehicle_trailer2id\r\n",
							"    ,lv2.uid as lms_vehicle_trailer2uid\r\n",
							"    ,u.id as orv_orvuser_id\r\n",
							"    ,u.username as orv_orvuser_username\r\n",
							"    ,u.fname as orv_orvuser_fname\r\n",
							"    ,u.lname as orv_orvuser_lname\r\n",
							"    ,u.empcode as orv_orvuser_empcode\r\n",
							"    ,u.aka as orv_orvuser_aka\r\n",
							"    ,u.gender as orv_orvuser_gender\r\n",
							"    ,u.cellno as orv_orvuser_cellno\r\n",
							"    ,u.rsaid as orv_orvuser_rsaid\r\n",
							"    ,u.passportno as orv_orvuser_passportno\r\n",
							"    ,u.idpassportno as orv_orvuser_idpassportno\r\n",
							"    ,u.nationality as orv_orvuser_nationality\r\n",
							"    ,u.birthcountry as orv_orvuser_birthcountry\r\n",
							"    ,to_timestamp(u.engageddate) as orv_orvuser_engageddate\r\n",
							"    ,to_timestamp(u.joineddate) as orv_orvuser_joineddate\r\n",
							"    ,to_timestamp(u.termindate) as orv_orvuser_termindate\r\n",
							"    ,u.status as orv_orvuser_status\r\n",
							"    ,u.depot as orv_orvuser_depot\r\n",
							"    ,u.jobcategory as orv_orvuser_jobcategory\r\n",
							"    ,u.jobtitle as orv_orvuser_jobtitle\r\n",
							"    ,u.payroll as orv_orvuser_payroll\r\n",
							"    ,u.annualsalary as orv_orvuser_annualsalary\r\n",
							"    ,to_timestamp(u.insdate) as orv_orvuser_insdate\r\n",
							"    ,u.lmsid as orv_orvuser_lmsid\r\n",
							"    ,u.vipid as orv_orvuser_vipid\r\n",
							"    ,u.dadriver as orv_orvuser_dadriver\r\n",
							"    ,u.dasupervisor as orv_orvuser_dasupervisor\r\n",
							"    ,u.davanassistant as orv_orvuser_davanassistant\r\n",
							"    ,u.crewlmsid as orv_orvuser_crewlmsid\r\n",
							"    ,u.courierid as orv_orvuser_courierid\r\n",
							"    ,vb.id as md_vehiclebasic_id\r\n",
							"    ,vb.uid as md_vehiclebasic_uid\r\n",
							"    ,vb.vehicletype as md_vehiclebasic_vehicletype\r\n",
							"    ,vb.internalexternal as md_vehiclebasic_internalexternal\r\n",
							"    ,vb.activeflag as md_vehiclebasic_activeflag\r\n",
							"    ,vb.vehiclestatus as md_vehiclebasic_vehiclestatus\r\n",
							"    ,vb.chassisnumber as md_vehiclebasic_chassisnumber\r\n",
							"    ,vb.depot as md_vehiclebasic_depot\r\n",
							"    ,vb.enginenumber as md_vehiclebasic_enginenumber\r\n",
							"    ,vb.fleetcode as md_vehiclebasic_fleetcode\r\n",
							"    ,vb.fueltype as md_vehiclebasic_fueltype\r\n",
							"    ,vb.registrationnumber as md_vehiclebasic_registrationnumber\r\n",
							"    ,vb.vehicleapplication as md_vehiclebasic_vehicleapplication\r\n",
							"    ,vb.vehiclebodymake as md_vehiclebasic_vehiclebodymake\r\n",
							"    ,vb.vehiclecolour as md_vehiclebasic_vehiclecolour\r\n",
							"    ,vb.vehiclemake as md_vehiclebasic_vehiclemake\r\n",
							"    ,vb.vehiclemodel as md_vehiclebasic_vehiclemodel\r\n",
							"    ,vb.vehicleseries as md_vehiclebasic_vehicleseries\r\n",
							"    ,vb.year as md_vehiclebasic_year\r\n",
							"    ,vb.vehicleownerid as md_vehiclebasic_vehicleownerid\r\n",
							"    ,vb.vehicleowner as md_vehiclebasic_vehicleowner\r\n",
							"    ,vb.staffvehicleflag as md_vehiclebasic_staffvehicleflag\r\n",
							"    ,vb.vehicletrailersize as md_vehiclebasic_vehicletrailersize\r\n",
							"    ,vb.vehicletrailertype as md_vehiclebasic_vehicletrailertype\r\n",
							"    ,vb.vehicleetollclass as md_vehiclebasic_vehicleetollclass\r\n",
							"    ,vb.brn as md_vehiclebasic_brn\r\n",
							"    ,vb.brnnumber as md_vehiclebasic_brnnumber\r\n",
							"    ,vb.vehicleregisterno as md_vehiclebasic_vehicleregisterno\r\n",
							"    ,to_timestamp(vb.insdate) as md_vehiclebasic_insdate\r\n",
							"    ,vb.insby as md_vehiclebasic_insby\r\n",
							"    ,vb.islinehaulvehicle as md_vehiclebasic_islinehaulvehicle\r\n",
							"    ,vb.internalheight as md_vehiclebasic_internalheight\r\n",
							"    ,vb.internallength as md_vehiclebasic_internallength\r\n",
							"    ,vb.internalvolume as md_vehiclebasic_internalvolume\r\n",
							"    ,vb.internalwidth as md_vehiclebasic_internalwidth\r\n",
							"    ,to_timestamp(vb.moddate) as md_vehiclebasic_moddate\r\n",
							"    ,vb.trailerflag as md_vehiclebasic_trailerflag\r\n",
							"    ,vb.workflowstatus as md_vehiclebasic_workflowstatus\r\n",
							"    ,to_timestamp(vb.approveddate) as md_vehiclebasic_approveddate\r\n",
							"    ,vb1.id as md_vehiclebasic_trailer1id\r\n",
							"    ,vb1.uid as md_vehiclebasic_trailer1uid\r\n",
							"    ,vb1.vehicletype as md_vehiclebasic_trailer1vehicletype\r\n",
							"    ,vb1.internalexternal as md_vehiclebasic_trailer1internalexternal\r\n",
							"    ,vb1.activeflag as md_vehiclebasic_trailer1activeflag\r\n",
							"    ,vb1.vehiclestatus as md_vehiclebasic_trailer1vehiclestatus\r\n",
							"    ,vb1.chassisnumber as md_vehiclebasic_trailer1chassisnumber\r\n",
							"    ,vb1.depot as md_vehiclebasic_trailer1depot\r\n",
							"    ,vb1.enginenumber as md_vehiclebasic_trailer1enginenumber\r\n",
							"    ,vb1.fleetcode as md_vehiclebasic_trailer1fleetcode\r\n",
							"    ,vb1.fueltype as md_vehiclebasic_trailer1fueltype\r\n",
							"    ,vb1.registrationnumber as md_vehiclebasic_trailer1registrationnumber\r\n",
							"    ,vb1.vehicleapplication as md_vehiclebasic_trailer1vehicleapplication\r\n",
							"    ,vb1.vehiclebodymake as md_vehiclebasic_trailer1vehiclebodymake\r\n",
							"    ,vb1.vehiclecolour as md_vehiclebasic_trailer1vehiclecolour\r\n",
							"    ,vb1.vehiclemake as md_vehiclebasic_trailer1vehiclemake\r\n",
							"    ,vb1.vehiclemodel as md_vehiclebasic_trailer1vehiclemodel\r\n",
							"    ,vb1.vehicleseries as md_vehiclebasic_trailer1vehicleseries\r\n",
							"    ,vb1.year as md_vehiclebasic_trailer1year\r\n",
							"    ,vb1.vehicleownerid as md_vehiclebasic_trailer1vehicleownerid\r\n",
							"    ,vb1.vehicleowner as md_vehiclebasic_trailer1vehicleowner\r\n",
							"    ,vb1.staffvehicleflag as md_vehiclebasic_trailer1staffvehicleflag\r\n",
							"    ,vb1.vehicletrailersize as md_vehiclebasic_trailer1vehicletrailersize\r\n",
							"    ,vb1.vehicletrailertype as md_vehiclebasic_trailer1vehicletrailertype\r\n",
							"    ,vb1.vehicleetollclass as md_vehiclebasic_trailer1vehicleetollclass\r\n",
							"    ,vb1.brn as md_vehiclebasic_trailer1brn\r\n",
							"    ,vb1.brnnumber as md_vehiclebasic_trailer1brnnumber\r\n",
							"    ,vb1.vehicleregisterno as md_vehiclebasic_trailer1vehicleregisterno\r\n",
							"    ,to_timestamp(vb1.insdate) as md_vehiclebasic_trailer1insdate\r\n",
							"    ,vb1.insby as md_vehiclebasic_trailer1insby\r\n",
							"    ,vb1.islinehaulvehicle as md_vehiclebasic_trailer1islinehaulvehicle\r\n",
							"    ,vb1.internalheight as md_vehiclebasic_trailer1internalheight\r\n",
							"    ,vb1.internallength as md_vehiclebasic_trailer1internallength\r\n",
							"    ,vb1.internalvolume as md_vehiclebasic_trailer1internalvolume\r\n",
							"    ,vb1.internalwidth as md_vehiclebasic_trailer1internalwidth\r\n",
							"    ,to_timestamp(vb1.moddate) as md_vehiclebasic_trailer1moddate\r\n",
							"    ,vb1.trailerflag as md_vehiclebasic_trailer1trailerflag\r\n",
							"    ,vb1.workflowstatus as md_vehiclebasic_trailer1workflowstatus\r\n",
							"    ,to_timestamp(vb1.approveddate) as md_vehiclebasic_trailer1approveddate\r\n",
							"    ,vb2.id as md_vehiclebasic_trailer2id\r\n",
							"    ,vb2.uid as md_vehiclebasic_trailer2uid\r\n",
							"    ,vb2.vehicletype as md_vehiclebasic_trailer2vehicletype\r\n",
							"    ,vb2.internalexternal as md_vehiclebasic_trailer2internalexternal\r\n",
							"    ,vb2.activeflag as md_vehiclebasic_trailer2activeflag\r\n",
							"    ,vb2.vehiclestatus as md_vehiclebasic_trailer2vehiclestatus\r\n",
							"    ,vb2.chassisnumber as md_vehiclebasic_trailer2chassisnumber\r\n",
							"    ,vb2.depot as md_vehiclebasic_trailer2depot\r\n",
							"    ,vb2.enginenumber as md_vehiclebasic_trailer2enginenumber\r\n",
							"    ,vb2.fleetcode as md_vehiclebasic_trailer2fleetcode\r\n",
							"    ,vb2.fueltype as md_vehiclebasic_trailer2fueltype\r\n",
							"    ,vb2.registrationnumber as md_vehiclebasic_trailer2registrationnumber\r\n",
							"    ,vb2.vehicleapplication as md_vehiclebasic_trailer2vehicleapplication\r\n",
							"    ,vb2.vehiclebodymake as md_vehiclebasic_trailer2vehiclebodymake\r\n",
							"    ,vb2.vehiclecolour as md_vehiclebasic_trailer2vehiclecolour\r\n",
							"    ,vb2.vehiclemake as md_vehiclebasic_trailer2vehiclemake\r\n",
							"    ,vb2.vehiclemodel as md_vehiclebasic_trailer2vehiclemodel\r\n",
							"    ,vb2.vehicleseries as md_vehiclebasic_trailer2vehicleseries\r\n",
							"    ,vb2.year as md_vehiclebasic_trailer2year\r\n",
							"    ,vb2.vehicleownerid as md_vehiclebasic_trailer2vehicleownerid\r\n",
							"    ,vb2.vehicleowner as md_vehiclebasic_trailer2vehicleowner\r\n",
							"    ,vb2.staffvehicleflag as md_vehiclebasic_trailer2staffvehicleflag\r\n",
							"    ,vb2.vehicletrailersize as md_vehiclebasic_trailer2vehicletrailersize\r\n",
							"    ,vb2.vehicletrailertype as md_vehiclebasic_trailer2vehicletrailertype\r\n",
							"    ,vb2.vehicleetollclass as md_vehiclebasic_trailer2vehicleetollclass\r\n",
							"    ,vb2.brn as md_vehiclebasic_trailer2brn\r\n",
							"    ,vb2.brnnumber as md_vehiclebasic_trailer2brnnumber\r\n",
							"    ,vb2.vehicleregisterno as md_vehiclebasic_trailer2vehicleregisterno\r\n",
							"    ,to_timestamp(vb2.insdate) as md_vehiclebasic_trailer2insdate\r\n",
							"    ,vb2.insby as md_vehiclebasic_trailer2insby\r\n",
							"    ,vb2.islinehaulvehicle as md_vehiclebasic_trailer2islinehaulvehicle\r\n",
							"    ,vb2.internalheight as md_vehiclebasic_trailer2internalheight\r\n",
							"    ,vb2.internallength as md_vehiclebasic_trailer2internallength\r\n",
							"    ,vb2.internalvolume as md_vehiclebasic_trailer2internalvolume\r\n",
							"    ,vb2.internalwidth as md_vehiclebasic_trailer2internalwidth\r\n",
							"    ,to_timestamp(vb2.moddate) as md_vehiclebasic_trailer2moddate\r\n",
							"    ,vb2.trailerflag as md_vehiclebasic_trailer2trailerflag\r\n",
							"    ,vb2.workflowstatus as md_vehiclebasic_trailer2workflowstatus\r\n",
							"    ,to_timestamp(vb2.approveddate) as md_vehiclebasic_trailer2approveddate\r\n",
							"    \r\n",
							"FROM sstloadparent_tmp t\r\n",
							"LEFT JOIN publicdispatch d on d.lmsid = t.lms_loadchild_parentloadid and d.vehicletype = 6\r\n",
							"LEFT JOIN publicvehicle v on v.id = d.vid\r\n",
							"LEFT JOIN publicvehicle v1 on v1.id = d.trailer\r\n",
							"LEFT JOIN publicvehicle v2 on v2.id = d.trailer2\r\n",
							"LEFT JOIN dbovehicle lv on lv.id = v.lmsid \r\n",
							"LEFT JOIN dbovehicle lv1 on lv1.id = v1.lmsid \r\n",
							"LEFT JOIN dbovehicle lv2 on lv2.id = v2.lmsid \r\n",
							"LEFT JOIN publicorvuser u on u.id = d.did\r\n",
							"LEFT JOIN dbovehiclebasic vb on vb.uid = lv.uid\r\n",
							"LEFT JOIN dbovehiclebasic vb1 on vb1.uid = lv1.uid\r\n",
							"LEFT JOIN dbovehiclebasic vb2 on vb2.uid = lv2.uid\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstloadparent = spark.sql(\"SELECT * FROM sstloadparent\")"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstloadparent.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadparent.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 26
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTOrder')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/ARCHIVE/01 SEMI STRUCTURED/03_LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c4b7105b-2852-4654-9a90-a70b3a612b40"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the dboorder LMS Table\r\n",
							"# dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"# dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbocustomer LMS Table\r\n",
							"# dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"# dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbousers LMS Table\r\n",
							"# dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"# dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstparcelbyorder LMS Table\r\n",
							"# sstparcelbyorder = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyorder.parquet', format='parquet')\r\n",
							"# sstparcelbyorder.createOrReplaceTempView(\"sstparcelbyorder\")"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstorder \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     O.id as lms_order_id\r\n",
							"    ,O.idold as lms_order_idold\r\n",
							"    ,O.corderno as lms_order_corderno\r\n",
							"    ,O.custref as lms_order_custref\r\n",
							"    ,O.waybillid as lms_order_waybillid\r\n",
							"    ,O.pickupcustid as lms_order_pickupcustid\r\n",
							"    ,O.delivercustid as lms_order_delivercustid\r\n",
							"    ,O.billcustid as lms_order_billcustid\r\n",
							"    ,O.ovalue as lms_order_ovalue\r\n",
							"    ,O.hodate as lms_order_hodate\r\n",
							"    ,O.cservice as lms_order_cservice\r\n",
							"    ,O.courierid as lms_order_courierid\r\n",
							"    ,O.custservice as lms_order_custservice\r\n",
							"    ,O.userid as lms_order_userid\r\n",
							"    ,O.pcode as lms_order_pcode\r\n",
							"    ,O.appointment as lms_order_appointment\r\n",
							"    ,O.deliverby as lms_order_deliverby\r\n",
							"    ,O.dconfirmed as lms_order_dconfirmed\r\n",
							"    ,O.dcomment as lms_order_dcomment\r\n",
							"    ,O.drefno as lms_order_drefno\r\n",
							"    ,O.duserid as lms_order_duserid\r\n",
							"    ,O.nopods as lms_order_nopods\r\n",
							"    ,O.duedate as lms_order_duedate\r\n",
							"    ,O.batchno as lms_order_batchno\r\n",
							"    ,O.units as lms_order_units\r\n",
							"    ,O.airfreightflag as lms_order_airfreightflag\r\n",
							"    ,O.custref3 as lms_order_custref3\r\n",
							"    ,O.specdel as lms_order_specdel\r\n",
							"    ,O.flunits as lms_order_flunits\r\n",
							"    ,O.flkgs as lms_order_flkgs\r\n",
							"    ,O.inservice as lms_order_inservice\r\n",
							"    ,O.custdocs as lms_order_custdocs\r\n",
							"    ,O.scanned as lms_order_scanned\r\n",
							"    ,O.scanimagename1 as lms_order_scanimagename1\r\n",
							"    ,O.scanimagename as lms_order_scanimagename\r\n",
							"    ,O.changereasonid as lms_order_changereasonid\r\n",
							"    ,O.bill_servicetype as lms_order_bill_servicetype\r\n",
							"    ,O.bill_vehicletype as lms_order_bill_vehicletype\r\n",
							"    ,O.quote as lms_order_quote\r\n",
							"    ,O.consignlabel as lms_order_consignlabel\r\n",
							"    ,O.custref2 as lms_order_custref2\r\n",
							"    ,O.callprogid as lms_order_callprogid\r\n",
							"    ,O.callprogupddate as lms_order_callprogupddate\r\n",
							"    ,O.submitedi as lms_order_submitedi\r\n",
							"    ,O.lastupdate as lms_order_lastupdate\r\n",
							"    ,O.quoteflag as lms_order_quoteflag\r\n",
							"    ,O.bill_minrate as lms_order_bill_minrate\r\n",
							"    ,O.bill_addrate as lms_order_bill_addrate\r\n",
							"    ,O.bill_minkg as lms_order_bill_minkg\r\n",
							"    ,O.notes as lms_order_notes\r\n",
							"    ,O.quoteweight as lms_order_quoteweight\r\n",
							"    ,O.orderconsolidationid as lms_order_orderconsolidationid\r\n",
							"    ,O.quotefuellevy as lms_order_quotefuellevy\r\n",
							"    ,O.quoteothersurcharges as lms_order_quoteothersurcharges\r\n",
							"    ,O.quotedocfees as lms_order_quotedocfees\r\n",
							"    ,BC.id as lms_bcustomer_id\r\n",
							"    ,BC.name as lms_bcustomer_name\r\n",
							"    ,PC.id as lms_pcustomer_id\r\n",
							"    ,PC.name as lms_pcustomer_name\r\n",
							"    ,DC.id as lms_dcustomer_id\r\n",
							"    ,DC.name as lms_dcustomer_name\r\n",
							"    ,U.id as lms_users_id\r\n",
							"    ,U.fullname as lms_users_fullname\r\n",
							"    ,U.site as lms_users_site\r\n",
							"    ,lms_parcelbyorder_orderid as lms_parcelbyorder_orderid\r\n",
							"    ,lms_parcelbyorder_aggrweight as lms_parcelbyorder_aggrweight\r\n",
							"    ,lms_parcelbyorder_aggrchargeweight as lms_parcelbyorder_aggrchargeweight\r\n",
							"    ,lms_parcelbyorder_aggrvolweight as lms_parcelbyorder_aggrvolweight\r\n",
							"    ,lms_parcelbyorder_aggrvolumiserweight as lms_parcelbyorder_aggrvolumiserweight\r\n",
							"    ,lms_parcelbyorder_aggrmaxweight as lms_parcelbyorder_aggrmaxweight\r\n",
							"    ,lms_parcelbyorder_aggrnoparcels as lms_parcelbyorder_aggrnoparcels\r\n",
							"    ,lms_parcelbyorder_aggrweightexclspecdel as lms_parcelbyorder_aggrweightexclspecdel\r\n",
							"    ,lms_parcelbyorder_aggrchargeweightexclspecdel as lms_parcelbyorder_aggrchargeweightexclspecdel\r\n",
							"    ,lms_parcelbyorder_aggrvolweightexclspecdel as lms_parcelbyorder_aggrvolweightexclspecdel\r\n",
							"    ,lms_parcelbyorder_aggrvolumiserweightexclspecdel as lms_parcelbyorder_aggrvolumiserweightexclspecdel\r\n",
							"    ,lms_parcelbyorder_aggrmaxweightexclspecdel as lms_parcelbyorder_aggrmaxweightexclspecdel\r\n",
							"    ,lms_parcelbyorder_aggrnoparcelsexclspecdel as lms_parcelbyorder_aggrnoparcelsexclspecdel\r\n",
							"FROM dboorder O\r\n",
							"LEFT JOIN dbocustomer BC ON BC.id = O.billcustid\r\n",
							"LEFT JOIN dbocustomer PC ON PC.id = O.pickupcustid\r\n",
							"LEFT JOIN dbocustomer DC ON DC.id = O.delivercustid\r\n",
							"LEFT JOIN dbousers U ON U.id = O.userid\r\n",
							"LEFT JOIN sstparcelbyorder PBO ON PBO.lms_parcelbyorder_orderid  = O.id"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstorder = spark.sql(\"SELECT * FROM sstorder\")"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstorder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstorder.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 29
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTParcel')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/ARCHIVE/01 SEMI STRUCTURED/03_LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5160bca0-e357-4cf3-8fe5-5c480929a285"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the dboparcel LMS Table\r\n",
							"# dboparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"# dboparcel.createOrReplaceTempView(\"dboparcel\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbowaybill LMS Table\r\n",
							"# dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"# dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboorder LMS Table\r\n",
							"# dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"# dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboconsignment LMS Table\r\n",
							"# dboconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"# dboconsignment.createOrReplaceTempView(\"dboconsignment\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboparceldetail LMS Table\r\n",
							"# dboparceldetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparceldetail.parquet', format='parquet')\r\n",
							"# dboparceldetail.createOrReplaceTempView(\"dboparceldetail\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbocustomer LMS Table\r\n",
							"# dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"# dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbousers LMS Table\r\n",
							"# dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"# dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_parceltype LMS Table\r\n",
							"# dbobill_parceltype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_parceltype.parquet', format='parquet')\r\n",
							"# dbobill_parceltype.createOrReplaceTempView(\"dbobill_parceltype\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolocation LMS Table\r\n",
							"# dbolocation= spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"# dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodstatus LMS Table\r\n",
							"# dbodstatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodstatus.parquet', format='parquet')\r\n",
							"# dbodstatus.createOrReplaceTempView(\"dbodstatus\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovolumiser LMS Table\r\n",
							"# dbovolumiser = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovolumiser.parquet', format='parquet')\r\n",
							"# dbovolumiser.createOrReplaceTempView(\"dbovolumiser\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_parceltype LMS Table\r\n",
							"# dbobill_parceltype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_parceltype.parquet', format='parquet')\r\n",
							"# dbobill_parceltype.createOrReplaceTempView(\"dbobill_parceltype\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicparcel ORV Table\r\n",
							"# publicparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicparcel.parquet', format='parquet')\r\n",
							"# publicparcel.createOrReplaceTempView(\"publicparcel\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdelivery ORV Table\r\n",
							"# publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"# publicdelivery.createOrReplaceTempView(\"publicdelivery\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sstparcel_tmp = spark.sql(\"\"\"\r\n",
							"SELECT\r\n",
							"    ORVP.id \r\n",
							"    ,ORVP.lmsid \r\n",
							"    ,ORVP.did \r\n",
							"    ,to_timestamp(ORVP.scandate) as scandate\r\n",
							"    ,ORVP.scanstatus \r\n",
							"    ,ORVP.scanmode \r\n",
							"    ,ORVP.claimid \r\n",
							"    ,ORVP.courierid\r\n",
							"    ,to_timestamp(ORVP.moddate) as moddate\r\n",
							"    ,D.waybillid\r\n",
							"FROM publicparcel ORVP \r\n",
							"LEFT JOIN publicdelivery D ON ORVP.did = D.id\r\n",
							"WHERE D.mode ='deliver' and D.skipreason != 'Fix wrong data manipulation by the company'\r\n",
							"\"\"\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcel_tmp.createOrReplaceTempView(\"sstparcel_tmp\")"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcel \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"     P.id as lms_parcel_id\r\n",
							"    ,P.weight as lms_parcel_weight\r\n",
							"    ,P.waybillid as lms_parcel_waybillid\r\n",
							"    ,P.orderid as lms_parcel_orderid\r\n",
							"    ,P.acceptancedate as lms_parcel_acceptancedate\r\n",
							"    ,P.userid as lms_parcel_userid\r\n",
							"    ,P.barcode as lms_parcel_barcode\r\n",
							"    ,P.endorsement as lms_parcel_endorsement\r\n",
							"    ,P.volweight as lms_parcel_volweight\r\n",
							"    ,P.chargeweight as lms_parcel_chargeweight\r\n",
							"    ,P.ptype as lms_parcel_ptype\r\n",
							"    ,P.description as lms_parcel_description\r\n",
							"    ,P.locid as lms_parcel_locid\r\n",
							"    ,P.handoverdate as lms_parcel_handoverdate\r\n",
							"    ,P.seqno as lms_parcel_seqno\r\n",
							"    ,P.floorstatus as lms_parcel_floorstatus\r\n",
							"    ,P.consignid as lms_parcel_consignid\r\n",
							"    ,P.cref as lms_parcel_cref\r\n",
							"    ,P.claimid as lms_parcel_claimid\r\n",
							"    ,P.duedate as lms_parcel_duedate\r\n",
							"    ,P.coddate as lms_parcel_coddate\r\n",
							"    ,P.disflag as lms_parcel_disflag\r\n",
							"    ,P.astoreid as lms_parcel_astoreid\r\n",
							"    ,P.mrpflag as lms_parcel_mrpflag\r\n",
							"    ,P.nmrflag as lms_parcel_nmrflag\r\n",
							"    ,P.consignflag as lms_parcel_consignflag\r\n",
							"    ,P.cmanifest as lms_parcel_cmanifest\r\n",
							"    ,P.cbranchid as lms_parcel_cbranchid\r\n",
							"    ,P.claimref as lms_parcel_claimref\r\n",
							"    ,P.cost as lms_parcel_cost\r\n",
							"    ,P.creason as lms_parcel_creason\r\n",
							"    ,P.customerbarcode as lms_parcel_customerbarcode\r\n",
							"    ,P.dbshorts as lms_parcel_dbshorts\r\n",
							"    ,P.holddate as lms_parcel_holddate\r\n",
							"    ,P.aflag as lms_parcel_aflag\r\n",
							"    ,P.stationid as lms_parcel_stationid\r\n",
							"    ,P.dbshortsdesc as lms_parcel_dbshortsdesc\r\n",
							"    ,P.dstatusid as lms_parcel_dstatusid\r\n",
							"    ,P.dflag as lms_parcel_dflag\r\n",
							"    ,P.callprogid as lms_parcel_callprogid\r\n",
							"    ,P.callprogupddate as lms_parcel_callprogupddate\r\n",
							"    ,P.duplflag as lms_parcel_duplflag\r\n",
							"    ,P.lastupdate as lms_parcel_lastupdate\r\n",
							"    ,P.datevolumised as lms_parcel_datevolumised\r\n",
							"    ,P.volumiserweight as lms_parcel_volumiserweight\r\n",
							"    ,P.volumiserlength as lms_parcel_volumiserlength\r\n",
							"    ,P.volumiserheight as lms_parcel_volumiserheight\r\n",
							"    ,P.volumiserwidth as lms_parcel_volumiserwidth\r\n",
							"    ,P.volumiserid as lms_parcel_volumiserid\r\n",
							"    ,P.pl as lms_parcel_pl\r\n",
							"    ,P.ph as lms_parcel_ph\r\n",
							"    ,P.pw as lms_parcel_pw\r\n",
							"    ,P.totcharge as lms_parcel_totcharge\r\n",
							"    ,P.dontrecalc as lms_parcel_dontrecalc\r\n",
							"    ,P.containerid as lms_parcel_containerid\r\n",
							"    ,P.avgvolweight as lms_parcel_avgvolweight\r\n",
							"    ,WB.id as lms_waybill_id\r\n",
							"    ,WB.poddate as lms_waybill_poddate\r\n",
							"    ,WB.date as lms_waybill_date\r\n",
							"    ,O.id as lms_order_id\r\n",
							"    ,O.hodate as lms_order_hodate\r\n",
							"    ,O.corderno as lms_order_corderno\r\n",
							"    ,O.billcustid as lms_order_billcustid\r\n",
							"    ,O.pickupcustid as lms_order_pickupcustid\r\n",
							"    ,O.delivercustid as lms_order_delivercustid\r\n",
							"    ,O.specdel as lms_order_specdel\r\n",
							"    ,C.id as lms_consignment_id\r\n",
							"    ,C.cdate as lms_consignment_cdate\r\n",
							"    ,C.deliverby as lms_consignment_deliverby\r\n",
							"    ,PD.parcelid as lms_parceldetail_parcelid\r\n",
							"    ,PD.inservicestart as lms_parceldetail_inservicestart\r\n",
							"    ,PD.deliverby as lms_parceldetail_deliverby\r\n",
							"    ,PD.servicedays as lms_parceldetail_servicedays\r\n",
							"    ,PD.servicetime as lms_parceldetail_servicetime\r\n",
							"    ,PD.cutofftime as lms_parceldetail_cutofftime\r\n",
							"    ,PD.appointment as lms_parceldetail_appointment\r\n",
							"    ,PD.nddid as lms_parceldetail_nddid\r\n",
							"    ,PD.custonholdstart as lms_parceldetail_custonholdstart\r\n",
							"    ,PD.custonholdend as lms_parceldetail_custonholdend\r\n",
							"    ,PD.splitinitial as lms_parceldetail_splitinitial\r\n",
							"    ,PD.weekendholidays as lms_parceldetail_weekendholidays\r\n",
							"    ,PD.inbound as lms_parceldetail_inbound\r\n",
							"    ,PD.courierid as lms_parceldetail_courierid\r\n",
							"    ,PD.serviceid as lms_parceldetail_serviceid\r\n",
							"    ,PD.custaccid as lms_parceldetail_custaccid\r\n",
							"    ,PD.broutemasterid as lms_parceldetail_broutemasterid\r\n",
							"    ,PD.broutemasterfromid as lms_parceldetail_broutemasterfromid\r\n",
							"    ,PD.broutemastertoid as lms_parceldetail_broutemastertoid\r\n",
							"    ,PD.leadtimeid as lms_parceldetail_leadtimeid\r\n",
							"    ,BC.id as lms_bcustomer_id\t\r\n",
							"    ,BC.name as lms_bcustomer_name\r\n",
							"    ,PC.id as lms_pcustomer_id\t\r\n",
							"    ,PC.name as lms_pcustomer_name\r\n",
							"    ,DC.id as lms_dcustomer_id\t\r\n",
							"    ,DC.name as lms_dcustomer_name\r\n",
							"    ,U.id as lms_users_id\r\n",
							"    ,U.fullname as lms_users_fullname\r\n",
							"    ,U.site as lms_users_site\r\n",
							"    ,PT.id as lms_bill_parceltype_id\r\n",
							"    ,PT.description as lms_bill_parceltype_description\r\n",
							"    ,PT.ptype as lms_bill_parceltype_ptype\r\n",
							"    ,L.id as lms_clocation_id\r\n",
							"    ,L.description as lms_clocation_description\r\n",
							"    ,DS.id as lms_dstatus_id\r\n",
							"    ,DS.description as lms_dstatus_description\r\n",
							"    ,V.id as lms_volumiser_id\r\n",
							"    ,V.locid as lms_volumiser_locid\r\n",
							"    ,V.volumisercode as lms_volumiser_volumisercode\r\n",
							"    ,V.volumiserdescription as lms_volumiser_volumiserdescription\r\n",
							"    ,V.userid as lms_volumiser_userid\r\n",
							"    ,V.inlinescale as lms_volumiser_inlinescale\r\n",
							"    ,ORVP.id as orv_parcel_id\r\n",
							"    ,ORVP.lmsid as orv_parcel_lmsid\r\n",
							"    ,ORVP.did as orv_parcel_did\r\n",
							"    ,ORVP.scandate as orv_parcel_scandate\r\n",
							"    ,ORVP.scanstatus as orv_parcel_scanstatus\r\n",
							"    ,ORVP.scanmode as orv_parcel_scanmode\r\n",
							"    ,ORVP.claimid as orv_parcel_claimid\r\n",
							"    ,ORVP.courierid as orv_parcel_courierid\r\n",
							"    ,ORVP.moddate as orv_parcel_moddate\r\n",
							"FROM dboParcel P\r\n",
							"LEFT JOIN dbowaybill WB ON WB.id = P.waybillid\r\n",
							"LEFT JOIN dboorder O ON O.id = P.orderid\r\n",
							"LEFT JOIN dboconsignment C ON C.id = P.consignid\r\n",
							"LEFT JOIN dboparceldetail PD ON PD.parcelid = P.id\r\n",
							"LEFT JOIN dbocustomer BC ON BC.id = O.billcustid  --Bill Customer Detail \r\n",
							"LEFT JOIN dbocustomer PC ON PC.id = O.pickupcustid --Pickup Customer Detail \r\n",
							"LEFT JOIN dbocustomer DC ON DC.id = O.delivercustid --Deliver Customer Detail\r\n",
							"LEFT JOIN dbousers U ON U.id = P.userid\r\n",
							"LEFT JOIN dbobill_parceltype PT ON PT.id = P.ptype\r\n",
							"LEFT JOIN dbolocation L ON L.id = P.locid\r\n",
							"LEFT JOIN dbodstatus DS ON DS.id = P.dstatusid\r\n",
							"LEFT JOIN dbovolumiser V ON V.id = P.volumiserid\r\n",
							"LEFT JOIN sstparcel_tmp ORVP ON ORVP.lmsid = P.id AND ORVP.waybillid = P.waybillid"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcel = spark.sql(\"SELECT * FROM sstparcel\")"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcel.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 37
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTParcelUnion')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/01_LMS Union"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "5a34a261-92ee-4503-86cc-74a6f4d50cc3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
						"name": "ApacheSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dboparcel_archive LMS Table\r\n",
							"# dboparcel_archive = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparcel_archive.parquet', format='parquet')\r\n",
							"# dboparcel_archive.createOrReplaceTempView(\"dboparcel_archive\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboparcel LMS Table\r\n",
							"# dboparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparcel.parquet', format='parquet')\r\n",
							"# dboparcel.createOrReplaceTempView(\"dboparcel\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboorder LMS Table\r\n",
							"# dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"# dboorder.createOrReplaceTempView(\"dboorder\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dboparcelunion = dboparcel_archive.unionByName(dboparcel, allowMissingColumns = True)\r\n",
							"dboparcelunion.createOrReplaceTempView(\"dboparcelunion\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstparcelunion\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    p.*\r\n",
							"    ,o.PickUpCustID\r\n",
							"    ,o.DeliverCustID\r\n",
							"    ,o.BillCustID\r\n",
							"    ,o.specdel\r\n",
							"FROM dboparcelunion p\r\n",
							"LEFT JOIN dboorder o on o.id = p.orderid"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelunion = spark.sql(\"SELECT * FROM sstparcelunion\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstparcelunion.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTTrack')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/ARCHIVE/01 SEMI STRUCTURED/03_LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c0620870-279d-421f-b7dc-b48849332b77"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the ssttrackunion LMS Table\r\n",
							"# ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"# ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolocation LMS Table\r\n",
							"# dbolocation= spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"# dbolocation.createOrReplaceTempView(\"dbolocation\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"ssttrack \r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    t.id as lms_track_id\r\n",
							"    ,t.opendt as lms_track_opendt\r\n",
							"    ,t.closedt as lms_track_closedt\r\n",
							"    ,t.loadid as lms_track_loadid\r\n",
							"    ,t.userid as lms_track_userid\r\n",
							"    ,t.parcelid as lms_track_parcelid\r\n",
							"    ,t.tolocid as lms_track_tolocid\r\n",
							"    ,t.touserid as lms_track_touserid\r\n",
							"    ,t.fromlocid as lms_track_fromlocid\r\n",
							"    ,t.tracktypeid2 as lms_track_tracktypeid2\r\n",
							"    ,t.tracktypeid as lms_track_tracktypeid\r\n",
							"    ,t.lastupdate as lms_track_lastupdate\r\n",
							"    ,t.toloadid as lms_track_toloadid\r\n",
							"    ,t.openstationid as lms_track_openstationid\r\n",
							"    ,t.closestationid as lms_track_closestationid\r\n",
							"    ,t.weight as lms_parcel_weight\r\n",
							"    ,t.chargeweight as lms_parcel_chargeweight\r\n",
							"    ,t.volweight as lms_parcel_volweight\r\n",
							"    ,t.volumiserweight as lms_parcel_volumiserweight\r\n",
							"    ,t.specdel as lms_order_specdel\r\n",
							"    ,fl.id as lms_flocation_id\r\n",
							"    ,fl.description as lms_flocation_description\r\n",
							"    ,tl.id as lms_tlocation_id\r\n",
							"    ,tl.description as lms_tlocation_description\r\n",
							"\r\n",
							"\r\n",
							"FROM ssttrackunion t\r\n",
							"LEFT JOIN dbolocation tl on tl.id = t.tolocid\r\n",
							"LEFT JOIN dbolocation fl on fl.id = t.tolocid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrack = spark.sql(\"SELECT * FROM ssttrack\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ssttrack.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrack.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 16
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTTrackUnion')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED/01_LMS Union"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "a48f6d07-0b96-4b15-b0a9-57b43d920540"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
						"name": "ApacheSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dbotrack_archive LMS Table\r\n",
							"# dbotrack_archive = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbotrack_archive.parquet', format='parquet')\r\n",
							"# dbotrack_archive.createOrReplaceTempView(\"dbotrack_archive\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbotrack LMS Table\r\n",
							"# dbotrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbotrack.parquet', format='parquet')\r\n",
							"# dbotrack.createOrReplaceTempView(\"dbotrack\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstparcelunion LMS Table\r\n",
							"# sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"# sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dbotrackunion = dbotrack_archive.unionByName(dbotrack, allowMissingColumns = True)\r\n",
							"dbotrackunion.createOrReplaceTempView(\"dbotrackunion\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"ssttrackunion\r\n",
							"AS\r\n",
							"SELECT t.* \r\n",
							"    ,p.weight\r\n",
							"    ,p.chargeweight\r\n",
							"    ,p.volweight\r\n",
							"    ,p.volumiserweight\r\n",
							"    ,p.PickUpCustID\r\n",
							"    ,p.DeliverCustID\r\n",
							"    ,p.BillCustID\r\n",
							"    ,p.specdel\r\n",
							"    \r\n",
							"FROM dbotrackunion t\r\n",
							"LEFT JOIN sstparcelunion p on p.id = t.parcelid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrackunion = spark.sql(\"SELECT * FROM ssttrackunion\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ssttrackunion.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTTrip')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/ARCHIVE/01 SEMI STRUCTURED/04_TMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "05245cf7-f072-47aa-9178-c489839b2967"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the publictrip TMS Table\r\n",
							"# publictrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrip.parquet', format='parquet')\r\n",
							"# publictrip.createOrReplaceTempView(\"publictrip\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehicle LMS Table\r\n",
							"# dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"# dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdispatch ORV Table\r\n",
							"# publicdispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
							"# publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicvehicle ORV Table\r\n",
							"# publicvehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicvehicle.parquet', format='parquet')\r\n",
							"# publicvehicle.createOrReplaceTempView(\"publicvehicle\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicorvuser ORV Table\r\n",
							"# publicorvuser = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicorvuser.parquet', format='parquet')\r\n",
							"# publicorvuser.createOrReplaceTempView(\"publicorvuser\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehiclebasic MD Table\r\n",
							"# dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"# dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdriverpayitem TMS Table\r\n",
							"# publicdriverpayitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpayitem.parquet', format='parquet')\r\n",
							"# publicdriverpayitem.createOrReplaceTempView(\"publicdriverpayitem\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicfinancedata TMS Table\r\n",
							"# publicfinancedata = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfinancedata.parquet', format='parquet')\r\n",
							"# publicfinancedata.createOrReplaceTempView(\"publicfinancedata\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicbooking TMS Table\r\n",
							"# publicbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicbooking.parquet', format='parquet')\r\n",
							"# publicbooking.createOrReplaceTempView(\"publicbooking\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"ssttpublicfinancedata_tmp = spark.sql(\"\"\"\r\n",
							"SELECT \r\n",
							"b.tripid\r\n",
							",sum(f.peaksurchagrebuy) as peaksurchagrebuy\r\n",
							",sum(f.peaksurchagresell) as peaksurchagresell\r\n",
							",sum(f.manualentryroadhaulsell) as manualentryroadhaulsell\r\n",
							",sum(f.manualentryahocsell) as manualentryahocsell\r\n",
							",sum(f.systemfuellevy) as systemfuellevy\r\n",
							",sum(f.systemratefuellevy) as systemratefuellevy\r\n",
							",sum(f.systemratefuelexlevy) as systemratefuelexlevy\r\n",
							",sum(f.systemratefuelinclevy) as systemratefuelinclevy\r\n",
							",sum(f.systemsellrate) as systemsellrate\r\n",
							",sum(f.totalsellrate) as totalsellrate\r\n",
							",sum(f.totalbuyrate) as totalbuyrate\r\n",
							"\r\n",
							"FROM publicfinancedata f \r\n",
							"LEFT JOIN publicbooking b on b.id = f.bookingid\r\n",
							"GROUP BY b.tripid\r\n",
							"\"\"\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttpublicfinancedata_tmp.createOrReplaceTempView(\"ssttpublicfinancedata_tmp\")"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"ssttrip = spark.sql(\"\"\"\r\n",
							"SELECT \r\n",
							"    t.id as tms_trip_id\r\n",
							"    ,t.driverid as tms_trip_driverid\r\n",
							"    ,t.vehicleid as tms_trip_vehicleid\r\n",
							"    ,t.trailerid as tms_trip_trailerid\r\n",
							"    ,t.sectrailerid as tms_trip_sectrailerid\r\n",
							"    ,t.status as tms_trip_status\r\n",
							"    ,t.routeid as tms_trip_routeid\r\n",
							"    ,t.opsrouteid as tms_trip_opsrouteid\r\n",
							"    ,t.startfromaddress as tms_trip_startfromaddress\r\n",
							"    ,t.startfromlat as tms_trip_startfromlat\r\n",
							"    ,t.startfromlng as tms_trip_startfromlng\r\n",
							"    ,to_timestamp(t.dispatchdate) as tms_trip_dispatchdate\r\n",
							"    ,t.stopaddress as tms_trip_stopaddress\r\n",
							"    ,t.stoplat as tms_trip_stoplat\r\n",
							"    ,t.stoplng as tms_trip_stoplng\r\n",
							"    ,to_timestamp(t.insdate) as tms_trip_insdate\r\n",
							"    ,to_timestamp(t.moddate) as tms_trip_moddate\r\n",
							"    ,t.insby as tms_trip_insby\r\n",
							"    ,t.onrouteid as tms_trip_onrouteid\r\n",
							"    ,t.uuid as tms_trip_uuid\r\n",
							"    ,t.insbyuser as tms_trip_insbyuser\r\n",
							"    ,t.thirdpartyid as tms_trip_thirdpartyid\r\n",
							"    ,t.timehash as tms_trip_timehash\r\n",
							"    ,t.onroutestatus as tms_trip_onroutestatus\r\n",
							"    ,to_timestamp(t.lastupdate) as tms_trip_lastupdate\r\n",
							"    ,t.lastlng as tms_trip_lastlng\r\n",
							"    ,t.lastlat as tms_trip_lastlat\r\n",
							"    ,t.controllerid as tms_trip_controllerid\r\n",
							"    ,t.trackstatus as tms_trip_trackstatus\r\n",
							"    ,t.lastrackid as tms_trip_lastrackid\r\n",
							"    ,t.customer as tms_trip_customer\r\n",
							"    ,t.bookings as tms_trip_bookings\r\n",
							"    ,t.controller as tms_trip_controller\r\n",
							"    ,t.transporter as tms_trip_transporter\r\n",
							"    ,t.legacyid as tms_trip_legacyid\r\n",
							"    ,t.originatedfrom as tms_trip_originatedfrom\r\n",
							"    ,t.local as tms_trip_local\r\n",
							"    ,to_timestamp(t.startdate) as tms_trip_startdate\r\n",
							"    ,to_timestamp(t.enddate) as tms_trip_enddate\r\n",
							"    ,to_timestamp(t.actualdeliverydate) as tms_trip_actualdeliverydate\r\n",
							"    ,t.note as tms_trip_note\r\n",
							"    ,to_timestamp(t.deliverydate) as tms_trip_deliverydate\r\n",
							"    ,t.internalexternal as tms_trip_internalexternal\r\n",
							"    ,t.pickupstartaddress as tms_trip_pickupstartaddress\r\n",
							"    ,d.id as orv_dispatch_id\r\n",
							"    ,d.lmsid as orv_dispatch_lmsid\r\n",
							"    ,d.vid as orv_dispatch_vid\r\n",
							"    ,d.did as orv_dispatch_did\r\n",
							"    ,d.status as orv_dispatch_status\r\n",
							"    ,to_timestamp(d.startdate) as orv_dispatch_startdate\r\n",
							"    ,to_timestamp(d.stopdate) as orv_dispatch_stopdate\r\n",
							"    ,d.vehicletype as orv_dispatch_vehicletype\r\n",
							"    ,d.uid as orv_dispatch_uid\r\n",
							"    ,to_timestamp(d.estdepdate) as orv_dispatch_estdepdate\r\n",
							"    ,d.trailer as orv_dispatch_trailer\r\n",
							"    ,d.trailer2 as orv_dispatch_trailer2\r\n",
							"    ,d.fromlocid as orv_dispatch_fromlocid\r\n",
							"    ,d.tolocid as orv_dispatch_tolocid\r\n",
							"    ,d.site as orv_dispatch_site\r\n",
							"    ,to_timestamp(d.lastupdate) as orv_dispatch_lastupdate\r\n",
							"    ,d.etastatus as orv_dispatch_etastatus\r\n",
							"    ,d.startinglat as orv_dispatch_startinglat\r\n",
							"    ,d.startinglng as orv_dispatch_startinglng\r\n",
							"    ,d.endinglat as orv_dispatch_endinglat\r\n",
							"    ,d.endinglng as orv_dispatch_endinglng\r\n",
							"    ,d.startingfrom as orv_dispatch_startingfrom\r\n",
							"    ,d.goingto as orv_dispatch_goingto\r\n",
							"    ,d.importissue as orv_dispatch_importissue\r\n",
							"    ,to_timestamp(d.insdate) as orv_dispatch_insdate\r\n",
							"    ,to_timestamp(d.estarrdate) as orv_dispatch_estarrdate\r\n",
							"    ,d.duration as orv_dispatch_duration\r\n",
							"    ,d.distance as orv_dispatch_distance\r\n",
							"    ,d.cost as orv_dispatch_cost\r\n",
							"    ,d.stoplat as orv_dispatch_stoplat\r\n",
							"    ,d.stoplng as orv_dispatch_stoplng\r\n",
							"    ,d.stopreason as orv_dispatch_stopreason\r\n",
							"    ,d.startodo as orv_dispatch_startodo\r\n",
							"    ,d.stopodo as orv_dispatch_stopodo\r\n",
							"    ,d.expduration as orv_dispatch_expduration\r\n",
							"    ,d.expdistance as orv_dispatch_expdistance\r\n",
							"    ,d.expcost as orv_dispatch_expcost\r\n",
							"    ,d.collectionid as orv_dispatch_collectionid\r\n",
							"    ,d.crew as orv_dispatch_crew\r\n",
							"    ,d.crewnames as orv_dispatch_crewnames\r\n",
							"    ,d.bocloseuid as orv_dispatch_bocloseuid\r\n",
							"    ,d.routing as orv_dispatch_routing\r\n",
							"    ,d.swapct as orv_dispatch_swapct\r\n",
							"    ,d.debriefed as orv_dispatch_debriefed\r\n",
							"    ,d.debriefnotes as orv_dispatch_debriefnotes\r\n",
							"    ,d.bopin as orv_dispatch_bopin\r\n",
							"    ,d.cpicost as orv_dispatch_cpicost\r\n",
							"    ,d.labourcost as orv_dispatch_labourcost\r\n",
							"    ,d.maintcost as orv_dispatch_maintcost\r\n",
							"    ,d.inscost as orv_dispatch_inscost\r\n",
							"    ,d.tollcost as orv_dispatch_tollcost\r\n",
							"    ,d.fuelcost as orv_dispatch_fuelcost\r\n",
							"    ,d.internal as orv_dispatch_internal\r\n",
							"    ,d.childids as orv_dispatch_childids\r\n",
							"    ,d.guid as orv_dispatch_guid\r\n",
							"    ,d.timedefinite as orv_dispatch_timedefinite\r\n",
							"    ,d.orvcode as orv_dispatch_orvcode\r\n",
							"    ,to_timestamp(d.tsstopdepoenter) as orv_dispatch_tsstopdepoenter\r\n",
							"    ,to_timestamp(d.tsstartdepoexit) as orv_dispatch_tsstartdepoexit\r\n",
							"    ,d.reroutect as orv_dispatch_reroutect\r\n",
							"    ,to_timestamp(d.actualarrdate) as orv_dispatch_actualarrdate\r\n",
							"    ,d.physicalstartlat as orv_dispatch_physicalstartlat\r\n",
							"    ,d.physicalstartlng as orv_dispatch_physicalstartlng\r\n",
							"    ,to_timestamp(d.tsstartdepoexitapp) as orv_dispatch_tsstartdepoexitapp\r\n",
							"    ,to_timestamp(d.tsstopdepoenterapp) as orv_dispatch_tsstopdepoenterapp\r\n",
							"    ,to_timestamp(d.uncanceldate) as orv_dispatch_uncanceldate\r\n",
							"    ,d.uncancelusername as orv_dispatch_uncancelusername\r\n",
							"    ,d.lmsdebrifed as orv_dispatch_lmsdebrifed\r\n",
							"    ,d.reviseddebrief as orv_dispatch_reviseddebrief\r\n",
							"    ,d.lhtransporter as orv_dispatch_lhtransporter\r\n",
							"    ,d.triptype as orv_dispatch_triptype\r\n",
							"    ,d.startreason as orv_dispatch_startreason\r\n",
							"    ,d.route as orv_dispatch_route\r\n",
							"    ,d.tmstraileridentify as orv_dispatch_tmstraileridentify\r\n",
							"    ,d.tmstrailer2identify as orv_dispatch_tmstrailer2identify\r\n",
							"    ,d.tmscontroller as orv_dispatch_tmscontroller\r\n",
							"    ,d.routekey as orv_dispatch_routekey\r\n",
							"    ,d.courierid as orv_dispatch_courierid\r\n",
							"    ,to_timestamp(d.originalstartdate) as orv_dispatch_originalstartdate\r\n",
							"    ,to_timestamp(d.originalextarrival) as orv_dispatch_originalextarrival\r\n",
							"    ,d.recomputeoriginals as orv_dispatch_recomputeoriginals\r\n",
							"    ,d.originalextdistance as orv_dispatch_originalextdistance\r\n",
							"    ,d.originalextduration as orv_dispatch_originalextduration\r\n",
							"    ,to_timestamp(d.moddate) as orv_dispatch_moddate\r\n",
							"    ,d.tmsmode as orv_dispatch_tmsmode\r\n",
							"    ,d.driversignature as orv_dispatch_driversignature\r\n",
							"    ,v.id as orv_vehicle_id\r\n",
							"    ,v.fleetcode as orv_vehicle_fleetcode\r\n",
							"    ,v.lmsid as orv_vehicle_lmsid\r\n",
							"    ,v1.id as orv_vehicle_trailer1id\r\n",
							"    ,v1.fleetcode as orv_vehicle_trailer1fleetcode\r\n",
							"    ,v1.lmsid as orv_vehicle_trailer1lmsid\r\n",
							"    ,v2.id as orv_vehicle_trailer2id\r\n",
							"    ,v2.fleetcode as orv_vehicle_trailer2fleetcode\r\n",
							"    ,v2.lmsid as orv_vehicle_trailer2lmsid\r\n",
							"    ,lv.id as lms_vehicle_id\r\n",
							"    ,lv.uid as lms_vehicle_uid\r\n",
							"    ,lv1.id as lms_vehicle_trailer1id\r\n",
							"    ,lv1.uid as lms_vehicle_trailer1uid\r\n",
							"    ,lv2.id as lms_vehicle_trailer2id\r\n",
							"    ,lv2.uid as lms_vehicle_trailer2uid\r\n",
							"    ,u.id as orv_orvuser_id\r\n",
							"    ,u.username as orv_orvuser_username\r\n",
							"    ,u.fname as orv_orvuser_fname\r\n",
							"    ,u.lname as orv_orvuser_lname\r\n",
							"    ,u.empcode as orv_orvuser_empcode\r\n",
							"    ,u.aka as orv_orvuser_aka\r\n",
							"    ,u.gender as orv_orvuser_gender\r\n",
							"    ,u.cellno as orv_orvuser_cellno\r\n",
							"    ,u.rsaid as orv_orvuser_rsaid\r\n",
							"    ,u.passportno as orv_orvuser_passportno\r\n",
							"    ,u.idpassportno as orv_orvuser_idpassportno\r\n",
							"    ,u.nationality as orv_orvuser_nationality\r\n",
							"    ,u.birthcountry as orv_orvuser_birthcountry\r\n",
							"    ,to_timestamp(u.engageddate) as orv_orvuser_engageddate\r\n",
							"    ,to_timestamp(u.joineddate) as orv_orvuser_joineddate\r\n",
							"    ,to_timestamp(u.termindate) as orv_orvuser_termindate\r\n",
							"    ,u.status as orv_orvuser_status\r\n",
							"    ,u.depot as orv_orvuser_depot\r\n",
							"    ,u.jobcategory as orv_orvuser_jobcategory\r\n",
							"    ,u.jobtitle as orv_orvuser_jobtitle\r\n",
							"    ,u.payroll as orv_orvuser_payroll\r\n",
							"    ,u.annualsalary as orv_orvuser_annualsalary\r\n",
							"    ,to_timestamp(u.insdate) as orv_orvuser_insdate\r\n",
							"    ,vb.id as md_vehiclebasic_id\r\n",
							"    ,vb.uid as md_vehiclebasic_uid\r\n",
							"    ,vb.vehicletype as md_vehiclebasic_vehicletype\r\n",
							"    ,vb.internalexternal as md_vehiclebasic_internalexternal\r\n",
							"    ,vb.activeflag as md_vehiclebasic_activeflag\r\n",
							"    ,vb.vehiclestatus as md_vehiclebasic_vehiclestatus\r\n",
							"    ,vb.chassisnumber as md_vehiclebasic_chassisnumber\r\n",
							"    ,vb.depot as md_vehiclebasic_depot\r\n",
							"    ,vb.enginenumber as md_vehiclebasic_enginenumber\r\n",
							"    ,vb.fleetcode as md_vehiclebasic_fleetcode\r\n",
							"    ,vb.fueltype as md_vehiclebasic_fueltype\r\n",
							"    ,vb.registrationnumber as md_vehiclebasic_registrationnumber\r\n",
							"    ,vb.vehicleapplication as md_vehiclebasic_vehicleapplication\r\n",
							"    ,vb.vehiclebodymake as md_vehiclebasic_vehiclebodymake\r\n",
							"    ,vb.vehiclecolour as md_vehiclebasic_vehiclecolour\r\n",
							"    ,vb.vehiclemake as md_vehiclebasic_vehiclemake\r\n",
							"    ,vb.vehiclemodel as md_vehiclebasic_vehiclemodel\r\n",
							"    ,vb.vehicleseries as md_vehiclebasic_vehicleseries\r\n",
							"    ,vb.year as md_vehiclebasic_year\r\n",
							"    ,vb.vehicleownerid as md_vehiclebasic_vehicleownerid\r\n",
							"    ,vb.vehicleowner as md_vehiclebasic_vehicleowner\r\n",
							"    ,vb.staffvehicleflag as md_vehiclebasic_staffvehicleflag\r\n",
							"    ,vb.vehicletrailersize as md_vehiclebasic_vehicletrailersize\r\n",
							"    ,vb.vehicletrailertype as md_vehiclebasic_vehicletrailertype\r\n",
							"    ,vb.vehicleetollclass as md_vehiclebasic_vehicleetollclass\r\n",
							"    ,vb.brn as md_vehiclebasic_brn\r\n",
							"    ,vb.brnnumber as md_vehiclebasic_brnnumber\r\n",
							"    ,vb.vehicleregisterno as md_vehiclebasic_vehicleregisterno\r\n",
							"    ,to_timestamp(vb.insdate) as md_vehiclebasic_insdate\r\n",
							"    ,vb.insby as md_vehiclebasic_insby\r\n",
							"    ,vb.islinehaulvehicle as md_vehiclebasic_islinehaulvehicle\r\n",
							"    ,vb.internalheight as md_vehiclebasic_internalheight\r\n",
							"    ,vb.internallength as md_vehiclebasic_internallength\r\n",
							"    ,vb.internalvolume as md_vehiclebasic_internalvolume\r\n",
							"    ,vb.internalwidth as md_vehiclebasic_internalwidth\r\n",
							"    ,to_timestamp(vb.moddate) as md_vehiclebasic_moddate\r\n",
							"    ,vb.trailerflag as md_vehiclebasic_trailerflag\r\n",
							"    ,vb.workflowstatus as md_vehiclebasic_workflowstatus\r\n",
							"    ,to_timestamp(vb.approveddate) as md_vehiclebasic_approveddate\r\n",
							"    ,vb1.id as md_vehiclebasic_trailer1id\r\n",
							"    ,vb1.uid as md_vehiclebasic_trailer1uid\r\n",
							"    ,vb1.vehicletype as md_vehiclebasic_trailer1vehicletype\r\n",
							"    ,vb1.internalexternal as md_vehiclebasic_trailer1internalexternal\r\n",
							"    ,vb1.activeflag as md_vehiclebasic_trailer1activeflag\r\n",
							"    ,vb1.vehiclestatus as md_vehiclebasic_trailer1vehiclestatus\r\n",
							"    ,vb1.chassisnumber as md_vehiclebasic_trailer1chassisnumber\r\n",
							"    ,vb1.depot as md_vehiclebasic_trailer1depot\r\n",
							"    ,vb1.enginenumber as md_vehiclebasic_trailer1enginenumber\r\n",
							"    ,vb1.fleetcode as md_vehiclebasic_trailer1fleetcode\r\n",
							"    ,vb1.fueltype as md_vehiclebasic_trailer1fueltype\r\n",
							"    ,vb1.registrationnumber as md_vehiclebasic_trailer1registrationnumber\r\n",
							"    ,vb1.vehicleapplication as md_vehiclebasic_trailer1vehicleapplication\r\n",
							"    ,vb1.vehiclebodymake as md_vehiclebasic_trailer1vehiclebodymake\r\n",
							"    ,vb1.vehiclecolour as md_vehiclebasic_trailer1vehiclecolour\r\n",
							"    ,vb1.vehiclemake as md_vehiclebasic_trailer1vehiclemake\r\n",
							"    ,vb1.vehiclemodel as md_vehiclebasic_trailer1vehiclemodel\r\n",
							"    ,vb1.vehicleseries as md_vehiclebasic_trailer1vehicleseries\r\n",
							"    ,vb1.year as md_vehiclebasic_trailer1year\r\n",
							"    ,vb1.vehicleownerid as md_vehiclebasic_trailer1vehicleownerid\r\n",
							"    ,vb1.vehicleowner as md_vehiclebasic_trailer1vehicleowner\r\n",
							"    ,vb1.staffvehicleflag as md_vehiclebasic_trailer1staffvehicleflag\r\n",
							"    ,vb1.vehicletrailersize as md_vehiclebasic_trailer1vehicletrailersize\r\n",
							"    ,vb1.vehicletrailertype as md_vehiclebasic_trailer1vehicletrailertype\r\n",
							"    ,vb1.vehicleetollclass as md_vehiclebasic_trailer1vehicleetollclass\r\n",
							"    ,vb1.brn as md_vehiclebasic_trailer1brn\r\n",
							"    ,vb1.brnnumber as md_vehiclebasic_trailer1brnnumber\r\n",
							"    ,vb1.vehicleregisterno as md_vehiclebasic_trailer1vehicleregisterno\r\n",
							"    ,to_timestamp(vb1.insdate) as md_vehiclebasic_trailer1insdate\r\n",
							"    ,vb1.insby as md_vehiclebasic_trailer1insby\r\n",
							"    ,vb1.islinehaulvehicle as md_vehiclebasic_trailer1islinehaulvehicle\r\n",
							"    ,vb1.internalheight as md_vehiclebasic_trailer1internalheight\r\n",
							"    ,vb1.internallength as md_vehiclebasic_trailer1internallength\r\n",
							"    ,vb1.internalvolume as md_vehiclebasic_trailer1internalvolume\r\n",
							"    ,vb1.internalwidth as md_vehiclebasic_trailer1internalwidth\r\n",
							"    ,to_timestamp(vb1.moddate) as md_vehiclebasic_trailer1moddate\r\n",
							"    ,vb1.trailerflag as md_vehiclebasic_trailer1trailerflag\r\n",
							"    ,vb1.workflowstatus as md_vehiclebasic_trailer1workflowstatus\r\n",
							"    ,to_timestamp(vb1.approveddate) as md_vehiclebasic_trailer1approveddate\r\n",
							"    ,vb2.id as md_vehiclebasic_trailer2id\r\n",
							"    ,vb2.uid as md_vehiclebasic_trailer2uid\r\n",
							"    ,vb2.vehicletype as md_vehiclebasic_trailer2vehicletype\r\n",
							"    ,vb2.internalexternal as md_vehiclebasic_trailer2internalexternal\r\n",
							"    ,vb2.activeflag as md_vehiclebasic_trailer2activeflag\r\n",
							"    ,vb2.vehiclestatus as md_vehiclebasic_trailer2vehiclestatus\r\n",
							"    ,vb2.chassisnumber as md_vehiclebasic_trailer2chassisnumber\r\n",
							"    ,vb2.depot as md_vehiclebasic_trailer2depot\r\n",
							"    ,vb2.enginenumber as md_vehiclebasic_trailer2enginenumber\r\n",
							"    ,vb2.fleetcode as md_vehiclebasic_trailer2fleetcode\r\n",
							"    ,vb2.fueltype as md_vehiclebasic_trailer2fueltype\r\n",
							"    ,vb2.registrationnumber as md_vehiclebasic_trailer2registrationnumber\r\n",
							"    ,vb2.vehicleapplication as md_vehiclebasic_trailer2vehicleapplication\r\n",
							"    ,vb2.vehiclebodymake as md_vehiclebasic_trailer2vehiclebodymake\r\n",
							"    ,vb2.vehiclecolour as md_vehiclebasic_trailer2vehiclecolour\r\n",
							"    ,vb2.vehiclemake as md_vehiclebasic_trailer2vehiclemake\r\n",
							"    ,vb2.vehiclemodel as md_vehiclebasic_trailer2vehiclemodel\r\n",
							"    ,vb2.vehicleseries as md_vehiclebasic_trailer2vehicleseries\r\n",
							"    ,vb2.year as md_vehiclebasic_trailer2year\r\n",
							"    ,vb2.vehicleownerid as md_vehiclebasic_trailer2vehicleownerid\r\n",
							"    ,vb2.vehicleowner as md_vehiclebasic_trailer2vehicleowner\r\n",
							"    ,vb2.staffvehicleflag as md_vehiclebasic_trailer2staffvehicleflag\r\n",
							"    ,vb2.vehicletrailersize as md_vehiclebasic_trailer2vehicletrailersize\r\n",
							"    ,vb2.vehicletrailertype as md_vehiclebasic_trailer2vehicletrailertype\r\n",
							"    ,vb2.vehicleetollclass as md_vehiclebasic_trailer2vehicleetollclass\r\n",
							"    ,vb2.brn as md_vehiclebasic_trailer2brn\r\n",
							"    ,vb2.brnnumber as md_vehiclebasic_trailer2brnnumber\r\n",
							"    ,vb2.vehicleregisterno as md_vehiclebasic_trailer2vehicleregisterno\r\n",
							"    ,to_timestamp(vb2.insdate) as md_vehiclebasic_trailer2insdate\r\n",
							"    ,vb2.insby as md_vehiclebasic_trailer2insby\r\n",
							"    ,vb2.islinehaulvehicle as md_vehiclebasic_trailer2islinehaulvehicle\r\n",
							"    ,vb2.internalheight as md_vehiclebasic_trailer2internalheight\r\n",
							"    ,vb2.internallength as md_vehiclebasic_trailer2internallength\r\n",
							"    ,vb2.internalvolume as md_vehiclebasic_trailer2internalvolume\r\n",
							"    ,vb2.internalwidth as md_vehiclebasic_trailer2internalwidth\r\n",
							"    ,to_timestamp(vb2.moddate) as md_vehiclebasic_trailer2moddate\r\n",
							"    ,vb2.trailerflag as md_vehiclebasic_trailer2trailerflag\r\n",
							"    ,vb2.workflowstatus as md_vehiclebasic_trailer2workflowstatus\r\n",
							"    ,to_timestamp(vb2.approveddate) as md_vehiclebasic_trailer2approveddate\r\n",
							"    ,dpi.id as tms_driverpayitem_id\r\n",
							"    ,dpi.driverid as tms_driverpayitem_driverid\r\n",
							"    ,dpi.tripid as tms_driverpayitem_tripid\r\n",
							"    ,dpi.triprate as tms_driverpayitem_triprate\r\n",
							"    ,dpi.mealrate as tms_driverpayitem_mealrate\r\n",
							"    ,dpi.sleepoverrate as tms_driverpayitem_sleepoverrate\r\n",
							"    ,dpi.airtimerate as tms_driverpayitem_airtimerate\r\n",
							"    ,dpi.linkrate as tms_driverpayitem_linkrate\r\n",
							"    ,dpi.totalrate as tms_driverpayitem_totalrate\r\n",
							"    ,dpi.routeid as tms_driverpayitem_routeid\r\n",
							"    ,dpi.routename as tms_driverpayitem_routename\r\n",
							"    ,to_timestamp(dpi.insdate) as tms_driverpayitem_insdate\r\n",
							"    ,to_timestamp(dpi.moddate) as tms_driverpayitem_moddate\r\n",
							"    ,dpi.horse as tms_driverpayitem_horse\r\n",
							"    ,dpi.trailers as tms_driverpayitem_trailers\r\n",
							"    ,dpi.linkused as tms_driverpayitem_linkused\r\n",
							"    ,dpi.manualadjustment as tms_driverpayitem_manualadjustment\r\n",
							"    ,dpi.editby as tms_driverpayitem_editby\r\n",
							"    ,dpi.drivername as tms_driverpayitem_drivername\r\n",
							"    ,to_timestamp(dpi.dispatchdate) as tms_driverpayitem_dispatchdate\r\n",
							"    ,dpi.bookings as tms_driverpayitem_bookings\r\n",
							"    ,dpi.employeecode as tms_driverpayitem_employeecode\r\n",
							"    ,dpi.originatedfrom as tms_driverpayitem_originatedfrom\r\n",
							"    ,dpi.reportid as tms_driverpayitem_reportid\r\n",
							"    ,f.peaksurchagrebuy as tms_financedata_aggrpeaksurchagrebuy\r\n",
							"    ,f.peaksurchagresell as tms_financedata_aggrpeaksurchagresell\r\n",
							"    ,f.manualentryroadhaulsell as tms_financedata_aggrmanualentryroadhaulsell\r\n",
							"    ,f.manualentryahocsell as tms_financedata_aggrmanualentryahocsell\r\n",
							"    ,f.systemfuellevy as tms_financedata_aggrsystemfuellevy\r\n",
							"    ,f.systemratefuellevy as tms_financedata_aggrsystemratefuellevy\r\n",
							"    ,f.systemratefuelexlevy as tms_financedata_aggrsystemratefuelexlevy\r\n",
							"    ,f.systemratefuelinclevy as tms_financedata_aggrsystemratefuelinclevy\r\n",
							"    ,f.systemsellrate as tms_financedata_aggrsystemsellrate\r\n",
							"    ,f.totalsellrate as tms_financedata_aggrtotalsellrate\r\n",
							"    ,f.totalbuyrate as tms_financedata_aggrtotalbuyrate\r\n",
							"\r\n",
							"FROM publictrip t\r\n",
							"LEFT JOIN publicdispatch d on d.lmsid = t.id and d.vehicletype = 2\r\n",
							"LEFT JOIN publicvehicle v on v.id = d.vid\r\n",
							"LEFT JOIN publicvehicle v1 on v1.id = d.trailer\r\n",
							"LEFT JOIN publicvehicle v2 on v2.id = d.trailer2\r\n",
							"LEFT JOIN dbovehicle lv on lv.id = v.lmsid \r\n",
							"LEFT JOIN dbovehicle lv1 on lv1.id = v1.lmsid \r\n",
							"LEFT JOIN dbovehicle lv2 on lv2.id = v2.lmsid \r\n",
							"LEFT JOIN publicorvuser u on u.id = d.did\r\n",
							"LEFT JOIN dbovehiclebasic vb on vb.uid = lv.uid\r\n",
							"LEFT JOIN dbovehiclebasic vb1 on vb1.uid = lv1.uid\r\n",
							"LEFT JOIN dbovehiclebasic vb2 on vb2.uid = lv2.uid\r\n",
							"LEFT JOIN publicdriverpayitem dpi on dpi.tripid = t.id\r\n",
							"LEFT JOIN ssttpublicfinancedata_tmp f on f.tripid = t.id \r\n",
							"\"\"\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrip.createOrReplaceTempView(\"ssttrip\")"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ssttrip.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrip.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 24
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTWaybill')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/ARCHIVE/01 SEMI STRUCTURED/03_LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c04abbfc-343e-4ab9-82d5-1b1fce8a9ce4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dbowaybill LMS Table\r\n",
							"# dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"# dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbocustomer LMS Table\r\n",
							"# dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"# dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbousers LMS Table\r\n",
							"# dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"# dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_delayreason LMS Table\r\n",
							"# dbodb_delayreason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_delayreason.parquet', format='parquet')\r\n",
							"# dbodb_delayreason.createOrReplaceTempView(\"dbodb_delayreason\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_reasondetail LMS Table\r\n",
							"# dbodb_reasondetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_reasondetail.parquet', format='parquet')\r\n",
							"# dbodb_reasondetail.createOrReplaceTempView(\"dbodb_reasondetail\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_reasongroup LMS Table\r\n",
							"# dbodb_reasongroup = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_reasongroup.parquet', format='parquet')\r\n",
							"# dbodb_reasongroup.createOrReplaceTempView(\"dbodb_reasongroup\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_deliverystatus LMS Table\r\n",
							"# dbodb_deliverystatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_deliverystatus.parquet', format='parquet')\r\n",
							"# dbodb_deliverystatus.createOrReplaceTempView(\"dbodb_deliverystatus\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_mobilefeedbackreason LMS Table\r\n",
							"# dbodb_mobilefeedbackreason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_mobilefeedbackreason.parquet', format='parquet')\r\n",
							"# dbodb_mobilefeedbackreason.createOrReplaceTempView(\"dbodb_mobilefeedbackreason\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdelivery ORV Table\r\n",
							"# publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"# publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicmall ORV Table\r\n",
							"# publicmall = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicmall.parquet', format='parquet')\r\n",
							"# publicmall.createOrReplaceTempView(\"publicmall\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publiccustomer ORV Table\r\n",
							"# publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiccustomer.parquet', format='parquet')\r\n",
							"# publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstparcelbywaybill LMS Table\r\n",
							"# sstparcelbywaybill = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbywaybill.parquet', format='parquet')\r\n",
							"# sstparcelbywaybill.createOrReplaceTempView(\"sstparcelbywaybill\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"sstwaybill = spark.sql(\"\"\"\r\n",
							"SELECT \r\n",
							"\r\n",
							"    w.id as lms_waybill_id\r\n",
							"    ,w.date as lms_waybill_date\r\n",
							"    ,w.bservice as lms_waybill_bservice\r\n",
							"    ,w.cservice as lms_waybill_cservice\r\n",
							"    ,w.originid as lms_waybill_originid\r\n",
							"    ,w.defuser as lms_waybill_defuser\r\n",
							"    ,w.distance as lms_waybill_distance\r\n",
							"    ,w.courierid as lms_waybill_courierid\r\n",
							"    ,w.courierwbno as lms_waybill_courierwbno\r\n",
							"    ,w.billtype as lms_waybill_billtype\r\n",
							"    ,w.capdate as lms_waybill_capdate\r\n",
							"    ,w.surcharge as lms_waybill_surcharge\r\n",
							"    ,w.insurance as lms_waybill_insurance\r\n",
							"    ,w.tax as lms_waybill_tax\r\n",
							"    ,w.totalcharge as lms_waybill_totalcharge\r\n",
							"    ,w.destinationname as lms_waybill_destinationname\r\n",
							"    ,w.ordertype as lms_waybill_ordertype\r\n",
							"    ,w.pickupcustid as lms_waybill_pickupcustid\r\n",
							"    ,w.delivercustid as lms_waybill_delivercustid\r\n",
							"    ,w.billto as lms_waybill_billto\r\n",
							"    ,w.claimable as lms_waybill_claimable\r\n",
							"    ,w.override as lms_waybill_override\r\n",
							"    ,w.vehiclecapacity as lms_waybill_vehiclecapacity\r\n",
							"    ,w.custpoddate as lms_waybill_custpoddate\r\n",
							"    ,w.poddate as lms_waybill_poddate\r\n",
							"    ,w.signee as lms_waybill_signee\r\n",
							"    ,w.grvno as lms_waybill_grvno\r\n",
							"    ,w.endorsements as lms_waybill_endorsements\r\n",
							"    ,w.billcust as lms_waybill_billcust\r\n",
							"    ,w.courier_from as lms_waybill_courier_from\r\n",
							"    ,w.courier_to as lms_waybill_courier_to\r\n",
							"    ,w.charge as lms_waybill_charge\r\n",
							"    ,w.tvalue as lms_waybill_tvalue\r\n",
							"    ,w.inservice as lms_waybill_inservice\r\n",
							"    ,w.dbtotalcharge as lms_waybill_dbtotalcharge\r\n",
							"    ,w.loadid as lms_waybill_loadid\r\n",
							"    ,w.mrpflag as lms_waybill_mrpflag\r\n",
							"    ,w.printed as lms_waybill_printed\r\n",
							"    ,w.sreasonid as lms_waybill_sreasonid\r\n",
							"    ,w.minkg as lms_waybill_minkg\r\n",
							"    ,w.minrate as lms_waybill_minrate\r\n",
							"    ,w.addrate as lms_waybill_addrate\r\n",
							"    ,w.docfees as lms_waybill_docfees\r\n",
							"    ,w.volumetric as lms_waybill_volumetric\r\n",
							"    ,w.hasprinted as lms_waybill_hasprinted\r\n",
							"    ,w.site as lms_waybill_site\r\n",
							"    ,w.deliveryno as lms_waybill_deliveryno\r\n",
							"    ,w.fuellevy as lms_waybill_fuellevy\r\n",
							"    ,w.totfuellevy as lms_waybill_totfuellevy\r\n",
							"    ,w.custaccid as lms_waybill_custaccid\r\n",
							"    ,w.podadded as lms_waybill_podadded\r\n",
							"    ,w.scanned as lms_waybill_scanned\r\n",
							"    ,w.userid as lms_waybill_userid\r\n",
							"    ,w.autoprinted as lms_waybill_autoprinted\r\n",
							"    ,w.poduserid as lms_waybill_poduserid\r\n",
							"    ,w.scanuserid as lms_waybill_scanuserid\r\n",
							"    ,w.cref as lms_waybill_cref\r\n",
							"    ,w.ushort as lms_waybill_ushort\r\n",
							"    ,w.delays as lms_waybill_delays\r\n",
							"    ,w.debriefed as lms_waybill_debriefed\r\n",
							"    ,w.debriefdt as lms_waybill_debriefdt\r\n",
							"    ,w.dbctnsret as lms_waybill_dbctnsret\r\n",
							"    ,w.uploaded as lms_waybill_uploaded\r\n",
							"    ,w.serviceexclude as lms_waybill_serviceexclude\r\n",
							"    ,w.failed as lms_waybill_failed\r\n",
							"    ,w.delayreasonid as lms_waybill_delayreasonid\r\n",
							"    ,w.notdebrievreasonid as lms_waybill_notdebrievreasonid\r\n",
							"    ,w.deliverystatid as lms_waybill_deliverystatid\r\n",
							"    ,w.reasongroupid as lms_waybill_reasongroupid\r\n",
							"    ,w.emailcust as lms_waybill_emailcust\r\n",
							"    ,w.mobileissuereportedid as lms_waybill_mobileissuereportedid\r\n",
							"    ,w.ismobile as lms_waybill_ismobile\r\n",
							"    ,bc.id as lms_bcustomer_id\r\n",
							"    ,bc.name as lms_bcustomer_name\r\n",
							"    ,pc.id as lms_pcustomer_id\r\n",
							"    ,pc.name as lms_pcustomer_name\r\n",
							"    ,dc.id as lms_dcustomer_id\r\n",
							"    ,dc.name as lms_dcustomer_name\r\n",
							"    ,u.id as lms_users_id\r\n",
							"    ,u.fullname as lms_users_fullname\r\n",
							"    ,u.site as lms_users_site\r\n",
							"    ,pu.id as lms_podusers_id\r\n",
							"    ,pu.fullname as lms_podusers_fullname\r\n",
							"    ,pu.site as lms_podusers_site\r\n",
							"    ,su.id as lms_scanusers_id\r\n",
							"    ,su.fullname as lms_scanusers_fullname\r\n",
							"    ,su.site as lms_scanusers_site\r\n",
							"    ,dr.id as lms_delayreason_id\r\n",
							"    ,dr.description as lms_delayreason_description\r\n",
							"    ,mfr.id as lms_mobilefeedbackreason_id\r\n",
							"    ,mfr.description as lms_mobilefeedbackreason_description\r\n",
							"    ,rd.id as lms_reasondetail_id\r\n",
							"    ,rd.description as lms_reasondetail_description\r\n",
							"    ,rd.db_reasongroupid as lms_reasondetail_reasongroupid\r\n",
							"    ,rg.id as lms_reasongroup_id\r\n",
							"    ,rg.description as lms_reasongroup_description\r\n",
							"    ,ds.id as lms_deliverystatus_id\r\n",
							"    ,ds.description as lms_deliverystatus_description\r\n",
							"    ,pbw.lms_parcelbywaybill_waybillid as lms_parcelbywaybill_waybillid\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrweight as lms_parcelbywaybill_aggrweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrchargeweight as lms_parcelbywaybill_aggrchargeweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrvolweight as lms_parcelbywaybill_aggrvolweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrvolumiserweight as lms_parcelbywaybill_aggrvolumiserweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrmaxweight as lms_parcelbywaybill_aggrmaxweight\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrnoparcels as lms_parcelbywaybill_aggrnoparcels\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrweightexclspecdel as lms_parcelbywaybill_aggrweightexclspecdel\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrchargeweightexclspecdel as lms_parcelbywaybill_aggrchargeweightexclspecdel\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrvolweightexclspecdel as lms_parcelbywaybill_aggrvolweightexclspecdel\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrvolumiserweightexclspecdel as lms_parcelbywaybill_aggrvolumiserweightexclspecdel\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrmaxweightexclspecdel as lms_parcelbywaybill_aggrmaxweightexclspecdel\r\n",
							"    ,pbw.lms_parcelbywaybill_aggrnoparcelsexclspecdel as lms_parcelbywaybill_aggrnoparcelsexclspecdel\r\n",
							"    ,d.id as orv_delivery_id\r\n",
							"    ,d.did as orv_delivery_dispatchid\r\n",
							"    ,d.waybillid as orv_delivery_waybillid\r\n",
							"    ,d.address as orv_delivery_address\r\n",
							"    ,d.town as orv_delivery_town\r\n",
							"    ,d.province as orv_delivery_province\r\n",
							"    ,d.country as orv_delivery_country\r\n",
							"    ,d.lat as orv_delivery_lat\r\n",
							"    ,d.lng as orv_delivery_lng\r\n",
							"    ,d.placeid as orv_delivery_placeid\r\n",
							"    ,d.what3words as orv_delivery_what3words\r\n",
							"    ,d.zipcode as orv_delivery_zipcode\r\n",
							"    ,to_timestamp(d.eta) as orv_delivery_eta\r\n",
							"    ,to_timestamp(d.actualeta) as orv_delivery_actualeta\r\n",
							"    ,to_timestamp(d.deliverydate) as orv_delivery_deliverydate\r\n",
							"    ,to_timestamp(d.deliverby) as orv_delivery_deliverby\r\n",
							"    ,d.deliveryorder as orv_delivery_deliveryorder\r\n",
							"    ,to_timestamp(d.tsgeofenceenter) as orv_delivery_tsgeofenceenter\r\n",
							"    ,to_timestamp(d.tsscanningstart) as orv_delivery_tsscanningstart\r\n",
							"    ,to_timestamp(d.tsscanningstop) as orv_delivery_tsscanningstop\r\n",
							"    ,to_timestamp(d.tspodsignature) as orv_delivery_tspodsignature\r\n",
							"    ,d.aid as orv_delivery_aid\r\n",
							"    ,d.numprcls as orv_delivery_numprcls\r\n",
							"    ,d.geocodingstatus as orv_delivery_geocodingstatus\r\n",
							"    ,to_timestamp(d.skipdate) as orv_delivery_skipdate\r\n",
							"    ,d.skipreason as orv_delivery_skipreason\r\n",
							"    ,d.status as orv_delivery_status\r\n",
							"    ,d.partialmatch as orv_delivery_partialmatch\r\n",
							"    ,d.approximated as orv_delivery_approximated\r\n",
							"    ,d.lmsorder as orv_delivery_lmsorder\r\n",
							"    ,d.optimizedorder as orv_delivery_optimizedorder\r\n",
							"    ,d.seal as orv_delivery_seal\r\n",
							"    ,d.customerinvoice as orv_delivery_customerinvoice\r\n",
							"    ,d.customerdn as orv_delivery_customerdn\r\n",
							"    ,d.grv as orv_delivery_grv\r\n",
							"    ,d.chepslip as orv_delivery_chepslip\r\n",
							"    ,d.cleandelivery as orv_delivery_cleandelivery\r\n",
							"    ,d.trackingcode as orv_delivery_trackingcode\r\n",
							"    ,d.mode as orv_delivery_mode\r\n",
							"    ,d.customorder as orv_delivery_customorder\r\n",
							"    ,d.verified as orv_delivery_verified\r\n",
							"    ,d.altered as orv_delivery_altered\r\n",
							"    ,d.orderid as orv_delivery_orderid\r\n",
							"    ,d.mergeid as orv_delivery_mergeid\r\n",
							"    ,d.orderref as orv_delivery_orderref\r\n",
							"    ,d.drivernote as orv_delivery_drivernote\r\n",
							"    ,d.timedefinite as orv_delivery_timedefinite\r\n",
							"    ,d.orvcode as orv_delivery_orvcode\r\n",
							"    ,d.vaid as orv_delivery_vaid\r\n",
							"    ,to_timestamp(d.delegatedate) as orv_delivery_delegatedate\r\n",
							"    ,d.delegatemode as orv_delivery_delegatemode\r\n",
							"    ,d.debriefmode as orv_delivery_debriefmode\r\n",
							"    ,d.debriefed as orv_delivery_debriefed\r\n",
							"    ,to_timestamp(d.insdate) as orv_delivery_insdate\r\n",
							"    ,d.reviseddebrief as orv_delivery_reviseddebrief\r\n",
							"    ,d.lmsdebriefed as orv_delivery_lmsdebriefed\r\n",
							"    ,to_timestamp(d.uncanceldate) as orv_delivery_uncanceldate\r\n",
							"    ,to_timestamp(d.podlaterdate) as orv_delivery_podlaterdate\r\n",
							"    ,to_timestamp(d.podmanualdate) as orv_delivery_podmanualdate\r\n",
							"    ,d.manualdebriefreason as orv_delivery_manualdebriefreason\r\n",
							"    ,d.submanualdebriefreason as orv_delivery_submanualdebriefreason\r\n",
							"    ,d.outofgeofencereason as orv_delivery_outofgeofencereason\r\n",
							"    ,to_timestamp(d.tsentergeofenceapp) as orv_delivery_tsentergeofenceapp\r\n",
							"    ,to_timestamp(d.tsexitgeofenceapp) as orv_delivery_tsexitgeofenceapp\r\n",
							"    ,d.comebacklater as orv_delivery_comebacklater\r\n",
							"    ,d.uncancelusername as orv_delivery_uncancelusername\r\n",
							"    ,d.cref as orv_delivery_cref\r\n",
							"    ,d.division as orv_delivery_division\r\n",
							"    ,d.descriptionofgoods as orv_delivery_descriptionofgoods\r\n",
							"    ,d.skiplng as orv_delivery_skiplng\r\n",
							"    ,d.skiplat as orv_delivery_skiplat\r\n",
							"    ,d.courierid as orv_delivery_courierid\r\n",
							"    ,d.posreason as orv_delivery_posreason\r\n",
							"    ,to_timestamp(d.moddate) as orv_delivery_moddate\r\n",
							"    ,d.mallid as orv_delivery_mallid\r\n",
							"    ,d.mallgid as orv_delivery_mallgid\r\n",
							"    ,d.lmsidskipreason as orv_delivery_lmsidskipreason\r\n",
							"    ,d.deleteforimport as orv_delivery_deleteforimport\r\n",
							"    ,d.podoutofgeofence as orv_delivery_podoutofgeofence\r\n",
							"    ,d.originalcustomerid as orv_delivery_originalcustomerid\r\n",
							"    ,c.id as orv_originalcustomer_id\r\n",
							"    ,c.name as orv_originalcustomer_name\r\n",
							"    ,m.id as orv_mall_id\r\n",
							"    ,m.mallname as orv_mall_mallname\r\n",
							"    ,m.branchname as orv_mall_branchname\r\n",
							"    ,m.gpretailer as orv_mall_gpretailer\r\n",
							"    ,m.highvoldelivery as orv_mall_highvoldelivery\r\n",
							"    ,m.stripmall as orv_mall_stripmall\r\n",
							"    ,m.standalonestore as orv_mall_standalonestore\r\n",
							"    ,m.streetsidestore as orv_mall_streetsidestore\r\n",
							"    ,m.dedicatedrouted as orv_mall_dedicatedrouted\r\n",
							"    ,to_timestamp(m.insdate) as orv_mall_insdate\r\n",
							"    ,m.address as orv_mall_address\r\n",
							"    ,m.deleted as orv_mall_deleted\r\n",
							"    ,m.lat as orv_mall_lat\r\n",
							"    ,m.lng as orv_mall_lng\r\n",
							"\r\n",
							"FROM dbowaybill w\r\n",
							"LEFT JOIN dbocustomer bc on bc.id = w.billcust\r\n",
							"LEFT JOIN dbocustomer pc on pc.id = w.pickupcustid\r\n",
							"LEFT JOIN dbocustomer dc on dc.id = w.delivercustid\r\n",
							"LEFT JOIN dbousers u on u.id = w.userid\r\n",
							"LEFT JOIN dbousers pu on pu.id = w.poduserid\r\n",
							"LEFT JOIN dbousers su on su.id = w.scanuserid\r\n",
							"LEFT JOIN dbodb_delayreason dr on dr.id = w.delayreasonid\r\n",
							"LEFT JOIN dbodb_reasondetail rd on rd.id = w.notdebrievreasonid\r\n",
							"LEFT JOIN dbodb_reasongroup rg on rg.id = w.reasongroupid\r\n",
							"LEFT JOIN dbodb_deliverystatus ds on ds.id = w.deliverystatid\r\n",
							"LEFT JOIN dbodb_mobilefeedbackreason mfr on mfr.id = w.mobileissuereportedid\r\n",
							"LEFT JOIN publicdelivery d on d.waybillid = w.id AND d.mode = 'deliver'\r\n",
							"LEFT JOIN publicmall m on m.id = d.mallid\r\n",
							"LEFT JOIN publiccustomer c on c.id = d.originalcustomerid\r\n",
							"LEFT JOIN sstparcelbywaybill pbw on pbw.lms_parcelbywaybill_waybillid = w.id\r\n",
							"\"\"\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstwaybill.createOrReplaceTempView(\"sstwaybill\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstwaybill.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstwaybill.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 9
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SSTWaybilsPerParcel')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/ARCHIVE/01 SEMI STRUCTURED/03_LMS + ORV"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "210bd023-5a3c-4260-a34d-5cb15a4192a4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the sstparcelunion LMS Table\r\n",
							"# sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"# sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"# #Create DataFrame for the ssttrackunion LMS Table\r\n",
							"# ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"# ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbowaybillsperparcel LMS Table\r\n",
							"# dbowaybillsperparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybillsperparcel.parquet', format='parquet')\r\n",
							"# dbowaybillsperparcel.createOrReplaceTempView(\"dbowaybillsperparcel\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbowaybill LMS Table\r\n",
							"# dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"# dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstwaybillsperparcelunion_tmp1\r\n",
							"AS\r\n",
							"SELECT \r\n",
							"    p.id as parcelid,\r\n",
							"    p.waybillid\r\n",
							"FROM SSTParcelUnion p\r\n",
							"UNION ALL\r\n",
							"SELECT \r\n",
							"    w.parcelid,\r\n",
							"    w.waybillid\r\n",
							"FROM dbowaybillsperparcel w"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"sstwaybillsperparcel\r\n",
							"AS\r\n",
							"SELECT DISTINCT\r\n",
							"    parcelid as lms_waybillsperparcel_parcelid,\r\n",
							"    waybillid as lms_waybillsperparcel_waybillid,\r\n",
							"    b.loadid as lms_waybillsperparcel_loadid\r\n",
							"FROM sstwaybillsperparcelunion_tmp1 a\r\n",
							"LEFT JOIN dbowaybill b on b.id = a.waybillid\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstwaybillsperparcel = spark.sql(\"SELECT * FROM sstwaybillsperparcel\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstwaybillsperparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstwaybillsperparcel.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SST_RunOrder')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/01 SEMI-STRUCTURED"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "8",
						"spark.autotune.trackingId": "e249d54a-d2d4-4c2b-bb0b-33a9c946534b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						}
					},
					"sessionKeepAliveTimeout": 1
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**<mark>RUN UNION NOTEBOOKS</mark>**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dboconsignment_archive LMS Table\r\n",
							"dboconsignment_archive = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboconsignment_archive.parquet', format='parquet')\r\n",
							"dboconsignment_archive.createOrReplaceTempView(\"dboconsignment_archive\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboconsignment LMS Table\r\n",
							"dboconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboconsignment.parquet', format='parquet')\r\n",
							"dboconsignment.createOrReplaceTempView(\"dboconsignment\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/01_LMS Union/SSTConsignmentUnion"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstconsignmentunion.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dboparcel_archive LMS Table\r\n",
							"dboparcel_archive = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparcel_archive.parquet', format='parquet')\r\n",
							"dboparcel_archive.createOrReplaceTempView(\"dboparcel_archive\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboparcel LMS Table\r\n",
							"dboparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparcel.parquet', format='parquet')\r\n",
							"dboparcel.createOrReplaceTempView(\"dboparcel\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboorder LMS Table\r\n",
							"dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"dboorder.createOrReplaceTempView(\"dboorder\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/01_LMS Union/SSTParcelUnion"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelunion.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dbotrack_archive LMS Table\r\n",
							"dbotrack_archive = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbotrack_archive.parquet', format='parquet')\r\n",
							"dbotrack_archive.createOrReplaceTempView(\"dbotrack_archive\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbotrack LMS Table\r\n",
							"dbotrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbotrack.parquet', format='parquet')\r\n",
							"dbotrack.createOrReplaceTempView(\"dbotrack\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelunion LMS Table\r\n",
							"sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/01_LMS Union/SSTTrackUnion"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ssttrackunion.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**<mark>RUN AGGR NOTEBOOKS</mark>**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Create SSTParcelByOrder \r\n",
							"# Create SSTParcelByWaybill\r\n",
							"# Create SSTParcelByConsignment\r\n",
							"# Create SSTParcelByLoad\r\n",
							"\r\n",
							"# IN DEV StorageAccountRead = StorageAccountWrite for sstparcelunion and ssttrackunion as these are writing to dev\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelunion LMS Table\r\n",
							"sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the ssttrackunion LMS Table\r\n",
							"ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboorder LMS Table\r\n",
							"dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"dboorder.createOrReplaceTempView(\"dboorder\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/01 SEMI-STRUCTURED/02_LMS Aggr/SSTAggrParcelByX"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sstparcelbyorder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyorder.parquet', mode = \"overwrite\")\r\n",
							"sstparcelbywaybill.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbywaybill.parquet', mode = \"overwrite\")\r\n",
							"sstparcelbyconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyconsignment.parquet', mode = \"overwrite\")\r\n",
							"sstparcelbyload.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyload.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"**<mark>RUN LMS+ORV NOTEBOOKS</mark>**"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the dbocollect LMS Table\r\n",
							"# dbocollect = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocollect.parquet', format='parquet')\r\n",
							"# dbocollect.createOrReplaceTempView(\"dbocollect\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbocustomer LMS Table\r\n",
							"# dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"# dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbousers LMS Table\r\n",
							"# dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"# dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolocation LMS Table\r\n",
							"# dbolocation= spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"# dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_collectstatus LMS Table\r\n",
							"# dbodb_collectstatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_collectstatus.parquet', format='parquet')\r\n",
							"# dbodb_collectstatus.createOrReplaceTempView(\"dbodb_collectstatus\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdraftcollection ORV Table\r\n",
							"# publicdraftcollection = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdraftcollection.parquet', format='parquet')\r\n",
							"# publicdraftcollection.createOrReplaceTempView(\"publicdraftcollection\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdelivery ORV Table\r\n",
							"# publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"# publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicmall ORV Table\r\n",
							"# publicmall = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicmall.parquet', format='parquet')\r\n",
							"# publicmall.createOrReplaceTempView(\"publicmall\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publiccustomer ORV Table\r\n",
							"# publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiccustomer.parquet', format='parquet')\r\n",
							"# publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# %run TRANSFORM/01 SEMI-STRUCTURED/03_LMS + ORV/SSTCollect"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstcollect.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstcollect.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the ssttrackunion LMS Table\r\n",
							"# ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"# ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolocation LMS Table\r\n",
							"# dbolocation= spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"# dbolocation.createOrReplaceTempView(\"dbolocation\")"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# %run TRANSFORM/01 SEMI-STRUCTURED/03_LMS + ORV/SSTTrack"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ssttrack.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrack.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the sstconsignmentunion LMS Table\r\n",
							"# sstconsignmentunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"# sstconsignmentunion.createOrReplaceTempView(\"sstconsignmentunion\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstparcelbyconsignment LMS Table\r\n",
							"# sstparcelbyconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyconsignment.parquet', format='parquet')\r\n",
							"# sstparcelbyconsignment.createOrReplaceTempView(\"sstparcelbyconsignment\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_consignmentr LMS Table\r\n",
							"# dbobill_consignmentr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_consignmentr.parquet', format='parquet')\r\n",
							"# dbobill_consignmentr.createOrReplaceTempView(\"dbobill_consignmentr\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbousers LMS Table\r\n",
							"# dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"# dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbocustomer LMS Table\r\n",
							"# dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"# dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_delivertype LMS Table\r\n",
							"# dbobill_delivertype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_delivertype.parquet', format='parquet')\r\n",
							"# dbobill_delivertype.createOrReplaceTempView(\"dbobill_delivertype\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_zone LMS Table\r\n",
							"# dbobill_zone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zone.parquet', format='parquet')\r\n",
							"# dbobill_zone.createOrReplaceTempView(\"dbobill_zone\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_servicetype LMS Table\r\n",
							"# dbobill_servicetype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_servicetype.parquet', format='parquet')\r\n",
							"# dbobill_servicetype.createOrReplaceTempView(\"dbobill_servicetype\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_zoneroute LMS Table\r\n",
							"# dbobill_zoneroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zoneroute.parquet', format='parquet')\r\n",
							"# dbobill_zoneroute.createOrReplaceTempView(\"dbobill_zoneroute\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_billtypesr LMS Table\r\n",
							"# dbobill_billtypesr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_billtypesr.parquet', format='parquet')\r\n",
							"# dbobill_billtypesr.createOrReplaceTempView(\"dbobill_billtypesr\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_routerate LMS Table\r\n",
							"# dbobill_routerate = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_routerate.parquet', format='parquet')\r\n",
							"# dbobill_routerate.createOrReplaceTempView(\"dbobill_routerate\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobroutemaster LMS Table\r\n",
							"# dbobroutemaster = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobroutemaster.parquet', format='parquet')\r\n",
							"# dbobroutemaster.createOrReplaceTempView(\"dbobroutemaster\")"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# %run TRANSFORM/01 SEMI-STRUCTURED/03_LMS + ORV/SSTConsignment"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignment.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the dboloads LMS Table\r\n",
							"# dboloads = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboloads.parquet', format='parquet')\r\n",
							"# dboloads.createOrReplaceTempView(\"dboloads\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstparcelbyload LMS Table\r\n",
							"# sstparcelbyload = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyload.parquet', format='parquet')\r\n",
							"# sstparcelbyload.createOrReplaceTempView(\"sstparcelbyload\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbosroute LMS Table\r\n",
							"# dbosroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbosroute.parquet', format='parquet')\r\n",
							"# dbosroute.createOrReplaceTempView(\"dbosroute\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodriver LMS Table\r\n",
							"# dbodriver = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodriver.parquet', format='parquet')\r\n",
							"# dbodriver.createOrReplaceTempView(\"dbodriver\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehicle LMS Table\r\n",
							"# dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"# dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehiclebasic LMS Table\r\n",
							"# dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"# dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# %run TRANSFORM/01 SEMI-STRUCTURED/03_LMS + ORV/SSTLoadChild"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstloadchild.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadchild.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the sstloadchild LMS Table\r\n",
							"# sstloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadchild.parquet', format='parquet')\r\n",
							"# sstloadchild.createOrReplaceTempView(\"sstloadchild\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdispatch ORV Table\r\n",
							"# publicdispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
							"# publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicvehicle ORV Table\r\n",
							"# publicvehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicvehicle.parquet', format='parquet')\r\n",
							"# publicvehicle.createOrReplaceTempView(\"publicvehicle\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicorvuser ORV Table\r\n",
							"# publicorvuser = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicorvuser.parquet', format='parquet')\r\n",
							"# publicorvuser.createOrReplaceTempView(\"publicorvuser\")"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# %run TRANSFORM/01 SEMI-STRUCTURED/03_LMS + ORV/SSTLoadParent"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstloadparent.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstloadparent.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the dboorder LMS Table\r\n",
							"# dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"# dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstparcelbyorder LMS Table\r\n",
							"# sstparcelbyorder = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyorder.parquet', format='parquet')\r\n",
							"# sstparcelbyorder.createOrReplaceTempView(\"sstparcelbyorder\")"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# %run TRANSFORM/01 SEMI-STRUCTURED/03_LMS + ORV/SSTOrder"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstorder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstorder.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the dboparcel LMS Table\r\n",
							"# dboparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"# dboparcel.createOrReplaceTempView(\"dboparcel\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbowaybill LMS Table\r\n",
							"# dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"# dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboorder LMS Table\r\n",
							"# dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"# dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboconsignment LMS Table\r\n",
							"# dboconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"# dboconsignment.createOrReplaceTempView(\"dboconsignment\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dboparceldetail LMS Table\r\n",
							"# dboparceldetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparceldetail.parquet', format='parquet')\r\n",
							"# dboparceldetail.createOrReplaceTempView(\"dboparceldetail\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbocustomer LMS Table\r\n",
							"# dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"# dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbousers LMS Table\r\n",
							"# dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"# dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_parceltype LMS Table\r\n",
							"# dbobill_parceltype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_parceltype.parquet', format='parquet')\r\n",
							"# dbobill_parceltype.createOrReplaceTempView(\"dbobill_parceltype\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbolocation LMS Table\r\n",
							"# dbolocation= spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"# dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodstatus LMS Table\r\n",
							"# dbodstatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodstatus.parquet', format='parquet')\r\n",
							"# dbodstatus.createOrReplaceTempView(\"dbodstatus\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovolumiser LMS Table\r\n",
							"# dbovolumiser = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovolumiser.parquet', format='parquet')\r\n",
							"# dbovolumiser.createOrReplaceTempView(\"dbovolumiser\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbobill_parceltype LMS Table\r\n",
							"# dbobill_parceltype = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_parceltype.parquet', format='parquet')\r\n",
							"# dbobill_parceltype.createOrReplaceTempView(\"dbobill_parceltype\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicparcel ORV Table\r\n",
							"# publicparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicparcel.parquet', format='parquet')\r\n",
							"# publicparcel.createOrReplaceTempView(\"publicparcel\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdelivery ORV Table\r\n",
							"# publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"# publicdelivery.createOrReplaceTempView(\"publicdelivery\")"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# %run TRANSFORM/01 SEMI-STRUCTURED/03_LMS + ORV/SSTParcel"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcel.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the dbowaybill LMS Table\r\n",
							"# dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"# dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbocustomer LMS Table\r\n",
							"# dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"# dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbousers LMS Table\r\n",
							"# dbousers = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbousers.parquet', format='parquet')\r\n",
							"# dbousers.createOrReplaceTempView(\"dbousers\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_delayreason LMS Table\r\n",
							"# dbodb_delayreason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_delayreason.parquet', format='parquet')\r\n",
							"# dbodb_delayreason.createOrReplaceTempView(\"dbodb_delayreason\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_reasondetail LMS Table\r\n",
							"# dbodb_reasondetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_reasondetail.parquet', format='parquet')\r\n",
							"# dbodb_reasondetail.createOrReplaceTempView(\"dbodb_reasondetail\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_reasongroup LMS Table\r\n",
							"# dbodb_reasongroup = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_reasongroup.parquet', format='parquet')\r\n",
							"# dbodb_reasongroup.createOrReplaceTempView(\"dbodb_reasongroup\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_deliverystatus LMS Table\r\n",
							"# dbodb_deliverystatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_deliverystatus.parquet', format='parquet')\r\n",
							"# dbodb_deliverystatus.createOrReplaceTempView(\"dbodb_deliverystatus\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbodb_mobilefeedbackreason LMS Table\r\n",
							"# dbodb_mobilefeedbackreason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_mobilefeedbackreason.parquet', format='parquet')\r\n",
							"# dbodb_mobilefeedbackreason.createOrReplaceTempView(\"dbodb_mobilefeedbackreason\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdelivery ORV Table\r\n",
							"# publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"# publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicmall ORV Table\r\n",
							"# publicmall = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicmall.parquet', format='parquet')\r\n",
							"# publicmall.createOrReplaceTempView(\"publicmall\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publiccustomer ORV Table\r\n",
							"# publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiccustomer.parquet', format='parquet')\r\n",
							"# publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the sstparcelbywaybill LMS Table\r\n",
							"# sstparcelbywaybill = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbywaybill.parquet', format='parquet')\r\n",
							"# sstparcelbywaybill.createOrReplaceTempView(\"sstparcelbywaybill\")"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# %run TRANSFORM/01 SEMI-STRUCTURED/03_LMS + ORV/SSTWaybill"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstwaybill.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstwaybill.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the ssttrackunion LMS Table\r\n",
							"# ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"# ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbowaybillsperparcel LMS Table\r\n",
							"# dbowaybillsperparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybillsperparcel.parquet', format='parquet')\r\n",
							"# dbowaybillsperparcel.createOrReplaceTempView(\"dbowaybillsperparcel\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# %run TRANSFORM/01 SEMI-STRUCTURED/03_LMS + ORV/SSTWaybilsPerParcel"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstwaybillsperparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstwaybillsperparcel.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the publicnonbooking TMS Table\r\n",
							"# publicnonbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicnonbooking.parquet', format='parquet')\r\n",
							"# publicnonbooking.createOrReplaceTempView(\"publicnonbooking\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicbooking TMS Table\r\n",
							"# publicbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicbooking.parquet', format='parquet')\r\n",
							"# publicbooking.createOrReplaceTempView(\"publicbooking\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publiccustomer TMS Table\r\n",
							"# publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiccustomer.parquet', format='parquet')\r\n",
							"# publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicroute TMS Table\r\n",
							"# publicroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicroute.parquet', format='parquet')\r\n",
							"# publicroute.createOrReplaceTempView(\"publicroute\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicthirdparty TMS Table\r\n",
							"# publicthirdparty = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicthirdparty.parquet', format='parquet')\r\n",
							"# publicthirdparty.createOrReplaceTempView(\"publicthirdparty\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicfinancedata TMS Table\r\n",
							"# publicfinancedata = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfinancedata.parquet', format='parquet')\r\n",
							"# publicfinancedata.createOrReplaceTempView(\"publicfinancedata\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# %run TRANSFORM/01 SEMI-STRUCTURED/04_TMS + ORV/SSTBooking"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstbooking.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstbooking.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the publicinstruction TMS Table\r\n",
							"# publicinstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinstruction.parquet', format='parquet')\r\n",
							"# publicinstruction.createOrReplaceTempView(\"publicinstruction\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicaddress TMS Table\r\n",
							"# publicaddress = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicaddress.parquet', format='parquet')\r\n",
							"# publicaddress.createOrReplaceTempView(\"publicaddress\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publiclhdelivery ORV Table\r\n",
							"# publiclhdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiclhdelivery.parquet', format='parquet')\r\n",
							"# publiclhdelivery.createOrReplaceTempView(\"publiclhdelivery\")"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# %run TRANSFORM/01 SEMI-STRUCTURED/04_TMS + ORV/SSTInstruction"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# sstinstruction.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/sstinstruction.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Create DataFrame for the publictrip TMS Table\r\n",
							"# publictrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrip.parquet', format='parquet')\r\n",
							"# publictrip.createOrReplaceTempView(\"publictrip\")\r\n",
							"\r\n",
							"# #Create DataFrame for the publicdriverpayitem TMS Table\r\n",
							"# publicdriverpayitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpayitem.parquet', format='parquet')\r\n",
							"# publicdriverpayitem.createOrReplaceTempView(\"publicdriverpayitem\")"
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# %run TRANSFORM/01 SEMI-STRUCTURED/04_TMS + ORV/SSTTrip"
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# ssttrip.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrip.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 49
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STMDDepot')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/MasterData"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "01b17762-3052-4d0d-bf43-5dd242a8ea9e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dbodepot MD Table\r\n",
							"# dbodepot = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbodepot.parquet', format='parquet')\r\n",
							"# dbodepot.createOrReplaceTempView(\"dbodepot\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stmddepot\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    d.id as md_depot_id\r\n",
							"    ,d.itemlabel as md_depot_itemlabel\r\n",
							"    ,d.depotname as md_depot_depotname\r\n",
							"    ,d.parentdepotcode as md_depot_parentdepotcode\r\n",
							"    ,d.division as md_depot_division\r\n",
							"    ,d.address as md_depot_address\r\n",
							"    ,d.latitude as md_depot_latitude\r\n",
							"    ,d.longitude as md_depot_longitude\r\n",
							"\r\n",
							"FROM dbodepot d \r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stmdsapdepot\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"     md_depot_id \r\n",
							"    ,md_depot_parentdepotcode\r\n",
							"    ,md_depot_itemlabel as sap_transactionsline_subdepotcode\r\n",
							"    ,md_depot_depotname\r\n",
							"    ,md_depot_division\r\n",
							"\r\n",
							"FROM stmddepot"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmddepot = spark.sql(\"SELECT * FROM stmddepot\")\r\n",
							"stmdsapdepot = spark.sql(\"SELECT * FROM stmdsapdepot\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stmddepot.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/MD/stmddepot.parquet', mode = \"overwrite\")\r\n",
							"# stmdsapdepot.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stmdsapdepot.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 8
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STMDPeople')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/MasterData"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "df7569e3-8577-463d-9356-9c410fc5cdf8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dbopeoplebasic MD Table\r\n",
							"# dbopeoplebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeoplebasic.parquet', format='parquet')\r\n",
							"# dbopeoplebasic.createOrReplaceTempView(\"dbopeoplebasic\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbopeopledriver MD Table\r\n",
							"# dbopeopledriver = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeopledriver.parquet', format='parquet')\r\n",
							"# dbopeopledriver.createOrReplaceTempView(\"dbopeopledriver\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbopeoplepersonal MD Table\r\n",
							"# dbopeoplepersonal = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeoplepersonal.parquet', format='parquet')\r\n",
							"# dbopeoplepersonal.createOrReplaceTempView(\"dbopeoplepersonal\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stmdpeople\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    pb.id as md_people_id\r\n",
							"    ,pb.empid as md_people_empid\r\n",
							"    ,pb.employeecode as md_people_employeecode\r\n",
							"    ,pb.uid as md_people_uid\r\n",
							"    ,pb.firstname as md_people_firstname\r\n",
							"    ,pb.lastname as md_people_lastname\r\n",
							"    ,pb.knownasname as md_people_knownasname\r\n",
							"    ,pb.birthdate as md_people_birthdate\r\n",
							"    ,pb.gender as md_people_gender\r\n",
							"    ,pb.cellno as md_people_cellno\r\n",
							"    ,pb.emailaddress as md_people_emailaddress\r\n",
							"    ,pb.nationality as md_people_nationality\r\n",
							"    ,pb.idnumber as md_people_idnumber\r\n",
							"    ,pb.passportno as md_people_passportno\r\n",
							"    ,pb.passportcountrycode as md_people_passportcountrycode\r\n",
							"    ,pb.idpassportno as md_people_idpassportno\r\n",
							"    ,to_timestamp(pb.dateengaged) as md_people_dateengaged\r\n",
							"    ,to_timestamp(pb.datejoinedgroup) as md_people_datejoinedgroup\r\n",
							"    ,pb.employeestatus as md_people_employeestatus\r\n",
							"    ,to_timestamp(pb.terminationdate) as md_people_terminationdate\r\n",
							"    ,pb.terminationreasonid as md_people_terminationreasonid\r\n",
							"    ,pb.depotcode as md_people_depotcode\r\n",
							"    ,pb.jobcategory as md_people_jobcategory\r\n",
							"    ,pb.jobtitle as md_people_jobtitle\r\n",
							"    ,pb.source as md_people_source\r\n",
							"    ,pb.insby as md_people_insby\r\n",
							"    ,pb.islinehaul as md_people_islinehaul\r\n",
							"    ,pb.companycode as md_people_companycode\r\n",
							"    ,pb.companydisplayname as md_people_companydisplayname\r\n",
							"    ,pb.companyrulecode as md_people_companyrulecode\r\n",
							"    ,pb.reportstoemployee as md_people_reportstoemployee\r\n",
							"    ,pb.reporttoempid as md_people_reporttoempid\r\n",
							"    ,pb.internalexternal as md_people_internalexternal\r\n",
							"    -- ,to_timestamp(pb.moddate) as md_people_moddate\r\n",
							"    -- ,to_timestamp(pb.insdate) as md_people_insdate\r\n",
							"    ,pd.id as md_people_driverid\r\n",
							"    ,pd.licenseno as md_people_licenseno\r\n",
							"    ,pd.driverrestriction as md_people_driverrestriction\r\n",
							"    ,pd.issuecountry as md_people_issuecountry\r\n",
							"    ,to_timestamp(pd.issuedate) as md_people_issuedate\r\n",
							"    ,to_timestamp(pd.licensevalidfrom) as md_people_licensevalidfrom\r\n",
							"    ,to_timestamp(pd.licensevalidto) as md_people_licensevalidto\r\n",
							"    ,pd.vehiclecode as md_people_vehiclecode\r\n",
							"    ,pd.vehiclerestriction as md_people_vehiclerestriction\r\n",
							"    ,pd.driverphoto as md_people_driverphoto\r\n",
							"    ,pd.licenseexpired as md_people_licenseexpired\r\n",
							"    ,pd.prdpcode as md_people_prdpcode\r\n",
							"    ,to_timestamp(pd.prdpexpiry) as md_people_prdpexpiry\r\n",
							"    ,pp.id as md_people_personalid\r\n",
							"    ,pp.physicalblock as md_people_physicalblock\r\n",
							"    ,pp.physicalcitytown as md_people_physicalcitytown\r\n",
							"    ,pp.physicalcomplex as md_people_physicalcomplex\r\n",
							"    ,pp.physicalcountrycode as md_people_physicalcountrycode\r\n",
							"    ,pp.physicaldistrictid as md_people_physicaldistrictid\r\n",
							"    ,pp.physicallevelfloor as md_people_physicallevelfloor\r\n",
							"    ,pp.physicalpostalcode as md_people_physicalpostalcode\r\n",
							"    ,pp.physicalprovince as md_people_physicalprovince\r\n",
							"    ,pp.physicalstreetfarmname as md_people_physicalstreetfarmname\r\n",
							"    ,pp.physicalstreetnumber as md_people_physicalstreetnumber\r\n",
							"    ,pp.physicalsuburbdistrict as md_people_physicalsuburbdistrict\r\n",
							"    ,pp.physicalunitpostalnumber as md_people_physicalunitpostalnumber\r\n",
							"    ,pp.postaladdressid as md_people_postaladdressid\r\n",
							"    ,pp.postaladdressservicetype as md_people_postaladdressservicetype\r\n",
							"    ,pp.postalblock as md_people_postalblock\r\n",
							"    ,pp.postalcitytown as md_people_postalcitytown\r\n",
							"    ,pp.postalcomplex as md_people_postalcomplex\r\n",
							"    ,pp.postalconcat as md_people_postalconcat\r\n",
							"    ,pp.postaldistrictid as md_people_postaldistrictid\r\n",
							"    ,pp.postallevelfloor as md_people_postallevelfloor\r\n",
							"    ,pp.postalpostalcode as md_people_postalpostalcode\r\n",
							"    ,pp.postalprovince as md_people_postalprovince\r\n",
							"    ,pp.postalstreetfarmname as md_people_postalstreetfarmname\r\n",
							"    ,pp.postalstreetnumber as md_people_postalstreetnumber\r\n",
							"    ,pp.postalsuburbdistrict as md_people_postalsuburbdistrict\r\n",
							"    ,pp.postalunitpostalnumber as md_people_postalunitpostalnumber\r\n",
							"    ,pp.racialgroup as md_people_racialgroup\r\n",
							"\r\n",
							"\r\n",
							"FROM dbopeoplebasic pb\r\n",
							"LEFT JOIN dbopeoplepersonal pp on pp.pid = pb.id\r\n",
							"LEFT JOIN dbopeopledriver pd on pd.pid = pb.id \r\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmdpeople = spark.sql(\"SELECT * FROM stmdpeople\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stmdpeople.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/MD/stmdpeople.parquet', mode = \"overwrite\")\r\n",
							"\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STMDVehicle')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/MasterData"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2ac57f88-10c7-417e-876e-87c1245a3c37"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"# if 'prod' in Environment:\r\n",
							"#     StorageAccount = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"# else:\r\n",
							"#     StorageAccount = 'citylogisticsstorage'\r\n",
							"#     StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"#     StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"#     StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# # ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"source": [
							"# #Create DataFrame for the dbovehiclebasic MD Table\r\n",
							"# dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"# dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehicleadmin MD Table\r\n",
							"# dbovehicleadmin = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehicleadmin.parquet', format='parquet')\r\n",
							"# dbovehicleadmin.createOrReplaceTempView(\"dbovehicleadmin\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehicleoperations MD Table\r\n",
							"# dbovehicleoperations = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehicleoperations.parquet', format='parquet')\r\n",
							"# dbovehicleoperations.createOrReplaceTempView(\"dbovehicleoperations\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehiclefinance MD Table\r\n",
							"# dbovehiclefinance = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclefinance.parquet', format='parquet')\r\n",
							"# dbovehiclefinance.createOrReplaceTempView(\"dbovehiclefinance\")\r\n",
							"\r\n",
							"# #Create DataFrame for the dbovehicletracking MD Table\r\n",
							"# dbovehicletracking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehicletracking.parquet', format='parquet')\r\n",
							"# dbovehicletracking.createOrReplaceTempView(\"dbovehicletracking\")"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE OR REPLACE TEMP VIEW\r\n",
							"stmdvehicle\r\n",
							"AS\r\n",
							"SELECT\r\n",
							"    vb.id as md_vehicle_id\r\n",
							"    ,vb.uid as md_vehicle_uid\r\n",
							"    ,vb.vehicletype as md_vehicle_vehicletype\r\n",
							"    ,vb.internalexternal as md_vehicle_internalexternal\r\n",
							"    ,vb.activeflag as md_vehicle_activeflag\r\n",
							"    ,vb.vehiclestatus as md_vehicle_vehiclestatus\r\n",
							"    ,vb.chassisnumber as md_vehicle_chassisnumber\r\n",
							"    ,vb.depot as md_vehicle_depot\r\n",
							"    ,vb.enginenumber as md_vehicle_enginenumber\r\n",
							"    ,vb.fleetcode as md_vehicle_fleetcode\r\n",
							"    ,vb.fueltype as md_vehicle_fueltype\r\n",
							"    ,vb.registrationnumber as md_vehicle_registrationnumber\r\n",
							"    ,vb.vehicleapplication as md_vehicle_vehicleapplication\r\n",
							"    ,vb.vehiclebodymake as md_vehicle_vehiclebodymake\r\n",
							"    ,vb.vehiclecolour as md_vehicle_vehiclecolour\r\n",
							"    ,vb.vehiclemake as md_vehicle_vehiclemake\r\n",
							"    ,vb.vehiclemodel as md_vehicle_vehiclemodel\r\n",
							"    ,vb.vehicleseries as md_vehicle_vehicleseries\r\n",
							"    ,vb.year as md_vehicle_year\r\n",
							"    ,vb.vehicleownerid as md_vehicle_vehicleownerid\r\n",
							"    ,vb.vehicleowner as md_vehicle_vehicleowner\r\n",
							"    ,vb.staffvehicleflag as md_vehicle_staffvehicleflag\r\n",
							"    ,vb.vehicletrailersize as md_vehicle_vehicletrailersize\r\n",
							"    ,vb.vehicletrailertype as md_vehicle_vehicletrailertype\r\n",
							"    ,vb.vehicleetollclass as md_vehicle_vehicleetollclass\r\n",
							"    ,vb.brn as md_vehicle_brn\r\n",
							"    ,vb.brnnumber as md_vehicle_brnnumber\r\n",
							"    ,vb.vehicleregisterno as md_vehicle_vehicleregisterno\r\n",
							"    ,to_timestamp(vb.insdate) as md_vehicle_vehiclebasicinsdate\r\n",
							"    ,vb.insby as md_vehicle_insby\r\n",
							"    ,vb.islinehaulvehicle as md_vehicle_islinehaulvehicle\r\n",
							"    ,vb.internalheight as md_vehicle_internalheight\r\n",
							"    ,vb.internallength as md_vehicle_internallength\r\n",
							"    ,vb.internalvolume as md_vehicle_internalvolume\r\n",
							"    ,vb.internalwidth as md_vehicle_internalwidth\r\n",
							"    ,to_timestamp(vb.moddate) as md_vehicle_vehiclebasicmoddate\r\n",
							"    ,vb.trailerflag as md_vehicle_trailerflag\r\n",
							"    ,vb.workflowstatus as md_vehicle_workflowstatus\r\n",
							"    ,to_timestamp(vb.approveddate) as md_vehicle_vehicleapproveddate\r\n",
							"    ,vb.mmcode as md_vehicle_mmcode\r\n",
							"    ,vb.tmplicenseexpiery as md_vehicle_tmplicenseexpiery\r\n",
							"    ,va.currentadvertising as md_vehicle_currentadvertising\r\n",
							"    ,va.fuelcardnumber as md_vehicle_fuelcardnumber\r\n",
							"    ,to_timestamp(va.fuelcardreceivedate) as md_vehicle_fuelcardreceivedate\r\n",
							"    ,to_timestamp(va.licenseexpirydate) as md_vehicle_licenseexpirydate\r\n",
							"    ,va.licensefee as md_vehicle_licensefee\r\n",
							"    ,va.vehicleadvertisingindicator as md_vehicle_vehicleadvertisingindicator\r\n",
							"    ,va.vehiclespeedgoverningdevice as md_vehicle_vehiclespeedgoverningdevice\r\n",
							"    ,va.oldregistrationnumber as md_vehicle_oldregistrationnumber\r\n",
							"    ,va.oldchassisnumber as md_vehicle_oldchassisnumber\r\n",
							"    ,va.oldenginenumber as md_vehicle_oldenginenumber\r\n",
							"    ,va.logbookrecord as md_vehicle_logbookrecord\r\n",
							"    ,va.status as md_vehicle_adminstatus\r\n",
							"    ,to_timestamp(va.completebydate) as md_vehicle_vehicleadmincompletebydate\r\n",
							"    ,vo.backdoorheight as md_vehicle_backdoorheight\r\n",
							"    ,vo.backdoorwidth as md_vehicle_backdoorwidth\r\n",
							"    ,vo.externalheight as md_vehicle_externalheight\r\n",
							"    ,vo.externallength as md_vehicle_externallength\r\n",
							"    ,vo.externalwidth as md_vehicle_externalwidth\r\n",
							"    ,vo.fleximounts as md_vehicle_fleximounts\r\n",
							"    ,vo.fuelcapacity as md_vehicle_fuelcapacity\r\n",
							"    ,vo.grossvehiclemass as md_vehicle_grossvehiclemass\r\n",
							"    ,vo.numberoftyres as md_vehicle_numberoftyres\r\n",
							"    ,vo.numberoftyresrear as md_vehicle_numberoftyresrear\r\n",
							"    ,vo.numberoftyressteering as md_vehicle_numberoftyressteering\r\n",
							"    ,vo.payload as md_vehicle_payload\r\n",
							"    ,vo.peoplecarrier as md_vehicle_peoplecarrier\r\n",
							"    ,vo.tareweight as md_vehicle_tareweight\r\n",
							"    ,vo.tyresize as md_vehicle_tyresize\r\n",
							"    ,vo.tyresizealternative as md_vehicle_tyresizealternative\r\n",
							"    ,vo.targetfuelconsumption as md_vehicle_targetfuelconsumption\r\n",
							"    ,vo.tankrange as md_vehicle_tankrange\r\n",
							"    ,vo.status as md_vehicle_operationsstatus\r\n",
							"    ,to_timestamp(vo.completebydate) as md_vehicle_vehiclevehicleoperationscompletebydate\r\n",
							"    ,vf.assetnumber as md_vehicle_assetnumber\r\n",
							"    ,to_timestamp(vf.contractenddate) as md_vehicle_contractenddate\r\n",
							"    ,vf.contractnumber as md_vehicle_contractnumber\r\n",
							"    ,to_timestamp(vf.contractstartdate) as md_vehicle_contractstartdate\r\n",
							"    ,vf.vehiclefinancecompany as md_vehicle_vehiclefinancecompany\r\n",
							"    ,vf.budgetrmcpk as md_vehicle_budgetrmcpk\r\n",
							"    ,vf.budgettyrecpk as md_vehicle_budgettyrecpk\r\n",
							"    ,vf.retailvalue as md_vehicle_retailvalue\r\n",
							"    ,vf.tradeinvalue as md_vehicle_tradeinvalue\r\n",
							"    ,vf.loadbodyreplacementcost as md_vehicle_loadbodyreplacementcost\r\n",
							"    ,vf.status as md_vehicle_financestatus\r\n",
							"    ,to_timestamp(vf.completebydate) as md_vehicle_vehiclefinancecompletebydate\r\n",
							"    ,vt.status as md_vehicle_trackingstatus\r\n",
							"    ,to_timestamp(vt.completebydate) as md_vehicle_vehicletrackingcompletebydate\r\n",
							"    ,to_timestamp(vt.moddate) as md_vehicle_vehicletrackingmoddate\r\n",
							"    ,vt.assetid as md_vehicle_assetid\r\n",
							"    ,vt.providerid as md_vehicle_providerid\r\n",
							"    ,vt.providername as md_vehicle_providername\r\n",
							"    ,vt.serial as md_vehicle_serial\r\n",
							"    ,to_timestamp(vt.insdate) as md_vehicle_vehicletrackinginsdate\r\n",
							"    ,to_timestamp(vt.linkdate) as md_vehicle_linkdate\r\n",
							"    ,vt.linkby as md_vehicle_linkby\r\n",
							"    ,vt.linkbyname as md_vehicle_linkbyname\r\n",
							"\r\n",
							"\r\n",
							"FROM dbovehiclebasic vb \r\n",
							"LEFT JOIN dbovehicleadmin va on va.vid = vb.id\r\n",
							"LEFT JOIN dbovehicleoperations vo on vo.vid = vb.id\r\n",
							"LEFT JOIN dbovehiclefinance vf on vf.vid = vb.id\r\n",
							"LEFT JOIN dbovehicletracking vt on vt.vid = vb.id\r\n",
							""
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmdvehicle = spark.sql(\"SELECT * FROM stmdvehicle\")"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# stmdvehicle.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/MD/stmdvehicle.parquet', mode = \"overwrite\")\r\n",
							"\r\n",
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 23
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STMD_RunOrder')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/MasterData"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d6add0d0-64c9-415d-8b1e-bdd05148bf16"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dbopeoplebasic MD Table\r\n",
							"dbopeoplebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeoplebasic.parquet', format='parquet')\r\n",
							"dbopeoplebasic.createOrReplaceTempView(\"dbopeoplebasic\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbopeopledriver MD Table\r\n",
							"dbopeopledriver = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeopledriver.parquet', format='parquet')\r\n",
							"dbopeopledriver.createOrReplaceTempView(\"dbopeopledriver\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbopeoplepersonal MD Table\r\n",
							"dbopeoplepersonal = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeoplepersonal.parquet', format='parquet')\r\n",
							"dbopeoplepersonal.createOrReplaceTempView(\"dbopeoplepersonal\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/MasterData/STMDPeople"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmdpeople.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/MD/stmdpeople.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dbovehiclebasic MD Table\r\n",
							"dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehicleadmin MD Table\r\n",
							"dbovehicleadmin = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehicleadmin.parquet', format='parquet')\r\n",
							"dbovehicleadmin.createOrReplaceTempView(\"dbovehicleadmin\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehicleoperations MD Table\r\n",
							"dbovehicleoperations = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehicleoperations.parquet', format='parquet')\r\n",
							"dbovehicleoperations.createOrReplaceTempView(\"dbovehicleoperations\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehiclefinance MD Table\r\n",
							"dbovehiclefinance = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclefinance.parquet', format='parquet')\r\n",
							"dbovehiclefinance.createOrReplaceTempView(\"dbovehiclefinance\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehicletracking MD Table\r\n",
							"dbovehicletracking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehicletracking.parquet', format='parquet')\r\n",
							"dbovehicletracking.createOrReplaceTempView(\"dbovehicletracking\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/MasterData/STMDVehicle"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmdvehicle.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/MD/stmdvehicle.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dbodepot MD Table\r\n",
							"dbodepot = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbodepot.parquet', format='parquet')\r\n",
							"dbodepot.createOrReplaceTempView(\"dbodepot\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/MasterData/STMDDepot"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stmddepot.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/MD/stmddepot.parquet', mode = \"overwrite\")\r\n",
							"stmdsapdepot.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/FINANCE/stmdsapdepot.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STOPS_RunOrderDistribution')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Distribution"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6754a319-5d14-45ab-a466-54c0960dfce9"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"import pandas as pd\r\n",
							"from pyspark.sql import Window   "
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#create dataframe for the publicdispatchsegment orv table\r\n",
							"publicdispatchsegment = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatchsegment.parquet', format='parquet')\r\n",
							"publicdispatchsegment.createOrReplaceTempView(\"publicdispatchsegment\")\r\n",
							"\r\n",
							"#create dataframe for the publicorvuser orv table\r\n",
							"publicorvuser = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicorvuser.parquet', format='parquet')\r\n",
							"publicorvuser.createOrReplaceTempView(\"publicorvuser\")\r\n",
							"\r\n",
							"#create dataframe for the publicvehicle orv table\r\n",
							"publicvehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicvehicle.parquet', format='parquet')\r\n",
							"publicvehicle.createOrReplaceTempView(\"publicvehicle\")\r\n",
							"\r\n",
							"#create dataframe for the publicdepot orv table\r\n",
							"publicdepot = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdepo.parquet', format='parquet')\r\n",
							"publicdepot.createOrReplaceTempView(\"publicdepot\")\r\n",
							"\r\n",
							"#create dataframe for the publiccustomer orv table\r\n",
							"publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiccustomer.parquet', format='parquet')\r\n",
							"publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"\r\n",
							"#create dataframe for the dbocustomer lms table\r\n",
							"dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							"\r\n",
							"#create dataframe for the dbozone lms table\r\n",
							"dbozone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbozone.parquet', format='parquet')\r\n",
							"dbozone.createOrReplaceTempView(\"dbozone\")\r\n",
							"\r\n",
							"#create dataframe for the dbosroute lms table\r\n",
							"dbosroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbosroute.parquet', format='parquet')\r\n",
							"dbosroute.createOrReplaceTempView(\"dbosroute\")\r\n",
							"\r\n",
							"#create dataframe for the dbobillzoneroute lms table\r\n",
							"dbobillzoneroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zoneroute.parquet', format='parquet')\r\n",
							"dbobillzoneroute.createOrReplaceTempView(\"dbobillzoneroute\")\r\n",
							"\r\n",
							"#create dataframe for the dbobillzone lms table\r\n",
							"dbobillzone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_zone.parquet', format='parquet')\r\n",
							"dbobillzone.createOrReplaceTempView(\"dbobillzone\")\r\n",
							"\r\n",
							"#create dataframe for the dbobillbillcustomersr  lms table\r\n",
							"dbobillbillcustomersr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_billcustomersr.parquet', format='parquet')\r\n",
							"dbobillbillcustomersr.createOrReplaceTempView(\"dbobillbillcustomersr\")\r\n",
							"\r\n",
							"#create dataframe for the dbobillcustomergroups  lms table\r\n",
							"dbobillcustomergroups  = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_customergroups.parquet', format='parquet')\r\n",
							"dbobillcustomergroups.createOrReplaceTempView(\"dbobillcustomergroups\")\r\n",
							"\r\n",
							"#create dataframe for the dbobillcustomergrouptypes  lms table\r\n",
							"dbobillcustomergrouptypes  = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_customergrouptypes.parquet', format='parquet')\r\n",
							"dbobillcustomergrouptypes.createOrReplaceTempView(\"dbobillcustomergrouptypes\")\r\n",
							"\r\n",
							"#create dataframe for the dbolocation  lms table\r\n",
							"dbolocation  = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodepot LMS Table\r\n",
							"dbodepot = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbodepot.parquet', format='parquet')\r\n",
							"dbodepot.createOrReplaceTempView(\"dbodepot\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehicle LMS Table\r\n",
							"dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_reasongroup LMS Table\r\n",
							"dbodb_reasongroup = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_reasongroup.parquet', format='parquet')\r\n",
							"dbodb_reasongroup.createOrReplaceTempView(\"dbodb_reasongroup\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_inservicereason LMS Table\r\n",
							"dbodb_inservicereason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_inservicereason.parquet', format='parquet')\r\n",
							"dbodb_inservicereason.createOrReplaceTempView(\"dbodb_inservicereason\")\r\n",
							"\r\n",
							"#create dataframe for the publicpod orv table\r\n",
							"publicpod = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicpod.parquet', format='parquet')\r\n",
							"publicpod.createOrReplaceTempView(\"publicpod\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_reasondetail LMS Table\r\n",
							"dbodb_reasondetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_reasondetail.parquet', format='parquet')\r\n",
							"dbodb_reasondetail.createOrReplaceTempView(\"dbodb_reasondetail\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_delayreason LMS Table\r\n",
							"dbodb_delayreason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_delayreason.parquet', format='parquet')\r\n",
							"dbodb_delayreason.createOrReplaceTempView(\"dbodb_delayreason\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_notdbreason LMS Table\r\n",
							"dbodb_notdbreason = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_notdbreason.parquet', format='parquet')\r\n",
							"dbodb_notdbreason.createOrReplaceTempView(\"dbodb_notdbreason\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_deliverystatus LMS Table\r\n",
							"dbodb_deliverystatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_deliverystatus.parquet', format='parquet')\r\n",
							"dbodb_deliverystatus.createOrReplaceTempView(\"dbodb_deliverystatus\")"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Distribution/01_DIST_STDimensions"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stpod.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stpod.parquet', mode = \"overwrite\")\r\n",
							"stinservicereasons.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stinservicereasons.parquet', mode = \"overwrite\")\r\n",
							"stdispatchsegment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdispatchsegment.parquet', mode = \"overwrite\")\r\n",
							"storvuser.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/storvuser.parquet', mode = \"overwrite\")\r\n",
							"stvehicle.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stvehicle.parquet', mode = \"overwrite\")\r\n",
							"stdepotorv.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdepotorv.parquet', mode = \"overwrite\")\r\n",
							"stdepot.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdepot.parquet', mode = \"overwrite\")\r\n",
							"stbillcustomer.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stbillcustomer.parquet', mode = \"overwrite\")\r\n",
							"stdeliverypickupcustomer.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdeliverypickupcustomer.parquet', mode = \"overwrite\")\r\n",
							"stzone.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stzone.parquet', mode = \"overwrite\")\r\n",
							"stsroute.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stsroute.parquet', mode = \"overwrite\")\r\n",
							"stbillzoneroute.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stbillzoneroute.parquet', mode = \"overwrite\")\r\n",
							"stbillzone.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stbillzone.parquet', mode = \"overwrite\")\r\n",
							"stlocation.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlocation.parquet', mode = \"overwrite\")\r\n",
							"stendorsmentreason.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stendorsmentreason.parquet', mode = \"overwrite\")\r\n",
							"stwaybilldelayreasons.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybilldelayreasons.parquet', mode = \"overwrite\")\r\n",
							"stwaybillnotdbreasons.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybillnotdbreasons.parquet', mode = \"overwrite\")\r\n",
							"stwaybilldeliverystatusreasons.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybilldeliverystatusreasons.parquet', mode = \"overwrite\")\r\n",
							"stwaybillreasondetails.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybillreasondetails.parquet', mode = \"overwrite\")\r\n",
							"stwaybillinservicereasons.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybillinservicereasons.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the ssttrackunion LMS Table\r\n",
							"ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstwaybillsperparcel LMS Table\r\n",
							"sstwaybillsperparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstwaybillsperparcel.parquet', format='parquet')\r\n",
							"sstwaybillsperparcel.createOrReplaceTempView(\"sstwaybillsperparcel\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolocation LMS Table\r\n",
							"dbolocation = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolocation.parquet', format='parquet')\r\n",
							"dbolocation.createOrReplaceTempView(\"dbolocation\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelunion LMS Table\r\n",
							"sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Distribution/02_DIST_STLMSTrack"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmstrack.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet', mode = \"overwrite\")\r\n",
							"stvsmparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stvsmparcel.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the sstparcelunion LMS Table\r\n",
							"sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboorder LMS Table\r\n",
							"dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstconsignmentunion LMS Table\r\n",
							"sstconsignmentunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"sstconsignmentunion.createOrReplaceTempView(\"sstconsignmentunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbowaybill LMS Table\r\n",
							"dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboparceldetail LMS Table\r\n",
							"dboparceldetail = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboparceldetail.parquet', format='parquet')\r\n",
							"dboparceldetail.createOrReplaceTempView(\"dboparceldetail\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicparcel LMS Table\r\n",
							"publicparcel = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicparcel.parquet', format='parquet')\r\n",
							"publicparcel.createOrReplaceTempView(\"publicparcel\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdelivery ORV Table\r\n",
							"publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							"#Create DataFrame for the stvsmparcel LMS Table\r\n",
							"stvsmparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stvsmparcel.parquet', format='parquet')\r\n",
							"stvsmparcel.createOrReplaceTempView(\"stvsmparcel\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboweekendholiday LMS Table\r\n",
							"dboweekendholiday = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboweekendholiday.parquet', format='parquet')\r\n",
							"dboweekendholiday.createOrReplaceTempView(\"dboweekendholiday\")"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Distribution/03_DIST_STParcel"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stparcel.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dboorder LMS Table\r\n",
							"dboorder = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboorder.parquet', format='parquet')\r\n",
							"dboorder.createOrReplaceTempView(\"dboorder\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelbyorder LMS Table\r\n",
							"sstparcelbyorder = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyorder.parquet', format='parquet')\r\n",
							"sstparcelbyorder.createOrReplaceTempView(\"sstparcelbyorder\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbowaybill LMS Table\r\n",
							"dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelunion LMS Table\r\n",
							"sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstconsignmentunion LMS Table\r\n",
							"sstconsignmentunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet', format='parquet')\r\n",
							"sstconsignmentunion.createOrReplaceTempView(\"sstconsignmentunion\")"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Distribution/04_DIST_STOrder"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"storder.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/storder.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#create dataframe for the sstconsignemntunion lms table\r\n",
							"sstconsignemntunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstconsignmentunion.parquet/', format='parquet')\r\n",
							"sstconsignemntunion.createOrReplaceTempView(\"sstconsignemntunion\")\r\n",
							"\r\n",
							"#create dataframe for the sstparcelbyconsignment lms table\r\n",
							"sstparcelbyconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyconsignment.parquet', format='parquet')\r\n",
							"sstparcelbyconsignment.createOrReplaceTempView(\"sstparcelbyconsignment\")\r\n",
							"\r\n",
							"#create dataframe for the dbobill_consignmentr lms table\r\n",
							"dbobill_consignmentr = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbobill_consignmentr.parquet', format='parquet')\r\n",
							"dbobill_consignmentr.createOrReplaceTempView(\"dbobill_consignmentr\")\r\n",
							"\r\n",
							"#create dataframe for the sstparcelunion lms table\r\n",
							"sstparcelunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelunion.parquet', format='parquet')\r\n",
							"sstparcelunion.createOrReplaceTempView(\"sstparcelunion\")\r\n",
							"\r\n",
							"#create dataframe for the dbowaybill lms table\r\n",
							"dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Distribution/05_DIST_STConsignment"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stconsignment.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stconsignment.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dbowaybill LMS Table\r\n",
							"dbowaybill = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowaybill.parquet', format='parquet')\r\n",
							"dbowaybill.createOrReplaceTempView(\"dbowaybill\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelbywaybill LMS Table\r\n",
							"sstparcelbywaybill = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbywaybill.parquet', format='parquet')\r\n",
							"sstparcelbywaybill.createOrReplaceTempView(\"sstparcelbywaybill\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdelivery ORV Table\r\n",
							"publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdispatch ORV Table\r\n",
							"publicdispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
							"publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
							"\r\n",
							"#create dataframe for the publicpod orv table\r\n",
							"publicpod = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicpod.parquet', format='parquet')\r\n",
							"publicpod.createOrReplaceTempView(\"publicpod\")\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Distribution/06_DIST_STWaybill"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stwaybill.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dboloads LMS Table\r\n",
							"dboloads = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboloads.parquet', format='parquet')\r\n",
							"dboloads.createOrReplaceTempView(\"dboloads\")\r\n",
							"\r\n",
							"#Create DataFrame for the sstparcelbyload LMS Table\r\n",
							"sstparcelbyload = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/sstparcelbyload.parquet', format='parquet')\r\n",
							"sstparcelbyload.createOrReplaceTempView(\"sstparcelbyload\")"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Distribution/07_DIST_STLoadChild"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadchild.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stloadchild.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the stloadchild LMS Table\r\n",
							"stloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadchild.parquet', format='parquet')\r\n",
							"stloadchild.createOrReplaceTempView(\"stloadchild\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdispatch ORV Table\r\n",
							"publicdispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
							"publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicreportdistotmgntdispatchdt ORV Table\r\n",
							"publicreportdistotmgntdispatchdt = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicreportdistotmgntdispatchdt.parquet', format='parquet')\r\n",
							"publicreportdistotmgntdispatchdt.createOrReplaceTempView(\"publicreportdistotmgntdispatchdt\")"
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Distribution/08_DIST_STLoadParent"
						],
						"outputs": [],
						"execution_count": 50
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stloadparent.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the dbodc_transfer LMS Table\r\n",
							"dbodc_transfer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodc_transfer.parquet', format='parquet')\r\n",
							"dbodc_transfer.createOrReplaceTempView(\"dbodc_transfer\")"
						],
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Distribution/09_DIST_STDCTransfer"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdctransfer.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdctransfer.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#create dataframe for the publicclaim orv table\r\n",
							"publicclaim = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicclaim.parquet', format='parquet')\r\n",
							"publicclaim.createOrReplaceTempView(\"publicclaim\")\r\n",
							"\r\n",
							"#create dataframe for the publicdelivery orv table\r\n",
							"publicdelivery = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdelivery.parquet', format='parquet')\r\n",
							"publicdelivery.createOrReplaceTempView(\"publicdelivery\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbowbendorsement LMS Table\r\n",
							"dbowbendorsement = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbowbendorsement.parquet', format='parquet')\r\n",
							"dbowbendorsement.createOrReplaceTempView(\"dbowbendorsement\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodb_endorsement LMS Table\r\n",
							"dbodb_endorsement = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodb_endorsement.parquet', format='parquet')\r\n",
							"dbodb_endorsement.createOrReplaceTempView(\"dbodb_endorsement\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 55
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Distribution/10_DIST_STEndorsments"
						],
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stendorsments.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stendorsments.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#create dataframe for the stparcel lms table\r\n",
							"stparcel = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stparcel.parquet/', format='parquet')\r\n",
							"stparcel.createOrReplaceTempView(\"stparcel\")\r\n",
							"\r\n",
							"#Create DataFrame for the stlmstrack LMS Table\r\n",
							"stlmstrack = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stlmstrack.parquet', format='parquet')\r\n",
							"stlmstrack.createOrReplaceTempView(\"stlmstrack\")\r\n",
							"\r\n",
							"#create dataframe for the stconsignment lms table\r\n",
							"stconsignment = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stconsignment.parquet/', format='parquet')\r\n",
							"stconsignment.createOrReplaceTempView(\"stconsignment\")\r\n",
							"\r\n",
							"#create dataframe for the stwaybill lms table\r\n",
							"stwaybill = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stwaybill.parquet/', format='parquet')\r\n",
							"stwaybill.createOrReplaceTempView(\"stwaybill\")\r\n",
							"\r\n",
							"#create dataframe for the storder lms table\r\n",
							"storder = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/storder.parquet/', format='parquet')\r\n",
							"storder.createOrReplaceTempView(\"storder\")\r\n",
							"\r\n",
							"#Create DataFrame for the stloadparent LMS Table\r\n",
							"stloadparent = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadparent.parquet', format='parquet')\r\n",
							"stloadparent.createOrReplaceTempView(\"stloadparent\")\r\n",
							"\r\n",
							"#Create DataFrame for the stloadchild LMS Table\r\n",
							"stloadchild = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stloadchild.parquet', format='parquet')\r\n",
							"stloadchild.createOrReplaceTempView(\"stloadchild\")"
						],
						"outputs": [],
						"execution_count": 57
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Distribution/11_DIST_ST3MonthRoling"
						],
						"outputs": [],
						"execution_count": 58
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stparcel3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stparcel3myoy.parquet', mode = \"overwrite\")\r\n",
							"stconsignment3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stconsignment3myoy.parquet', mode = \"overwrite\")\r\n",
							"stwaybill3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stwaybill3myoy.parquet', mode = \"overwrite\")\r\n",
							"storder3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/storder3myoy.parquet', mode = \"overwrite\")\r\n",
							"stlmstrack3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmstrack3myoy.parquet', mode = \"overwrite\")\r\n",
							"stloadchild3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stloadchild3myoy.parquet', mode = \"overwrite\")\r\n",
							"stloadparent3myoy.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stloadparent3myoy.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 59
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STOPS_RunOrderLinehaul')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "TRANSFORM/02 STRUCTURED/Ops/Linehaul"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "PRDSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e7d3833f-c85e-4a7b-be4e-c4d9a88849fc"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/PRDSparkPool",
						"name": "PRDSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PRDSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"Environment = mssparkutils.env.getWorkspaceName()\r\n",
							"if 'prod' in Environment:\r\n",
							"    StorageAccount = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorageprod'\r\n",
							"else:\r\n",
							"    StorageAccount = 'citylogisticsstorage'\r\n",
							"    StorageAccountRead = 'citylogisticsstorageprod'\r\n",
							"    StorageAccountRead2 = 'citylogisticsstorage'\r\n",
							"    StorageAccountWrite = 'citylogisticsstorage'\r\n",
							"\r\n",
							"# ' + StorageAccount + '"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"from pyspark.sql.window import Window"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the publicbooking TMS Table\r\n",
							"publicbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicbooking.parquet', format='parquet')\r\n",
							"publicbooking.createOrReplaceTempView(\"publicbooking\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicnonbooking TMS Table\r\n",
							"publicnonbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicnonbooking.parquet', format='parquet')\r\n",
							"publicnonbooking.createOrReplaceTempView(\"publicnonbooking\")\r\n",
							"\r\n",
							"#Create DataFrame for the publictrip TMS Table\r\n",
							"publictrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrip.parquet', format='parquet')\r\n",
							"publictrip.createOrReplaceTempView(\"publictrip\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolhbooking TMS Table\r\n",
							"dboLHBooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_booking.parquet', format='parquet')\r\n",
							"dboLHBooking.createOrReplaceTempView(\"dboLHBooking\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolhroutes TMS Table\r\n",
							"dbolhroutes = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_routes.parquet', format='parquet')\r\n",
							"dbolhroutes.createOrReplaceTempView(\"dbolhroutes\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolhbookingspertrip TMS Table\r\n",
							"dbolhbookingspertrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_bookingspertrip.parquet', format='parquet')\r\n",
							"dbolhbookingspertrip.createOrReplaceTempView(\"dbolhbookingspertrip\")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/01_LH_STBooking"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stbooking.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stbooking.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the publicdriverpayitem TMS Table\r\n",
							"publicdriverpayitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpayitem.parquet', format='parquet')\r\n",
							"publicdriverpayitem.createOrReplaceTempView(\"publicdriverpayitem\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/02_LH_STDriverPayItem"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stdriverpayitem.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdriverpayitem.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the publicfinancedata TMS Table\r\n",
							"publicfinancedata = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfinancedata.parquet', format='parquet')\r\n",
							"publicfinancedata.createOrReplaceTempView(\"publicfinancedata\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/03_LH_STFinanceData"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stfinancedata.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfinancedata.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the publicInstruction TMS Table\r\n",
							"publicInstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinstruction.parquet', format='parquet')\r\n",
							"publicInstruction.createOrReplaceTempView(\"publicInstruction\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboLHInstruction LMS Table\r\n",
							"dboLHInstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_instruction.parquet', format='parquet')\r\n",
							"dboLHInstruction.createOrReplaceTempView(\"dboLHInstruction\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicLHInstruction LMS Table\r\n",
							"publicLHInstruction = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publiclhdelivery.parquet', format='parquet')\r\n",
							"publicLHInstruction.createOrReplaceTempView(\"publicLHInstruction\")\r\n",
							"\r\n",
							"#Create DataFrame for the stbooking TMSLMS combine Table\r\n",
							"stbooking = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Structured Data/OPS/stbooking.parquet', format='parquet')\r\n",
							"stbooking.createOrReplaceTempView(\"stbooking\")"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/04_LH_STInstruction"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stinstruction.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stinstruction.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the publicinvoice TMS Table\r\n",
							"publicinvoice = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinvoice.parquet', format='parquet')\r\n",
							"publicinvoice.createOrReplaceTempView(\"publicinvoice\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicinvoiceitem TMS Table\r\n",
							"publicinvoiceitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicinvoiceitem.parquet', format='parquet')\r\n",
							"publicinvoiceitem.createOrReplaceTempView(\"publicinvoiceitem\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/05_LH_STInvoice"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stinvoice.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stinvoice.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the publiccustomer TMS Table\r\n",
							"publiccustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiccustomer.parquet', format='parquet')\r\n",
							"publiccustomer.createOrReplaceTempView(\"publiccustomer\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicthirdparty TMS Table\r\n",
							"publicthirdparty = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicthirdparty.parquet', format='parquet')\r\n",
							"publicthirdparty.createOrReplaceTempView(\"publicthirdparty\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicroute TMS Table\r\n",
							"publicroute = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicroute.parquet', format='parquet')\r\n",
							"publicroute.createOrReplaceTempView(\"publicroute\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolh_routes TMS Table\r\n",
							"dbolh_routes = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_routes.parquet', format='parquet')\r\n",
							"dbolh_routes.createOrReplaceTempView(\"dbolh_routes\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicaddress TMS Table\r\n",
							"publicaddress = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicaddress.parquet', format='parquet')\r\n",
							"publicaddress.createOrReplaceTempView(\"publicaddress\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicfuelcard TMS Table\r\n",
							"publicfuelcard = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfuelcard.parquet', format='parquet')\r\n",
							"publicfuelcard.createOrReplaceTempView(\"publicfuelcard\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicfuelzone TMS Table\r\n",
							"publicfuelzone = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfuelzone.parquet', format='parquet')\r\n",
							"publicfuelzone.createOrReplaceTempView(\"publicfuelzone\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicfuelzonehistory TMS Table\r\n",
							"publicfuelzonehistory = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicfuelzonehistory.parquet', format='parquet')\r\n",
							"publicfuelzonehistory.createOrReplaceTempView(\"publicfuelzonehistory\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicratecomponent TMS Table\r\n",
							"publicratecomponent = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicratecomponent.parquet', format='parquet')\r\n",
							"publicratecomponent.createOrReplaceTempView(\"publicratecomponent\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicrateprofile TMS Table\r\n",
							"publicrateprofile = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicrateprofile.parquet', format='parquet')\r\n",
							"publicrateprofile.createOrReplaceTempView(\"publicrateprofile\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicselist TMS Table\r\n",
							"publicselist = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicselist.parquet', format='parquet')\r\n",
							"publicselist.createOrReplaceTempView(\"publicselist\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicselistitem TMS Table\r\n",
							"publicselistitem = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicselistitem.parquet', format='parquet')\r\n",
							"publicselistitem.createOrReplaceTempView(\"publicselistitem\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdriverpay TMS Table\r\n",
							"publicdriverpay = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publicdriverpay.parquet', format='parquet')\r\n",
							"publicdriverpay.createOrReplaceTempView(\"publicdriverpay\")\r\n",
							"\r\n",
							"#Create DataFrame for the ssttrackunion LMS Table\r\n",
							"ssttrackunion = spark.read.load('abfss://synapse@' + StorageAccountRead2 + '.dfs.core.windows.net/Semi Structured Data/OPS/ssttrackunion.parquet', format='parquet')\r\n",
							"ssttrackunion.createOrReplaceTempView(\"ssttrackunion\")\r\n",
							"\r\n",
							"#Create DataFrame for the dboloads LMS Table\r\n",
							"dboloads = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dboloads.parquet', format='parquet')\r\n",
							"dboloads.createOrReplaceTempView(\"dboloads\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdispatchactionlog LMS Table\r\n",
							"publicdispatchactionlog = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatchactionlog.parquet', format='parquet')\r\n",
							"publicdispatchactionlog.createOrReplaceTempView(\"publicdispatchactionlog\")\r\n",
							"\r\n",
							"#Create DataFrame for the publiclmsdata LMS Table\r\n",
							"publiclmsdata = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publiclmsdata.parquet', format='parquet')\r\n",
							"publiclmsdata.createOrReplaceTempView(\"publiclmsdata\")\r\n",
							"\r\n",
							"#create dataframe for the dbocustomer lms table\r\n",
							"dbocustomer = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbocustomer.parquet', format='parquet')\r\n",
							"dbocustomer.createOrReplaceTempView(\"dbocustomer\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/06_LH_STLinehaulDimensions"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"stlmstrackscantime.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmstrackscantime.parquet', mode = \"overwrite\")\r\n",
							"stdriverpay.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdriverpay.parquet', mode = \"overwrite\")\r\n",
							"stfuelcard.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfuelcard.parquet', mode = \"overwrite\")\r\n",
							"stfuelzone.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfuelzone.parquet', mode = \"overwrite\")\r\n",
							"stfuelzonehistory.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stfuelzonehistory.parquet', mode = \"overwrite\")\r\n",
							"stratecomponent.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stratecomponent.parquet', mode = \"overwrite\")\r\n",
							"strateprofile.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/strateprofile.parquet', mode = \"overwrite\")\r\n",
							"sttmslist.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/sttmslist.parquet', mode = \"overwrite\")\r\n",
							"stprimarycustomer.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stprimarycustomer.parquet', mode = \"overwrite\")\r\n",
							"stsecondarycustomer.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stsecondarycustomer.parquet', mode = \"overwrite\")\r\n",
							"stthirdparty.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stthirdparty.parquet', mode = \"overwrite\")\r\n",
							"stparentroute.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stparentroute.parquet', mode = \"overwrite\")\r\n",
							"stopsroute.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stopsroute.parquet', mode = \"overwrite\")\r\n",
							"stdispatchactionlog.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stdispatchactionlog.parquet', mode = \"overwrite\")\r\n",
							"stlmsparcelweights.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmsparcelweights.parquet', mode = \"overwrite\")\r\n",
							"stlmsbookingweights.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/stlmsbookingweights.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the publictrack TMS Table\r\n",
							"publictrack = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrack.parquet', format='parquet')\r\n",
							"publictrack.createOrReplaceTempView(\"publictrack\")"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/07_LH_STTMSTrack"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttmstrack.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/sttmstrack.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the publictrip TMS Table\r\n",
							"publictrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictrip.parquet', format='parquet')\r\n",
							"publictrip.createOrReplaceTempView(\"publictrip\")\r\n",
							"\r\n",
							"#Create DataFrame for the publicdispatch ORV Table\r\n",
							"publicdispatch = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/Onroute/publicdispatch.parquet', format='parquet')\r\n",
							"publicdispatch.createOrReplaceTempView(\"publicdispatch\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolhtrip LMS Table\r\n",
							"dbolhtrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_trip.parquet', format='parquet')\r\n",
							"dbolhtrip.createOrReplaceTempView(\"dbolhtrip\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolhtrackstatus LMS Table\r\n",
							"dbolhtrackstatus = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_trackstatus.parquet', format='parquet')\r\n",
							"dbolhtrackstatus.createOrReplaceTempView(\"dbolhtrackstatus\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolhbookingspertrip TMS Table\r\n",
							"dbolhbookingspertrip = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_bookingspertrip.parquet', format='parquet')\r\n",
							"dbolhbookingspertrip.createOrReplaceTempView(\"dbolhbookingspertrip\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolhbooking TMS Table\r\n",
							"dbolhbooking = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_booking.parquet', format='parquet')\r\n",
							"dbolhbooking.createOrReplaceTempView(\"dbolhbooking\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolhtrailersize TMS Table\r\n",
							"dbolhtrailersize = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_trailersize.parquet', format='parquet')\r\n",
							"dbolhtrailersize.createOrReplaceTempView(\"dbolhtrailersize\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbolh_3pl TMS Table\r\n",
							"dbolh_3pl = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbolh_3pl.parquet', format='parquet')\r\n",
							"dbolh_3pl.createOrReplaceTempView(\"dbolh_3pl\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehicle TMS Table\r\n",
							"dbovehicle = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbovehicle.parquet', format='parquet')\r\n",
							"dbovehicle.createOrReplaceTempView(\"dbovehicle\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbodriver TMS Table\r\n",
							"dbodriver = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/LMS/dbodriver.parquet', format='parquet')\r\n",
							"dbodriver.createOrReplaceTempView(\"dbodriver\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbovehiclebasic MD Table\r\n",
							"dbovehiclebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbovehiclebasic.parquet', format='parquet')\r\n",
							"dbovehiclebasic.createOrReplaceTempView(\"dbovehiclebasic\")\r\n",
							"\r\n",
							"#Create DataFrame for the dbopeoplebasic MD Table\r\n",
							"dbopeoplebasic = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/CLMasterData/dbopeoplebasic.parquet', format='parquet')\r\n",
							"dbopeoplebasic.createOrReplaceTempView(\"dbopeoplebasic\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/08_LH_STTrip"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttrip.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/sttrip.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Create DataFrame for the publictriptrackinghistory TMS Table\r\n",
							"publictriptrackinghistory = spark.read.load('abfss://synapse@' + StorageAccountRead + '.dfs.core.windows.net/Unstructured Data/TMS/publictriptrackinghistory.parquet', format='parquet')\r\n",
							"publictriptrackinghistory.createOrReplaceTempView(\"publictriptrackinghistory\")"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"%run TRANSFORM/02 STRUCTURED/Ops/Linehaul/09_LH_STTripTrackingHistory"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sttriptrackinghistory.write.parquet('abfss://synapse@' + StorageAccountWrite + '.dfs.core.windows.net/Structured Data/OPS/sttriptrackinghistory.parquet', mode = \"overwrite\")"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"SUCCESS\")"
						],
						"outputs": [],
						"execution_count": 30
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UnionSparkJob_DateLoad')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "486d2ffa-2a90-422b-b67e-be3c2efe736c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"cw_FolderName = \"\"\r\n",
							"cw_FileName = \"\"\r\n",
							"cw_IncFolderName = \"\"\r\n",
							"cw_IdField = \"\"\r\n",
							"ContainerName = \"\"\r\n",
							"DataLakeDF = \"\""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import broadcast"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"##Load the Left File\r\n",
							"path = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_FolderName + '/' + cw_FileName\r\n",
							"LeftFile = spark.read.load(path, format='parquet')"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"##Load the Right File\r\n",
							"path = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_IncFolderName + '/' + cw_FileName\r\n",
							"RightFile = spark.read.load(path, format='parquet')"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"JoinFields = cw_IdField.split()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"JoinFields"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df_with_rows_deleted = LeftFile.join(broadcast(RightFile), on = JoinFields, how = 'left_anti')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"unioned = df_with_rows_deleted.unionByName(RightFile, allowMissingColumns=True)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if unioned.count() < (0.75 * LeftFile.count()):\r\n",
							"    raise Exception (\"Error when Unioning table \" + cw_FileName + \" the Left side had \" + str(LeftFile.count()) + \" rows and the Unioned table has \" + str(unioned.count()))\r\n",
							"else: print(\"Union completed Succesfully\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"test = unioned.select(JoinFields)\r\n",
							"UnionDistinctCount = test.distinct().count()\r\n",
							"UnionCount = unioned.count()"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if UnionDistinctCount != UnionCount :\r\n",
							"        raise Exception (\"Duplicates when Unioning table \" + cw_FileName + \" the Unioned table has \" + str(UnionCount) + \" rows and the Distinct Unioned table has \" + str(UnionDistinctCount))\r\n",
							"else: print(\"Union completed Succesfully\")"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"unioned.write.parquet('abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_IncFolderName + '/T1/' + cw_FileName, mode='overwrite')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##Load the Final File\r\n",
							"path = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_IncFolderName + '/T1/' + cw_FileName\r\n",
							"FinalDF = spark.read.load(path, format='parquet')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Finalpath = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_FolderName + '/' + cw_FileName"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"FinalDF.write.parquet(Finalpath, mode='overwrite')"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UnionSparkJob_DateLoad_NoDupeCheck')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "75ca497f-d461-4fa2-8f90-dd00b56a2b93"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"cw_FolderName = \"\"\r\n",
							"cw_FileName = \"\"\r\n",
							"cw_IncFolderName = \"\"\r\n",
							"cw_IdField = \"\"\r\n",
							"ContainerName = \"\"\r\n",
							"DataLakeDF = \"\""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import broadcast"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"##Load the Left File\r\n",
							"path = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_FolderName + '/' + cw_FileName\r\n",
							"LeftFile = spark.read.load(path, format='parquet')"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"##Load the Right File\r\n",
							"path = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_IncFolderName + '/' + cw_FileName\r\n",
							"RightFile = spark.read.load(path, format='parquet')"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"JoinFields = cw_IdField.split()"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"JoinFields"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df_with_rows_deleted = LeftFile.join(broadcast(RightFile), on = JoinFields, how = 'left_anti')"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"unioned = df_with_rows_deleted.unionByName(RightFile, allowMissingColumns=True)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if unioned.count() < (0.75 * LeftFile.count()):\r\n",
							"    raise Exception (\"Error when Unioning table \" + cw_FileName + \" the Left side had \" + str(LeftFile.count()) + \" rows and the Unioned table has \" + str(unioned.count()))\r\n",
							"else: print(\"Union completed Succesfully\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#test = unioned.select(JoinFields)\r\n",
							"#UnionDistinctCount = test.distinct().count()\r\n",
							"#UnionCount = unioned.count()"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#if UnionDistinctCount != UnionCount :\r\n",
							"#        raise Exception (\"Duplicates when Unioning table \" + cw_FileName + \" the Unioned table has \" + str(UnionCount) + \" rows and the Distinct Unioned table has \" + str(UnionDistinctCount))\r\n",
							"#else: print(\"Union completed Succesfully\")"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"unioned.write.parquet('abfss://' + ContainerName + '@' + DataLakeDF + '/'  + cw_IncFolderName + '/T1/' + cw_FileName, mode='overwrite')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##Load the Final File\r\n",
							"path = 'abfss://' + ContainerName + '@' + DataLakeDF + '/'  + cw_IncFolderName + '/T1/' + cw_FileName\r\n",
							"FinalDF = spark.read.load(path, format='parquet')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Finalpath = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_FolderName + '/' + cw_FileName"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"FinalDF.write.parquet(Finalpath, mode='overwrite')"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/UnionSparkJob_IDLoad')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "TESTSparkPool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b60d1a5d-7651-4dc1-837b-a9dcc8849f79"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse_Prod/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace-prod/bigDataPools/TESTSparkPool",
						"name": "TESTSparkPool",
						"type": "Spark",
						"endpoint": "https://citylogistics-synapseanalytics-workspace-prod.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/TESTSparkPool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"cw_FolderName = \"\"\r\n",
							"cw_FileName = \"\"\r\n",
							"cw_IncFolderName = \"\"\r\n",
							"cw_IdField = \"\"\r\n",
							"ContainerName = \"\"\r\n",
							"DataLakeDF = \"\""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"##Load the Left File\r\n",
							"path = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_FolderName + '/' + cw_FileName\r\n",
							"LeftFile = spark.read.load(path, format='parquet')"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"##Load the Right File\r\n",
							"path = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_IncFolderName + '/' + cw_FileName\r\n",
							"RightFile = spark.read.load(path, format='parquet')"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"JoinFields = cw_IdField.split()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"JoinFields"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"unioned = LeftFile.unionByName(RightFile, allowMissingColumns=True)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if unioned.count() < (0.75 * LeftFile.count()):\r\n",
							"    raise Exception (\"Error when Unioning table \" + cw_FileName + \" the Left side had \" + str(LeftFile.count()) + \" rows and the Unioned table has \" + str(unioned.count()))\r\n",
							"else: print(\"Union completed Succesfully\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"test = unioned.select(JoinFields)\r\n",
							"UnionDistinctCount = test.distinct().count()\r\n",
							"UnionCount = unioned.count()"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"if UnionDistinctCount != UnionCount :\r\n",
							"        raise Exception (\"Duplicates when Unioning table \" + cw_FileName + \" the Unioned table has \" + str(UnionCount) + \" rows and the Distinct Unioned table has \" + str(UnionDistinctCount))\r\n",
							"else: print(\"Union completed Succesfully\")"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"unioned.write.parquet('abfss://' + ContainerName + '@' + DataLakeDF + cw_IncFolderName + '/T1/' + cw_FileName, mode='overwrite')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"##Load the Final File\r\n",
							"path = 'abfss://' + ContainerName + '@' + DataLakeDF + cw_IncFolderName + '/T1/' + cw_FileName\r\n",
							"FinalDF = spark.read.load(path, format='parquet')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Finalpath = 'abfss://' + ContainerName + '@' + DataLakeDF + '/' + cw_FolderName + '/' + cw_FileName"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"FinalDF.write.parquet(Finalpath, mode='overwrite')"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PRDSparkPool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southafricanorth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TESTSparkPool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southafricanorth"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TESTSparkPoolL')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Large",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southafricanorth"
		}
	]
}