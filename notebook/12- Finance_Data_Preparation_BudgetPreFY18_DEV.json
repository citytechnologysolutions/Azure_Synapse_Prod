{
	"name": "12- Finance_Data_Preparation_BudgetPreFY18_DEV",
	"properties": {
		"folder": {
			"name": "ARCHIVE/DEV/Archived/Transactions Notebooks DEV"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PRDSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d06a68ac-e1e1-4e44-8bba-ca89cf523f04"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/99b4fa8b-7705-4d41-a2fb-4f8f9ee006c7/resourceGroups/AZ_Resource_DataWarehouse/providers/Microsoft.Synapse/workspaces/citylogistics-synapseanalytics-workspace/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://citylogistics-synapseanalytics-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# The scource files are uncommented for the Productionized run (Remove the `#` when troubleshooting these scripts)\r\n",
					"\r\n",
					"#F_Budget = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/F_Budget.parquet', format='parquet')\r\n",
					"#F_Budget.createOrReplaceTempView(\"F_Budget\")\r\n",
					"\r\n",
					"#Dim_DATE = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Dimensions/DIM_DATES.parquet', format='parquet')\r\n",
					"#Dim_DATE.createOrReplaceTempView(\"Dim_DATE\")\r\n",
					"\r\n",
					"#F_TRANSACTIONS = spark.read.load('abfss://synapse@citylogisticsstorage.dfs.core.windows.net/DataLake/Structured/Facts/F_TRANSACTIONS.parquet', format='parquet')\r\n",
					"#F_TRANSACTIONS.createOrReplaceTempView(\"F_TRANSACTIONS\")"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"BUDGETTMP = spark.sql(\"\"\"\r\n",
					"SELECT AcctCode as `System_Account_Code`,\r\n",
					"\t   Company,\r\n",
					"       if(Name = 'Main Budget 2016', 'Main Budget 2017',Name) as `Budget_Name`, \r\n",
					"       sum(CredSTotal) as `Credit_Total`, \r\n",
					"       sum(DebSTotal) as `Debit_Total`, \r\n",
					"       Year(FinancYear) + 1 as `Fin_Year`, \r\n",
					"       sum(`Monthly_CredSTotal`)*-1 as `Monthly_Credit_Total`, \r\n",
					"       sum(`Monthly_DebSTotal`) as `Monthly_Debit_Total`, \r\n",
					"       FinMonth + 1 as `Fin_MonthNo`, \r\n",
					"       MonthPrcnt as `Month_Percent_Budget`\r\n",
					"FROM F_Budget\r\n",
					"Where Name IN('Main Budget 2016', 'Main Budget 2017')\r\n",
					"group by AcctCode,\r\n",
					"\t\t Company,\r\n",
					"\t\t Name,\r\n",
					"\t\t FinancYear,\r\n",
					"\t\t FinMonth,\r\n",
					"\t\t MonthPrcnt\r\n",
					"\"\"\")\r\n",
					"#BUDGETTMP.show()\r\n",
					"BUDGETTMP.createOrReplaceTempView(\"BUDGETTMP\")"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"BUDGETTMP = spark.sql(\"\"\"\r\n",
					"SELECT bgt.*,\r\n",
					"       sum(`Working_Day`) as `Working_Days_in_Month`\r\n",
					"FROM BUDGETTMP bgt\r\n",
					"LEFT JOIN Dim_DATE d \r\n",
					"       ON bgt.Fin_Year = d.Fin_Year\r\n",
					"      AND bgt.Fin_MonthNo = d.Fin_MonthNo\r\n",
					"GROUP BY bgt.System_Account_Code,\r\n",
					"         bgt.Company,\r\n",
					"         bgt.Budget_Name,\r\n",
					"         bgt.Credit_Total,\r\n",
					"         bgt.Debit_Total,\r\n",
					"         bgt.Fin_Year,\r\n",
					"         bgt.Monthly_Credit_Total,\r\n",
					"         bgt.Monthly_Debit_Total,\r\n",
					"         bgt.Fin_MonthNo,\r\n",
					"         bgt.Month_Percent_Budget,\r\n",
					"         Posting_Date\r\n",
					"\"\"\")\r\n",
					"#BUDGETTMP.show()\r\n",
					"BUDGETTMP.createOrReplaceTempView(\"BUDGETTMP\")"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"BUDGETTMP.columns"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Dim_DATE.columns"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT btmp.*,\r\n",
					"       Posting_Date,\r\n",
					"       Working_Day\r\n",
					"FROM BUDGETTMP btmp\r\n",
					"LEFT JOIN Dim_DATE d \r\n",
					"       ON btmp.Fin_Year = d.Fin_Year\r\n",
					"      AND btmp.Fin_MonthNo = d.Fin_MonthNo\r\n",
					"\r\n",
					"ORDER BY Posting_Date\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## NEED TO JOIN COMPLETED TRANSACTIONS IN HERE ON THE BUDGET"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"Scripts have successfully executed\")"
				],
				"execution_count": null
			}
		]
	}
}